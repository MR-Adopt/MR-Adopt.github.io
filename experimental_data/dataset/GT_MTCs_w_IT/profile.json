[
    {
        "poj_name": "sakaiproject__split__sakai",
        "test_file_path": "./data/ITrans/projects/sakaiproject__split__sakai/basiclti/tsugi-util/src/test/org/tsugi/util/Base64DoubleUrlEncodeSafeTest.java",
        "test_simple_name": "testEncodeAndDecode",
        "FQS_testMethos": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest.testEncodeAndDecode()",
        "assertionSTMT": "assertEquals(input, decoded)",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/sakaiproject__split__sakai/org.tsugi.util.Base64DoubleUrlEncodeSafeTest.testEncodeAndDecode__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "org.tsugi.util.Base64DoubleUrlEncodeSafe.encode(java.lang.String)",
            "org.tsugi.util.Base64DoubleUrlEncodeSafe.decode(java.lang.String)"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "String",
                "expression": "input",
                "statement": "String encoded = Base64DoubleUrlEncodeSafe.encode(input);",
                "invocation": "encoded = Base64DoubleUrlEncodeSafe.encode(input)"
            }
        ],
        "followUpInput": [
            {
                "type": "String",
                "expression": "encoded2",
                "statement": "String decoded = Base64DoubleUrlEncodeSafe.decode(encoded2);",
                "invocation": "decoded = Base64DoubleUrlEncodeSafe.decode(encoded2)"
            }
        ],
        "comments": "",
        "dependency": "org.tsugi.util.Base64DoubleUrlEncodeSafe.*"
    },
    {
        "poj_name": "sakaiproject__split__sakai",
        "test_file_path": "./data/ITrans/projects/sakaiproject__split__sakai/basiclti/tsugi-util/src/test/org/tsugi/util/Base64DoubleUrlEncodeSafeTest.java",
        "test_simple_name": "testAllNonSurrogateCodePoints",
        "FQS_testMethos": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest.testAllNonSurrogateCodePoints()",
        "assertionSTMT": "assertEquals(input, decoded)",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/sakaiproject__split__sakai/org.tsugi.util.Base64DoubleUrlEncodeSafeTest.testAllNonSurrogateCodePoints__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "org.tsugi.util.Base64DoubleUrlEncodeSafe.encode(java.lang.String)",
            "org.tsugi.util.Base64DoubleUrlEncodeSafe.decode(java.lang.String)"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "String",
                "expression": "input",
                "statement": "String encoded = Base64DoubleUrlEncodeSafe.encode(input);",
                "invocation": "encoded = Base64DoubleUrlEncodeSafe.encode(input)"
            }
        ],
        "followUpInput": [
            {
                "type": "String",
                "expression": "encoded2",
                "statement": "String decoded = Base64DoubleUrlEncodeSafe.decode(encoded2);",
                "invocation": "decoded = Base64DoubleUrlEncodeSafe.decode(encoded2)"
            }
        ],
        "comments": "",
        "dependency": "org.tsugi.util.Base64DoubleUrlEncodeSafe.*"
    },
    {
        "poj_name": "bootique__split__bootique",
        "test_file_path": "./data/ITrans/projects/bootique__split__bootique/bootique/src/test/java/io/bootique/di/TypeLiteralTest.java",
        "test_simple_name": "normalize",
        "FQS_testMethos": "io.bootique.di.TypeLiteralTest.normalize()",
        "assertionSTMT": "assertSame(type1, type3)",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/bootique__split__bootique/io.bootique.di.TypeLiteralTest.normalize__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "io.bootique.di.TypeLiteral.listOf(java.lang.Class<? extends T>)",
            "io.bootique.di.TypeLiteral.normalize(io.bootique.di.TypeLiteral<T>)"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "Class",
                "expression": "input",
                "statement": "TypeLiteral<List<Integer>> type1 = TypeLiteral.listOf(input);",
                "invocation": "type1 = TypeLiteral.listOf(input)"
            }
        ],
        "followUpInput": [
            {
                "type": "TypeLiteral<List<Integer>>",
                "expression": "input2",
                "statement": "TypeLiteral<List<Integer>> type3 = TypeLiteral.normalize(input2);",
                "invocation": "type3 = TypeLiteral.normalize(input2)"
            }
        ],
        "comments": "",
        "dependency": "io.bootique.di.TypeLiteral;io.bootique.di.TypeLiteral.*"
    },
    {
        "poj_name": "spotify-web-api-java__split__spotify-web-api-java",
        "test_file_path": "./data/ITrans/projects/spotify-web-api-java__split__spotify-web-api-java/src/test/java/se/michaelthelin/spotify/Base64Test.java",
        "test_simple_name": "testCustomBase64",
        "FQS_testMethos": "se.michaelthelin.spotify.Base64Test.testCustomBase64()",
        "assertionSTMT": "Assertions.assertArrayEquals(testDataBytes, decoded)",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/spotify-web-api-java__split__spotify-web-api-java/se.michaelthelin.spotify.Base64Test.testCustomBase64__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "se.michaelthelin.spotify.Base64.encode(byte[])",
            "se.michaelthelin.spotify.Base64.decode(java.lang.String)"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "byte[]",
                "expression": "testDataBytes",
                "statement": "String encoded = Base64.encode(testDataBytes);",
                "invocation": "encoded = Base64.encode(testDataBytes)"
            }
        ],
        "followUpInput": [
            {
                "type": "String",
                "expression": "input2",
                "statement": "byte[] decoded = Base64.decode(input2);",
                "invocation": "decoded = Base64.decode(input2)"
            }
        ],
        "comments": "",
        "dependency": "se.michaelthelin.spotify.Base64;se.michaelthelin.spotify.Base64.*"
    },
    {
        "poj_name": "opengoofy__split__hippo4j",
        "test_file_path": "./data/ITrans/projects/opengoofy__split__hippo4j/threadpool/core/src/test/java/cn/hippo4j/core/executor/plugin/manager/ThreadPoolPluginSupportTest.java",
        "test_simple_name": "testGetPlugin",
        "FQS_testMethos": "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest.testGetPlugin()",
        "assertionSTMT": "Assert.assertSame(plugin, support.getPlugin(plugin.getId()).orElse(null))",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/opengoofy__split__hippo4j/cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest.testGetPlugin__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupport.register(cn.hippo4j.core.executor.plugin.ThreadPoolPlugin)",
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupport.getPlugin(java.lang.String)"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "ThreadPoolPlugin",
                "expression": "plugin",
                "statement": "support.register(plugin);",
                "invocation": "support.register(plugin)"
            }
        ],
        "followUpInput": [
            {
                "type": "String",
                "expression": "pluginId",
                "statement": "Assert.assertSame(plugin, support.getPlugin(pluginId).orElse(null));",
                "invocation": "support.getPlugin(pluginId).orElse(null)"
            }
        ],
        "comments": "",
        "dependency": "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupport.*"
    },
    {
        "poj_name": "itext__split__itext7",
        "test_file_path": "./data/ITrans/projects/itext__split__itext7/commons/src/test/java/com/itextpdf/commons/datastructures/ConcurrentWeakMapTest.java",
        "test_simple_name": "entrySetTest",
        "FQS_testMethos": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest.entrySetTest()",
        "assertionSTMT": "Assert.assertEquals(anotherMap.entrySet(), map.entrySet())",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/itext__split__itext7/com.itextpdf.commons.datastructures.ConcurrentWeakMapTest.entrySetTest__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "com.itextpdf.commons.datastructures.ConcurrentWeakMap.putAll(java.util.Map<? extends K, ? extends V>)",
            "com.itextpdf.commons.datastructures.ConcurrentWeakMap.entrySet()"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "Map<Integer, Integer>",
                "expression": "anotherMap",
                "statement": "Assert.assertEquals(anotherMap.entrySet(), map.entrySet());",
                "invocation": "anotherMap.entrySet()"
            }
        ],
        "followUpInput": [
            {
                "type": "ConcurrentWeakMap<Integer, Integer>",
                "expression": "map",
                "statement": "Assert.assertEquals(anotherMap.entrySet(), map2.entrySet());",
                "invocation": "map2.entrySet()"
            }
        ],
        "comments": "",
        "dependency": "com.itextpdf.commons.datastructures.ConcurrentWeakMap;com.itextpdf.commons.datastructures.ConcurrentWeakMap.*"
    },
    {
        "poj_name": "itext__split__itext7",
        "test_file_path": "./data/ITrans/projects/itext__split__itext7/commons/src/test/java/com/itextpdf/commons/datastructures/ConcurrentWeakMapTest.java",
        "test_simple_name": "keySetTest",
        "FQS_testMethos": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest.keySetTest()",
        "assertionSTMT": "Assert.assertEquals(anotherMap.keySet(), map.keySet())",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/itext__split__itext7/com.itextpdf.commons.datastructures.ConcurrentWeakMapTest.keySetTest__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "com.itextpdf.commons.datastructures.ConcurrentWeakMap.putAll(java.util.Map<? extends K, ? extends V>)",
            "com.itextpdf.commons.datastructures.ConcurrentWeakMap.keySet()"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "Map<Integer, Integer>",
                "expression": "anotherMap",
                "statement": "Assert.assertEquals(anotherMap.keySet(), map.keySet());",
                "invocation": "anotherMap.keySet()"
            }
        ],
        "followUpInput": [
            {
                "type": "ConcurrentWeakMap<Integer, Integer>",
                "expression": "map",
                "statement": "Assert.assertEquals(anotherMap.keySet(), map2.keySet());",
                "invocation": "map2.keySet()"
            }
        ],
        "comments": "",
        "dependency": "com.itextpdf.commons.datastructures.ConcurrentWeakMap;com.itextpdf.commons.datastructures.ConcurrentWeakMap.*"
    },
    {
        "poj_name": "aws__split__event-ruler",
        "test_file_path": "./data/ITrans/projects/aws__split__event-ruler/src/test/software/amazon/event/ruler/SubRuleContextTest.java",
        "test_simple_name": "testGetters",
        "FQS_testMethos": "software.amazon.event.ruler.SubRuleContextTest.testGetters()",
        "assertionSTMT": "assertEquals(NAME, generator.getNameForGeneratedId(context.getId()))",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/aws__split__event-ruler/software.amazon.event.ruler.SubRuleContextTest.testGetters__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "software.amazon.event.ruler.SubRuleContext.Generator.generate(java.lang.Object)",
            "software.amazon.event.ruler.SubRuleContext.Generator.getNameForGeneratedId(java.lang.Double)"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "SubRuleContext.Generator",
                "expression": "generator",
                "statement": "SubRuleContext context = generator.generate(NAME);",
                "invocation": "generator.generate(NAME)"
            },
            {
                "type": "String",
                "expression": "NAME",
                "statement": "SubRuleContext context = generator.generate(NAME);",
                "invocation": "generator.generate(NAME)"
            }
        ],
        "followUpInput": [
            {
                "type": "SubRuleContext.Generator",
                "expression": "generator2",
                "statement": "assertEquals(NAME, generator2.getNameForGeneratedId(id));",
                "invocation": "generator2.getNameForGeneratedId(id)"
            },
            {
                "type": "Double",
                "expression": "id",
                "statement": "assertEquals(NAME, generator2.getNameForGeneratedId(id));",
                "invocation": "generator2.getNameForGeneratedId(id)"
            }
        ],
        "comments": "",
        "dependency": "software.amazon.event.ruler.SubRuleContext;software.amazon.event.ruler.SubRuleContext.*"
    },
    {
        "poj_name": "datageartech__split__datagear",
        "test_file_path": "./data/ITrans/projects/datageartech__split__datagear/datagear-util/src/test/java/org/datagear/util/version/VersionTest.java",
        "test_simple_name": "stringOfTest",
        "FQS_testMethos": "org.datagear.util.version.VersionTest.stringOfTest()",
        "assertionSTMT": "assertEquals(v, Version.stringOf(version))",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/datageartech__split__datagear/org.datagear.util.version.VersionTest.stringOfTest__split__1.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "org.datagear.util.version.Version.valueOf(java.lang.String)",
            "org.datagear.util.version.Version.stringOf(org.datagear.util.version.Version)"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 4,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "String",
                "expression": "v",
                "statement": "Version version = Version.valueOf(v);",
                "invocation": "version = Version.valueOf(v)"
            }
        ],
        "followUpInput": [
            {
                "type": "Version",
                "expression": "version1",
                "statement": "assertEquals(v, Version.stringOf(version1));",
                "invocation": "Version.stringOf(version1)"
            }
        ],
        "comments": "",
        "dependency": "org.datagear.util.version.Version;org.datagear.util.version.Version.*"
    },
    {
        "poj_name": "optimatika__split__ojAlgo",
        "test_file_path": "./data/ITrans/projects/optimatika__split__ojAlgo/src/test/java/org/ojalgo/data/transform/DiscreteFourierTransformTest.java",
        "test_simple_name": "testNonPowerOf2",
        "FQS_testMethos": "org.ojalgo.data.transform.DiscreteFourierTransformTest.testNonPowerOf2()",
        "assertionSTMT": "TestUtils.assertEquals(input, reverted, accuracy)",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/optimatika__split__ojAlgo/org.ojalgo.data.transform.DiscreteFourierTransformTest.testNonPowerOf2__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "org.ojalgo.data.transform.DiscreteFourierTransform.transform(org.ojalgo.structure.Access1D<?>)",
            "org.ojalgo.data.transform.DiscreteFourierTransform.inverse(org.ojalgo.structure.Access1D<org.ojalgo.scalar.ComplexNumber>)"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "DiscreteFourierTransform",
                "expression": "transformer",
                "statement": "MatrixStore<ComplexNumber> transformed = transformer.transform(input);",
                "invocation": "transformed = transformer.transform(input)"
            },
            {
                "type": "PhysicalStore<Double>",
                "expression": "input",
                "statement": "MatrixStore<ComplexNumber> transformed = transformer.transform(input);",
                "invocation": "transformed = transformer.transform(input)"
            }
        ],
        "followUpInput": [
            {
                "type": "MatrixStore<ComplexNumber>",
                "expression": "transformed2",
                "statement": "MatrixStore<Double> reverted = transformer.inverse(transformed2);",
                "invocation": "reverted = transformer.inverse(transformed2)"
            }
        ],
        "comments": "",
        "dependency": "org.ojalgo.data.transform.DiscreteFourierTransform;org.ojalgo.data.transform.DiscreteFourierTransform.*"
    },
    {
        "poj_name": "optimatika__split__ojAlgo",
        "test_file_path": "./data/ITrans/projects/optimatika__split__ojAlgo/src/test/java/org/ojalgo/data/transform/DiscreteFourierTransformTest.java",
        "test_simple_name": "testShiftAndRevertEven",
        "FQS_testMethos": "org.ojalgo.data.transform.DiscreteFourierTransformTest.testShiftAndRevertEven()",
        "assertionSTMT": "TestUtils.assertEquals(original, reverted)",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/optimatika__split__ojAlgo/org.ojalgo.data.transform.DiscreteFourierTransformTest.testShiftAndRevertEven__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "org.ojalgo.data.transform.DiscreteFourierTransform.shift(org.ojalgo.matrix.store.MatrixStore<N>)",
            "org.ojalgo.data.transform.DiscreteFourierTransform.shift(org.ojalgo.matrix.store.MatrixStore<N>)"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "Primitive64Store",
                "expression": "original",
                "statement": "MatrixStore<Double> shifted = DiscreteFourierTransform.shift(original);",
                "invocation": "shifted = DiscreteFourierTransform.shift(original)"
            }
        ],
        "followUpInput": [
            {
                "type": "MatrixStore<Double> shifted2",
                "expression": "shifted2",
                "statement": "MatrixStore<Double> reverted = DiscreteFourierTransform.shift(shifted2);",
                "invocation": "reverted = DiscreteFourierTransform.shift(shifted2)"
            }
        ],
        "comments": "",
        "dependency": "org.ojalgo.data.transform.DiscreteFourierTransform;org.ojalgo.data.transform.DiscreteFourierTransform.*"
    },
    {
        "poj_name": "opentripplanner__split__OpenTripPlanner",
        "test_file_path": "./data/ITrans/projects/opentripplanner__split__OpenTripPlanner/src/test/java/org/opentripplanner/framework/model/CostTest.java",
        "test_simple_name": "testHashCodeAndEquals",
        "FQS_testMethos": "org.opentripplanner.framework.model.CostTest.testHashCodeAndEquals()",
        "assertionSTMT": "assertNotEquals(subject.hashCode(), other.hashCode())",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/opentripplanner__split__OpenTripPlanner/org.opentripplanner.framework.model.CostTest.testHashCodeAndEquals__split__2.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "org.opentripplanner.framework.model.Cost.hashCode()",
            "org.opentripplanner.framework.model.Cost.hashCode()"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 3,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "Cost",
                "expression": "subject",
                "statement": "assertNotEquals(subject.hashCode(), other.hashCode());",
                "invocation": "subject.hashCode()"
            }
        ],
        "followUpInput": [
            {
                "type": "Cost",
                "expression": "other",
                "statement": "assertNotEquals(subject.hashCode(), other.hashCode());",
                "invocation": "other.hashCode()"
            }
        ],
        "comments": "",
        "dependency": "org.opentripplanner.framework.model.Cost;org.opentripplanner.framework.model.Cost.*"
    },
    {
        "poj_name": "opentripplanner__split__OpenTripPlanner",
        "test_file_path": "./data/ITrans/projects/opentripplanner__split__OpenTripPlanner/src/test/java/org/opentripplanner/framework/token/FieldDefinitionTest.java",
        "test_simple_name": "testEqualsAndHashCode",
        "FQS_testMethos": "org.opentripplanner.framework.token.FieldDefinitionTest.testEqualsAndHashCode()",
        "assertionSTMT": "assertNotEquals(other3.hashCode(), subject.hashCode())",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/opentripplanner__split__OpenTripPlanner/org.opentripplanner.framework.token.FieldDefinitionTest.testEqualsAndHashCode__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "org.opentripplanner.framework.token.FieldDefinition.hashCode()",
            "org.opentripplanner.framework.token.FieldDefinition.hashCode()"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "FieldDefinition",
                "expression": "subject",
                "statement": "assertNotEquals(other3.hashCode(), subject.hashCode());",
                "invocation": "subject.hashCode()"
            }
        ],
        "followUpInput": [
            {
                "type": "FieldDefinition",
                "expression": "other3",
                "statement": "assertNotEquals(other3.hashCode(), subject.hashCode());",
                "invocation": "other3.hashCode()"
            }
        ],
        "comments": "",
        "dependency": "org.opentripplanner.framework.token.FieldDefinition;org.opentripplanner.framework.token.FieldDefinition.*"
    },
    {
        "poj_name": "javadev__split__underscore-java",
        "test_file_path": "./data/ITrans/projects/javadev__split__underscore-java/src/test/java/com/github/underscore/XmlBuilderTest.java",
        "test_simple_name": "toXml",
        "FQS_testMethos": "com.github.underscore.XmlBuilderTest.toXml()",
        "assertionSTMT": "assertEquals(XML, xmlBuilder.toXml())",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/javadev__split__underscore-java/com.github.underscore.XmlBuilderTest.toXml__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "com.github.underscore.XmlBuilder.parse(java.lang.String)",
            "com.github.underscore.XmlBuilder.toXml()"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "String",
                "expression": "XML",
                "statement": "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                "invocation": "xmlBuilder = XmlBuilder.parse(XML)"
            }
        ],
        "followUpInput": [
            {
                "type": "XmlBuilder",
                "expression": "xmlBuilder2",
                "statement": "assertEquals(XML, xmlBuilder2.toXml());",
                "invocation": "xmlBuilder2.toXml()"
            }
        ],
        "comments": "",
        "dependency": "com.github.underscore.XmlBuilder;com.github.underscore.XmlBuilder.*"
    },
    {
        "poj_name": "javadev__split__underscore-java",
        "test_file_path": "./data/ITrans/projects/javadev__split__underscore-java/src/test/java/com/github/underscore/XmlBuilderTest.java",
        "test_simple_name": "parse",
        "FQS_testMethos": "com.github.underscore.XmlBuilderTest.parse()",
        "assertionSTMT": "assertEquals(XML, xmlBuilder.asString())",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/javadev__split__underscore-java/com.github.underscore.XmlBuilderTest.parse__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "com.github.underscore.XmlBuilder.parse(java.lang.String)",
            "com.github.underscore.XmlBuilder.asString()"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "String",
                "expression": "XML",
                "statement": "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                "invocation": "xmlBuilder = XmlBuilder.parse(XML)"
            }
        ],
        "followUpInput": [
            {
                "type": "XmlBuilder",
                "expression": "xmlBuilder2",
                "statement": "assertEquals(XML, xmlBuilder2.asString());",
                "invocation": "xmlBuilder2.asString()"
            }
        ],
        "comments": "",
        "dependency": "com.github.underscore.XmlBuilder;com.github.underscore.XmlBuilder.*"
    },
    {
        "poj_name": "javadev__split__underscore-java",
        "test_file_path": "./data/ITrans/projects/javadev__split__underscore-java/src/test/java/com/github/underscore/XmlBuilderTest.java",
        "test_simple_name": "toJson",
        "FQS_testMethos": "com.github.underscore.XmlBuilderTest.toJson()",
        "assertionSTMT": "assertEquals(U.xmlToJson(XML), xmlBuilder.toJson())",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/javadev__split__underscore-java/com.github.underscore.XmlBuilderTest.toJson__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "com.github.underscore.XmlBuilder.parse(java.lang.String)",
            "com.github.underscore.XmlBuilder.toJson()"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "String",
                "expression": "XML",
                "statement": "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                "invocation": "xmlBuilder = XmlBuilder.parse(XML)"
            }
        ],
        "followUpInput": [
            {
                "type": "XmlBuilder",
                "expression": "xmlBuilder2",
                "statement": "assertEquals(U.xmlToJson(XML), xmlBuilder2.toJson());",
                "invocation": "xmlBuilder2.toJson()"
            }
        ],
        "comments": "",
        "dependency": "com.github.underscore.XmlBuilder;com.github.underscore.XmlBuilder.*"
    },
    {
        "poj_name": "TheAlgorithms__split__Java",
        "test_file_path": "./data/ITrans/projects/TheAlgorithms__split__Java/src/test/java/com/thealgorithms/ciphers/PlayfairTest.java",
        "test_simple_name": "testEncryptionAndDecryption",
        "FQS_testMethos": "com.thealgorithms.ciphers.PlayfairTest.testEncryptionAndDecryption()",
        "assertionSTMT": "assertEquals(plaintext, decryptedText)",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/TheAlgorithms__split__Java/com.thealgorithms.ciphers.PlayfairTest.testEncryptionAndDecryption__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "com.thealgorithms.ciphers.PlayfairCipher.encrypt(java.lang.String)",
            "com.thealgorithms.ciphers.PlayfairCipher.decrypt(java.lang.String)"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "PlayfairCipher",
                "expression": "playfairCipher",
                "statement": "String encryptedText = playfairCipher.encrypt(plaintext);",
                "invocation": "encryptedText = playfairCipher.encrypt(plaintext)"
            },
            {
                "type": "String",
                "expression": "plaintext",
                "statement": "String encryptedText = playfairCipher.encrypt(plaintext);",
                "invocation": "encryptedText = playfairCipher.encrypt(plaintext)"
            }
        ],
        "followUpInput": [
            {
                "type": "String",
                "expression": "textTodecrypt",
                "statement": "String decryptedText = playfairCipher.decrypt(textTodecrypt);",
                "invocation": "decryptedText = playfairCipher.decrypt(textTodecrypt)"
            }
        ],
        "comments": "",
        "dependency": "com.thealgorithms.ciphers.PlayfairCipher;com.thealgorithms.ciphers.PlayfairCipher.*"
    },
    {
        "poj_name": "TheAlgorithms__split__Java",
        "test_file_path": "./data/ITrans/projects/TheAlgorithms__split__Java/src/test/java/com/thealgorithms/datastructures/crdt/LWWElementSetTest.java",
        "test_simple_name": "testRemove",
        "FQS_testMethos": "com.thealgorithms.datastructures.crdt.LWWElementSetTest.testRemove()",
        "assertionSTMT": "assertFalse(set.lookup(element))",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/TheAlgorithms__split__Java/com.thealgorithms.datastructures.crdt.LWWElementSetTest.testRemove__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "com.thealgorithms.datastructures.crdt.LWWElementSet.add(com.thealgorithms.datastructures.crdt.Element)",
            "com.thealgorithms.datastructures.crdt.LWWElementSet.remove(com.thealgorithms.datastructures.crdt.Element)"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "Element",
                "expression": "element",
                "statement": "set.add(element);",
                "invocation": "set.add(element)"
            }
        ],
        "followUpInput": [
            {
                "type": "Element",
                "expression": "element2",
                "statement": "set.remove(element2);",
                "invocation": "set.remove(element2)"
            }
        ],
        "comments": "",
        "dependency": "com.thealgorithms.datastructures.crdt.LWWElementSet;com.thealgorithms.datastructures.crdt.LWWElementSet.*"
    },
    {
        "poj_name": "eclipse-vertx__split__vert.x",
        "test_file_path": "./data/ITrans/projects/eclipse-vertx__split__vert.x/src/test/java/io/vertx/core/json/jackson/HybridJacksonPoolTest.java",
        "test_simple_name": "testVirtualThreadPoolWithSingleThread",
        "FQS_testMethos": "io.vertx.core.json.jackson.HybridJacksonPoolTest.testVirtualThreadPoolWithSingleThread()",
        "assertionSTMT": "assertSame(pooledResource, virtualPool.acquirePooled())",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/eclipse-vertx__split__vert.x/io.vertx.core.json.jackson.HybridJacksonPoolTest.testVirtualThreadPoolWithSingleThread__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "io.vertx.core.json.jackson.HybridJacksonPool.StripedLockFreePool.acquirePooled()",
            "io.vertx.core.json.jackson.HybridJacksonPool.StripedLockFreePool.acquirePooled()"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "HybridJacksonPool.StripedLockFreePool",
                "expression": "virtualPool",
                "statement": "PooledResource pooledResource = virtualPool.acquirePooled();",
                "invocation": "pooledResource = virtualPool.acquirePooled()"
            }
        ],
        "followUpInput": [
            {
                "type": "HybridJacksonPool.StripedLockFreePool",
                "expression": "virtualPool2",
                "statement": "assertSame(pooledResource, virtualPool2.acquirePooled());",
                "invocation": "virtualPool2.acquirePooled()"
            }
        ],
        "comments": "",
        "dependency": "io.vertx.core.json.jackson.HybridJacksonPool;io.vertx.core.json.jackson.HybridJacksonPool.*"
    },
    {
        "poj_name": "ThreeTen__split__threeten-extra",
        "test_file_path": "./data/ITrans/projects/ThreeTen__split__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
        "test_simple_name": "test_isLeapYear_int",
        "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_isLeapYear_int()",
        "assertionSTMT": "assertEquals(Year.isLeap(year), test2.isLeapYear())",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__split__threeten-extra/org.threeten.extra.TestYearHalf.test_isLeapYear_int__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)",
            "org.threeten.extra.YearHalf.isLeapYear()"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "int",
                "expression": "year",
                "statement": "YearHalf test = YearHalf.of(year, half);",
                "invocation": "test = YearHalf.of(year, half)"
            },
            {
                "type": "Half",
                "expression": "half",
                "statement": "YearHalf test = YearHalf.of(year, half);",
                "invocation": "test = YearHalf.of(year, half)"
            }
        ],
        "followUpInput": [
            {
                "type": "YearHalf",
                "expression": "test2",
                "statement": "assertEquals(Year.isLeap(year), test2.isLeapYear());",
                "invocation": "test2.isLeapYear()"
            }
        ],
        "comments": "",
        "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*"
    },
    {
        "poj_name": "ThreeTen__split__threeten-extra",
        "test_file_path": "./data/ITrans/projects/ThreeTen__split__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
        "test_simple_name": "test_of_int_int",
        "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_of_int_int()",
        "assertionSTMT": "assertEquals(half, test.getHalfValue())",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__split__threeten-extra/org.threeten.extra.TestYearHalf.test_of_int_int__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "org.threeten.extra.YearHalf.of(int, int)",
            "org.threeten.extra.YearHalf.getHalfValue()"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 3,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "int",
                "expression": "year",
                "statement": "YearHalf test = YearHalf.of(year, half);",
                "invocation": "test = YearHalf.of(year, half)"
            },
            {
                "type": "int",
                "expression": "half",
                "statement": "YearHalf test = YearHalf.of(year, half);",
                "invocation": "test = YearHalf.of(year, half)"
            }
        ],
        "followUpInput": [
            {
                "type": "YearHalf",
                "expression": "test2",
                "statement": "assertEquals(half, test2.getHalfValue());",
                "invocation": "test2.getHalfValue()"
            }
        ],
        "comments": "",
        "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*"
    },
    {
        "poj_name": "synthetichealth__split__synthea",
        "test_file_path": "./data/ITrans/projects/synthetichealth__split__synthea/src/test/java/org/mitre/synthea/engine/ExpressedSymptomTest.java",
        "test_simple_name": "testExpressedSymtpom",
        "FQS_testMethos": "org.mitre.synthea.engine.ExpressedSymptomTest.testExpressedSymtpom()",
        "assertionSTMT": "assertEquals(Long.valueOf(l), symptom2.getSymptomLastUpdatedTime(module2));",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/synthetichealth__split__synthea/org.mitre.synthea.engine.ExpressedSymptomTest.testExpressedSymtpom__split__3.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "org.mitre.synthea.engine.ExpressedSymptom.onSet(java.lang.String, java.lang.String, long, int, java.lang.Boolean)",
            "org.mitre.synthea.engine.ExpressedSymptom.getSymptomLastUpdatedTime(java.lang.String)"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 8,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "ExpressedSymptom",
                "expression": "symptom",
                "statement": "symptom.onSet(module, cause, l, (int) (100 * l), false);",
                "invocation": "symptom.onSet(module, cause, l, (int) (100 * l), false)"
            },
            {
                "type": "String",
                "expression": "module",
                "statement": "symptom.onSet(module, cause, l, (int) (100 * l), false);",
                "invocation": "symptom.onSet(module, cause, l, (int) (100 * l), false)"
            }
        ],
        "followUpInput": [
            {
                "type": "ExpressedSymptom",
                "expression": "symptom2",
                "statement": "assertEquals(Long.valueOf(l), symptom.getSymptomLastUpdatedTime(module2));",
                "invocation": "symptom.getSymptomLastUpdatedTime(module2)"
            },
            {
                "type": "String",
                "expression": "module2",
                "statement": "assertEquals(Long.valueOf(l), symptom2.getSymptomLastUpdatedTime(module2));",
                "invocation": "symptom2.getSymptomLastUpdatedTime(module2)"
            }
        ],
        "comments": "",
        "dependency": "org.mitre.synthea.engine.ExpressedSymptom;org.mitre.synthea.engine.ExpressedSymptom.*"
    },
    {
        "poj_name": "apache__split__systemds",
        "test_file_path": "./data/ITrans/projects/apache__split__systemds/src/test/java/org/apache/sysds/test/component/compress/util/ArrayListTest.java",
        "test_simple_name": "extract",
        "FQS_testMethos": "org.apache.sysds.test.component.compress.util.ArrayListTest.extract()",
        "assertionSTMT": "assertTrue(ex.length >= et.length)",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__split__systemds/org.apache.sysds.test.component.compress.util.ArrayListTest.extract__split__1.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "org.apache.sysds.runtime.compress.utils.IntArrayList.extractValues(boolean)",
            "org.apache.sysds.runtime.compress.utils.IntArrayList.extractValues(boolean)"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 2,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "IntArrayList",
                "expression": "a",
                "statement": "int[] ex = a.extractValues(trimFlag);",
                "invocation": "ex = a.extractValues(trimFlag)"
            },
            {
                "type": "boolean",
                "expression": "trimFlag",
                "statement": "int[] ex = a.extractValues(trimFlag);",
                "invocation": "ex = a.extractValues(trimFlag)"
            }
        ],
        "followUpInput": [
            {
                "type": "IntArrayList",
                "expression": "a2",
                "statement": "int[] ex2 = a2.extractValues(trimFlag2);",
                "invocation": "ex2 = a2.extractValues(trimFlag2)"
            },
            {
                "type": "boolean",
                "expression": "trimFlag2",
                "statement": "int[] ex2 = a2.extractValues(trimFlag2);",
                "invocation": "ex2 = a2.extractValues(trimFlag2)"
            }
        ],
        "comments": "",
        "dependency": "org.apache.sysds.runtime.compress.utils.IntArrayList;org.apache.sysds.runtime.compress.utils.IntArrayList.*"
    },
    {
        "poj_name": "rsksmart__split__rskj",
        "test_file_path": "./data/ITrans/projects/rsksmart__split__rskj/rskj-core/src/test/java/org/ethereum/rpc/FilterTest.java",
        "test_simple_name": "testGetNewEvents",
        "FQS_testMethos": "org.ethereum.rpc.FilterTest.testGetNewEvents()",
        "assertionSTMT": "assertArrayEquals(new Object[] { mockEvent.getJsonEventObject() }, events1)",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/rsksmart__split__rskj/org.ethereum.rpc.FilterTest.testGetNewEvents__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "org.ethereum.rpc.Filter.add(org.ethereum.rpc.Filter.FilterEvent)",
            "org.ethereum.rpc.Filter.getNewEvents()"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "Filter.FilterEvent",
                "expression": "mockEvent",
                "statement": "filter.add(mockEvent);",
                "invocation": "filter.add(mockEvent)"
            },
            {
                "type": "Filter",
                "expression": "filter",
                "statement": "filter.add(mockEvent);",
                "invocation": "filter.add(mockEvent)"
            }
        ],
        "followUpInput": [
            {
                "type": "Filter.FilterEvent",
                "expression": "mockEvent2",
                "statement": "filter2.add(mockEvent2);",
                "invocation": "filter2.add(mockEvent2)"
            },
            {
                "type": "Filter",
                "expression": "filter2",
                "statement": "filter2.add(mockEvent2);",
                "invocation": "filter2.add(mockEvent2)"
            }
        ],
        "comments": "",
        "dependency": "org.ethereum.rpc.Filter;org.ethereum.rpc.Filter.*;org.ethereum.rpc.FilterTest;org.ethereum.rpc.FilterTest.*"
    },
    {
        "poj_name": "rsksmart__split__rskj",
        "test_file_path": "./data/ITrans/projects/rsksmart__split__rskj/rskj-core/src/test/java/org/ethereum/rpc/FilterTest.java",
        "test_simple_name": "testGetEventsInternal",
        "FQS_testMethos": "org.ethereum.rpc.FilterTest.testGetEventsInternal()",
        "assertionSTMT": "assertNotSame(events, filter2.getEventsInternal())",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/rsksmart__split__rskj/org.ethereum.rpc.FilterTest.testGetEventsInternal__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "org.ethereum.rpc.Filter.getEventsInternal()",
            "org.ethereum.rpc.Filter.getEventsInternal()"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 2,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "Filter",
                "expression": "filter",
                "statement": "Object[] events = filter.getEventsInternal();",
                "invocation": "events = filter.getEventsInternal()"
            }
        ],
        "followUpInput": [
            {
                "type": "Filter",
                "expression": "filter2",
                "statement": "assertNotSame(events, filter2.getEventsInternal());",
                "invocation": "filter2.getEventsInternal()"
            }
        ],
        "comments": "",
        "dependency": "org.ethereum.rpc.Filter;org.ethereum.rpc.Filter.*"
    },
    {
        "poj_name": "MyRobotLab__split__myrobotlab",
        "test_file_path": "./data/ITrans/projects/MyRobotLab__split__myrobotlab/src/test/java/org/myrobotlab/service/I2cMuxTest.java",
        "test_simple_name": "testSetDeviceBus",
        "FQS_testMethos": "org.myrobotlab.service.I2cMuxTest.testSetDeviceBus()",
        "assertionSTMT": "assertEquals(deviceBus, i2cMux.getDeviceBus())",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/MyRobotLab__split__myrobotlab/org.myrobotlab.service.I2cMuxTest.testSetDeviceBus__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "org.myrobotlab.service.I2cMux.setDeviceBus(java.lang.String)",
            "org.myrobotlab.service.I2cMux.getDeviceBus()"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "I2cMux",
                "expression": "i2cMux",
                "statement": "i2cMux.setDeviceBus(deviceBus);",
                "invocation": "i2cMux.setDeviceBus(deviceBus)"
            },
            {
                "type": "String",
                "expression": "deviceBus",
                "statement": "i2cMux.setDeviceBus(deviceBus);",
                "invocation": "i2cMux.setDeviceBus(deviceBus)"
            }
        ],
        "followUpInput": [
            {
                "type": "I2cMux",
                "expression": "i2cMux2",
                "statement": "assertEquals(deviceBus, i2cMux2.getDeviceBus());",
                "invocation": "i2cMux2.getDeviceBus()"
            }
        ],
        "comments": "",
        "dependency": "org.myrobotlab.service.I2cMux;org.myrobotlab.service.I2cMux.*"
    },
    {
        "poj_name": "MyRobotLab__split__myrobotlab",
        "test_file_path": "./data/ITrans/projects/MyRobotLab__split__myrobotlab/src/test/java/org/myrobotlab/service/I2cMuxTest.java",
        "test_simple_name": "testSetDeviceAddress",
        "FQS_testMethos": "org.myrobotlab.service.I2cMuxTest.testSetDeviceAddress()",
        "assertionSTMT": "assertEquals(deviceAddress, i2cMux.getDeviceAddress())",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/MyRobotLab__split__myrobotlab/org.myrobotlab.service.I2cMuxTest.testSetDeviceAddress__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "org.myrobotlab.service.I2cMux.setDeviceAddress(java.lang.String)",
            "org.myrobotlab.service.I2cMux.getDeviceAddress()"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "I2cMux",
                "expression": "i2cMux",
                "statement": "i2cMux.setDeviceAddress(deviceAddress);",
                "invocation": "i2cMux.setDeviceAddress(deviceAddress)"
            },
            {
                "type": "String",
                "expression": "deviceAddress",
                "statement": "i2cMux.setDeviceAddress(deviceAddress);",
                "invocation": "i2cMux.setDeviceAddress(deviceAddress)"
            }
        ],
        "followUpInput": [
            {
                "type": "I2cMux",
                "expression": "i2cMux2",
                "statement": "assertEquals(deviceAddress, i2cMux2.getDeviceAddress());",
                "invocation": "i2cMux2.getDeviceAddress()"
            }
        ],
        "comments": "",
        "dependency": "org.myrobotlab.service.I2cMux;org.myrobotlab.service.I2cMux.*"
    },
    {
        "poj_name": "arextest__split__arex-agent-java",
        "test_file_path": "./data/ITrans/projects/arextest__split__arex-agent-java/arex-instrumentation-api/src/test/java/io/arex/inst/runtime/serializer/SerializerTest.java",
        "test_simple_name": "testNestedList",
        "FQS_testMethos": "io.arex.inst.runtime.serializer.SerializerTest.testNestedList()",
        "assertionSTMT": "assertEquals(list, actualResult)",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/arextest__split__arex-agent-java/io.arex.inst.runtime.serializer.SerializerTest.testNestedList__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "io.arex.inst.runtime.serializer.Serializer.serialize(java.lang.Object, java.lang.String)",
            "io.arex.inst.runtime.serializer.Serializer.deserialize(java.lang.String, java.lang.String)"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "List<List<Object>>",
                "expression": "list",
                "statement": "String json = Serializer.serialize(list, serializer);",
                "invocation": "json = Serializer.serialize(list, serializer)"
            },
            {
                "type": "String",
                "expression": "serializer",
                "statement": "String json = Serializer.serialize(list, serializer);",
                "invocation": "json = Serializer.serialize(list, serializer)"
            }
        ],
        "followUpInput": [
            {
                "type": "String",
                "expression": "json2",
                "statement": "List<List<Object>> actualResult = Serializer.deserialize(json2, typeName2);",
                "invocation": "actualResult = Serializer.deserialize(json2, typeName2)"
            },
            {
                "type": "String",
                "expression": "typeName2",
                "statement": "List<List<Object>> actualResult = Serializer.deserialize(json2, typeName2);",
                "invocation": "actualResult = Serializer.deserialize(json2, typeName2)"
            }
        ],
        "comments": "",
        "dependency": "io.arex.inst.runtime.serializer.Serializer;io.arex.inst.runtime.serializer.Serializer.*"
    },
    {
        "poj_name": "arextest__split__arex-agent-java",
        "test_file_path": "./data/ITrans/projects/arextest__split__arex-agent-java/arex-instrumentation-api/src/test/java/io/arex/inst/runtime/serializer/SerializerTest.java",
        "test_simple_name": "testNestedSet",
        "FQS_testMethos": "io.arex.inst.runtime.serializer.SerializerTest.testNestedSet()",
        "assertionSTMT": "assertEquals(set, actualResult)",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/arextest__split__arex-agent-java/io.arex.inst.runtime.serializer.SerializerTest.testNestedSet__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "io.arex.inst.runtime.serializer.Serializer.serialize(java.lang.Object, java.lang.String)",
            "io.arex.inst.runtime.serializer.Serializer.deserialize(java.lang.String, java.lang.String)"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "Set<Set<Object>>",
                "expression": "set",
                "statement": "String json = Serializer.serialize(set, serializer);",
                "invocation": "json = Serializer.serialize(set, serializer)"
            },
            {
                "type": "String",
                "expression": "serializer",
                "statement": "String json = Serializer.serialize(set, serializer);",
                "invocation": "json = Serializer.serialize(set, serializer)"
            }
        ],
        "followUpInput": [
            {
                "type": "String",
                "expression": "json2",
                "statement": "Set<Set<Object>> actualResult = Serializer.deserialize(json2, typeName2);",
                "invocation": "actualResult = Serializer.deserialize(json2, typeName2)"
            },
            {
                "type": "String",
                "expression": "typeName2",
                "statement": "Set<Set<Object>> actualResult = Serializer.deserialize(json2, typeName2);",
                "invocation": "actualResult = Serializer.deserialize(json2, typeName2)"
            }
        ],
        "comments": "",
        "dependency": "io.arex.inst.runtime.serializer.Serializer;io.arex.inst.runtime.serializer.Serializer.*"
    },
    {
        "poj_name": "cucumber__split__cucumber-jvm",
        "test_file_path": "./data/ITrans/projects/cucumber__split__cucumber-jvm/cucumber-core/src/test/java/io/cucumber/core/eventbus/RandomUuidGeneratorTest.java",
        "test_simple_name": "generates_different_non_null_uuids",
        "FQS_testMethos": "io.cucumber.core.eventbus.RandomUuidGeneratorTest.generates_different_non_null_uuids()",
        "assertionSTMT": "assertNotEquals(uuid1, uuid2)",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/cucumber__split__cucumber-jvm/io.cucumber.core.eventbus.RandomUuidGeneratorTest.generates_different_non_null_uuids__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "io.cucumber.core.eventbus.UuidGenerator.generateId()",
            "io.cucumber.core.eventbus.UuidGenerator.generateId()"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "UuidGenerator",
                "expression": "generator",
                "statement": "String uuid1 = generator.generateId();",
                "invocation": "uuid1 = generator.generateId()"
            }
        ],
        "followUpInput": [
            {
                "type": "UuidGenerator",
                "expression": "generator2",
                "statement": "String uuid2 = generator2.generateId();",
                "invocation": "uuid2 = generator2.generateId()"
            }
        ],
        "comments": "",
        "dependency": "io.cucumber.core.eventbus.UuidGenerator;io.cucumber.core.eventbus.UuidGenerator.*"
    },
    {
        "poj_name": "apache__split__druid",
        "test_file_path": "./data/ITrans/projects/apache__split__druid/processing/src/test/java/org/apache/druid/collections/CloseableResourceHolderTest.java",
        "test_simple_name": "testCloseableResourceHolder",
        "FQS_testMethos": "org.apache.druid.collections.CloseableResourceHolderTest.testCloseableResourceHolder()",
        "assertionSTMT": "Assert.assertSame(closeable, holder.get())",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__split__druid/org.apache.druid.collections.CloseableResourceHolderTest.testCloseableResourceHolder__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "org.apache.druid.collections.ResourceHolder.fromCloseable(T)",
            "org.apache.druid.collections.ResourceHolder.get()"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "Closeable",
                "expression": "closeable",
                "statement": "ResourceHolder<Closeable> holder = ResourceHolder.fromCloseable(closeable);",
                "invocation": "holder = ResourceHolder.fromCloseable(closeable)"
            }
        ],
        "followUpInput": [
            {
                "type": "ResourceHolder<Closeable>",
                "expression": "holder2",
                "statement": "Assert.assertSame(closeable, holder2.get());",
                "invocation": "holder2.get()"
            }
        ],
        "comments": "",
        "dependency": "org.apache.druid.collections.ResourceHolder;org.apache.druid.collections.ResourceHolder.*"
    },
    {
        "poj_name": "ThreeTen__split__threeten-extra",
        "test_file_path": "./data/ITrans/projects/ThreeTen__split__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
        "test_simple_name": "test_lengthOfYear",
        "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_lengthOfYear()",
        "assertionSTMT": "assertEquals(Year.isLeap(year) ? 366 : 365, test2.lengthOfYear())",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__split__threeten-extra/org.threeten.extra.TestYearHalf.test_lengthOfYear__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)",
            "org.threeten.extra.YearHalf.lengthOfYear()"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "int",
                "expression": "year",
                "statement": "YearHalf test = YearHalf.of(year, half);",
                "invocation": "test = YearHalf.of(year, half)"
            },
            {
                "type": "Half",
                "expression": "half",
                "statement": "YearHalf test = YearHalf.of(year, half);",
                "invocation": "test = YearHalf.of(year, half)"
            }
        ],
        "followUpInput": [
            {
                "type": "YearHalf",
                "expression": "test2",
                "statement": "assertEquals(Year.isLeap(year) ? 366 : 365, test2.lengthOfYear());",
                "invocation": "test2.lengthOfYear()"
            }
        ],
        "comments": "",
        "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*"
    },
    {
        "poj_name": "zfoo-project__split__zfoo",
        "test_file_path": "./data/ITrans/projects/zfoo-project__split__zfoo/net/src/test/java/com/zfoo/net/util/NetUtilsTest.java",
        "test_simple_name": "ipv4Test",
        "FQS_testMethos": "com.zfoo.net.util.NetUtilsTest.ipv4Test()",
        "assertionSTMT": "Assert.assertEquals(ipStr2, ipStr1)",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/zfoo-project__split__zfoo/com.zfoo.net.util.NetUtilsTest.localhostTest__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "com.zfoo.net.util.NetUtils.ipv4ToLong()",
            "com.zfoo.net.util.NetUtils.longToIpv4()"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "String",
                "expression": "ipStr1",
                "statement": "long ipLong = NetUtils.ipv4ToLong(ipStr1);",
                "invocation": "ipLong = NetUtils.ipv4ToLong(ipStr1)"
            }
        ],
        "followUpInput": [
            {
                "type": "long",
                "expression": "ipLong2",
                "statement": "String ipStr2 = NetUtils.longToIpv4(ipLong2);",
                "invocation": "ipStr2 = NetUtils.longToIpv4(ipLong2)"
            }
        ],
        "comments": "manully light craft case",
        "dependency": "com.zfoo.net.util.NetUtils;com.zfoo.net.util.NetUtils.*"
    },
    {
        "poj_name": "alibaba__split__druid",
        "test_file_path": "./data/ITrans/projects/alibaba__split__druid/core/src/test/java/com/alibaba/druid/bvt/sql/hive/issues/Issue5430.java",
        "test_simple_name": "test_createTable",
        "FQS_testMethos": "com.alibaba.druid.bvt.sql.hive.issues.Issue5430.test_createTable()",
        "assertionSTMT": "assertEquals(normalizeSql.toLowerCase(), normalizeNewSql.toLowerCase())",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__druid/com.alibaba.druid.bvt.sql.hive.issues.Issue5430.test_createTable__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430.normalizeSql(java.lang.String)",
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430.normalizeSql(java.lang.String)"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "String",
                "expression": "sql",
                "statement": "String normalizeSql = normalizeSql(sql1);",
                "invocation": "normalizeSql = normalizeSql(sql1)"
            }
        ],
        "followUpInput": [
            {
                "type": "String",
                "expression": "newSql",
                "statement": "String normalizeNewSql = normalizeSql(newSql1);",
                "invocation": "normalizeNewSql = normalizeSql(newSql1)"
            }
        ],
        "comments": "",
        "dependency": "com.alibaba.druid.bvt.sql.hive.issues.Issue5430;com.alibaba.druid.bvt.sql.hive.issues.Issue5430.*"
    },
    {
        "poj_name": "alibaba__split__druid",
        "test_file_path": "./data/ITrans/projects/alibaba__split__druid/core/src/test/java/com/alibaba/druid/bvt/sql/mysql/issues/Issue5686.java",
        "test_simple_name": "test_column_comment",
        "FQS_testMethos": "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686.test_column_comment()",
        "assertionSTMT": "assertEquals(newSql, newSql2)",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__druid/com.alibaba.druid.bvt.sql.mysql.issues.Issue5686.test_column_comment__split__0.json",
        "withInputTransformation": false,
        "invoked_methods_FQS": [
            "com.alibaba.druid.sql.ast.statement.SQLInsertStatement.toString()",
            "com.alibaba.druid.sql.ast.statement.SQLInsertStatement.toString()"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "MySqlInsertStatement",
                "expression": "sqlStatement",
                "statement": "String newSql = sqlStatement.toString();",
                "invocation": "newSql = sqlStatement.toString()"
            }
        ],
        "followUpInput": [
            {
                "type": "MySqlInsertStatement",
                "expression": "sqlStatement2",
                "statement": "String newSql2 = sqlStatement2.toString();",
                "invocation": "newSql2 = sqlStatement2.toString()"
            }
        ],
        "comments": "",
        "dependency": "com.alibaba.druid.sql.ast.statement.SQLInsertStatement;com.alibaba.druid.sql.ast.statement.SQLInsertStatement.*"
    },
    {
        "poj_name": "alibaba__split__druid",
        "test_file_path": "./data/ITrans/projects/alibaba__split__druid/core/src/test/java/com/alibaba/druid/bvt/sql/postgresql/issues/Issue5366.java",
        "test_simple_name": "test_create_table",
        "FQS_testMethos": "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366.test_create_table()",
        "assertionSTMT": "assertEquals(normalizeSql.toLowerCase(), normalizeNewSql.toLowerCase())",
        "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__druid/com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366.test_create_table__split__0.json",
        "withInputTransformation": true,
        "invoked_methods_FQS": [
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366.normalizeSql(java.lang.String)",
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366.normalizeSql(java.lang.String)"
        ],
        "MI": 2,
        "num_MR_instance_in_this_MTC": 1,
        "compiled": true,
        "executable": true,
        "sourceInput": [
            {
                "type": "String",
                "expression": "sql",
                "statement": "String normalizeSql = normalizeSql(sql1);",
                "invocation": "normalizeSql = normalizeSql(sql1)"
            }
        ],
        "followUpInput": [
            {
                "type": "String",
                "expression": "newSql",
                "statement": "String normalizeNewSql = normalizeSql(newSql1);",
                "invocation": "normalizeNewSql = normalizeSql(newSql1)"
            }
        ],
        "comments": "",
        "dependency": "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366;com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366.*"
    }

]