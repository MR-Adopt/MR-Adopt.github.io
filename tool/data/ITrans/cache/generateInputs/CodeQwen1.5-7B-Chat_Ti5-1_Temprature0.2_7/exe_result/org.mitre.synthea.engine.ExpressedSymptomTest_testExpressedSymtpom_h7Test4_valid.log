JUnit version 4.13.2
.E
Time: 0.014
There was 1 failure:
1) testExpressedSymtpom_h7Test4(org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h7Test4_valid)
java.lang.AssertionError: expected:<0> but was:<null>
	at org.junit.Assert.fail(Assert.java:89)
	at org.junit.Assert.failNotEquals(Assert.java:835)
	at org.junit.Assert.assertEquals(Assert.java:120)
	at org.junit.Assert.assertEquals(Assert.java:146)
	at org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h7Test4_valid.testExpressedSymtpom_h7Test4(ExpressedSymptomTest_testExpressedSymtpom_h7Test4_valid.java:32)

FAILURES!!!
Tests run: 1,  Failures: 1

CMD: cd /ssddata1/cxubl/data/ITrans/projects/synthetichealth__castle__synthea/ ; /ssddata1/cxubl/software/zulu_jdks/zulu11.62.17-ca-jdk11.0.18-linux_x64/bin/java -XX:ActiveProcessorCount=10 -classpath ./:./build/classes/java/main/:./build/classes/java/test/:/ssddata1/cxubl/software/junit/junit-4.13.2.jar:/ssddata1/cxubl/software/junit/junit-jupiter-api-5.8.2.jar:/ssddata1/cxubl/software/junit/hamcrest-core-1.3.jar:/ssddata1/cxubl/.m2/repository/org/slf4j/slf4j-api/2.0.0/slf4j-api-2.0.0.jar:/ssddata1/cxubl/.m2/repository/org/apache/logging/log4j/log4j-api/2.1/log4j-api-2.1.jar:/ssddata1/cxubl/.m2/repository/com/google/guava/guava/33.0.0-jre/guava-33.0.0-jre.jar:/ssddata1/cxubl/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.4.0/jackson-databind-2.4.0.jar:/ssddata1/cxubl/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.12.1/jackson-core-2.12.1.jar:/ssddata1/cxubl/.m2/repository/org/springframework/spring-test/5.3.26/spring-test-5.3.26.jar:/ssddata1/cxubl/data/ITrans/projects/thingsboard__castle__thingsboard/dao/target/dependency/commons-logging-1.2.jar:/ssddata1/cxubl/.m2/repository/org/springframework/spring-core/5.3.2/spring-core-5.3.26.jar:arex-instrumentation-api/target/dependency/jackson-annotations-2.13.1.jar:arex-instrumentation-api/target/dependency/gson-2.10.1.jar:misc/extra/target/dependency/vecmath-1.5.2.jar:/ssddata1/cxubl/data/ITrans/projects/synthetichealth__castle__synthea/ITrans/processed_GT_only/:/ssddata1/cxubl/data/ITrans/projects/synthetichealth__castle__synthea/ITrans/processed_MTCITrans_only/:/ssddata1/cxubl/data/ITrans/projects/synthetichealth__castle__synthea/ITrans/generated_ITrans/:/ssddata1/cxubl/data/ITrans/projects/synthetichealth__castle__synthea/ITrans/generated_inputs/:/ssddata1/cxubl/data/ITrans/projects/synthetichealth__castle__synthea/ITrans/generated_inputs/qw:/ssddata1/cxubl/data/ITrans/projects/synthetichealth__castle__synthea/ITrans/generated_inputs/qw4ITrans org.junit.runner.JUnitCore org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h7Test4_valid > /ssddata1/cxubl/data/ITrans/projects/synthetichealth__castle__synthea/AutoMR/test_exe/org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h7Test4_valid.log 2>&1
file path: 
/ssddata1/cxubl/data/ITrans/cache/generateInputs/CodeQwen1.5-7B-Chat_Ti5-1_Temprature0.2_7/generated_valid_inputs_testing_Trans/ExpressedSymptomTest_testExpressedSymtpom_h7Test4_valid.java
file content: 
package org.mitre.synthea.engine;

import org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom;

import org.mitre.synthea.engine.ExpressedSymptom;
import org.mitre.synthea.engine.ExpressedSymptom.*;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;
import java.util.Arrays;
import java.util.List;
import org.junit.Test;
import org.mitre.synthea.engine.ExpressedSymptom.SymptomInfo;
import org.mitre.synthea.engine.ExpressedSymptom.SymptomSource;

public class ExpressedSymptomTest_testExpressedSymtpom_h7Test4_valid {

    @Test
    public void testExpressedSymtpom_h7Test4() {
    String name = headache;
    ExpressedSymptom symptom = new ExpressedSymptom(name);
    String module = physiotherapyModule;
    symptom.addressSource(module);
		List<Object> transformed_inputs = ExpressedSymptomTest_testExpressedSymtpom.inputTransformation_testExpressedSymtpom(symptom, module);
    ExpressedSymptom symptom2  = (ExpressedSymptom) transformed_inputs.get(0);
    String module2  = (String) transformed_inputs.get(1);
    symptom2.addressSource(module2);
        String cause = testCause;
        for (long l = 0L; l < 3L; l++) {
            symptom.onSet(module, cause, l, (int) (100 * l), false);
            assertEquals(Long.valueOf(l), symptom2.getSymptomLastUpdatedTime(module2));
        }
    }
}


