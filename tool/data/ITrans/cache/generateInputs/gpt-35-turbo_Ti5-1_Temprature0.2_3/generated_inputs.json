{
    "com.dslplatform.json.DateTest.zonedDateTimeBoundary()": {
        "generated_inputs_class": [
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h3Test0"
        ],
        "generated_all_blocks": [
            [
                "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");",
                "JsonWriter jw = dslJson.newWriter(34);",
                "ZonedDateTime[] lts = new ZonedDateTime[3];",
                "Arrays.fill(lts, now);",
                "Class<ZonedDateTime[]> manifest = ZonedDateTime[].class;",
                "byte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };",
                "int size = 115;"
            ]
        ],
        "selected": {
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h3Test0": [
                "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");",
                "JsonWriter jw = dslJson.newWriter(34);",
                "ZonedDateTime[] lts = new ZonedDateTime[3];",
                "Arrays.fill(lts, now);",
                "Class<ZonedDateTime[]> manifest = ZonedDateTime[].class;",
                "byte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };",
                "int size = 115;"
            ]
        },
        "processed_generated": {
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h3Test0": [
                "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");",
                "JsonWriter jw = dslJson.newWriter(34);",
                "ZonedDateTime[] lts = new ZonedDateTime[3];",
                "Arrays.fill(lts, now);",
                "Class<ZonedDateTime[]> manifest = ZonedDateTime[].class;",
                "byte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };",
                "int size = 115;"
            ]
        },
        "original_h": [
            "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");",
            "JsonWriter jw = dslJson.newWriter(34);",
            "ZonedDateTime[] lts = new ZonedDateTime[3];",
            "Arrays.fill(lts, now);",
            "Class<ZonedDateTime[]> manifest = ZonedDateTime[].class;",
            "byte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };",
            "int size = 115;"
        ]
    },
    "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest.testInFlightRequestKey()": {
        "generated_inputs_class": [
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test0",
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test1",
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test2",
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test3",
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 1, 0);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 1, 1);"
            ],
            [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 1);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 1, 1);"
            ],
            [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group1\", 0, 0);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group1\", 1, 1);"
            ],
            [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group2\", 1, 1);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group2\", 2, 2);"
            ],
            [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group3\", 2, 2);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group3\", 3, 3);"
            ]
        ],
        "selected": {
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test0": [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 1, 0);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 1, 1);"
            ],
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test1": [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 1);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 1, 1);"
            ],
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test2": [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group1\", 0, 0);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group1\", 1, 1);"
            ],
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test3": [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group2\", 1, 1);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group2\", 2, 2);"
            ],
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test4": [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group3\", 2, 2);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group3\", 3, 3);"
            ]
        },
        "processed_generated": {
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test0": [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 1, 0);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 1, 1);"
            ],
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test1": [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 1);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 1, 1);"
            ],
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test2": [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group1\", 0, 0);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group1\", 1, 1);"
            ],
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test3": [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group2\", 1, 1);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group2\", 2, 2);"
            ],
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test4": [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group3\", 2, 2);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group3\", 3, 3);"
            ]
        },
        "original_h": [
            "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 0);",
            "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 1, 1);"
        ]
    },
    "com.vladmihalcea.hpjp.util.CryptoUtilsTest.testPerformance()": {
        "generated_inputs_class": [
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h3Test0",
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h3Test1",
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h3Test2",
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h3Test3",
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "Long value = 0L;",
                "String message = CryptoUtils.encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            [
                "Long value = Long.MAX_VALUE;",
                "String message = CryptoUtils.encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            [
                "Long value = Long.MIN_VALUE;",
                "String message = CryptoUtils.encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            [
                "Long value = random.nextLong();",
                "String message = CryptoUtils.encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            [
                "Long value = 123456789L;",
                "String message = CryptoUtils.encrypt(value);",
                "Class<?> clazz = Long.class;"
            ]
        ],
        "selected": {
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h3Test0": [
                "Long value = 0L;",
                "String message = CryptoUtils.encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h3Test1": [
                "Long value = Long.MAX_VALUE;",
                "String message = CryptoUtils.encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h3Test2": [
                "Long value = Long.MIN_VALUE;",
                "String message = CryptoUtils.encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h3Test3": [
                "Long value = random.nextLong();",
                "String message = CryptoUtils.encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h3Test4": [
                "Long value = 123456789L;",
                "String message = CryptoUtils.encrypt(value);",
                "Class<?> clazz = Long.class;"
            ]
        },
        "processed_generated": {
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h3Test0": [
                "Long value = 0L;",
                "String message = CryptoUtils.encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h3Test1": [
                "Long value = Long.MAX_VALUE;",
                "String message = CryptoUtils.encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h3Test2": [
                "Long value = Long.MIN_VALUE;",
                "String message = CryptoUtils.encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h3Test3": [
                "Long value = random.nextLong();",
                "String message = CryptoUtils.encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h3Test4": [
                "Long value = 123456789L;",
                "String message = CryptoUtils.encrypt(value);",
                "Class<?> clazz = Long.class;"
            ]
        },
        "original_h": [
            "Long value = random.nextLong(100_000L);",
            "String message = encryptedValue;",
            "Class<?> clazz = Long.class;"
        ]
    },
    "cn.hutool.json.IssueI6SZYBTest.pairTest()": {
        "generated_inputs_class": [
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h3Test0",
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h3Test1",
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h3Test2",
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h3Test3",
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "Pair<Integer, Integer> pair = Pair.of(0, 0);",
                "String jsonString = \"{\\\"key\\\":0,\\\"value\\\":0}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            [
                "Pair<Integer, Integer> pair = Pair.of(-1, -1);",
                "String jsonString = \"{\\\"key\\\":-1,\\\"value\\\":-1}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            [
                "Pair<Integer, Integer> pair = Pair.of(Integer.MAX_VALUE, Integer.MAX_VALUE);",
                "String jsonString = \"{\\\"key\\\":2147483647,\\\"value\\\":2147483647}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            [
                "Pair<Integer, Integer> pair = Pair.of(Integer.MIN_VALUE, Integer.MIN_VALUE);",
                "String jsonString = \"{\\\"key\\\":-2147483648,\\\"value\\\":-2147483648}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            [
                "Pair<Integer, Integer> pair = Pair.of(100, -100);",
                "String jsonString = \"{\\\"key\\\":100,\\\"value\\\":-100}\";",
                "Class<Pair> beanClass = Pair.class;"
            ]
        ],
        "selected": {
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h3Test0": [
                "Pair<Integer, Integer> pair = Pair.of(0, 0);",
                "String jsonString = \"{\\\"key\\\":0,\\\"value\\\":0}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h3Test1": [
                "Pair<Integer, Integer> pair = Pair.of(-1, -1);",
                "String jsonString = \"{\\\"key\\\":-1,\\\"value\\\":-1}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h3Test2": [
                "Pair<Integer, Integer> pair = Pair.of(Integer.MAX_VALUE, Integer.MAX_VALUE);",
                "String jsonString = \"{\\\"key\\\":2147483647,\\\"value\\\":2147483647}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h3Test3": [
                "Pair<Integer, Integer> pair = Pair.of(Integer.MIN_VALUE, Integer.MIN_VALUE);",
                "String jsonString = \"{\\\"key\\\":-2147483648,\\\"value\\\":-2147483648}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h3Test4": [
                "Pair<Integer, Integer> pair = Pair.of(100, -100);",
                "String jsonString = \"{\\\"key\\\":100,\\\"value\\\":-100}\";",
                "Class<Pair> beanClass = Pair.class;"
            ]
        },
        "processed_generated": {
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h3Test0": [
                "Pair<Integer, Integer> pair = Pair.of(0, 0);",
                "String jsonString = \"{\\\"key\\\":0,\\\"value\\\":0}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h3Test1": [
                "Pair<Integer, Integer> pair = Pair.of(-1, -1);",
                "String jsonString = \"{\\\"key\\\":-1,\\\"value\\\":-1}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h3Test2": [
                "Pair<Integer, Integer> pair = Pair.of(Integer.MAX_VALUE, Integer.MAX_VALUE);",
                "String jsonString = \"{\\\"key\\\":2147483647,\\\"value\\\":2147483647}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h3Test3": [
                "Pair<Integer, Integer> pair = Pair.of(Integer.MIN_VALUE, Integer.MIN_VALUE);",
                "String jsonString = \"{\\\"key\\\":-2147483648,\\\"value\\\":-2147483648}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h3Test4": [
                "Pair<Integer, Integer> pair = Pair.of(100, -100);",
                "String jsonString = \"{\\\"key\\\":100,\\\"value\\\":-100}\";",
                "Class<Pair> beanClass = Pair.class;"
            ]
        },
        "original_h": [
            "Pair<Integer, Integer> pair = Pair.of(1, 2);",
            "String jsonString = \"{\\\"key\\\":1,\\\"value\\\":2}\";",
            "Class<Pair> beanClass = Pair.class;"
        ]
    },
    "com.vladmihalcea.hpjp.util.CryptoUtilsTest.testPerformanceUsingCache()": {
        "generated_inputs_class": [
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h3Test0",
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h3Test1",
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h3Test2",
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h3Test3",
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "long threshold = 5L;",
                "Long value = 0L;",
                "String encryptedValue = encryptCache.get(value);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;"
            ],
            [
                "long threshold = 5L;",
                "Long value = 4L;",
                "String encryptedValue = encryptCache.get(value);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;"
            ],
            [
                "long threshold = 5L;",
                "Long value = 5L;",
                "String encryptedValue = encryptCache.get(value);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;"
            ],
            [
                "long threshold = 5L;",
                "Long value = 7L;",
                "String encryptedValue = encryptCache.get(value);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;"
            ],
            [
                "long threshold = 5L;",
                "Long value = 50L;",
                "String encryptedValue = encryptCache.get(value);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;"
            ]
        ],
        "selected": {
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h3Test0": [
                "long threshold = 5L;",
                "Long value = 0L;",
                "String encryptedValue = encryptCache.get(value);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h3Test1": [
                "long threshold = 5L;",
                "Long value = 4L;",
                "String encryptedValue = encryptCache.get(value);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h3Test2": [
                "long threshold = 5L;",
                "Long value = 5L;",
                "String encryptedValue = encryptCache.get(value);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h3Test3": [
                "long threshold = 5L;",
                "Long value = 7L;",
                "String encryptedValue = encryptCache.get(value);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h3Test4": [
                "long threshold = 5L;",
                "Long value = 50L;",
                "String encryptedValue = encryptCache.get(value);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;"
            ]
        },
        "processed_generated": {
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h3Test0": [
                "Long value = 0L;",
                "String encryptedValue = encryptCache.get(value);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h3Test1": [
                "Long value = 4L;",
                "String encryptedValue = encryptCache.get(value);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h3Test2": [
                "Long value = 5L;",
                "String encryptedValue = encryptCache.get(value);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h3Test3": [
                "Long value = 7L;",
                "String encryptedValue = encryptCache.get(value);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h3Test4": [
                "Long value = 50L;",
                "String encryptedValue = encryptCache.get(value);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;"
            ]
        },
        "original_h": [
            "long threshold = 5L;",
            "Long value = random.nextLong(threshold);",
            "String encryptedValue = encryptCache.get(value);",
            "String message = encryptedValue;",
            "Class<?> clazz = Long.class;"
        ]
    },
    "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase.returnsMuleLoggerContextForArtifactClassLoaderChild()": {
        "generated_inputs_class": [
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h3Test0",
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h3Test1",
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h3Test2",
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h3Test3",
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "RegionClassLoader regionClassLoader = this.regionClassLoader;",
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = true;",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = true;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            [
                "RegionClassLoader regionClassLoader = this.regionClassLoader;",
                "String fqcn = \"org.apache.commons.logging.Log\";",
                "boolean currentContext = false;",
                "String fqcn2 = \"org.apache.commons.logging.Log\";",
                "boolean currentContext2 = false;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            [
                "RegionClassLoader regionClassLoader = this.regionClassLoader;",
                "String fqcn = \"\";",
                "boolean currentContext = false;",
                "String fqcn2 = \"\";",
                "boolean currentContext2 = false;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            [
                "RegionClassLoader regionClassLoader = new RegionClassLoader();",
                "String fqcn = \"com.example.AnotherClass\";",
                "boolean currentContext = true;",
                "String fqcn2 = \"com.example.AnotherClass\";",
                "boolean currentContext2 = true;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            [
                "RegionClassLoader regionClassLoader = this.regionClassLoader;",
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = false;",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = false;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ]
        ],
        "selected": {
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h3Test0": [
                "RegionClassLoader regionClassLoader = this.regionClassLoader;",
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = true;",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = true;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h3Test1": [
                "RegionClassLoader regionClassLoader = this.regionClassLoader;",
                "String fqcn = \"org.apache.commons.logging.Log\";",
                "boolean currentContext = false;",
                "String fqcn2 = \"org.apache.commons.logging.Log\";",
                "boolean currentContext2 = false;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h3Test2": [
                "RegionClassLoader regionClassLoader = this.regionClassLoader;",
                "String fqcn = \"\";",
                "boolean currentContext = false;",
                "String fqcn2 = \"\";",
                "boolean currentContext2 = false;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h3Test3": [
                "RegionClassLoader regionClassLoader = new RegionClassLoader();",
                "String fqcn = \"com.example.AnotherClass\";",
                "boolean currentContext = true;",
                "String fqcn2 = \"com.example.AnotherClass\";",
                "boolean currentContext2 = true;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h3Test4": [
                "RegionClassLoader regionClassLoader = this.regionClassLoader;",
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = false;",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = false;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ]
        },
        "processed_generated": {
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h3Test0": [
                "RegionClassLoader regionClassLoader = this.regionClassLoader;",
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = true;",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = true;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h3Test1": [
                "RegionClassLoader regionClassLoader = this.regionClassLoader;",
                "String fqcn = \"org.apache.commons.logging.Log\";",
                "boolean currentContext = false;",
                "String fqcn2 = \"org.apache.commons.logging.Log\";",
                "boolean currentContext2 = false;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h3Test2": [
                "RegionClassLoader regionClassLoader = this.regionClassLoader;",
                "String fqcn = \"\";",
                "boolean currentContext = false;",
                "String fqcn2 = \"\";",
                "boolean currentContext2 = false;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h3Test3": [
                "RegionClassLoader regionClassLoader = new RegionClassLoader();",
                "String fqcn = \"com.example.AnotherClass\";",
                "boolean currentContext = true;",
                "String fqcn2 = \"com.example.AnotherClass\";",
                "boolean currentContext2 = true;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h3Test4": [
                "RegionClassLoader regionClassLoader = this.regionClassLoader;",
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = false;",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = false;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ]
        },
        "original_h": [
            "RegionClassLoader regionClassLoader = this.regionClassLoader;",
            "String fqcn = \"\";",
            "boolean currentContext = true;",
            "String fqcn2 = \"\";",
            "boolean currentContext2 = true;",
            "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
        ]
    },
    "org.matsim.core.config.groups.ScoringConfigGroupTest.testAddActivityParams()": {
        "generated_inputs_class": [
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h3Test0",
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h3Test1",
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h3Test2",
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h3Test3",
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "ActivityParams ap = new ActivityParams(\"type2\");",
                "String type = \"type2\";"
            ],
            [
                "ActivityParams ap = new ActivityParams(\"type3\");",
                "String type = \"type3\";"
            ],
            [
                "ActivityParams ap = new ActivityParams(\"type4\");",
                "String type = \"type4\";"
            ],
            [
                "ActivityParams ap = new ActivityParams(\"type5\");",
                "String type = \"type5\";"
            ],
            [
                "ActivityParams ap = new ActivityParams(\"type6\");",
                "String type = \"type6\";"
            ]
        ],
        "selected": {
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h3Test0": [
                "ActivityParams ap = new ActivityParams(\"type2\");",
                "String type = \"type2\";"
            ],
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h3Test1": [
                "ActivityParams ap = new ActivityParams(\"type3\");",
                "String type = \"type3\";"
            ],
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h3Test2": [
                "ActivityParams ap = new ActivityParams(\"type4\");",
                "String type = \"type4\";"
            ],
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h3Test3": [
                "ActivityParams ap = new ActivityParams(\"type5\");",
                "String type = \"type5\";"
            ],
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h3Test4": [
                "ActivityParams ap = new ActivityParams(\"type6\");",
                "String type = \"type6\";"
            ]
        },
        "processed_generated": {
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h3Test0": [
                "ActivityParams ap = new ActivityParams(\"type2\");",
                "String type = \"type2\";"
            ],
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h3Test1": [
                "ActivityParams ap = new ActivityParams(\"type3\");",
                "String type = \"type3\";"
            ],
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h3Test2": [
                "ActivityParams ap = new ActivityParams(\"type4\");",
                "String type = \"type4\";"
            ],
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h3Test3": [
                "ActivityParams ap = new ActivityParams(\"type5\");",
                "String type = \"type5\";"
            ],
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h3Test4": [
                "ActivityParams ap = new ActivityParams(\"type6\");",
                "String type = \"type6\";"
            ]
        },
        "original_h": [
            "ActivityParams ap = new ActivityParams(\"type1\");",
            "String type = \"type1\";"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test1()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h3Test0",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h3Test1",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h3Test2",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h3Test3",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "String str2 = \"{\\\"456\\\":456}\";",
                "Type mapType = new TypeReference<Map<String, Integer>>() {}.getType();"
            ],
            [
                "String str2 = \"{\\\"789\\\":789}\";",
                "Type mapType = new TypeReference<Map<String, Integer>>() {}.getType();"
            ],
            [
                "String str2 = \"{\\\"abc\\\":123}\";",
                "Type mapType = new TypeReference<Map<String, Integer>>() {}.getType();"
            ],
            [
                "String str2 = \"{\\\"xyz\\\":987}\";",
                "Type mapType = new TypeReference<Map<String, Integer>>() {}.getType();"
            ],
            [
                "String str2 = \"{\\\"def\\\":456}\";",
                "Type mapType = new TypeReference<Map<String, Integer>>() {}.getType();"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h3Test0": [
                "String str2 = \"{\\\"456\\\":456}\";",
                "Type mapType = new TypeReference<Map<String, Integer>>() {}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h3Test1": [
                "String str2 = \"{\\\"789\\\":789}\";",
                "Type mapType = new TypeReference<Map<String, Integer>>() {}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h3Test2": [
                "String str2 = \"{\\\"abc\\\":123}\";",
                "Type mapType = new TypeReference<Map<String, Integer>>() {}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h3Test3": [
                "String str2 = \"{\\\"xyz\\\":987}\";",
                "Type mapType = new TypeReference<Map<String, Integer>>() {}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h3Test4": [
                "String str2 = \"{\\\"def\\\":456}\";",
                "Type mapType = new TypeReference<Map<String, Integer>>() {}.getType();"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h3Test0": [
                "String str2 = \"{\\\"456\\\":456}\";",
                "Type mapType = new TypeReference<Map<String, Integer>>() {}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h3Test1": [
                "String str2 = \"{\\\"789\\\":789}\";",
                "Type mapType = new TypeReference<Map<String, Integer>>() {}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h3Test2": [
                "String str2 = \"{\\\"abc\\\":123}\";",
                "Type mapType = new TypeReference<Map<String, Integer>>() {}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h3Test3": [
                "String str2 = \"{\\\"xyz\\\":987}\";",
                "Type mapType = new TypeReference<Map<String, Integer>>() {}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h3Test4": [
                "String str2 = \"{\\\"def\\\":456}\";",
                "Type mapType = new TypeReference<Map<String, Integer>>() {}.getType();"
            ]
        },
        "original_h": [
            "Map<String, Integer> v01 = new HashMap<>();",
            "v01.put(\"123\", 123);"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.MapTest.test1()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h3Test0",
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h3Test1",
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h3Test2",
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h3Test3",
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h3Test4",
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h3Test5"
        ],
        "generated_all_blocks": [
            [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"123\", 123);",
                "v01.put(\"12x\", 123);",
                "",
                "String str2 = \"{\\\"123\\\":123,\\\"12x\\\":123}\";"
            ],
            [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"abc\", 456);",
                "",
                "String str2 = \"{\\\"abc\\\":456}\";"
            ],
            [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"\", 789);",
                "",
                "String str2 = \"{\\\"\\\":789}\";"
            ],
            [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"key\", null);",
                "",
                "String str2 = \"{\\\"key\\\":null}\";"
            ],
            [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"key1\", 0);",
                "",
                "String str2 = \"{\\\"key1\\\":0}\";"
            ],
            [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"key2\", -123);",
                "",
                "String str2 = \"{\\\"key2\\\":-123}\";"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h3Test0": [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"123\", 123);",
                "v01.put(\"12x\", 123);",
                "",
                "String str2 = \"{\\\"123\\\":123,\\\"12x\\\":123}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h3Test1": [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"abc\", 456);",
                "",
                "String str2 = \"{\\\"abc\\\":456}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h3Test2": [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"\", 789);",
                "",
                "String str2 = \"{\\\"\\\":789}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h3Test3": [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"key\", null);",
                "",
                "String str2 = \"{\\\"key\\\":null}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h3Test4": [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"key1\", 0);",
                "",
                "String str2 = \"{\\\"key1\\\":0}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h3Test5": [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"key2\", -123);",
                "",
                "String str2 = \"{\\\"key2\\\":-123}\";"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h3Test0": [
                "v01.put(\"123\", 123);",
                "v01.put(\"12x\", 123);",
                "String str2 = \"{\\\"123\\\":123,\\\"12x\\\":123}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h3Test1": [
                "v01.put(\"abc\", 456);",
                "String str2 = \"{\\\"abc\\\":456}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h3Test2": [
                "v01.put(\"\", 789);",
                "String str2 = \"{\\\"\\\":789}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h3Test3": [
                "v01.put(\"key\", null);",
                "String str2 = \"{\\\"key\\\":null}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h3Test4": [
                "v01.put(\"key1\", 0);",
                "String str2 = \"{\\\"key1\\\":0}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h3Test5": [
                "v01.put(\"key2\", -123);",
                "String str2 = \"{\\\"key2\\\":-123}\";"
            ]
        },
        "original_h": [
            "v01.put(\"123\", 123);",
            "v01.put(\"12x\", 123);"
        ]
    },
    "cn.hutool.json.IssueI6SZYBTest.entryTest()": {
        "generated_inputs_class": [
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h3Test0",
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h3Test1",
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h3Test2",
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h3Test3",
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"abc\", 123);",
                "String jsonString = \"{\\\"abc\\\":123}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"xyz\", 0);",
                "String jsonString = \"{\\\"xyz\\\":0}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key\", -100);",
                "String jsonString = \"{\\\"key\\\":-100}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"\", 999);",
                "String jsonString = \"{\\\"\\\":999}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(null, null);",
                "String jsonString = \"{\\\"null\\\":null}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ]
        ],
        "selected": {
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h3Test0": [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"abc\", 123);",
                "String jsonString = \"{\\\"abc\\\":123}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h3Test1": [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"xyz\", 0);",
                "String jsonString = \"{\\\"xyz\\\":0}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h3Test2": [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key\", -100);",
                "String jsonString = \"{\\\"key\\\":-100}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h3Test3": [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"\", 999);",
                "String jsonString = \"{\\\"\\\":999}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h3Test4": [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(null, null);",
                "String jsonString = \"{\\\"null\\\":null}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ]
        },
        "processed_generated": {
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h3Test0": [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"abc\", 123);",
                "String jsonString = \"{\\\"abc\\\":123}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h3Test1": [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"xyz\", 0);",
                "String jsonString = \"{\\\"xyz\\\":0}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h3Test2": [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key\", -100);",
                "String jsonString = \"{\\\"key\\\":-100}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h3Test3": [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"\", 999);",
                "String jsonString = \"{\\\"\\\":999}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h3Test4": [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(null, null);",
                "String jsonString = \"{\\\"null\\\":null}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ]
        },
        "original_h": [
            "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"1\", 2);",
            "String jsonString = \"{\\\"1\\\":2}\";",
            "Class beanClass = AbstractMap.SimpleEntry.class;"
        ]
    },
    "org.datagear.util.version.VersionTest.isLowerThanTest()": {
        "generated_inputs_class": [
            "org.datagear.util.version.VersionTest_isLowerThanTest_h3Test0"
        ],
        "generated_all_blocks": [
            [
                "String v1 = \"1.0\";",
                "String v2 = \"1.10\";"
            ],
            [
                "String v1 = \"1.0\";",
                "String v2 = \"1.10\";"
            ]
        ],
        "selected": {
            "org.datagear.util.version.VersionTest_isLowerThanTest_h3Test0": [
                "String v1 = \"1.0\";",
                "String v2 = \"1.10\";"
            ]
        },
        "processed_generated": {
            "org.datagear.util.version.VersionTest_isLowerThanTest_h3Test0": [
                "String v1 = \"1.0\";",
                "String v2 = \"1.10\";"
            ]
        },
        "original_h": [
            "String v1 = \"1.0\";",
            "String v2 = \"1.10\";"
        ]
    },
    "org.apache.druid.audit.AuditInfoTest.testAuditInfoEquality()": {
        "generated_inputs_class": [
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h3Test0",
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h3Test1",
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h3Test2",
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h3Test3",
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "AuditInfo auditInfo1 = new AuditInfo(null, \"id\", \"test equality\", \"127.0.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(null, \"id\", \"test equality\", \"127.0.0.1\");"
            ],
            [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", null, \"test equality\", \"127.0.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", null, \"test equality\", \"127.0.0.1\");"
            ],
            [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", null, \"127.0.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", null, \"127.0.0.1\");"
            ],
            [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", null);",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", null);"
            ],
            [
                "AuditInfo auditInfo1 = new AuditInfo(\"\", \"id\", \"test equality\", \"127.0.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"\", \"id\", \"test equality\", \"127.0.0.1\");"
            ]
        ],
        "selected": {
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h3Test0": [
                "AuditInfo auditInfo1 = new AuditInfo(null, \"id\", \"test equality\", \"127.0.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(null, \"id\", \"test equality\", \"127.0.0.1\");"
            ],
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h3Test1": [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", null, \"test equality\", \"127.0.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", null, \"test equality\", \"127.0.0.1\");"
            ],
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h3Test2": [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", null, \"127.0.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", null, \"127.0.0.1\");"
            ],
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h3Test3": [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", null);",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", null);"
            ],
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h3Test4": [
                "AuditInfo auditInfo1 = new AuditInfo(\"\", \"id\", \"test equality\", \"127.0.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"\", \"id\", \"test equality\", \"127.0.0.1\");"
            ]
        },
        "processed_generated": {
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h3Test0": [
                "AuditInfo auditInfo1 = new AuditInfo(null, \"id\", \"test equality\", \"127.0.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(null, \"id\", \"test equality\", \"127.0.0.1\");"
            ],
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h3Test1": [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", null, \"test equality\", \"127.0.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", null, \"test equality\", \"127.0.0.1\");"
            ],
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h3Test2": [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", null, \"127.0.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", null, \"127.0.0.1\");"
            ],
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h3Test3": [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", null);",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", null);"
            ],
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h3Test4": [
                "AuditInfo auditInfo1 = new AuditInfo(\"\", \"id\", \"test equality\", \"127.0.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"\", \"id\", \"test equality\", \"127.0.0.1\");"
            ]
        },
        "original_h": [
            "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"127.0.0.1\");",
            "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"127.0.0.1\");"
        ]
    },
    "org.datagear.util.version.VersionTest.isHigherThanTest()": {
        "generated_inputs_class": [
            "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test0",
            "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test1",
            "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test2",
            "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test3",
            "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "String v1 = \"1.0-A1\";",
                "String v2 = \"1.0\";"
            ],
            [
                "String v1 = \"1.1.0\";",
                "String v2 = \"1.0\";"
            ],
            [
                "String v1 = \"1.1.0-A1\";",
                "String v2 = \"1.1.0\";"
            ],
            [
                "String v1 = \"2.0\";",
                "String v2 = \"1.10\";"
            ],
            [
                "String v1 = \"2.0-A1\";",
                "String v2 = \"2.0\";"
            ]
        ],
        "selected": {
            "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test0": [
                "String v1 = \"1.0-A1\";",
                "String v2 = \"1.0\";"
            ],
            "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test1": [
                "String v1 = \"1.1.0\";",
                "String v2 = \"1.0\";"
            ],
            "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test2": [
                "String v1 = \"1.1.0-A1\";",
                "String v2 = \"1.1.0\";"
            ],
            "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test3": [
                "String v1 = \"2.0\";",
                "String v2 = \"1.10\";"
            ],
            "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test4": [
                "String v1 = \"2.0-A1\";",
                "String v2 = \"2.0\";"
            ]
        },
        "processed_generated": {
            "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test0": [
                "String v1 = \"1.0-A1\";",
                "String v2 = \"1.0\";"
            ],
            "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test1": [
                "String v1 = \"1.1.0\";",
                "String v2 = \"1.0\";"
            ],
            "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test2": [
                "String v1 = \"1.1.0-A1\";",
                "String v2 = \"1.1.0\";"
            ],
            "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test3": [
                "String v1 = \"2.0\";",
                "String v2 = \"1.10\";"
            ],
            "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test4": [
                "String v1 = \"2.0-A1\";",
                "String v2 = \"2.0\";"
            ]
        },
        "original_h": [
            "String v1 = \"1.0\";",
            "String v2 = \"1.10\";"
        ]
    },
    "org.threeten.extra.TestYearHalf.test_parse_CharSequence_caseInsensitive()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h3Test0",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h3Test1",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h3Test2",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h3Test3",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "int year = 2020;",
                "int half = 2;",
                "CharSequence text = \"2020-h2\";"
            ],
            [
                "int year = 1999;",
                "int half = 1;",
                "CharSequence text = \"1999-h1\";"
            ],
            [
                "int year = 2025;",
                "int half = 2;",
                "CharSequence text = \"2025-h2\";"
            ],
            [
                "int year = 2000;",
                "int half = 1;",
                "CharSequence text = \"2000-h1\";"
            ],
            [
                "int year = 2022;",
                "int half = 2;",
                "CharSequence text = \"2022-h2\";"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h3Test0": [
                "int year = 2020;",
                "int half = 2;",
                "CharSequence text = \"2020-h2\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h3Test1": [
                "int year = 1999;",
                "int half = 1;",
                "CharSequence text = \"1999-h1\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h3Test2": [
                "int year = 2025;",
                "int half = 2;",
                "CharSequence text = \"2025-h2\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h3Test3": [
                "int year = 2000;",
                "int half = 1;",
                "CharSequence text = \"2000-h1\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h3Test4": [
                "int year = 2022;",
                "int half = 2;",
                "CharSequence text = \"2022-h2\";"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h3Test0": [
                "int year = 2020;",
                "int half = 2;",
                "CharSequence text = \"2020-h2\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h3Test1": [
                "int year = 1999;",
                "int half = 1;",
                "CharSequence text = \"1999-h1\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h3Test2": [
                "int year = 2025;",
                "int half = 2;",
                "CharSequence text = \"2025-h2\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h3Test3": [
                "int year = 2000;",
                "int half = 1;",
                "CharSequence text = \"2000-h1\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h3Test4": [
                "int year = 2022;",
                "int half = 2;",
                "CharSequence text = \"2022-h2\";"
            ]
        },
        "original_h": [
            "int year = 2012;",
            "int half = 1;",
            "CharSequence text = \"2012-h1\";"
        ]
    },
    "com.networknt.schema.JsonNodePathTest.equalsEquals()": {
        "generated_inputs_class": [
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h3Test0",
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h3Test1",
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h3Test2",
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h3Test3",
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "String token1 = \"b\";",
                "String token2 = \"b\";"
            ],
            [
                "String token1 = \"\";",
                "String token2 = \"\";"
            ],
            [
                "String token1 = \"123\";",
                "String token2 = \"123\";"
            ],
            [
                "String token1 = \"a.b\";",
                "String token2 = \"a.b\";"
            ],
            [
                "String token1 = \"A\";",
                "String token2 = \"A\";"
            ]
        ],
        "selected": {
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h3Test0": [
                "String token1 = \"b\";",
                "String token2 = \"b\";"
            ],
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h3Test1": [
                "String token1 = \"\";",
                "String token2 = \"\";"
            ],
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h3Test2": [
                "String token1 = \"123\";",
                "String token2 = \"123\";"
            ],
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h3Test3": [
                "String token1 = \"a.b\";",
                "String token2 = \"a.b\";"
            ],
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h3Test4": [
                "String token1 = \"A\";",
                "String token2 = \"A\";"
            ]
        },
        "processed_generated": {
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h3Test0": [
                "String token1 = \"b\";",
                "String token2 = \"b\";"
            ],
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h3Test1": [
                "String token1 = \"\";",
                "String token2 = \"\";"
            ],
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h3Test2": [
                "String token1 = \"123\";",
                "String token2 = \"123\";"
            ],
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h3Test3": [
                "String token1 = \"a.b\";",
                "String token2 = \"a.b\";"
            ],
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h3Test4": [
                "String token1 = \"A\";",
                "String token2 = \"A\";"
            ]
        },
        "original_h": [
            "String token1 = \"a\";",
            "String token2 = \"a\";"
        ]
    },
    "org.threeten.extra.TestYearHalf.test_parse_CharSequenceDateTimeFormatter()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h3Test0",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h3Test1",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h3Test2",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h3Test3",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "int year = 2020;",
                "int half = 2;"
            ],
            [
                "int year = 1999;",
                "int half = 1;"
            ],
            [
                "int year = 2022;",
                "int half = 2;"
            ],
            [
                "int year = 2005;",
                "int half = 1;"
            ],
            [
                "int year = 2030;",
                "int half = 2;"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h3Test0": [
                "int year = 2020;",
                "int half = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h3Test1": [
                "int year = 1999;",
                "int half = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h3Test2": [
                "int year = 2022;",
                "int half = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h3Test3": [
                "int year = 2005;",
                "int half = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h3Test4": [
                "int year = 2030;",
                "int half = 2;"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h3Test0": [
                "int year = 2020;",
                "int half = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h3Test1": [
                "int year = 1999;",
                "int half = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h3Test2": [
                "int year = 2022;",
                "int half = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h3Test3": [
                "int year = 2005;",
                "int half = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h3Test4": [
                "int year = 2030;",
                "int half = 2;"
            ]
        },
        "original_h": [
            "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
            "CharSequence text = \"H1 2012\";",
            "int year = 2012;",
            "int half = 1;"
        ]
    },
    "org.datagear.util.version.VersionTest.isEqualTest()": {
        "generated_inputs_class": [
            "org.datagear.util.version.VersionTest_isEqualTest_h3Test0",
            "org.datagear.util.version.VersionTest_isEqualTest_h3Test1",
            "org.datagear.util.version.VersionTest_isEqualTest_h3Test2",
            "org.datagear.util.version.VersionTest_isEqualTest_h3Test3",
            "org.datagear.util.version.VersionTest_isEqualTest_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "String v1 = \"1.0\";",
                "String v2 = \"1.10\";"
            ],
            [
                "String v1 = \"1.0\";",
                "String v2 = \"1.1.0\";"
            ],
            [
                "String v1 = \"1.0\";",
                "String v2 = \"1.1.0-A1\";"
            ],
            [
                "String v1 = \"1.0\";",
                "String v2 = \"2.0\";"
            ],
            [
                "String v1 = \"1.0\";",
                "String v2 = \"2.0-A1\";"
            ]
        ],
        "selected": {
            "org.datagear.util.version.VersionTest_isEqualTest_h3Test0": [
                "String v1 = \"1.0\";",
                "String v2 = \"1.10\";"
            ],
            "org.datagear.util.version.VersionTest_isEqualTest_h3Test1": [
                "String v1 = \"1.0\";",
                "String v2 = \"1.1.0\";"
            ],
            "org.datagear.util.version.VersionTest_isEqualTest_h3Test2": [
                "String v1 = \"1.0\";",
                "String v2 = \"1.1.0-A1\";"
            ],
            "org.datagear.util.version.VersionTest_isEqualTest_h3Test3": [
                "String v1 = \"1.0\";",
                "String v2 = \"2.0\";"
            ],
            "org.datagear.util.version.VersionTest_isEqualTest_h3Test4": [
                "String v1 = \"1.0\";",
                "String v2 = \"2.0-A1\";"
            ]
        },
        "processed_generated": {
            "org.datagear.util.version.VersionTest_isEqualTest_h3Test0": [
                "String v1 = \"1.0\";",
                "String v2 = \"1.10\";"
            ],
            "org.datagear.util.version.VersionTest_isEqualTest_h3Test1": [
                "String v1 = \"1.0\";",
                "String v2 = \"1.1.0\";"
            ],
            "org.datagear.util.version.VersionTest_isEqualTest_h3Test2": [
                "String v1 = \"1.0\";",
                "String v2 = \"1.1.0-A1\";"
            ],
            "org.datagear.util.version.VersionTest_isEqualTest_h3Test3": [
                "String v1 = \"1.0\";",
                "String v2 = \"2.0\";"
            ],
            "org.datagear.util.version.VersionTest_isEqualTest_h3Test4": [
                "String v1 = \"1.0\";",
                "String v2 = \"2.0-A1\";"
            ]
        },
        "original_h": [
            "String v1 = \"1.0\";",
            "String v2 = \"1.10\";"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test2()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h3Test0",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h3Test1",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h3Test2",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h3Test3",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"456\", 456L);",
                "",
                "// Serialize the map to a JSON string",
                "String str = toJSONString(v01, null, null);",
                "",
                "// Deserialize the JSON string back to a map",
                "Map<String, Long> v02 = new HashMap<>();",
                "parseObject(new StringReader(str), '\\0', new TypeReference<Map<String, Long>>(){}.getType(), v02::put);",
                "",
                "assertEquals(v01, v02);"
            ],
            [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"789\", 789L);",
                "",
                "// Serialize the map to a JSON string",
                "String str = toJSONString(v01, null, null);",
                "",
                "// Deserialize the JSON string back to a map",
                "Map<String, Long> v02 = new HashMap<>();",
                "parseObject(new StringReader(str), '\\0', new TypeReference<Map<String, Long>>(){}.getType(), v02::put);",
                "",
                "assertEquals(v01, v02);"
            ],
            [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"abc\", 1000L);",
                "",
                "// Serialize the map to a JSON string",
                "String str = toJSONString(v01, null, null);",
                "",
                "// Deserialize the JSON string back to a map",
                "Map<String, Long> v02 = new HashMap<>();",
                "parseObject(new StringReader(str), '\\0', new TypeReference<Map<String, Long>>(){}.getType(), v02::put);",
                "",
                "assertEquals(v01, v02);"
            ],
            [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"xyz\", -500L);",
                "",
                "// Serialize the map to a JSON string",
                "String str = toJSONString(v01, null, null);",
                "",
                "// Deserialize the JSON string back to a map",
                "Map<String, Long> v02 = new HashMap<>();",
                "parseObject(new StringReader(str), '\\0', new TypeReference<Map<String, Long>>(){}.getType(), v02::put);",
                "",
                "assertEquals(v01, v02);"
            ],
            [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"\", 0L);",
                "",
                "// Serialize the map to a JSON string",
                "String str = toJSONString(v01, null, null);",
                "",
                "// Deserialize the JSON string back to a map",
                "Map<String, Long> v02 = new HashMap<>();",
                "parseObject(new StringReader(str), '\\0', new TypeReference<Map<String, Long>>(){}.getType(), v02::put);",
                "",
                "assertEquals(v01, v02);"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h3Test0": [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"456\", 456L);",
                "",
                "// Serialize the map to a JSON string",
                "String str = toJSONString(v01, null, null);",
                "",
                "// Deserialize the JSON string back to a map",
                "Map<String, Long> v02 = new HashMap<>();",
                "parseObject(new StringReader(str), '\\0', new TypeReference<Map<String, Long>>(){}.getType(), v02::put);",
                "",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h3Test1": [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"789\", 789L);",
                "",
                "// Serialize the map to a JSON string",
                "String str = toJSONString(v01, null, null);",
                "",
                "// Deserialize the JSON string back to a map",
                "Map<String, Long> v02 = new HashMap<>();",
                "parseObject(new StringReader(str), '\\0', new TypeReference<Map<String, Long>>(){}.getType(), v02::put);",
                "",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h3Test2": [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"abc\", 1000L);",
                "",
                "// Serialize the map to a JSON string",
                "String str = toJSONString(v01, null, null);",
                "",
                "// Deserialize the JSON string back to a map",
                "Map<String, Long> v02 = new HashMap<>();",
                "parseObject(new StringReader(str), '\\0', new TypeReference<Map<String, Long>>(){}.getType(), v02::put);",
                "",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h3Test3": [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"xyz\", -500L);",
                "",
                "// Serialize the map to a JSON string",
                "String str = toJSONString(v01, null, null);",
                "",
                "// Deserialize the JSON string back to a map",
                "Map<String, Long> v02 = new HashMap<>();",
                "parseObject(new StringReader(str), '\\0', new TypeReference<Map<String, Long>>(){}.getType(), v02::put);",
                "",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h3Test4": [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"\", 0L);",
                "",
                "// Serialize the map to a JSON string",
                "String str = toJSONString(v01, null, null);",
                "",
                "// Deserialize the JSON string back to a map",
                "Map<String, Long> v02 = new HashMap<>();",
                "parseObject(new StringReader(str), '\\0', new TypeReference<Map<String, Long>>(){}.getType(), v02::put);",
                "",
                "assertEquals(v01, v02);"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h3Test0": [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"456\", 456L);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h3Test1": [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"789\", 789L);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h3Test2": [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"abc\", 1000L);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h3Test3": [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"xyz\", -500L);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h3Test4": [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"\", 0L);"
            ]
        },
        "original_h": [
            "Map<String, Long> v01 = new HashMap<>();",
            "v01.put(\"123\", 123L);"
        ]
    },
    "cn.hutool.json.IssueI7GPGXTest.toBeanTest()": {
        "generated_inputs_class": [
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h3Test0",
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h3Test1",
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h3Test2",
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h3Test3",
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"\", true);",
                "String jsonString = \"{\\\"key\\\":\\\"\\\",\\\"value\\\":true}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {};",
                "boolean ignoreError = false;"
            ],
            [
                "Pair<String, Boolean> hutoolPair = new Pair<>(null, true);",
                "String jsonString = \"{\\\"key\\\":null,\\\"value\\\":true}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {};",
                "boolean ignoreError = false;"
            ],
            [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"test1\", false);",
                "String jsonString = \"{\\\"key\\\":\\\"test1\\\",\\\"value\\\":false}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {};",
                "boolean ignoreError = false;"
            ],
            [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"test2\", true);",
                "String jsonString = \"{\\\"key\\\":\\\"test2\\\",\\\"value\\\":true}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {};",
                "boolean ignoreError = false;"
            ],
            [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"test1\", null);",
                "String jsonString = \"{\\\"key\\\":\\\"test1\\\",\\\"value\\\":null}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {};",
                "boolean ignoreError = false;"
            ]
        ],
        "selected": {
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h3Test0": [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"\", true);",
                "String jsonString = \"{\\\"key\\\":\\\"\\\",\\\"value\\\":true}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {};",
                "boolean ignoreError = false;"
            ],
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h3Test1": [
                "Pair<String, Boolean> hutoolPair = new Pair<>(null, true);",
                "String jsonString = \"{\\\"key\\\":null,\\\"value\\\":true}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {};",
                "boolean ignoreError = false;"
            ],
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h3Test2": [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"test1\", false);",
                "String jsonString = \"{\\\"key\\\":\\\"test1\\\",\\\"value\\\":false}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {};",
                "boolean ignoreError = false;"
            ],
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h3Test3": [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"test2\", true);",
                "String jsonString = \"{\\\"key\\\":\\\"test2\\\",\\\"value\\\":true}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {};",
                "boolean ignoreError = false;"
            ],
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h3Test4": [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"test1\", null);",
                "String jsonString = \"{\\\"key\\\":\\\"test1\\\",\\\"value\\\":null}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {};",
                "boolean ignoreError = false;"
            ]
        },
        "processed_generated": {
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h3Test0": [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"\", true);",
                "String jsonString = \"{\\\"key\\\":\\\"\\\",\\\"value\\\":true}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {};",
                "boolean ignoreError = false;"
            ],
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h3Test1": [
                "Pair<String, Boolean> hutoolPair = new Pair<>(null, true);",
                "String jsonString = \"{\\\"key\\\":null,\\\"value\\\":true}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {};",
                "boolean ignoreError = false;"
            ],
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h3Test2": [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"test1\", false);",
                "String jsonString = \"{\\\"key\\\":\\\"test1\\\",\\\"value\\\":false}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {};",
                "boolean ignoreError = false;"
            ],
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h3Test3": [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"test2\", true);",
                "String jsonString = \"{\\\"key\\\":\\\"test2\\\",\\\"value\\\":true}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {};",
                "boolean ignoreError = false;"
            ],
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h3Test4": [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"test1\", null);",
                "String jsonString = \"{\\\"key\\\":\\\"test1\\\",\\\"value\\\":null}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {};",
                "boolean ignoreError = false;"
            ]
        },
        "original_h": [
            "Pair<String, Boolean> hutoolPair = new Pair<>(\"test1\", true);",
            "String jsonString = \"{\\\"key\\\":\\\"test1\\\",\\\"value\\\":true}\";",
            "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {",
            "};",
            "boolean ignoreError = false;"
        ]
    },
    "com.networknt.schema.JsonNodePathTest.hashCodeEquals()": {
        "generated_inputs_class": [
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h3Test0",
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h3Test1",
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h3Test2",
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h3Test3",
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"\");",
                "JsonNodePath a2 = root.append(\"\");"
            ],
            [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"b\");",
                "JsonNodePath a2 = root.append(\"b\");"
            ],
            [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\").append(\"b\");",
                "JsonNodePath a2 = root.append(\"a\").append(\"b\");"
            ],
            [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\").append(\"b\").append(\"c\");",
                "JsonNodePath a2 = root.append(\"a\").append(\"b\").append(\"c\");"
            ],
            [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\").append(\"b\").append(\"c\").append(\"d\");",
                "JsonNodePath a2 = root.append(\"a\").append(\"b\").append(\"c\").append(\"d\");"
            ]
        ],
        "selected": {
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h3Test0": [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"\");",
                "JsonNodePath a2 = root.append(\"\");"
            ],
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h3Test1": [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"b\");",
                "JsonNodePath a2 = root.append(\"b\");"
            ],
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h3Test2": [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\").append(\"b\");",
                "JsonNodePath a2 = root.append(\"a\").append(\"b\");"
            ],
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h3Test3": [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\").append(\"b\").append(\"c\");",
                "JsonNodePath a2 = root.append(\"a\").append(\"b\").append(\"c\");"
            ],
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h3Test4": [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\").append(\"b\").append(\"c\").append(\"d\");",
                "JsonNodePath a2 = root.append(\"a\").append(\"b\").append(\"c\").append(\"d\");"
            ]
        },
        "processed_generated": {
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h3Test0": [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"\");",
                "JsonNodePath a2 = root.append(\"\");"
            ],
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h3Test1": [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"b\");",
                "JsonNodePath a2 = root.append(\"b\");"
            ],
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h3Test2": [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\").append(\"b\");",
                "JsonNodePath a2 = root.append(\"a\").append(\"b\");"
            ],
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h3Test3": [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\").append(\"b\").append(\"c\");",
                "JsonNodePath a2 = root.append(\"a\").append(\"b\").append(\"c\");"
            ],
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h3Test4": [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\").append(\"b\").append(\"c\").append(\"d\");",
                "JsonNodePath a2 = root.append(\"a\").append(\"b\").append(\"c\").append(\"d\");"
            ]
        },
        "original_h": [
            "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
            "JsonNodePath a1 = root.append(\"a\");",
            "JsonNodePath a2 = root.append(\"a\");"
        ]
    },
    "org.threeten.extra.TestYearHalf.test_with_TemporalAdjuster_Year()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test0",
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test1",
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test2",
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test3",
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "int year1 = 2000;",
                "int half1 = 1;",
                "int year2 = 2005;",
                "int year3 = 2005;",
                "int half3 = 1;"
            ],
            [
                "int year1 = 2021;",
                "int half1 = 2;",
                "int year2 = 2022;",
                "int year3 = 2022;",
                "int half3 = 2;"
            ],
            [
                "int year1 = 1999;",
                "int half1 = 1;",
                "int year2 = 2000;",
                "int year3 = 2000;",
                "int half3 = 1;"
            ],
            [
                "int year1 = 2022;",
                "int half1 = 2;",
                "int year2 = 2021;",
                "int year3 = 2021;",
                "int half3 = 2;"
            ],
            [
                "int year1 = 1900;",
                "int half1 = 1;",
                "int year2 = 1901;",
                "int year3 = 1901;",
                "int half3 = 1;"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test0": [
                "int year1 = 2000;",
                "int half1 = 1;",
                "int year2 = 2005;",
                "int year3 = 2005;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test1": [
                "int year1 = 2021;",
                "int half1 = 2;",
                "int year2 = 2022;",
                "int year3 = 2022;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test2": [
                "int year1 = 1999;",
                "int half1 = 1;",
                "int year2 = 2000;",
                "int year3 = 2000;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test3": [
                "int year1 = 2022;",
                "int half1 = 2;",
                "int year2 = 2021;",
                "int year3 = 2021;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test4": [
                "int year1 = 1900;",
                "int half1 = 1;",
                "int year2 = 1901;",
                "int year3 = 1901;",
                "int half3 = 1;"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test0": [
                "int year1 = 2000;",
                "int half1 = 1;",
                "int year2 = 2005;",
                "int year3 = 2005;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test1": [
                "int year1 = 2021;",
                "int half1 = 2;",
                "int year2 = 2022;",
                "int year3 = 2022;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test2": [
                "int year1 = 1999;",
                "int half1 = 1;",
                "int year2 = 2000;",
                "int year3 = 2000;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test3": [
                "int year1 = 2022;",
                "int half1 = 2;",
                "int year2 = 2021;",
                "int year3 = 2021;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test4": [
                "int year1 = 1900;",
                "int half1 = 1;",
                "int year2 = 1901;",
                "int year3 = 1901;",
                "int half3 = 1;"
            ]
        },
        "original_h": [
            "int year1 = 2007;",
            "int half1 = 2;",
            "int year2 = 2012;",
            "int year3 = 2012;",
            "int half3 = 2;"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.primitives.IntTest.test1()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h3Test0",
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h3Test1",
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h3Test2",
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h3Test3",
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h3Test4",
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h3Test5"
        ],
        "generated_all_blocks": [
            [
                "Integer v01 = 0;"
            ],
            [
                "String str = JSON.toJSONString(v01);"
            ],
            [
                "Integer v01 = -1001;"
            ],
            [
                "String str = JSON.toJSONString(v01);"
            ],
            [
                "Integer v01 = Integer.MAX_VALUE;"
            ],
            [
                "String str = JSON.toJSONString(v01);"
            ],
            [
                "Integer v01 = null;"
            ],
            [
                "String str = JSON.toJSONString(v01);"
            ],
            [
                "Integer v01 = 999999999;"
            ],
            [
                "String str = JSON.toJSONString(v01);"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h3Test0": [
                "Integer v01 = 0;"
            ],
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h3Test1": [
                "String str = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h3Test2": [
                "Integer v01 = -1001;"
            ],
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h3Test3": [
                "Integer v01 = Integer.MAX_VALUE;"
            ],
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h3Test4": [
                "Integer v01 = null;"
            ],
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h3Test5": [
                "Integer v01 = 999999999;"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h3Test0": [
                "Integer v01 = 0;"
            ],
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h3Test1": [
                ""
            ],
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h3Test2": [
                "Integer v01 = -1001;"
            ],
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h3Test3": [
                "Integer v01 = Integer.MAX_VALUE;"
            ],
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h3Test4": [
                "Integer v01 = null;"
            ],
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h3Test5": [
                "Integer v01 = 999999999;"
            ]
        },
        "original_h": [
            "Integer v01 = 1001;"
        ]
    },
    "com.dslplatform.json.DateTest.localTimeBoundary()": {
        "generated_inputs_class": [
            "com.dslplatform.json.DateTest_localTimeBoundary_h3Test0"
        ],
        "generated_all_blocks": [
            [
                "LocalTime now = LocalTime.parse(\"00:00:00\");",
                "JsonWriter jw = dslJson.newWriter(20);",
                "LocalTime[] lts = new LocalTime[2];",
                "Arrays.fill(lts, now);",
                "Class<LocalTime[]> manifest = LocalTime[].class;",
                "byte[] body = { 91, 34, 48, 48, 58, 48, 48, 58, 48, 48, 34, 44, 34, 48, 48, 58, 48, 48, 58, 48, 48, 34, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0 };",
                "int size = 26;"
            ]
        ],
        "selected": {
            "com.dslplatform.json.DateTest_localTimeBoundary_h3Test0": [
                "LocalTime now = LocalTime.parse(\"00:00:00\");",
                "JsonWriter jw = dslJson.newWriter(20);",
                "LocalTime[] lts = new LocalTime[2];",
                "Arrays.fill(lts, now);",
                "Class<LocalTime[]> manifest = LocalTime[].class;",
                "byte[] body = { 91, 34, 48, 48, 58, 48, 48, 58, 48, 48, 34, 44, 34, 48, 48, 58, 48, 48, 58, 48, 48, 34, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0 };",
                "int size = 26;"
            ]
        },
        "processed_generated": {
            "com.dslplatform.json.DateTest_localTimeBoundary_h3Test0": [
                "LocalTime now = LocalTime.parse(\"00:00:00\");",
                "JsonWriter jw = dslJson.newWriter(20);",
                "LocalTime[] lts = new LocalTime[2];",
                "Arrays.fill(lts, now);",
                "byte[] body = { 91, 34, 48, 48, 58, 48, 48, 58, 48, 48, 34, 44, 34, 48, 48, 58, 48, 48, 58, 48, 48, 34, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0 };",
                "int size = 26;"
            ]
        },
        "original_h": [
            "LocalTime now = LocalTime.parse(\"12:13:14.123456789\");",
            "JsonWriter jw = dslJson.newWriter(20);",
            "LocalTime[] lts = new LocalTime[2];",
            "Arrays.fill(lts, now);",
            "byte[] body = { 91, 34, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 34, 44, 34, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 34, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0 };",
            "int size = 43;"
        ]
    },
    "software.amazon.event.ruler.NameStateTest.testNextNameStateWithAdditionalNameStateReuse()": {
        "generated_inputs_class": [
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test0",
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test1",
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test2",
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test3",
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test4",
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test5",
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test6",
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test7",
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test8"
        ],
        "generated_all_blocks": [
            [
                "NameState nameState = new NameState();",
                "NameState nextNameState = new NameState();",
                "String key = \"key\";",
                "String key2 = \"key\";",
                "NameState nameState2 = nameState;"
            ],
            [
                "nameState.addNextNameState(key, nextNameState);",
                "NameState result = nameState2.getNextNameState(key2);",
                "assertEquals(nextNameState, result);"
            ],
            [
                "NameState nextNameState = new NameState();",
                "String key = \"\";"
            ],
            [
                "NameState nameState = new NameState();",
                "nameState.addNextNameState(key, nextNameState);",
                "NameState result = nameState.getNextNameState(key);",
                "assertEquals(nextNameState, result);"
            ],
            [
                "NameState nextNameState = null;",
                "String key = \"key\";"
            ],
            [
                "NameState nameState = new NameState();",
                "nameState.addNextNameState(key, nextNameState);",
                "NameState result = nameState.getNextNameState(key);",
                "assertEquals(nextNameState, result);"
            ],
            [
                "NameState nextNameState = new NameState();",
                "String key = \"key2\";"
            ],
            [
                "NameState nameState = new NameState();",
                "nameState.addNextNameState(key, nextNameState);",
                "String key2 = \"key2\";",
                "NameState result = nameState.getNextNameState(key2);",
                "assertEquals(nextNameState, result);"
            ],
            [
                "NameState nextNameState = new NameState();",
                "String key = \"key\";",
                "nextNameState.addNextNameState(\"key2\", new NameState());"
            ],
            [
                "NameState nameState = new NameState();",
                "nameState.addNextNameState(key, nextNameState);",
                "String key2 = \"key2\";",
                "NameState result = nameState.getNextNameState(key2);",
                "assertNull(result);"
            ]
        ],
        "selected": {
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test0": [
                "NameState nameState = new NameState();",
                "NameState nextNameState = new NameState();",
                "String key = \"key\";",
                "String key2 = \"key\";",
                "NameState nameState2 = nameState;"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test1": [
                "nameState.addNextNameState(key, nextNameState);",
                "NameState result = nameState2.getNextNameState(key2);",
                "assertEquals(nextNameState, result);"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test2": [
                "NameState nextNameState = new NameState();",
                "String key = \"\";"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test3": [
                "NameState nameState = new NameState();",
                "nameState.addNextNameState(key, nextNameState);",
                "NameState result = nameState.getNextNameState(key);",
                "assertEquals(nextNameState, result);"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test4": [
                "NameState nextNameState = null;",
                "String key = \"key\";"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test5": [
                "NameState nextNameState = new NameState();",
                "String key = \"key2\";"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test6": [
                "NameState nameState = new NameState();",
                "nameState.addNextNameState(key, nextNameState);",
                "String key2 = \"key2\";",
                "NameState result = nameState.getNextNameState(key2);",
                "assertEquals(nextNameState, result);"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test7": [
                "NameState nextNameState = new NameState();",
                "String key = \"key\";",
                "nextNameState.addNextNameState(\"key2\", new NameState());"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test8": [
                "NameState nameState = new NameState();",
                "nameState.addNextNameState(key, nextNameState);",
                "String key2 = \"key2\";",
                "NameState result = nameState.getNextNameState(key2);",
                "assertNull(result);"
            ]
        },
        "processed_generated": {
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test0": [
                "NameState nameState = new NameState();",
                "NameState nextNameState = new NameState();",
                "String key = \"key\";",
                "String key2 = \"key\";",
                "NameState nameState2 = nameState;"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test1": [
                ""
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test2": [
                "NameState nextNameState = new NameState();",
                "String key = \"\";"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test3": [
                ""
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test4": [
                "NameState nextNameState = null;",
                "String key = \"key\";"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test5": [
                "NameState nextNameState = new NameState();",
                "String key = \"key2\";"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test6": [
                "String key2 = \"key2\";"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test7": [
                "NameState nextNameState = new NameState();",
                "String key = \"key\";",
                "nextNameState.addNextNameState(\"key2\", new NameState());"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h3Test8": [
                "String key2 = \"key2\";"
            ]
        },
        "original_h": [
            "NameState nameState = new NameState();",
            "NameState nextNameState = new NameState();",
            "String key = \"key\";",
            "String key2 = \"key\";",
            "NameState nameState2 = nameState;"
        ]
    },
    "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest.testGetPlugin()": {
        "generated_inputs_class": [
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h3Test0",
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h3Test1",
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h3Test2",
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h3Test3"
        ],
        "generated_all_blocks": [
            [
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin();",
                "String pluginId = \"TestExecuteAwarePlugin\";"
            ],
            [
                "ThreadPoolPlugin plugin = new AnotherThreadPoolPlugin();",
                "String pluginId = \"AnotherThreadPoolPlugin\";"
            ],
            [
                "ThreadPoolPlugin plugin = null;",
                "String pluginId = \"TestExecuteAwarePlugin\";"
            ],
            [
                "@Test",
                "public void testGetPlugin() {",
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin();",
                "support.register(plugin);",
                "String pluginId = \"TestExecuteAwarePlugin\";",
                "Assert.assertSame(plugin, support.getPlugin(pluginId).orElse(null));",
                "}",
                "",
                "@Test",
                "public void testGetPlugin_NewInputPair0() {",
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin();",
                "support.register(plugin);",
                "String pluginId = \"TestExecuteAwarePlugin\";",
                "Assert.assertSame(plugin, support.getPlugin(pluginId).orElse(null));",
                "}",
                "",
                "@Test",
                "public void testGetPlugin_NewInputPair1() {",
                "ThreadPoolPlugin plugin = new AnotherThreadPoolPlugin();",
                "support.register(plugin);",
                "String pluginId = \"AnotherThreadPoolPlugin\";",
                "Assert.assertSame(plugin, support.getPlugin(pluginId).orElse(null));",
                "}",
                "",
                "@Test",
                "public void testGetPlugin_NewInputPair2() {",
                "ThreadPoolPlugin plugin = null;",
                "support.register(plugin);",
                "String pluginId = \"TestExecuteAwarePlugin\";",
                "Assert.assertNull(support.getPlugin(pluginId).orElse(null));",
                "}"
            ]
        ],
        "selected": {
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h3Test0": [
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin();",
                "String pluginId = \"TestExecuteAwarePlugin\";"
            ],
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h3Test1": [
                "ThreadPoolPlugin plugin = new AnotherThreadPoolPlugin();",
                "String pluginId = \"AnotherThreadPoolPlugin\";"
            ],
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h3Test2": [
                "ThreadPoolPlugin plugin = null;",
                "String pluginId = \"TestExecuteAwarePlugin\";"
            ],
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h3Test3": [
                "@Test",
                "public void testGetPlugin() {",
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin();",
                "support.register(plugin);",
                "String pluginId = \"TestExecuteAwarePlugin\";",
                "Assert.assertSame(plugin, support.getPlugin(pluginId).orElse(null));",
                "}",
                "",
                "@Test",
                "public void testGetPlugin_NewInputPair0() {",
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin();",
                "support.register(plugin);",
                "String pluginId = \"TestExecuteAwarePlugin\";",
                "Assert.assertSame(plugin, support.getPlugin(pluginId).orElse(null));",
                "}",
                "",
                "@Test",
                "public void testGetPlugin_NewInputPair1() {",
                "ThreadPoolPlugin plugin = new AnotherThreadPoolPlugin();",
                "support.register(plugin);",
                "String pluginId = \"AnotherThreadPoolPlugin\";",
                "Assert.assertSame(plugin, support.getPlugin(pluginId).orElse(null));",
                "}",
                "",
                "@Test",
                "public void testGetPlugin_NewInputPair2() {",
                "ThreadPoolPlugin plugin = null;",
                "support.register(plugin);",
                "String pluginId = \"TestExecuteAwarePlugin\";",
                "Assert.assertNull(support.getPlugin(pluginId).orElse(null));",
                "}"
            ]
        },
        "processed_generated": {
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h3Test0": [
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin();",
                "String pluginId = \"TestExecuteAwarePlugin\";"
            ],
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h3Test1": [
                "ThreadPoolPlugin plugin = new AnotherThreadPoolPlugin();",
                "String pluginId = \"AnotherThreadPoolPlugin\";"
            ],
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h3Test2": [
                "ThreadPoolPlugin plugin = null;",
                "String pluginId = \"TestExecuteAwarePlugin\";"
            ],
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h3Test3": [
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin();",
                "String pluginId = \"TestExecuteAwarePlugin\";"
            ]
        },
        "original_h": [
            "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin();",
            "String pluginId = \"TestExecuteAwarePlugin\";"
        ]
    },
    "org.threeten.extra.TestYearHalf.test_withYear()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestYearHalf_test_withYear_h3Test0",
            "org.threeten.extra.TestYearHalf_test_withYear_h3Test1",
            "org.threeten.extra.TestYearHalf_test_withYear_h3Test2",
            "org.threeten.extra.TestYearHalf_test_withYear_h3Test3",
            "org.threeten.extra.TestYearHalf_test_withYear_h3Test4",
            "org.threeten.extra.TestYearHalf_test_withYear_h3Test5"
        ],
        "generated_all_blocks": [
            [
                "int year1 = 2000;",
                "int half1 = 1;",
                "int year2 = 2005;",
                "int year3 = 2005;",
                "int half3 = 1;"
            ],
            [
                "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withYear(year2));"
            ],
            [
                "int year1 = 2021;",
                "int half1 = 2;",
                "int year2 = 2022;",
                "int year3 = 2022;",
                "int half3 = 2;"
            ],
            [
                "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withYear(year2));"
            ],
            [
                "int year1 = 1999;",
                "int half1 = 1;",
                "int year2 = 2000;",
                "int year3 = 2000;",
                "int half3 = 1;"
            ],
            [
                "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withYear(year2));"
            ],
            [
                "int year1 = 2022;",
                "int half1 = 1;",
                "int year2 = 2023;",
                "int year3 = 2023;",
                "int half3 = 1;"
            ],
            [
                "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withYear(year2));"
            ],
            [
                "int year1 = 1900;",
                "int half1 = 2;",
                "int year2 = 1901;",
                "int year3 = 1901;",
                "int half3 = 2;"
            ],
            [
                "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withYear(year2));"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestYearHalf_test_withYear_h3Test0": [
                "int year1 = 2000;",
                "int half1 = 1;",
                "int year2 = 2005;",
                "int year3 = 2005;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h3Test1": [
                "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withYear(year2));"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h3Test2": [
                "int year1 = 2021;",
                "int half1 = 2;",
                "int year2 = 2022;",
                "int year3 = 2022;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h3Test3": [
                "int year1 = 1999;",
                "int half1 = 1;",
                "int year2 = 2000;",
                "int year3 = 2000;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h3Test4": [
                "int year1 = 2022;",
                "int half1 = 1;",
                "int year2 = 2023;",
                "int year3 = 2023;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h3Test5": [
                "int year1 = 1900;",
                "int half1 = 2;",
                "int year2 = 1901;",
                "int year3 = 1901;",
                "int half3 = 2;"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestYearHalf_test_withYear_h3Test0": [
                "int year1 = 2000;",
                "int half1 = 1;",
                "int year2 = 2005;",
                "int year3 = 2005;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h3Test1": [
                ""
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h3Test2": [
                "int year1 = 2021;",
                "int half1 = 2;",
                "int year2 = 2022;",
                "int year3 = 2022;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h3Test3": [
                "int year1 = 1999;",
                "int half1 = 1;",
                "int year2 = 2000;",
                "int year3 = 2000;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h3Test4": [
                "int year1 = 2022;",
                "int half1 = 1;",
                "int year2 = 2023;",
                "int year3 = 2023;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h3Test5": [
                "int year1 = 1900;",
                "int half1 = 2;",
                "int year2 = 1901;",
                "int year3 = 1901;",
                "int half3 = 2;"
            ]
        },
        "original_h": [
            "int year1 = 2007;",
            "int half1 = 2;",
            "int year2 = 2012;",
            "int year3 = 2012;",
            "int half3 = 2;"
        ]
    },
    "io.bootique.di.KeyTest.equals()": {
        "generated_inputs_class": [
            "io.bootique.di.KeyTest_equals_h3Test0",
            "io.bootique.di.KeyTest_equals_h3Test1",
            "io.bootique.di.KeyTest_equals_h3Test2",
            "io.bootique.di.KeyTest_equals_h3Test3",
            "io.bootique.di.KeyTest_equals_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "Class<?> type1 = Integer.class;",
                "Class<?> type2 = Integer.class;"
            ],
            [
                "Class<?> type1 = Double.class;",
                "Class<?> type2 = Double.class;"
            ],
            [
                "Class<?> type1 = List.class;",
                "Class<?> type2 = List.class;"
            ],
            [
                "Class<?> type1 = Map.class;",
                "Class<?> type2 = Map.class;"
            ],
            [
                "Class<?> type1 = MyClass.class;",
                "Class<?> type2 = MyClass.class;"
            ]
        ],
        "selected": {
            "io.bootique.di.KeyTest_equals_h3Test0": [
                "Class<?> type1 = Integer.class;",
                "Class<?> type2 = Integer.class;"
            ],
            "io.bootique.di.KeyTest_equals_h3Test1": [
                "Class<?> type1 = Double.class;",
                "Class<?> type2 = Double.class;"
            ],
            "io.bootique.di.KeyTest_equals_h3Test2": [
                "Class<?> type1 = List.class;",
                "Class<?> type2 = List.class;"
            ],
            "io.bootique.di.KeyTest_equals_h3Test3": [
                "Class<?> type1 = Map.class;",
                "Class<?> type2 = Map.class;"
            ],
            "io.bootique.di.KeyTest_equals_h3Test4": [
                "Class<?> type1 = MyClass.class;",
                "Class<?> type2 = MyClass.class;"
            ]
        },
        "processed_generated": {
            "io.bootique.di.KeyTest_equals_h3Test0": [
                "Class<?> type1 = Integer.class;",
                "Class<?> type2 = Integer.class;"
            ],
            "io.bootique.di.KeyTest_equals_h3Test1": [
                "Class<?> type1 = Double.class;",
                "Class<?> type2 = Double.class;"
            ],
            "io.bootique.di.KeyTest_equals_h3Test2": [
                "Class<?> type1 = List.class;",
                "Class<?> type2 = List.class;"
            ],
            "io.bootique.di.KeyTest_equals_h3Test3": [
                "Class<?> type1 = Map.class;",
                "Class<?> type2 = Map.class;"
            ],
            "io.bootique.di.KeyTest_equals_h3Test4": [
                "Class<?> type1 = MyClass.class;",
                "Class<?> type2 = MyClass.class;"
            ]
        },
        "original_h": [
            "Class<?> type1 = String.class;",
            "Class<?> type2 = String.class;"
        ]
    },
    "org.apache.paimon.spark.ConvertBinaryUtilTest.testConvertToLong()": {
        "generated_inputs_class": [
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h3Test0",
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h3Test1",
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h3Test2",
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h3Test3",
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "String randomString = \"\";",
                "byte[] randomStringBytes = {};"
            ],
            [
                "String randomString = \"12345\";",
                "byte[] randomStringBytes = { 49, 50, 51, 52, 53 };"
            ],
            [
                "String randomString = \"randomString123\";",
                "byte[] randomStringBytes = { 114, 97, 110, 100, 111, 109, 83, 116, 114, 105, 110, 103, 49, 50, 51 };"
            ],
            [
                "String randomString = \" \";",
                "byte[] randomStringBytes = { 32 };"
            ],
            [
                "String randomString = \"randomString!@#$\";",
                "byte[] randomStringBytes = { 114, 97, 110, 100, 111, 109, 83, 116, 114, 105, 110, 103, 33, 64, 35, 36 };"
            ]
        ],
        "selected": {
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h3Test0": [
                "String randomString = \"\";",
                "byte[] randomStringBytes = {};"
            ],
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h3Test1": [
                "String randomString = \"12345\";",
                "byte[] randomStringBytes = { 49, 50, 51, 52, 53 };"
            ],
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h3Test2": [
                "String randomString = \"randomString123\";",
                "byte[] randomStringBytes = { 114, 97, 110, 100, 111, 109, 83, 116, 114, 105, 110, 103, 49, 50, 51 };"
            ],
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h3Test3": [
                "String randomString = \" \";",
                "byte[] randomStringBytes = { 32 };"
            ],
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h3Test4": [
                "String randomString = \"randomString!@#$\";",
                "byte[] randomStringBytes = { 114, 97, 110, 100, 111, 109, 83, 116, 114, 105, 110, 103, 33, 64, 35, 36 };"
            ]
        },
        "processed_generated": {
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h3Test0": [
                "String randomString = \"\";",
                "byte[] randomStringBytes = {};"
            ],
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h3Test1": [
                "String randomString = \"12345\";",
                "byte[] randomStringBytes = { 49, 50, 51, 52, 53 };"
            ],
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h3Test2": [
                "String randomString = \"randomString123\";",
                "byte[] randomStringBytes = { 114, 97, 110, 100, 111, 109, 83, 116, 114, 105, 110, 103, 49, 50, 51 };"
            ],
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h3Test3": [
                "String randomString = \" \";",
                "byte[] randomStringBytes = { 32 };"
            ],
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h3Test4": [
                "String randomString = \"randomString!@#$\";",
                "byte[] randomStringBytes = { 114, 97, 110, 100, 111, 109, 83, 116, 114, 105, 110, 103, 33, 64, 35, 36 };"
            ]
        },
        "original_h": [
            "String randomString = \"randomString\";",
            "byte[] randomStringBytes = { 114, 97, 110, 100, 111, 109, 83, 116, 114, 105, 110, 103 };"
        ]
    },
    "software.amazon.event.ruler.SubRuleContextTest.testEquals()": {
        "generated_inputs_class": [
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h3Test0",
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h3Test1",
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h3Test2",
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h3Test3",
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "String NAME = \"name\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"name\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            [
                "String NAME = \"anotherName\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"anotherName\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            [
                "String NAME = \"\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            [
                "String NAME = null;",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = null;",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            [
                "String NAME = new String(\"name\");",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = new String(\"name\");",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ]
        ],
        "selected": {
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h3Test0": [
                "String NAME = \"name\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"name\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h3Test1": [
                "String NAME = \"anotherName\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"anotherName\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h3Test2": [
                "String NAME = \"\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h3Test3": [
                "String NAME = null;",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = null;",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h3Test4": [
                "String NAME = new String(\"name\");",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = new String(\"name\");",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ]
        },
        "processed_generated": {
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h3Test0": [
                "String NAME = \"name\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"name\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h3Test1": [
                "String NAME = \"anotherName\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"anotherName\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h3Test2": [
                "String NAME = \"\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h3Test3": [
                "String NAME = null;",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = null;",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h3Test4": [
                "String NAME = new String(\"name\");",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = new String(\"name\");",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ]
        },
        "original_h": [
            "String NAME = \"name\";",
            "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
            "String NAME2 = \"name\";",
            "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test3()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h3Test0",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h3Test1",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h3Test2",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h3Test3"
        ],
        "generated_all_blocks": [
            [
                "String str2 = \"{\\\"103\\\":true,\\\"104\\\":true}\";",
                "Map<String, Boolean> v02 = JSON.parseObject(str2, new TypeReference<Map<String, Boolean>>() {",
                "}.getType());"
            ],
            [
                "String str2 = \"{\\\"105\\\":false,\\\"106\\\":true,\\\"107\\\":false}\";",
                "Map<String, Boolean> v02 = JSON.parseObject(str2, new TypeReference<Map<String, Boolean>>() {",
                "}.getType());"
            ],
            [
                "String str2 = \"{}\";",
                "Map<String, Boolean> v02 = JSON.parseObject(str2, new TypeReference<Map<String, Boolean>>() {",
                "}.getType());"
            ],
            [
                "String str2 = \"{\\\"109\\\":null}\";",
                "Map<String, Boolean> v02 = JSON.parseObject(str2, new TypeReference<Map<String, Boolean>>() {",
                "}.getType());"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h3Test0": [
                "String str2 = \"{\\\"103\\\":true,\\\"104\\\":true}\";",
                "Map<String, Boolean> v02 = JSON.parseObject(str2, new TypeReference<Map<String, Boolean>>() {",
                "}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h3Test1": [
                "String str2 = \"{\\\"105\\\":false,\\\"106\\\":true,\\\"107\\\":false}\";",
                "Map<String, Boolean> v02 = JSON.parseObject(str2, new TypeReference<Map<String, Boolean>>() {",
                "}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h3Test2": [
                "String str2 = \"{}\";",
                "Map<String, Boolean> v02 = JSON.parseObject(str2, new TypeReference<Map<String, Boolean>>() {",
                "}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h3Test3": [
                "String str2 = \"{\\\"109\\\":null}\";",
                "Map<String, Boolean> v02 = JSON.parseObject(str2, new TypeReference<Map<String, Boolean>>() {",
                "}.getType());"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h3Test0": [
                "String str2 = \"{\\\"103\\\":true,\\\"104\\\":true}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h3Test1": [
                "String str2 = \"{\\\"105\\\":false,\\\"106\\\":true,\\\"107\\\":false}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h3Test2": [
                "String str2 = \"{}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h3Test3": [
                "String str2 = \"{\\\"109\\\":null}\";"
            ]
        },
        "original_h": [
            "Map<String, Boolean> v01 = new HashMap<>();",
            "v01.put(\"101\", true);",
            "v01.put(\"102\", false);"
        ]
    },
    "org.quartz.impl.RemoteMBeanSchedulerTest.testJobOperations()": {
        "generated_inputs_class": [
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test0",
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test1",
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test2",
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test3",
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().build();",
                "JobKey job22 = new JobKey(\"job2\", GROUP_KEY);"
            ],
            [
                "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().usingJobData(\"key1\", \"value1\").build();",
                "JobKey job22 = new JobKey(\"job2\", GROUP_KEY);"
            ],
            [
                "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().withDescription(\"Job Description\").build();",
                "JobKey job22 = new JobKey(\"job2\", GROUP_KEY);"
            ],
            [
                "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().usingJobData(\"key1\", \"value1\").withDescription(\"Job Description\").build();",
                "JobKey job22 = new JobKey(\"job2\", GROUP_KEY);"
            ],
            [
                "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().usingJobData(\"key1\", \"value1\").withDescription(\"Job Description\").usingJobData(\"key2\", \"value2\").build();",
                "JobKey job22 = new JobKey(\"job2\", GROUP_KEY);"
            ]
        ],
        "selected": {
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test0": [
                "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().build();",
                "JobKey job22 = new JobKey(\"job2\", GROUP_KEY);"
            ],
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test1": [
                "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().usingJobData(\"key1\", \"value1\").build();",
                "JobKey job22 = new JobKey(\"job2\", GROUP_KEY);"
            ],
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test2": [
                "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().withDescription(\"Job Description\").build();",
                "JobKey job22 = new JobKey(\"job2\", GROUP_KEY);"
            ],
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test3": [
                "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().usingJobData(\"key1\", \"value1\").withDescription(\"Job Description\").build();",
                "JobKey job22 = new JobKey(\"job2\", GROUP_KEY);"
            ],
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test4": [
                "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().usingJobData(\"key1\", \"value1\").withDescription(\"Job Description\").usingJobData(\"key2\", \"value2\").build();",
                "JobKey job22 = new JobKey(\"job2\", GROUP_KEY);"
            ]
        },
        "processed_generated": {
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test0": [
                "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().build();",
                "JobKey job22 = new JobKey(\"job2\", GROUP_KEY);"
            ],
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test1": [
                "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().usingJobData(\"key1\", \"value1\").build();",
                "JobKey job22 = new JobKey(\"job2\", GROUP_KEY);"
            ],
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test2": [
                "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().withDescription(\"Job Description\").build();",
                "JobKey job22 = new JobKey(\"job2\", GROUP_KEY);"
            ],
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test3": [
                "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().usingJobData(\"key1\", \"value1\").withDescription(\"Job Description\").build();",
                "JobKey job22 = new JobKey(\"job2\", GROUP_KEY);"
            ],
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test4": [
                "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().usingJobData(\"key1\", \"value1\").withDescription(\"Job Description\").usingJobData(\"key2\", \"value2\").build();",
                "JobKey job22 = new JobKey(\"job2\", GROUP_KEY);"
            ]
        },
        "original_h": [
            "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().build();",
            "JobKey job22 = new JobKey(\"job2\", GROUP_KEY);"
        ]
    },
    "org.threeten.extra.TestYearHalf.test_withHalf_int()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h3Test0",
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h3Test1",
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h3Test2",
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h3Test3",
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "int year1 = 2007;",
                "int half1 = 1;",
                "int half2 = 1;",
                "int year3 = 2007;",
                "int half3 = 1;"
            ],
            [
                "int year1 = 2022;",
                "int half1 = 2;",
                "int half2 = 2;",
                "int year3 = 2022;",
                "int half3 = 2;"
            ],
            [
                "int year1 = 1999;",
                "int half1 = 1;",
                "int half2 = 2;",
                "int year3 = 1999;",
                "int half3 = 2;"
            ],
            [
                "int year1 = 2025;",
                "int half1 = 1;",
                "int half2 = 2;",
                "int year3 = 2025;",
                "int half3 = 2;"
            ],
            [
                "int year1 = 2030;",
                "int half1 = 2;",
                "int half2 = 1;",
                "int year3 = 2030;",
                "int half3 = 1;"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h3Test0": [
                "int year1 = 2007;",
                "int half1 = 1;",
                "int half2 = 1;",
                "int year3 = 2007;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h3Test1": [
                "int year1 = 2022;",
                "int half1 = 2;",
                "int half2 = 2;",
                "int year3 = 2022;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h3Test2": [
                "int year1 = 1999;",
                "int half1 = 1;",
                "int half2 = 2;",
                "int year3 = 1999;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h3Test3": [
                "int year1 = 2025;",
                "int half1 = 1;",
                "int half2 = 2;",
                "int year3 = 2025;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h3Test4": [
                "int year1 = 2030;",
                "int half1 = 2;",
                "int half2 = 1;",
                "int year3 = 2030;",
                "int half3 = 1;"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h3Test0": [
                "int year1 = 2007;",
                "int half1 = 1;",
                "int half2 = 1;",
                "int year3 = 2007;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h3Test1": [
                "int year1 = 2022;",
                "int half1 = 2;",
                "int half2 = 2;",
                "int year3 = 2022;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h3Test2": [
                "int year1 = 1999;",
                "int half1 = 1;",
                "int half2 = 2;",
                "int year3 = 1999;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h3Test3": [
                "int year1 = 2025;",
                "int half1 = 1;",
                "int half2 = 2;",
                "int year3 = 2025;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h3Test4": [
                "int year1 = 2030;",
                "int half1 = 2;",
                "int half2 = 1;",
                "int year3 = 2030;",
                "int half3 = 1;"
            ]
        },
        "original_h": [
            "int year1 = 2007;",
            "int half1 = 2;",
            "int half2 = 1;",
            "int year3 = 2007;",
            "int half3 = 1;"
        ]
    },
    "org.tsugi.util.Base64DoubleUrlEncodeSafeTest.testEncodeAndDecode()": {
        "generated_inputs_class": [
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h3Test0",
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h3Test1",
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h3Test2",
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h3Test3",
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "String input = \"\";",
                "String encoded2 = \"\";"
            ],
            [
                "String input = \"1234567890\";",
                "String encoded2 = \"MTIzNDU2Nzg5MA==\";"
            ],
            [
                "String input = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                "String encoded2 = \"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWg==\";"
            ],
            [
                "String input = \" !@#$%^&*()_+-={}[]:\\\";'<>?,./\";",
                "String encoded2 = \"ICFAIyQlXiYqKClfKy09e30rXC0+OiI7JycuLw==\";"
            ],
            [
                "String input = \"Hello, World!\";",
                "String encoded2 = \"SGVsbG8sIFdvcmxkIQ==\";"
            ]
        ],
        "selected": {
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h3Test0": [
                "String input = \"\";",
                "String encoded2 = \"\";"
            ],
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h3Test1": [
                "String input = \"1234567890\";",
                "String encoded2 = \"MTIzNDU2Nzg5MA==\";"
            ],
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h3Test2": [
                "String input = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                "String encoded2 = \"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWg==\";"
            ],
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h3Test3": [
                "String input = \" !@#$%^&*()_+-={}[]:\\\";'<>?,./\";",
                "String encoded2 = \"ICFAIyQlXiYqKClfKy09e30rXC0+OiI7JycuLw==\";"
            ],
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h3Test4": [
                "String input = \"Hello, World!\";",
                "String encoded2 = \"SGVsbG8sIFdvcmxkIQ==\";"
            ]
        },
        "processed_generated": {
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h3Test0": [
                "String input = \"\";",
                "String encoded2 = \"\";"
            ],
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h3Test1": [
                "String input = \"1234567890\";",
                "String encoded2 = \"MTIzNDU2Nzg5MA==\";"
            ],
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h3Test2": [
                "String input = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
                "String encoded2 = \"YWJjZGVmZ2hpamtsbW5vcHFyc3R1dnd4eXpBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWg==\";"
            ],
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h3Test3": [
                "String input = \" !@#$%^&*()_+-={}[]:\\\";'<>?,./\";",
                "String encoded2 = \"ICFAIyQlXiYqKClfKy09e30rXC0+OiI7JycuLw==\";"
            ],
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h3Test4": [
                "String input = \"Hello, World!\";",
                "String encoded2 = \"SGVsbG8sIFdvcmxkIQ==\";"
            ]
        },
        "original_h": [
            "String input = \"Hello, Base64DoubleUrlEncodeSafe!\";",
            "String encoded2 = \"SGVsbG8sIEJhc2U2NERvdWJsZVVybEVuY29kZVNhZmUh\";"
        ]
    },
    "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase.returnsMuleLoggerContextForInternalArtifactClassLoader()": {
        "generated_inputs_class": [
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h3Test0",
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h3Test1",
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h3Test2",
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h3Test3",
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = true;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            [
                "String fqcn = \"org.apache.commons.logging.Log\";",
                "boolean currentContext = false;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = \"org.apache.commons.logging.Log\";",
                "boolean currentContext2 = false;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            [
                "String fqcn = \"java.lang.String\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = ClassLoader.getSystemClassLoader();",
                "String fqcn2 = \"java.lang.String\";",
                "boolean currentContext2 = true;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], ClassLoader.getSystemClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            [
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = false;",
                "ClassLoader systemLoader = ClassLoader.getSystemClassLoader();",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = false;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], ClassLoader.getSystemClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            [
                "String fqcn = \"org.slf4j.Logger\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = null;",
                "String fqcn2 = \"org.slf4j.Logger\";",
                "boolean currentContext2 = true;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], null, mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ]
        ],
        "selected": {
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h3Test0": [
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = true;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h3Test1": [
                "String fqcn = \"org.apache.commons.logging.Log\";",
                "boolean currentContext = false;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = \"org.apache.commons.logging.Log\";",
                "boolean currentContext2 = false;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h3Test2": [
                "String fqcn = \"java.lang.String\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = ClassLoader.getSystemClassLoader();",
                "String fqcn2 = \"java.lang.String\";",
                "boolean currentContext2 = true;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], ClassLoader.getSystemClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h3Test3": [
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = false;",
                "ClassLoader systemLoader = ClassLoader.getSystemClassLoader();",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = false;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], ClassLoader.getSystemClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h3Test4": [
                "String fqcn = \"org.slf4j.Logger\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = null;",
                "String fqcn2 = \"org.slf4j.Logger\";",
                "boolean currentContext2 = true;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], null, mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ]
        },
        "processed_generated": {
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h3Test0": [
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = true;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h3Test1": [
                "String fqcn = \"org.apache.commons.logging.Log\";",
                "boolean currentContext = false;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = \"org.apache.commons.logging.Log\";",
                "boolean currentContext2 = false;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h3Test2": [
                "String fqcn = \"java.lang.String\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = ClassLoader.getSystemClassLoader();",
                "String fqcn2 = \"java.lang.String\";",
                "boolean currentContext2 = true;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], ClassLoader.getSystemClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h3Test3": [
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = false;",
                "ClassLoader systemLoader = ClassLoader.getSystemClassLoader();",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = false;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], ClassLoader.getSystemClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h3Test4": [
                "String fqcn = \"org.slf4j.Logger\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = null;",
                "String fqcn2 = \"org.slf4j.Logger\";",
                "boolean currentContext2 = true;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], null, mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ]
        },
        "original_h": [
            "String fqcn = \"\";",
            "boolean currentContext = true;",
            "ClassLoader systemLoader = this.getClass().getClassLoader();",
            "String fqcn2 = \"\";",
            "boolean currentContext2 = true;",
            "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));",
            "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
        ]
    },
    "org.jsoup.parser.StreamParserTest.select()": {
        "generated_inputs_class": [
            "org.jsoup.parser.StreamParserTest_select_h3Test0",
            "org.jsoup.parser.StreamParserTest_select_h3Test1",
            "org.jsoup.parser.StreamParserTest_select_h3Test2",
            "org.jsoup.parser.StreamParserTest_select_h3Test3",
            "org.jsoup.parser.StreamParserTest_select_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"p\";",
                "String queryTitle2 = \"p\";"
            ],
            [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"p[id=1]\";",
                "String queryTitle2 = \"p[id=1]\";"
            ],
            [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"p:contains(P One)\";",
                "String queryTitle2 = \"p:contains(P One)\";"
            ],
            [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"p:first-child\";",
                "String queryTitle2 = \"p:first-child\";"
            ],
            [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"p:nth-child(2)\";",
                "String queryTitle2 = \"p:nth-child(2)\";"
            ]
        ],
        "selected": {
            "org.jsoup.parser.StreamParserTest_select_h3Test0": [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"p\";",
                "String queryTitle2 = \"p\";"
            ],
            "org.jsoup.parser.StreamParserTest_select_h3Test1": [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"p[id=1]\";",
                "String queryTitle2 = \"p[id=1]\";"
            ],
            "org.jsoup.parser.StreamParserTest_select_h3Test2": [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"p:contains(P One)\";",
                "String queryTitle2 = \"p:contains(P One)\";"
            ],
            "org.jsoup.parser.StreamParserTest_select_h3Test3": [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"p:first-child\";",
                "String queryTitle2 = \"p:first-child\";"
            ],
            "org.jsoup.parser.StreamParserTest_select_h3Test4": [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"p:nth-child(2)\";",
                "String queryTitle2 = \"p:nth-child(2)\";"
            ]
        },
        "processed_generated": {
            "org.jsoup.parser.StreamParserTest_select_h3Test0": [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"p\";",
                "String queryTitle2 = \"p\";"
            ],
            "org.jsoup.parser.StreamParserTest_select_h3Test1": [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"p[id=1]\";",
                "String queryTitle2 = \"p[id=1]\";"
            ],
            "org.jsoup.parser.StreamParserTest_select_h3Test2": [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"p:contains(P One)\";",
                "String queryTitle2 = \"p:contains(P One)\";"
            ],
            "org.jsoup.parser.StreamParserTest_select_h3Test3": [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"p:first-child\";",
                "String queryTitle2 = \"p:first-child\";"
            ],
            "org.jsoup.parser.StreamParserTest_select_h3Test4": [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"p:nth-child(2)\";",
                "String queryTitle2 = \"p:nth-child(2)\";"
            ]
        },
        "original_h": [
            "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
            "String queryTitle = \"title\";",
            "String queryTitle2 = \"title\";"
        ]
    },
    "org.openscience.cdk.AssociationTest.testGetAtomAt()": {
        "generated_inputs_class": [
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h3Test0"
        ],
        "generated_all_blocks": [
            [
                "Atom c = new Atom(\"C\");",
                "Atom o = new Atom(\"O\");",
                "Atom n = new Atom(\"N\");",
                "Association association = new Association(c, o);",
                "int position = 1;",
                "Association association2 = new Association(c, n);",
                "int position2 = 1;"
            ]
        ],
        "selected": {
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h3Test0": [
                "Atom c = new Atom(\"C\");",
                "Atom o = new Atom(\"O\");",
                "Atom n = new Atom(\"N\");",
                "Association association = new Association(c, o);",
                "int position = 1;",
                "Association association2 = new Association(c, n);",
                "int position2 = 1;"
            ]
        },
        "processed_generated": {
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h3Test0": [
                "Atom c = new Atom(\"C\");",
                "Atom o = new Atom(\"O\");",
                "Atom n = new Atom(\"N\");",
                "Association association = new Association(c, o);",
                "int position = 1;",
                "Association association2 = new Association(c, n);",
                "int position2 = 1;"
            ]
        },
        "original_h": [
            "Atom c = new Atom(\"C\");",
            "Atom o = new Atom(\"O\");",
            "Atom n = new Atom(\"N\");",
            "Association association = new Association(c, o);",
            "int position = 0;",
            "Association association2 = new Association(n, o);",
            "int position2 = 0;"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test4()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test0",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test1",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test2",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test3",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test4",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test5",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test6",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test7",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test8",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test9",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test10",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test11",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test12",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test13",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test14",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test15",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test16",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test17",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test18",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test19"
        ],
        "generated_all_blocks": [
            [
                "String str2 = \"{\\\"101\\\":1.0,\\\"102\\\":2.0,\\\"103\\\":3.0,\\\"104\\\":4.0}\";",
                "Map<String, Float> mapType = new HashMap<>();",
                "mapType.put(\"101\", 1.0F);",
                "mapType.put(\"102\", 2.0F);",
                "mapType.put(\"103\", 3.0F);",
                "mapType.put(\"104\", 4.0F);"
            ],
            [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", 1F);",
                "v01.put(\"102\", 2F);"
            ],
            [
                "String str2 = \"{\\\"101\\\":1.0,\\\"102\\\":2.0,\\\"103\\\":3.0,\\\"104\\\":4.0}\";"
            ],
            [
                "Map<String, Float> mapType = new HashMap<>();",
                "mapType.put(\"101\", 1.0F);",
                "mapType.put(\"102\", 2.0F);",
                "mapType.put(\"103\", 3.0F);",
                "mapType.put(\"104\", 4.0F);"
            ],
            [
                "String str2 = \"{\\\"101\\\":1.5,\\\"102\\\":2.5}\";",
                "Map<String, Float> mapType = new HashMap<>();",
                "mapType.put(\"101\", 1.5F);",
                "mapType.put(\"102\", 2.5F);"
            ],
            [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", 1.5F);",
                "v01.put(\"102\", 2.5F);"
            ],
            [
                "String str2 = \"{\\\"101\\\":1.5,\\\"102\\\":2.5}\";"
            ],
            [
                "Map<String, Float> mapType = new HashMap<>();",
                "mapType.put(\"101\", 1.5F);",
                "mapType.put(\"102\", 2.5F);"
            ],
            [
                "String str2 = \"{\\\"105\\\":5.0}\";",
                "Map<String, Float> mapType = new HashMap<>();",
                "mapType.put(\"105\", 5.0F);"
            ],
            [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"105\", 5F);"
            ],
            [
                "String str2 = \"{\\\"105\\\":5.0}\";"
            ],
            [
                "Map<String, Float> mapType = new HashMap<>();",
                "mapType.put(\"105\", 5.0F);"
            ],
            [
                "String str2 = \"{}\";",
                "Map<String, Float> mapType = new HashMap<>();"
            ],
            [
                "Map<String, Float> v01 = new HashMap<>();"
            ],
            [
                "String str2 = \"{}\";"
            ],
            [
                "Map<String, Float> mapType = new HashMap<>();"
            ],
            [
                "String str2 = \"{\\\"101\\\":null,\\\"102\\\":null}\";",
                "Map<String, Float> mapType = new HashMap<>();",
                "mapType.put(\"101\", null);",
                "mapType.put(\"102\", null);"
            ],
            [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", null);",
                "v01.put(\"102\", null);"
            ],
            [
                "String str2 = \"{\\\"101\\\":null,\\\"102\\\":null}\";"
            ],
            [
                "Map<String, Float> mapType = new HashMap<>();",
                "mapType.put(\"101\", null);",
                "mapType.put(\"102\", null);"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test0": [
                "String str2 = \"{\\\"101\\\":1.0,\\\"102\\\":2.0,\\\"103\\\":3.0,\\\"104\\\":4.0}\";",
                "Map<String, Float> mapType = new HashMap<>();",
                "mapType.put(\"101\", 1.0F);",
                "mapType.put(\"102\", 2.0F);",
                "mapType.put(\"103\", 3.0F);",
                "mapType.put(\"104\", 4.0F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test1": [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", 1F);",
                "v01.put(\"102\", 2F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test2": [
                "String str2 = \"{\\\"101\\\":1.0,\\\"102\\\":2.0,\\\"103\\\":3.0,\\\"104\\\":4.0}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test3": [
                "Map<String, Float> mapType = new HashMap<>();",
                "mapType.put(\"101\", 1.0F);",
                "mapType.put(\"102\", 2.0F);",
                "mapType.put(\"103\", 3.0F);",
                "mapType.put(\"104\", 4.0F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test4": [
                "String str2 = \"{\\\"101\\\":1.5,\\\"102\\\":2.5}\";",
                "Map<String, Float> mapType = new HashMap<>();",
                "mapType.put(\"101\", 1.5F);",
                "mapType.put(\"102\", 2.5F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test5": [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", 1.5F);",
                "v01.put(\"102\", 2.5F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test6": [
                "String str2 = \"{\\\"101\\\":1.5,\\\"102\\\":2.5}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test7": [
                "Map<String, Float> mapType = new HashMap<>();",
                "mapType.put(\"101\", 1.5F);",
                "mapType.put(\"102\", 2.5F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test8": [
                "String str2 = \"{\\\"105\\\":5.0}\";",
                "Map<String, Float> mapType = new HashMap<>();",
                "mapType.put(\"105\", 5.0F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test9": [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"105\", 5F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test10": [
                "String str2 = \"{\\\"105\\\":5.0}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test11": [
                "Map<String, Float> mapType = new HashMap<>();",
                "mapType.put(\"105\", 5.0F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test12": [
                "String str2 = \"{}\";",
                "Map<String, Float> mapType = new HashMap<>();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test13": [
                "Map<String, Float> v01 = new HashMap<>();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test14": [
                "String str2 = \"{}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test15": [
                "Map<String, Float> mapType = new HashMap<>();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test16": [
                "String str2 = \"{\\\"101\\\":null,\\\"102\\\":null}\";",
                "Map<String, Float> mapType = new HashMap<>();",
                "mapType.put(\"101\", null);",
                "mapType.put(\"102\", null);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test17": [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", null);",
                "v01.put(\"102\", null);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test18": [
                "String str2 = \"{\\\"101\\\":null,\\\"102\\\":null}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test19": [
                "Map<String, Float> mapType = new HashMap<>();",
                "mapType.put(\"101\", null);",
                "mapType.put(\"102\", null);"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test0": [
                "String str2 = \"{\\\"101\\\":1.0,\\\"102\\\":2.0,\\\"103\\\":3.0,\\\"104\\\":4.0}\";",
                "mapType.put(\"101\", 1.0F);",
                "mapType.put(\"102\", 2.0F);",
                "mapType.put(\"103\", 3.0F);",
                "mapType.put(\"104\", 4.0F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test1": [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", 1F);",
                "v01.put(\"102\", 2F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test2": [
                "String str2 = \"{\\\"101\\\":1.0,\\\"102\\\":2.0,\\\"103\\\":3.0,\\\"104\\\":4.0}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test3": [
                "mapType.put(\"101\", 1.0F);",
                "mapType.put(\"102\", 2.0F);",
                "mapType.put(\"103\", 3.0F);",
                "mapType.put(\"104\", 4.0F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test4": [
                "String str2 = \"{\\\"101\\\":1.5,\\\"102\\\":2.5}\";",
                "mapType.put(\"101\", 1.5F);",
                "mapType.put(\"102\", 2.5F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test5": [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", 1.5F);",
                "v01.put(\"102\", 2.5F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test6": [
                "String str2 = \"{\\\"101\\\":1.5,\\\"102\\\":2.5}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test7": [
                "mapType.put(\"101\", 1.5F);",
                "mapType.put(\"102\", 2.5F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test8": [
                "String str2 = \"{\\\"105\\\":5.0}\";",
                "mapType.put(\"105\", 5.0F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test9": [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"105\", 5F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test10": [
                "String str2 = \"{\\\"105\\\":5.0}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test11": [
                "mapType.put(\"105\", 5.0F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test12": [
                "String str2 = \"{}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test13": [
                "Map<String, Float> v01 = new HashMap<>();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test14": [
                "String str2 = \"{}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test15": [
                ""
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test16": [
                "String str2 = \"{\\\"101\\\":null,\\\"102\\\":null}\";",
                "mapType.put(\"101\", null);",
                "mapType.put(\"102\", null);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test17": [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", null);",
                "v01.put(\"102\", null);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test18": [
                "String str2 = \"{\\\"101\\\":null,\\\"102\\\":null}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h3Test19": [
                "mapType.put(\"101\", null);",
                "mapType.put(\"102\", null);"
            ]
        },
        "original_h": [
            "Map<String, Float> v01 = new HashMap<>();",
            "v01.put(\"101\", 1F);",
            "v01.put(\"102\", 2F);"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest.test()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h3Test0"
        ],
        "generated_all_blocks": [
            [
                "JSONArray v01 = new JSONArray();",
                "String str2 = JSON.toJSONString(v01);"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h3Test0": [
                "JSONArray v01 = new JSONArray();",
                "String str2 = JSON.toJSONString(v01);"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h3Test0": [
                "JSONArray v01 = new JSONArray();",
                "String str2 = JSON.toJSONString(v01);"
            ]
        },
        "original_h": [
            "JSONArray v01 = new JSONArray();"
        ]
    },
    "com.thealgorithms.datastructures.crdt.LWWElementSetTest.testCompareDifferentSets()": {
        "generated_inputs_class": [
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h3Test0",
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h3Test1",
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h3Test2",
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h3Test3",
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h3Test4",
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h3Test5"
        ],
        "generated_all_blocks": [
            [
                "Element element1 = new Element(\"key1\", 1, bias);",
                "Element element2 = new Element(\"key2\", 2, bias);"
            ],
            [
                "Element element1 = new Element(\"key1\", 0, bias);",
                "Element element2 = new Element(\"key2\", 2, bias);"
            ],
            [
                "Element element1 = new Element(\"key1\", Integer.MAX_VALUE, bias);",
                "Element element2 = new Element(\"key2\", 2, bias);"
            ],
            [
                "Element element1 = new Element(\"key1\", 100, bias);",
                "Element element2 = new Element(\"key2\", 2, bias);"
            ],
            [
                "Element element1 = new Element(\"key1\", -1, bias);",
                "Element element2 = new Element(\"key2\", 2, bias);"
            ],
            [
                "Element element1 = new Element(\"key1\", Integer.MIN_VALUE, bias);",
                "Element element2 = new Element(\"key2\", 2, bias);"
            ]
        ],
        "selected": {
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h3Test0": [
                "Element element1 = new Element(\"key1\", 1, bias);",
                "Element element2 = new Element(\"key2\", 2, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h3Test1": [
                "Element element1 = new Element(\"key1\", 0, bias);",
                "Element element2 = new Element(\"key2\", 2, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h3Test2": [
                "Element element1 = new Element(\"key1\", Integer.MAX_VALUE, bias);",
                "Element element2 = new Element(\"key2\", 2, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h3Test3": [
                "Element element1 = new Element(\"key1\", 100, bias);",
                "Element element2 = new Element(\"key2\", 2, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h3Test4": [
                "Element element1 = new Element(\"key1\", -1, bias);",
                "Element element2 = new Element(\"key2\", 2, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h3Test5": [
                "Element element1 = new Element(\"key1\", Integer.MIN_VALUE, bias);",
                "Element element2 = new Element(\"key2\", 2, bias);"
            ]
        },
        "processed_generated": {
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h3Test0": [
                "Element element1 = new Element(\"key1\", 1, bias);",
                "Element element2 = new Element(\"key2\", 2, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h3Test1": [
                "Element element1 = new Element(\"key1\", 0, bias);",
                "Element element2 = new Element(\"key2\", 2, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h3Test2": [
                "Element element1 = new Element(\"key1\", Integer.MAX_VALUE, bias);",
                "Element element2 = new Element(\"key2\", 2, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h3Test3": [
                "Element element1 = new Element(\"key1\", 100, bias);",
                "Element element2 = new Element(\"key2\", 2, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h3Test4": [
                "Element element1 = new Element(\"key1\", -1, bias);",
                "Element element2 = new Element(\"key2\", 2, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h3Test5": [
                "Element element1 = new Element(\"key1\", Integer.MIN_VALUE, bias);",
                "Element element2 = new Element(\"key2\", 2, bias);"
            ]
        },
        "original_h": [
            "Element element1 = new Element(\"key1\", 1, bias);",
            "Element element2 = new Element(\"key2\", 2, bias);"
        ]
    },
    "org.opentripplanner.framework.token.FieldDefinitionTest.testEqualsAndHashCode()": {
        "generated_inputs_class": [
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h3Test0",
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h3Test1",
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h3Test2",
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h3Test3",
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "FieldDefinition subject = new FieldDefinition(\"\", TokenType.STRING);",
                "FieldDefinition other3 = new FieldDefinition(\"\", TokenType.STRING).deprecate();"
            ],
            [
                "FieldDefinition subject = new FieldDefinition(\"foo\", null);",
                "FieldDefinition other3 = new FieldDefinition(\"foo\", null).deprecate();"
            ],
            [
                "FieldDefinition subject = new FieldDefinition(null, TokenType.STRING);",
                "FieldDefinition other3 = new FieldDefinition(null, TokenType.STRING).deprecate();"
            ],
            [
                "FieldDefinition subject = new FieldDefinition(\"foo\", TokenType.STRING).deprecate();",
                "FieldDefinition other3 = new FieldDefinition(\"foo\", TokenType.STRING).deprecate();"
            ],
            [
                "FieldDefinition subject = new FieldDefinition(\"foo\", TokenType.STRING).deprecate().deprecate();",
                "FieldDefinition other3 = new FieldDefinition(\"foo\", TokenType.STRING).deprecate().deprecate();"
            ]
        ],
        "selected": {
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h3Test0": [
                "FieldDefinition subject = new FieldDefinition(\"\", TokenType.STRING);",
                "FieldDefinition other3 = new FieldDefinition(\"\", TokenType.STRING).deprecate();"
            ],
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h3Test1": [
                "FieldDefinition subject = new FieldDefinition(\"foo\", null);",
                "FieldDefinition other3 = new FieldDefinition(\"foo\", null).deprecate();"
            ],
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h3Test2": [
                "FieldDefinition subject = new FieldDefinition(null, TokenType.STRING);",
                "FieldDefinition other3 = new FieldDefinition(null, TokenType.STRING).deprecate();"
            ],
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h3Test3": [
                "FieldDefinition subject = new FieldDefinition(\"foo\", TokenType.STRING).deprecate();",
                "FieldDefinition other3 = new FieldDefinition(\"foo\", TokenType.STRING).deprecate();"
            ],
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h3Test4": [
                "FieldDefinition subject = new FieldDefinition(\"foo\", TokenType.STRING).deprecate().deprecate();",
                "FieldDefinition other3 = new FieldDefinition(\"foo\", TokenType.STRING).deprecate().deprecate();"
            ]
        },
        "processed_generated": {
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h3Test0": [
                "FieldDefinition subject = new FieldDefinition(\"\", TokenType.STRING);",
                "FieldDefinition other3 = new FieldDefinition(\"\", TokenType.STRING).deprecate();"
            ],
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h3Test1": [
                "FieldDefinition subject = new FieldDefinition(\"foo\", null);",
                "FieldDefinition other3 = new FieldDefinition(\"foo\", null).deprecate();"
            ],
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h3Test2": [
                "FieldDefinition subject = new FieldDefinition(null, TokenType.STRING);",
                "FieldDefinition other3 = new FieldDefinition(null, TokenType.STRING).deprecate();"
            ],
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h3Test3": [
                "FieldDefinition subject = new FieldDefinition(\"foo\", TokenType.STRING).deprecate();",
                "FieldDefinition other3 = new FieldDefinition(\"foo\", TokenType.STRING).deprecate();"
            ],
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h3Test4": [
                "FieldDefinition subject = new FieldDefinition(\"foo\", TokenType.STRING).deprecate().deprecate();",
                "FieldDefinition other3 = new FieldDefinition(\"foo\", TokenType.STRING).deprecate().deprecate();"
            ]
        },
        "original_h": [
            "FieldDefinition subject = new FieldDefinition(\"foo\", TokenType.STRING);",
            "FieldDefinition other3 = new FieldDefinition(\"foo\", TokenType.STRING).deprecate();"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest.test1()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h3Test0"
        ],
        "generated_all_blocks": [
            [
                "JSONArray v01 = new JSONArray();",
                "String str2 = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);"
            ],
            [
                "JSONArray v01 = new JSONArray();",
                "String str2 = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);"
            ],
            [
                "JSONArray v01 = new JSONArray();",
                "String str2 = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);"
            ],
            [
                "JSONArray v01 = new JSONArray();",
                "String str2 = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);"
            ],
            [
                "JSONArray v01 = new JSONArray();",
                "String str2 = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h3Test0": [
                "JSONArray v01 = new JSONArray();",
                "String str2 = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h3Test0": [
                "JSONArray v01 = new JSONArray();",
                "String str2 = JSON.toJSONString(v01);"
            ]
        },
        "original_h": [
            "JSONArray v01 = new JSONArray();"
        ]
    },
    "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest.entrySetTest()": {
        "generated_inputs_class": [
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h3Test0",
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h3Test1",
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h3Test2",
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h3Test3",
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(1, 2);",
                "anotherMap.put(2, 3);",
                "anotherMap.put(3, 4);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.putAll(anotherMap);"
            ],
            [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(0, 0);",
                "anotherMap.put(10, 20);",
                "anotherMap.put(100, 200);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.putAll(anotherMap);"
            ],
            [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(-1, -2);",
                "anotherMap.put(-2, -3);",
                "anotherMap.put(-3, -4);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.putAll(anotherMap);"
            ],
            [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(1000, 2000);",
                "anotherMap.put(2000, 3000);",
                "anotherMap.put(3000, 4000);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.putAll(anotherMap);"
            ],
            [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(2, 1);",
                "anotherMap.put(1, 0);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.putAll(anotherMap);"
            ]
        ],
        "selected": {
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h3Test0": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(1, 2);",
                "anotherMap.put(2, 3);",
                "anotherMap.put(3, 4);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.putAll(anotherMap);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h3Test1": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(0, 0);",
                "anotherMap.put(10, 20);",
                "anotherMap.put(100, 200);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.putAll(anotherMap);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h3Test2": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(-1, -2);",
                "anotherMap.put(-2, -3);",
                "anotherMap.put(-3, -4);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.putAll(anotherMap);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h3Test3": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(1000, 2000);",
                "anotherMap.put(2000, 3000);",
                "anotherMap.put(3000, 4000);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.putAll(anotherMap);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h3Test4": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(2, 1);",
                "anotherMap.put(1, 0);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.putAll(anotherMap);"
            ]
        },
        "processed_generated": {
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h3Test0": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(1, 2);",
                "anotherMap.put(2, 3);",
                "anotherMap.put(3, 4);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.putAll(anotherMap);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h3Test1": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(0, 0);",
                "anotherMap.put(10, 20);",
                "anotherMap.put(100, 200);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.putAll(anotherMap);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h3Test2": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(-1, -2);",
                "anotherMap.put(-2, -3);",
                "anotherMap.put(-3, -4);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.putAll(anotherMap);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h3Test3": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(1000, 2000);",
                "anotherMap.put(2000, 3000);",
                "anotherMap.put(3000, 4000);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.putAll(anotherMap);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h3Test4": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(2, 1);",
                "anotherMap.put(1, 0);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.putAll(anotherMap);"
            ]
        },
        "original_h": [
            "Map<Integer, Integer> anotherMap = new HashMap<>();",
            "anotherMap.put(5, 10);",
            "anotherMap.put(4, 3);",
            "anotherMap.put(3, 7);",
            "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
            "map.put(5, 6);",
            "map.put(5, 10);",
            "map.put(4, 3);",
            "map.put(3, 7);"
        ]
    },
    "com.thealgorithms.datastructures.crdt.ORSetTest.testCompareDifferentSets()": {
        "generated_inputs_class": [
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h3Test0",
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h3Test1",
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h3Test2",
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h3Test3",
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "String element1 = null;",
                "String element2 = \"B\";"
            ],
            [
                "String element1 = \"\";",
                "String element2 = \"B\";"
            ],
            [
                "String element1 = \"C\";",
                "String element2 = \"B\";"
            ],
            [
                "String element1 = \"A\";",
                "String element2 = \"B\";"
            ],
            [
                "String element1 = new String(\"A\");",
                "String element2 = \"B\";"
            ]
        ],
        "selected": {
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h3Test0": [
                "String element1 = null;",
                "String element2 = \"B\";"
            ],
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h3Test1": [
                "String element1 = \"\";",
                "String element2 = \"B\";"
            ],
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h3Test2": [
                "String element1 = \"C\";",
                "String element2 = \"B\";"
            ],
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h3Test3": [
                "String element1 = \"A\";",
                "String element2 = \"B\";"
            ],
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h3Test4": [
                "String element1 = new String(\"A\");",
                "String element2 = \"B\";"
            ]
        },
        "processed_generated": {
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h3Test0": [
                "String element1 = null;",
                "String element2 = \"B\";"
            ],
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h3Test1": [
                "String element1 = \"\";",
                "String element2 = \"B\";"
            ],
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h3Test2": [
                "String element1 = \"C\";",
                "String element2 = \"B\";"
            ],
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h3Test3": [
                "String element1 = \"A\";",
                "String element2 = \"B\";"
            ],
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h3Test4": [
                "String element1 = new String(\"A\");",
                "String element2 = \"B\";"
            ]
        },
        "original_h": [
            "String element1 = \"A\";",
            "String element2 = \"B\";"
        ]
    },
    "com.github.underscore.XmlBuilderTest.toXml()": {
        "generated_inputs_class": [
            "com.github.underscore.XmlBuilderTest_toXml_h3Test0"
        ],
        "generated_all_blocks": [
            [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";",
                "",
                "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                "String followUpInput = xmlBuilder.toXml();"
            ]
        ],
        "selected": {
            "com.github.underscore.XmlBuilderTest_toXml_h3Test0": [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";",
                "",
                "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                "String followUpInput = xmlBuilder.toXml();"
            ]
        },
        "processed_generated": {
            "com.github.underscore.XmlBuilderTest_toXml_h3Test0": [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";"
            ]
        },
        "original_h": [
            "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.collections.ListTest1.test()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h3Test0"
        ],
        "generated_all_blocks": [
            [
                "String str2 = \"[123]\";",
                "Type listType = new TypeReference<List<Integer>>() {}.getType();"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h3Test0": [
                "String str2 = \"[123]\";",
                "Type listType = new TypeReference<List<Integer>>() {}.getType();"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h3Test0": [
                "String str2 = \"[123]\";"
            ]
        },
        "original_h": [
            "List<Integer> v01 = new ArrayList<>();",
            "int id = 123;",
            "v01.add(id);"
        ]
    },
    "com.github.underscore.XmlBuilderTest.parse()": {
        "generated_inputs_class": [
            "com.github.underscore.XmlBuilderTest_parse_h3Test0",
            "com.github.underscore.XmlBuilderTest_parse_h3Test1",
            "com.github.underscore.XmlBuilderTest_parse_h3Test2",
            "com.github.underscore.XmlBuilderTest_parse_h3Test3",
            "com.github.underscore.XmlBuilderTest_parse_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";",
                "",
                "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                "String xmlBuilder2 = xmlBuilder.asString();",
                "",
                "// The follow-up input xmlBuilder2 is generated by parsing the source input XML using the parse() method and then converting the resulting XmlBuilder object to a string using the asString() method."
            ],
            [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Python\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/pythondev/underscore-python/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";",
                "",
                "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                "String xmlBuilder2 = xmlBuilder.asString();",
                "",
                "// The follow-up input xmlBuilder2 is generated by parsing the source input XML using the parse() method and then converting the resulting XmlBuilder object to a string using the asString() method."
            ],
            [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";",
                "",
                "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                "String xmlBuilder2 = xmlBuilder.asString();",
                "",
                "// The follow-up input xmlBuilder2 is generated by parsing the source input XML using the parse() method and then converting the resulting XmlBuilder object to a string using the asString() method."
            ],
            [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"File\\\">/path/to/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";",
                "",
                "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                "String xmlBuilder2 = xmlBuilder.asString();",
                "",
                "// The follow-up input xmlBuilder2 is generated by parsing the source input XML using the parse() method and then converting the resulting XmlBuilder object to a string using the asString() method."
            ],
            [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <ApacheCommons language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/</Location>\\n\" + \"  </ApacheCommons>\\n\" + \"</Projects>\";",
                "",
                "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                "String xmlBuilder2 = xmlBuilder.asString();",
                "",
                "// The follow-up input xmlBuilder2 is generated by parsing the source input XML using the parse() method and then converting the resulting XmlBuilder object to a string using the asString() method."
            ]
        ],
        "selected": {
            "com.github.underscore.XmlBuilderTest_parse_h3Test0": [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";",
                "",
                "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                "String xmlBuilder2 = xmlBuilder.asString();",
                "",
                "// The follow-up input xmlBuilder2 is generated by parsing the source input XML using the parse() method and then converting the resulting XmlBuilder object to a string using the asString() method."
            ],
            "com.github.underscore.XmlBuilderTest_parse_h3Test1": [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Python\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/pythondev/underscore-python/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";",
                "",
                "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                "String xmlBuilder2 = xmlBuilder.asString();",
                "",
                "// The follow-up input xmlBuilder2 is generated by parsing the source input XML using the parse() method and then converting the resulting XmlBuilder object to a string using the asString() method."
            ],
            "com.github.underscore.XmlBuilderTest_parse_h3Test2": [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";",
                "",
                "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                "String xmlBuilder2 = xmlBuilder.asString();",
                "",
                "// The follow-up input xmlBuilder2 is generated by parsing the source input XML using the parse() method and then converting the resulting XmlBuilder object to a string using the asString() method."
            ],
            "com.github.underscore.XmlBuilderTest_parse_h3Test3": [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"File\\\">/path/to/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";",
                "",
                "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                "String xmlBuilder2 = xmlBuilder.asString();",
                "",
                "// The follow-up input xmlBuilder2 is generated by parsing the source input XML using the parse() method and then converting the resulting XmlBuilder object to a string using the asString() method."
            ],
            "com.github.underscore.XmlBuilderTest_parse_h3Test4": [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <ApacheCommons language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/</Location>\\n\" + \"  </ApacheCommons>\\n\" + \"</Projects>\";",
                "",
                "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                "String xmlBuilder2 = xmlBuilder.asString();",
                "",
                "// The follow-up input xmlBuilder2 is generated by parsing the source input XML using the parse() method and then converting the resulting XmlBuilder object to a string using the asString() method."
            ]
        },
        "processed_generated": {
            "com.github.underscore.XmlBuilderTest_parse_h3Test0": [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";"
            ],
            "com.github.underscore.XmlBuilderTest_parse_h3Test1": [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Python\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/pythondev/underscore-python/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";"
            ],
            "com.github.underscore.XmlBuilderTest_parse_h3Test2": [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";"
            ],
            "com.github.underscore.XmlBuilderTest_parse_h3Test3": [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"File\\\">/path/to/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";"
            ],
            "com.github.underscore.XmlBuilderTest_parse_h3Test4": [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <ApacheCommons language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/</Location>\\n\" + \"  </ApacheCommons>\\n\" + \"</Projects>\";"
            ]
        },
        "original_h": [
            "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";"
        ]
    },
    "org.threeten.extra.TestYearHalf.test_of_int_int()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test0",
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test1",
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test2",
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test3",
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test4",
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test5",
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test6",
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test7",
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test8",
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test9"
        ],
        "generated_all_blocks": [
            [
                "int year = Year.MIN_YEAR;",
                "int half = 1;"
            ],
            [
                "int year2 = Year.MIN_YEAR;",
                "int half2 = 1;"
            ],
            [
                "int year = Year.MAX_YEAR;",
                "int half = 2;"
            ],
            [
                "int year2 = Year.MAX_YEAR;",
                "int half2 = 2;"
            ],
            [
                "int year = 2022;",
                "int half = 1;"
            ],
            [
                "int year2 = 2022;",
                "int half2 = 1;"
            ],
            [
                "int year = 2023;",
                "int half = 2;"
            ],
            [
                "int year2 = 2023;",
                "int half2 = 2;"
            ],
            [
                "int year = 1999;",
                "int half = 2;"
            ],
            [
                "int year2 = 1999;",
                "int half2 = 2;"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test0": [
                "int year = Year.MIN_YEAR;",
                "int half = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test1": [
                "int year2 = Year.MIN_YEAR;",
                "int half2 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test2": [
                "int year = Year.MAX_YEAR;",
                "int half = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test3": [
                "int year2 = Year.MAX_YEAR;",
                "int half2 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test4": [
                "int year = 2022;",
                "int half = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test5": [
                "int year2 = 2022;",
                "int half2 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test6": [
                "int year = 2023;",
                "int half = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test7": [
                "int year2 = 2023;",
                "int half2 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test8": [
                "int year = 1999;",
                "int half = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test9": [
                "int year2 = 1999;",
                "int half2 = 2;"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test0": [
                "int year = Year.MIN_YEAR;",
                "int half = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test1": [
                ""
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test2": [
                "int year = Year.MAX_YEAR;",
                "int half = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test3": [
                ""
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test4": [
                "int year = 2022;",
                "int half = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test5": [
                ""
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test6": [
                "int year = 2023;",
                "int half = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test7": [
                ""
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test8": [
                "int year = 1999;",
                "int half = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h3Test9": [
                ""
            ]
        },
        "original_h": [
            "int year = 100;",
            "int half = 1;"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.collections.ListTest1.test1()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h3Test0",
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h3Test1",
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h3Test2",
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h3Test3",
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"123\";",
                "v01.add(id);",
                "",
                "String str = JSON.toJSONString(v01);",
                "List<String> v02 = JSON.parseObject(str, new TypeReference<List<String>>() {}.getType());",
                "",
                "assertEquals(v01, v02);"
            ],
            [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"\";",
                "v01.add(id);",
                "",
                "String str = JSON.toJSONString(v01);",
                "List<String> v02 = JSON.parseObject(str, new TypeReference<List<String>>() {}.getType());",
                "",
                "assertEquals(v01, v02);"
            ],
            [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"abc\";",
                "v01.add(id);",
                "",
                "String str = JSON.toJSONString(v01);",
                "List<String> v02 = JSON.parseObject(str, new TypeReference<List<String>>() {}.getType());",
                "",
                "assertEquals(v01, v02);"
            ],
            [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"456\";",
                "v01.add(id);",
                "v01.add(id);",
                "",
                "String str = JSON.toJSONString(v01);",
                "List<String> v02 = JSON.parseObject(str, new TypeReference<List<String>>() {}.getType());",
                "",
                "assertEquals(v01, v02);"
            ],
            [
                "List<String> v01 = new ArrayList<>();",
                "",
                "String str = JSON.toJSONString(v01);",
                "List<String> v02 = JSON.parseObject(str, new TypeReference<List<String>>() {}.getType());",
                "",
                "assertEquals(v01, v02);"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h3Test0": [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"123\";",
                "v01.add(id);",
                "",
                "String str = JSON.toJSONString(v01);",
                "List<String> v02 = JSON.parseObject(str, new TypeReference<List<String>>() {}.getType());",
                "",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h3Test1": [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"\";",
                "v01.add(id);",
                "",
                "String str = JSON.toJSONString(v01);",
                "List<String> v02 = JSON.parseObject(str, new TypeReference<List<String>>() {}.getType());",
                "",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h3Test2": [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"abc\";",
                "v01.add(id);",
                "",
                "String str = JSON.toJSONString(v01);",
                "List<String> v02 = JSON.parseObject(str, new TypeReference<List<String>>() {}.getType());",
                "",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h3Test3": [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"456\";",
                "v01.add(id);",
                "v01.add(id);",
                "",
                "String str = JSON.toJSONString(v01);",
                "List<String> v02 = JSON.parseObject(str, new TypeReference<List<String>>() {}.getType());",
                "",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h3Test4": [
                "List<String> v01 = new ArrayList<>();",
                "",
                "String str = JSON.toJSONString(v01);",
                "List<String> v02 = JSON.parseObject(str, new TypeReference<List<String>>() {}.getType());",
                "",
                "assertEquals(v01, v02);"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h3Test0": [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"123\";",
                "v01.add(id);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h3Test1": [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"\";",
                "v01.add(id);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h3Test2": [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"abc\";",
                "v01.add(id);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h3Test3": [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"456\";",
                "v01.add(id);",
                "v01.add(id);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h3Test4": [
                "List<String> v01 = new ArrayList<>();"
            ]
        },
        "original_h": [
            "List<String> v01 = new ArrayList<>();",
            "String id = \"123\";",
            "v01.add(id);"
        ]
    },
    "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest.keySetTest()": {
        "generated_inputs_class": [
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h3Test0",
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h3Test1",
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h3Test2",
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h3Test3",
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(1, 2);",
                "anotherMap.put(2, 3);",
                "anotherMap.put(3, 4);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(1, 6);",
                "map.put(2, 6);",
                "map.put(3, 6);"
            ],
            [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(10, 20);",
                "anotherMap.put(20, 30);",
                "anotherMap.put(30, 40);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(10, 6);",
                "map.put(20, 6);",
                "map.put(30, 6);"
            ],
            [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(100, 200);",
                "anotherMap.put(200, 300);",
                "anotherMap.put(300, 400);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(100, 6);",
                "map.put(200, 6);",
                "map.put(300, 6);"
            ],
            [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(0, 0);",
                "anotherMap.put(1, 1);",
                "anotherMap.put(2, 2);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(0, 6);",
                "map.put(1, 6);",
                "map.put(2, 6);"
            ],
            [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(-1, -2);",
                "anotherMap.put(-2, -3);",
                "anotherMap.put(-3, -4);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(-1, 6);",
                "map.put(-2, 6);",
                "map.put(-3, 6);"
            ]
        ],
        "selected": {
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h3Test0": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(1, 2);",
                "anotherMap.put(2, 3);",
                "anotherMap.put(3, 4);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(1, 6);",
                "map.put(2, 6);",
                "map.put(3, 6);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h3Test1": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(10, 20);",
                "anotherMap.put(20, 30);",
                "anotherMap.put(30, 40);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(10, 6);",
                "map.put(20, 6);",
                "map.put(30, 6);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h3Test2": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(100, 200);",
                "anotherMap.put(200, 300);",
                "anotherMap.put(300, 400);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(100, 6);",
                "map.put(200, 6);",
                "map.put(300, 6);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h3Test3": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(0, 0);",
                "anotherMap.put(1, 1);",
                "anotherMap.put(2, 2);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(0, 6);",
                "map.put(1, 6);",
                "map.put(2, 6);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h3Test4": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(-1, -2);",
                "anotherMap.put(-2, -3);",
                "anotherMap.put(-3, -4);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(-1, 6);",
                "map.put(-2, 6);",
                "map.put(-3, 6);"
            ]
        },
        "processed_generated": {
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h3Test0": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(1, 2);",
                "anotherMap.put(2, 3);",
                "anotherMap.put(3, 4);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(1, 6);",
                "map.put(2, 6);",
                "map.put(3, 6);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h3Test1": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(10, 20);",
                "anotherMap.put(20, 30);",
                "anotherMap.put(30, 40);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(10, 6);",
                "map.put(20, 6);",
                "map.put(30, 6);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h3Test2": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(100, 200);",
                "anotherMap.put(200, 300);",
                "anotherMap.put(300, 400);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(100, 6);",
                "map.put(200, 6);",
                "map.put(300, 6);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h3Test3": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(0, 0);",
                "anotherMap.put(1, 1);",
                "anotherMap.put(2, 2);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(0, 6);",
                "map.put(1, 6);",
                "map.put(2, 6);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h3Test4": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(-1, -2);",
                "anotherMap.put(-2, -3);",
                "anotherMap.put(-3, -4);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(-1, 6);",
                "map.put(-2, 6);",
                "map.put(-3, 6);"
            ]
        },
        "original_h": [
            "Map<Integer, Integer> anotherMap = new HashMap<>();",
            "anotherMap.put(5, 10);",
            "anotherMap.put(4, 3);",
            "anotherMap.put(3, 7);",
            "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
            "map.put(5, 6);",
            "map.put(3, 6);",
            "map.put(4, 6);"
        ]
    },
    "org.apache.druid.query.filter.IsBooleanDimFilterTest.testGetCacheKey()": {
        "generated_inputs_class": [
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h3Test0",
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h3Test1",
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h3Test2",
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h3Test3",
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"\", null);",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"\", null);"
            ],
            [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"world\", null);",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"world\", null);"
            ],
            [
                "EqualityFilter f3 = new EqualityFilter(\"y\", ColumnType.STRING, \"hello\", null);",
                "EqualityFilter f4 = new EqualityFilter(\"y\", ColumnType.STRING, \"hello\", null);"
            ],
            [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.INTEGER, 123, null);",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.INTEGER, 123, null);"
            ],
            [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"en\");",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"en\");"
            ]
        ],
        "selected": {
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h3Test0": [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"\", null);",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"\", null);"
            ],
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h3Test1": [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"world\", null);",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"world\", null);"
            ],
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h3Test2": [
                "EqualityFilter f3 = new EqualityFilter(\"y\", ColumnType.STRING, \"hello\", null);",
                "EqualityFilter f4 = new EqualityFilter(\"y\", ColumnType.STRING, \"hello\", null);"
            ],
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h3Test3": [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.INTEGER, 123, null);",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.INTEGER, 123, null);"
            ],
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h3Test4": [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"en\");",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"en\");"
            ]
        },
        "processed_generated": {
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h3Test0": [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"\", null);",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"\", null);"
            ],
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h3Test1": [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"world\", null);",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"world\", null);"
            ],
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h3Test2": [
                "EqualityFilter f3 = new EqualityFilter(\"y\", ColumnType.STRING, \"hello\", null);",
                "EqualityFilter f4 = new EqualityFilter(\"y\", ColumnType.STRING, \"hello\", null);"
            ],
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h3Test3": [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.INTEGER, 123, null);",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.INTEGER, 123, null);"
            ],
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h3Test4": [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"en\");",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"en\");"
            ]
        },
        "original_h": [
            "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", null);",
            "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", null);"
        ]
    },
    "com.github.underscore.XmlBuilderTest.toJson()": {
        "generated_inputs_class": [
            "com.github.underscore.XmlBuilderTest_toJson_h3Test0"
        ],
        "generated_all_blocks": [
            [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";",
                "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                "String xmlBuilder2Json = xmlBuilder.toJson();"
            ]
        ],
        "selected": {
            "com.github.underscore.XmlBuilderTest_toJson_h3Test0": [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";",
                "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                "String xmlBuilder2Json = xmlBuilder.toJson();"
            ]
        },
        "processed_generated": {
            "com.github.underscore.XmlBuilderTest_toJson_h3Test0": [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";"
            ]
        },
        "original_h": [
            "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";"
        ]
    },
    "com.thealgorithms.ciphers.PlayfairTest.testEncryptionAndDecryption()": {
        "generated_inputs_class": [
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h3Test0",
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h3Test1",
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h3Test2",
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h3Test3",
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
                "String plaintext = \"HELLO\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
                "String plaintext = \"WORLD\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
                "String plaintext = \"JAVA\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
                "String plaintext = \"PROGRAMMING\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
                "String plaintext = \"12345\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ]
        ],
        "selected": {
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h3Test0": [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
                "String plaintext = \"HELLO\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h3Test1": [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
                "String plaintext = \"WORLD\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h3Test2": [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
                "String plaintext = \"JAVA\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h3Test3": [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
                "String plaintext = \"PROGRAMMING\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h3Test4": [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
                "String plaintext = \"12345\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ]
        },
        "processed_generated": {
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h3Test0": [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
                "String plaintext = \"HELLO\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h3Test1": [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
                "String plaintext = \"WORLD\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h3Test2": [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
                "String plaintext = \"JAVA\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h3Test3": [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
                "String plaintext = \"PROGRAMMING\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h3Test4": [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
                "String plaintext = \"12345\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ]
        },
        "original_h": [
            "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
            "String plaintext = \"PLAYFAIR\";",
            "String textTodecrypt = \"SHHAHRFB\";"
        ]
    },
    "org.mitre.synthea.engine.ExpressedSymptomTest.testExpressedSymtpom()": {
        "generated_inputs_class": [
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h3Test0",
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h3Test1",
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h3Test2",
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h3Test3",
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "String name = \"fever\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"module1\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"module1\";",
                "symptom2.addressSource(module2);"
            ],
            [
                "String name = \"cough\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"module2\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"module2\";",
                "symptom2.addressSource(module2);"
            ],
            [
                "String name = \"headache\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"module3\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"module3\";",
                "symptom2.addressSource(module2);"
            ],
            [
                "String name = \"fatigue\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"module4\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"module4\";",
                "symptom2.addressSource(module2);"
            ],
            [
                "String name = \"nausea\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"module5\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"module5\";",
                "symptom2.addressSource(module2);"
            ]
        ],
        "selected": {
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h3Test0": [
                "String name = \"fever\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"module1\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"module1\";",
                "symptom2.addressSource(module2);"
            ],
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h3Test1": [
                "String name = \"cough\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"module2\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"module2\";",
                "symptom2.addressSource(module2);"
            ],
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h3Test2": [
                "String name = \"headache\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"module3\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"module3\";",
                "symptom2.addressSource(module2);"
            ],
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h3Test3": [
                "String name = \"fatigue\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"module4\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"module4\";",
                "symptom2.addressSource(module2);"
            ],
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h3Test4": [
                "String name = \"nausea\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"module5\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"module5\";",
                "symptom2.addressSource(module2);"
            ]
        },
        "processed_generated": {
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h3Test0": [
                "String name = \"fever\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"module1\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"module1\";",
                "symptom2.addressSource(module2);"
            ],
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h3Test1": [
                "String name = \"cough\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"module2\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"module2\";",
                "symptom2.addressSource(module2);"
            ],
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h3Test2": [
                "String name = \"headache\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"module3\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"module3\";",
                "symptom2.addressSource(module2);"
            ],
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h3Test3": [
                "String name = \"fatigue\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"module4\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"module4\";",
                "symptom2.addressSource(module2);"
            ],
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h3Test4": [
                "String name = \"nausea\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"module5\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"module5\";",
                "symptom2.addressSource(module2);"
            ]
        },
        "original_h": [
            "String name = \"pain\";",
            "ExpressedSymptom symptom = new ExpressedSymptom(name);",
            "String module = \"testModule\";",
            "symptom.addressSource(module);",
            "ExpressedSymptom symptom2 = symptom;",
            "String module2 = \"testModule\";",
            "symptom2.addressSource(module2);"
        ]
    },
    "com.cedarsoftware.util.convert.ConverterTest.testSqlDateToString()": {
        "generated_inputs_class": [
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h3Test0",
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h3Test1"
        ],
        "generated_all_blocks": [
            [
                "Class<?> clazz1 = LocalDate.class;",
                "long now = System.currentTimeMillis();",
                "Date date = new Date(now);",
                "String strDate = this.converter.convert(date, String.class);",
                "Class<?> clazz2 = LocalDate.class;",
                "Date x = this.converter.convert(strDate, Date.class);"
            ],
            [
                "Date x = new Date(now);",
                "Class<?> clazz2 = Date.class;"
            ]
        ],
        "selected": {
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h3Test0": [
                "Class<?> clazz1 = LocalDate.class;",
                "long now = System.currentTimeMillis();",
                "Date date = new Date(now);",
                "String strDate = this.converter.convert(date, String.class);",
                "Class<?> clazz2 = LocalDate.class;",
                "Date x = this.converter.convert(strDate, Date.class);"
            ],
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h3Test1": [
                "Date x = new Date(now);",
                "Class<?> clazz2 = Date.class;"
            ]
        },
        "processed_generated": {
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h3Test0": [
                "Class<?> clazz1 = LocalDate.class;",
                "long now = System.currentTimeMillis();",
                "Date date = new Date(now);",
                "String strDate = this.converter.convert(date, String.class);",
                "Class<?> clazz2 = LocalDate.class;",
                "Date x = this.converter.convert(strDate, Date.class);"
            ],
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h3Test1": [
                "Date x = new Date(now);",
                "Class<?> clazz2 = Date.class;"
            ]
        },
        "original_h": [
            "Class<?> clazz1 = LocalDate.class;",
            "long now = System.currentTimeMillis();",
            "Date date = new Date(now);",
            "String strDate = this.converter.convert(date, String.class);",
            "Class<?> clazz2 = LocalDate.class;",
            "Date x = this.converter.convert(strDate, Date.class);"
        ]
    },
    "software.amazon.event.ruler.SubRuleContextTest.testGetters()": {
        "generated_inputs_class": [
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h3Test0",
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h3Test1",
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h3Test2",
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h3Test3"
        ],
        "generated_all_blocks": [
            [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = \"\";",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();"
            ],
            [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = null;",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();"
            ],
            [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = \"anotherName\";",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();"
            ],
            [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = \"name\";",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();"
            ]
        ],
        "selected": {
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h3Test0": [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = \"\";",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h3Test1": [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = null;",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h3Test2": [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = \"anotherName\";",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h3Test3": [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = \"name\";",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();"
            ]
        },
        "processed_generated": {
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h3Test0": [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = \"\";",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h3Test1": [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = null;",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h3Test2": [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = \"anotherName\";",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h3Test3": [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = \"name\";",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();"
            ]
        },
        "original_h": [
            "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
            "String NAME = \"name\";",
            "Double id = -1.7976931348623157E308;",
            "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();"
        ]
    },
    "org.apache.sysds.test.component.compress.util.ArrayListTest.extract()": {
        "generated_inputs_class": [
            "org.apache.sysds.test.component.compress.util.ArrayListTest_extract_h3Test0",
            "org.apache.sysds.test.component.compress.util.ArrayListTest_extract_h3Test1",
            "org.apache.sysds.test.component.compress.util.ArrayListTest_extract_h3Test2",
            "org.apache.sysds.test.component.compress.util.ArrayListTest_extract_h3Test3"
        ],
        "generated_all_blocks": [
            [
                "IntArrayList a = new IntArrayList();",
                "boolean trimFlag = true;",
                "boolean trimFlag2 = true;"
            ],
            [
                "@Test",
                "public void extract() {",
                "IntArrayList a = new IntArrayList();",
                "a.appendValue(0);",
                "a.appendValue(1);",
                "a.appendValue(0);",
                "boolean trimFlag = true;",
                "boolean trimFlag2 = true;",
                "int[] ex = a.extractValues(trimFlag);",
                "int[] et = a.extractValues(trimFlag2);",
                "assertTrue(ex.length >= et.length);",
                "}"
            ],
            [
                "IntArrayList a = new IntArrayList();",
                "boolean trimFlag = false;",
                "boolean trimFlag2 = false;"
            ],
            [
                "@Test",
                "public void extract() {",
                "IntArrayList a = new IntArrayList();",
                "a.appendValue(0);",
                "a.appendValue(1);",
                "a.appendValue(0);",
                "boolean trimFlag = false;",
                "boolean trimFlag2 = false;",
                "int[] ex = a.extractValues(trimFlag);",
                "int[] et = a.extractValues(trimFlag2);",
                "assertTrue(ex.length == et.length);",
                "}"
            ]
        ],
        "selected": {
            "org.apache.sysds.test.component.compress.util.ArrayListTest_extract_h3Test0": [
                "IntArrayList a = new IntArrayList();",
                "boolean trimFlag = true;",
                "boolean trimFlag2 = true;"
            ],
            "org.apache.sysds.test.component.compress.util.ArrayListTest_extract_h3Test1": [
                "@Test",
                "public void extract() {",
                "IntArrayList a = new IntArrayList();",
                "a.appendValue(0);",
                "a.appendValue(1);",
                "a.appendValue(0);",
                "boolean trimFlag = true;",
                "boolean trimFlag2 = true;",
                "int[] ex = a.extractValues(trimFlag);",
                "int[] et = a.extractValues(trimFlag2);",
                "assertTrue(ex.length >= et.length);",
                "}"
            ],
            "org.apache.sysds.test.component.compress.util.ArrayListTest_extract_h3Test2": [
                "IntArrayList a = new IntArrayList();",
                "boolean trimFlag = false;",
                "boolean trimFlag2 = false;"
            ],
            "org.apache.sysds.test.component.compress.util.ArrayListTest_extract_h3Test3": [
                "@Test",
                "public void extract() {",
                "IntArrayList a = new IntArrayList();",
                "a.appendValue(0);",
                "a.appendValue(1);",
                "a.appendValue(0);",
                "boolean trimFlag = false;",
                "boolean trimFlag2 = false;",
                "int[] ex = a.extractValues(trimFlag);",
                "int[] et = a.extractValues(trimFlag2);",
                "assertTrue(ex.length == et.length);",
                "}"
            ]
        },
        "processed_generated": {
            "org.apache.sysds.test.component.compress.util.ArrayListTest_extract_h3Test0": [
                "IntArrayList a = new IntArrayList();",
                "boolean trimFlag = true;",
                "boolean trimFlag2 = true;"
            ],
            "org.apache.sysds.test.component.compress.util.ArrayListTest_extract_h3Test1": [
                "IntArrayList a = new IntArrayList();",
                "boolean trimFlag = true;",
                "boolean trimFlag2 = true;"
            ],
            "org.apache.sysds.test.component.compress.util.ArrayListTest_extract_h3Test2": [
                "IntArrayList a = new IntArrayList();",
                "boolean trimFlag = false;",
                "boolean trimFlag2 = false;"
            ],
            "org.apache.sysds.test.component.compress.util.ArrayListTest_extract_h3Test3": [
                "IntArrayList a = new IntArrayList();",
                "boolean trimFlag = false;",
                "boolean trimFlag2 = false;"
            ]
        },
        "original_h": [
            "IntArrayList a = new IntArrayList();",
            "boolean trimFlag = false;",
            "boolean trimFlag2 = true;"
        ]
    },
    "org.datagear.util.version.VersionTest.stringOfTest()": {
        "generated_inputs_class": [
            "org.datagear.util.version.VersionTest_stringOfTest_h3Test0"
        ],
        "generated_all_blocks": [
            [
                "Version version1 = Version.valueOf(\"1.0.0\");"
            ]
        ],
        "selected": {
            "org.datagear.util.version.VersionTest_stringOfTest_h3Test0": [
                "Version version1 = Version.valueOf(\"1.0.0\");"
            ]
        },
        "processed_generated": {
            "org.datagear.util.version.VersionTest_stringOfTest_h3Test0": [
                "Version version1 = Version.valueOf(\"1.0.0\");"
            ]
        },
        "original_h": [
            "String v = \"1.0.0\";"
        ]
    },
    "com.thealgorithms.datastructures.crdt.LWWElementSetTest.testRemove()": {
        "generated_inputs_class": [
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h3Test0",
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h3Test1",
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h3Test2",
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h3Test3",
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "Element element = new Element(\"key2\", 2, bias);",
                "Element element2 = new Element(\"key2\", 2, bias);"
            ],
            [
                "Element element = new Element(\"key1\", 2, bias);",
                "Element element2 = new Element(\"key1\", 2, bias);"
            ],
            [
                "Element element = new Element(\"key2\", 1, bias);",
                "Element element2 = new Element(\"key2\", 1, bias);"
            ],
            [
                "Element element = new Element(\"key1\", 1, null);",
                "Element element2 = new Element(\"key1\", 1, null);"
            ],
            [
                "Element element = new Element(\"key2\", 2, null);",
                "Element element2 = new Element(\"key2\", 2, null);"
            ]
        ],
        "selected": {
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h3Test0": [
                "Element element = new Element(\"key2\", 2, bias);",
                "Element element2 = new Element(\"key2\", 2, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h3Test1": [
                "Element element = new Element(\"key1\", 2, bias);",
                "Element element2 = new Element(\"key1\", 2, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h3Test2": [
                "Element element = new Element(\"key2\", 1, bias);",
                "Element element2 = new Element(\"key2\", 1, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h3Test3": [
                "Element element = new Element(\"key1\", 1, null);",
                "Element element2 = new Element(\"key1\", 1, null);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h3Test4": [
                "Element element = new Element(\"key2\", 2, null);",
                "Element element2 = new Element(\"key2\", 2, null);"
            ]
        },
        "processed_generated": {
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h3Test0": [
                "Element element = new Element(\"key2\", 2, bias);",
                "Element element2 = new Element(\"key2\", 2, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h3Test1": [
                "Element element = new Element(\"key1\", 2, bias);",
                "Element element2 = new Element(\"key1\", 2, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h3Test2": [
                "Element element = new Element(\"key2\", 1, bias);",
                "Element element2 = new Element(\"key2\", 1, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h3Test3": [
                "Element element = new Element(\"key1\", 1, null);",
                "Element element2 = new Element(\"key1\", 1, null);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h3Test4": [
                "Element element = new Element(\"key2\", 2, null);",
                "Element element2 = new Element(\"key2\", 2, null);"
            ]
        },
        "original_h": [
            "Element element = new Element(\"key1\", 1, bias);",
            "Element element2 = new Element(\"key1\", 1, bias);"
        ]
    },
    "io.arex.inst.runtime.model.SerializeSkipInfoTest.testHashCode()": {
        "generated_inputs_class": [
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h3Test0",
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h3Test1",
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h3Test2",
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h3Test3",
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"\");",
                "serializeSkipInfo.setFullClassName(\"\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"\");",
                "serializeSkipInfo2.setFullClassName(\"\");"
            ],
            [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName\");",
                "serializeSkipInfo.setFullClassName(\"\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName\");",
                "serializeSkipInfo2.setFullClassName(\"\");"
            ],
            [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(null);",
                "serializeSkipInfo.setFullClassName(null);",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(null);",
                "serializeSkipInfo2.setFullClassName(null);"
            ]
        ],
        "selected": {
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h3Test0": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"\");",
                "serializeSkipInfo.setFullClassName(\"\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"\");",
                "serializeSkipInfo2.setFullClassName(\"\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h3Test1": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName\");",
                "serializeSkipInfo.setFullClassName(\"\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName\");",
                "serializeSkipInfo2.setFullClassName(\"\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h3Test2": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h3Test3": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h3Test4": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(null);",
                "serializeSkipInfo.setFullClassName(null);",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(null);",
                "serializeSkipInfo2.setFullClassName(null);"
            ]
        },
        "processed_generated": {
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h3Test0": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"\");",
                "serializeSkipInfo.setFullClassName(\"\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"\");",
                "serializeSkipInfo2.setFullClassName(\"\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h3Test1": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName\");",
                "serializeSkipInfo.setFullClassName(\"\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName\");",
                "serializeSkipInfo2.setFullClassName(\"\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h3Test2": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h3Test3": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h3Test4": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(null);",
                "serializeSkipInfo.setFullClassName(null);",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(null);",
                "serializeSkipInfo2.setFullClassName(null);"
            ]
        },
        "original_h": [
            "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
            "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
            "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
            "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
            "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
            "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
        ]
    },
    "org.ojalgo.data.transform.DiscreteFourierTransformTest.testNonPowerOf2()": {
        "generated_inputs_class": [
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h3Test0",
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h3Test1",
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h3Test2",
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h3Test3",
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(2, 1, Uniform.of(-2, 4));",
                "DiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(2);",
                "MatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);"
            ],
            [
                "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(8, 1, Uniform.of(-2, 4));",
                "DiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(8);",
                "MatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);"
            ],
            [
                "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(16, 1, Uniform.of(-2, 4));",
                "DiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(16);",
                "MatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);"
            ],
            [
                "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(5, 1, Uniform.of(-2, 4));",
                "DiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(5);",
                "MatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);"
            ],
            [
                "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(10, 1, Uniform.of(-2, 4));",
                "DiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(10);",
                "MatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);"
            ]
        ],
        "selected": {
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h3Test0": [
                "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(2, 1, Uniform.of(-2, 4));",
                "DiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(2);",
                "MatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h3Test1": [
                "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(8, 1, Uniform.of(-2, 4));",
                "DiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(8);",
                "MatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h3Test2": [
                "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(16, 1, Uniform.of(-2, 4));",
                "DiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(16);",
                "MatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h3Test3": [
                "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(5, 1, Uniform.of(-2, 4));",
                "DiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(5);",
                "MatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h3Test4": [
                "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(10, 1, Uniform.of(-2, 4));",
                "DiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(10);",
                "MatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);"
            ]
        },
        "processed_generated": {
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h3Test0": [
                "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(2, 1, Uniform.of(-2, 4));",
                "DiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(2);",
                "MatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h3Test1": [
                "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(8, 1, Uniform.of(-2, 4));",
                "DiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(8);",
                "MatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h3Test2": [
                "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(16, 1, Uniform.of(-2, 4));",
                "DiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(16);",
                "MatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h3Test3": [
                "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(5, 1, Uniform.of(-2, 4));",
                "DiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(5);",
                "MatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h3Test4": [
                "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(10, 1, Uniform.of(-2, 4));",
                "DiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(10);",
                "MatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);"
            ]
        },
        "original_h": [
            "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(dimension, 1, Uniform.of(-2, 4));",
            "DiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(dimension);",
            "MatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest.test()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test0",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test1",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test2",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test3",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test4",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test5",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test6",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test7",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test8",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test9",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test10",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test11"
        ],
        "generated_all_blocks": [
            [
                "JSONObject v01 = JSONObject.of(\"id\", 1001);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ],
            [
                "String str2 = \"{\\\"id\\\":1001}\";"
            ],
            [
                "JSONObject v01 = JSONObject.of(\"id\", 0);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ],
            [
                "String str2 = \"{\\\"id\\\":0}\";"
            ],
            [
                "JSONObject v01 = JSONObject.of(\"id\", 9999);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ],
            [
                "String str2 = \"{\\\"id\\\":9999}\";"
            ],
            [
                "JSONObject v01 = JSONObject.of(\"id\", -100);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ],
            [
                "String str2 = \"{\\\"id\\\":-100}\";"
            ],
            [
                "JSONObject v01 = JSONObject.of(\"id\", Integer.MAX_VALUE);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ],
            [
                "String str2 = \"{\\\"id\\\":2147483647}\";"
            ],
            [
                "JSONObject v01 = JSONObject.of(\"id\", Integer.MIN_VALUE);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ],
            [
                "String str2 = \"{\\\"id\\\":-2147483648}\";"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test0": [
                "JSONObject v01 = JSONObject.of(\"id\", 1001);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test1": [
                "String str2 = \"{\\\"id\\\":1001}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test2": [
                "JSONObject v01 = JSONObject.of(\"id\", 0);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test3": [
                "String str2 = \"{\\\"id\\\":0}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test4": [
                "JSONObject v01 = JSONObject.of(\"id\", 9999);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test5": [
                "String str2 = \"{\\\"id\\\":9999}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test6": [
                "JSONObject v01 = JSONObject.of(\"id\", -100);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test7": [
                "String str2 = \"{\\\"id\\\":-100}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test8": [
                "JSONObject v01 = JSONObject.of(\"id\", Integer.MAX_VALUE);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test9": [
                "String str2 = \"{\\\"id\\\":2147483647}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test10": [
                "JSONObject v01 = JSONObject.of(\"id\", Integer.MIN_VALUE);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test11": [
                "String str2 = \"{\\\"id\\\":-2147483648}\";"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test0": [
                "JSONObject v01 = JSONObject.of(\"id\", 1001);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test1": [
                "String str2 = \"{\\\"id\\\":1001}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test2": [
                "JSONObject v01 = JSONObject.of(\"id\", 0);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test3": [
                "String str2 = \"{\\\"id\\\":0}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test4": [
                "JSONObject v01 = JSONObject.of(\"id\", 9999);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test5": [
                "String str2 = \"{\\\"id\\\":9999}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test6": [
                "JSONObject v01 = JSONObject.of(\"id\", -100);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test7": [
                "String str2 = \"{\\\"id\\\":-100}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test8": [
                "JSONObject v01 = JSONObject.of(\"id\", Integer.MAX_VALUE);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test9": [
                "String str2 = \"{\\\"id\\\":2147483647}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test10": [
                "JSONObject v01 = JSONObject.of(\"id\", Integer.MIN_VALUE);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h3Test11": [
                "String str2 = \"{\\\"id\\\":-2147483648}\";"
            ]
        },
        "original_h": [
            "JSONObject v01 = JSONObject.of(\"id\", 1001);"
        ]
    },
    "org.ethereum.rpc.FilterTest.testGetNewEvents()": {
        "generated_inputs_class": [
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h3Test0",
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h3Test1",
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h3Test2",
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h3Test3",
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "Filter.FilterEvent mockEvent = null;",
                "Filter filter = new Filter();",
                "Filter.FilterEvent mockEvent2 = null;",
                "Filter filter2 = new Filter();"
            ],
            [
                "Filter.FilterEvent mockEvent = new FilterEventMock();",
                "Filter filter = null;",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock();",
                "Filter filter2 = null;"
            ],
            [
                "Filter.FilterEvent mockEvent = new FilterEventMock();",
                "Filter filter = new Filter();",
                "filter.add(mockEvent);",
                "filter.add(mockEvent);",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock();",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent2);",
                "filter2.add(mockEvent2);"
            ],
            [
                "Filter.FilterEvent mockEvent = new FilterEventMock();",
                "Filter filter = new Filter();",
                "filter.add(mockEvent);",
                "filter.add(null);",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock();",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent2);",
                "filter2.add(null);"
            ],
            [
                "Filter.FilterEvent mockEvent = new FilterEventMock();",
                "Filter filter = new Filter();",
                "filter.add(mockEvent);",
                "filter.add(new FilterEventMock());",
                "filter.add(new FilterEventMock());",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock();",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent2);",
                "filter2.add(new FilterEventMock());",
                "filter2.add(new FilterEventMock());"
            ]
        ],
        "selected": {
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h3Test0": [
                "Filter.FilterEvent mockEvent = null;",
                "Filter filter = new Filter();",
                "Filter.FilterEvent mockEvent2 = null;",
                "Filter filter2 = new Filter();"
            ],
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h3Test1": [
                "Filter.FilterEvent mockEvent = new FilterEventMock();",
                "Filter filter = null;",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock();",
                "Filter filter2 = null;"
            ],
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h3Test2": [
                "Filter.FilterEvent mockEvent = new FilterEventMock();",
                "Filter filter = new Filter();",
                "filter.add(mockEvent);",
                "filter.add(mockEvent);",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock();",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent2);",
                "filter2.add(mockEvent2);"
            ],
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h3Test3": [
                "Filter.FilterEvent mockEvent = new FilterEventMock();",
                "Filter filter = new Filter();",
                "filter.add(mockEvent);",
                "filter.add(null);",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock();",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent2);",
                "filter2.add(null);"
            ],
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h3Test4": [
                "Filter.FilterEvent mockEvent = new FilterEventMock();",
                "Filter filter = new Filter();",
                "filter.add(mockEvent);",
                "filter.add(new FilterEventMock());",
                "filter.add(new FilterEventMock());",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock();",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent2);",
                "filter2.add(new FilterEventMock());",
                "filter2.add(new FilterEventMock());"
            ]
        },
        "processed_generated": {
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h3Test0": [
                "Filter.FilterEvent mockEvent = null;",
                "Filter filter = new Filter();",
                "Filter.FilterEvent mockEvent2 = null;",
                "Filter filter2 = new Filter();"
            ],
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h3Test1": [
                "Filter.FilterEvent mockEvent = new FilterEventMock();",
                "Filter filter = null;",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock();",
                "Filter filter2 = null;"
            ],
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h3Test2": [
                "Filter.FilterEvent mockEvent = new FilterEventMock();",
                "Filter filter = new Filter();",
                "filter.add(mockEvent);",
                "filter.add(mockEvent);",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock();",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent2);",
                "filter2.add(mockEvent2);"
            ],
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h3Test3": [
                "Filter.FilterEvent mockEvent = new FilterEventMock();",
                "Filter filter = new Filter();",
                "filter.add(mockEvent);",
                "filter.add(null);",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock();",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent2);",
                "filter2.add(null);"
            ],
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h3Test4": [
                "Filter.FilterEvent mockEvent = new FilterEventMock();",
                "Filter filter = new Filter();",
                "filter.add(mockEvent);",
                "filter.add(new FilterEventMock());",
                "filter.add(new FilterEventMock());",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock();",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent2);",
                "filter2.add(new FilterEventMock());",
                "filter2.add(new FilterEventMock());"
            ]
        },
        "original_h": [
            "Filter.FilterEvent mockEvent = new FilterEventMock();",
            "Filter filter = new Filter();",
            "Filter.FilterEvent mockEvent2 = new FilterEventMock();",
            "Filter filter2 = new Filter();"
        ]
    },
    "io.arex.inst.runtime.serializer.SerializerTest.testNestedSet()": {
        "generated_inputs_class": [
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h3Test0",
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h3Test1",
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h3Test2",
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h3Test3"
        ],
        "generated_all_blocks": [
            [
                "Set<Set<Object>> set = new HashSet<>();",
                "set.add(null);",
                "set.add(new HashSet<>());",
                "set.add(null);",
                "set.add(new HashSet<>());",
                "String serializer = \"jackson\";",
                "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestedSet1-1\\\",\\\"nestedSet1-2\\\"]A@R#E$X[\\\"nestedSet2-1\\\",\\\"nestedSet2-2\\\"]\";",
                "String typeName2 = \"java.util.HashSet-java.util.HashSet,java.lang.String,java.lang.String\";"
            ],
            [
                "Set<Set<Object>> set = new HashSet<>();",
                "set.add(null);",
                "set.add(new HashSet<>());",
                "set.add(nestedSet1);",
                "String serializer = \"jackson\";",
                "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestedSet1-1\\\",\\\"nestedSet1-2\\\"]A@R#E$X[\\\"nestedSet2-1\\\",\\\"nestedSet2-2\\\"]\";",
                "String typeName2 = \"java.util.HashSet-java.util.HashSet,java.lang.String,java.lang.String\";"
            ],
            [
                "Set<Set<Object>> set = new HashSet<>();",
                "set.add(null);",
                "set.add(new HashSet<>());",
                "set.add(nestedSet1);",
                "set.add(nestedSet2);",
                "String serializer = \"jackson\";",
                "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestedSet1-1\\\",\\\"nestedSet1-2\\\"]A@R#E$X[\\\"nestedSet2-1\\\",\\\"nestedSet2-2\\\"]\";",
                "String typeName2 = \"java.util.HashSet-java.util.HashSet,java.lang.String,java.lang.String\";"
            ],
            [
                "Set<Set<Object>> set = new HashSet<>();",
                "set.add(null);",
                "set.add(new HashSet<>());",
                "set.add(nestedSet1);",
                "set.add(nestedSet2);",
                "String serializer = \"gson\";",
                "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestedSet1-1\\\",\\\"nestedSet1-2\\\"]A@R#E$X[\\\"nestedSet2-1\\\",\\\"nestedSet2-2\\\"]\";",
                "String typeName2 = \"java.util.HashSet-java.util.HashSet,java.lang.String,java.lang.String\";"
            ]
        ],
        "selected": {
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h3Test0": [
                "Set<Set<Object>> set = new HashSet<>();",
                "set.add(null);",
                "set.add(new HashSet<>());",
                "set.add(null);",
                "set.add(new HashSet<>());",
                "String serializer = \"jackson\";",
                "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestedSet1-1\\\",\\\"nestedSet1-2\\\"]A@R#E$X[\\\"nestedSet2-1\\\",\\\"nestedSet2-2\\\"]\";",
                "String typeName2 = \"java.util.HashSet-java.util.HashSet,java.lang.String,java.lang.String\";"
            ],
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h3Test1": [
                "Set<Set<Object>> set = new HashSet<>();",
                "set.add(null);",
                "set.add(new HashSet<>());",
                "set.add(nestedSet1);",
                "String serializer = \"jackson\";",
                "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestedSet1-1\\\",\\\"nestedSet1-2\\\"]A@R#E$X[\\\"nestedSet2-1\\\",\\\"nestedSet2-2\\\"]\";",
                "String typeName2 = \"java.util.HashSet-java.util.HashSet,java.lang.String,java.lang.String\";"
            ],
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h3Test2": [
                "Set<Set<Object>> set = new HashSet<>();",
                "set.add(null);",
                "set.add(new HashSet<>());",
                "set.add(nestedSet1);",
                "set.add(nestedSet2);",
                "String serializer = \"jackson\";",
                "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestedSet1-1\\\",\\\"nestedSet1-2\\\"]A@R#E$X[\\\"nestedSet2-1\\\",\\\"nestedSet2-2\\\"]\";",
                "String typeName2 = \"java.util.HashSet-java.util.HashSet,java.lang.String,java.lang.String\";"
            ],
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h3Test3": [
                "Set<Set<Object>> set = new HashSet<>();",
                "set.add(null);",
                "set.add(new HashSet<>());",
                "set.add(nestedSet1);",
                "set.add(nestedSet2);",
                "String serializer = \"gson\";",
                "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestedSet1-1\\\",\\\"nestedSet1-2\\\"]A@R#E$X[\\\"nestedSet2-1\\\",\\\"nestedSet2-2\\\"]\";",
                "String typeName2 = \"java.util.HashSet-java.util.HashSet,java.lang.String,java.lang.String\";"
            ]
        },
        "processed_generated": {
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h3Test0": [
                "Set<Set<Object>> set = new HashSet<>();",
                "set.add(null);",
                "set.add(new HashSet<>());",
                "set.add(null);",
                "set.add(new HashSet<>());",
                "String serializer = \"jackson\";",
                "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestedSet1-1\\\",\\\"nestedSet1-2\\\"]A@R#E$X[\\\"nestedSet2-1\\\",\\\"nestedSet2-2\\\"]\";",
                "String typeName2 = \"java.util.HashSet-java.util.HashSet,java.lang.String,java.lang.String\";"
            ],
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h3Test1": [
                "Set<Set<Object>> set = new HashSet<>();",
                "set.add(null);",
                "set.add(new HashSet<>());",
                "set.add(nestedSet1);",
                "String serializer = \"jackson\";",
                "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestedSet1-1\\\",\\\"nestedSet1-2\\\"]A@R#E$X[\\\"nestedSet2-1\\\",\\\"nestedSet2-2\\\"]\";",
                "String typeName2 = \"java.util.HashSet-java.util.HashSet,java.lang.String,java.lang.String\";"
            ],
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h3Test2": [
                "Set<Set<Object>> set = new HashSet<>();",
                "set.add(null);",
                "set.add(new HashSet<>());",
                "set.add(nestedSet1);",
                "set.add(nestedSet2);",
                "String serializer = \"jackson\";",
                "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestedSet1-1\\\",\\\"nestedSet1-2\\\"]A@R#E$X[\\\"nestedSet2-1\\\",\\\"nestedSet2-2\\\"]\";",
                "String typeName2 = \"java.util.HashSet-java.util.HashSet,java.lang.String,java.lang.String\";"
            ],
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h3Test3": [
                "Set<Set<Object>> set = new HashSet<>();",
                "set.add(null);",
                "set.add(new HashSet<>());",
                "set.add(nestedSet1);",
                "set.add(nestedSet2);",
                "String serializer = \"gson\";",
                "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestedSet1-1\\\",\\\"nestedSet1-2\\\"]A@R#E$X[\\\"nestedSet2-1\\\",\\\"nestedSet2-2\\\"]\";",
                "String typeName2 = \"java.util.HashSet-java.util.HashSet,java.lang.String,java.lang.String\";"
            ]
        },
        "original_h": [
            "Set<Set<Object>> set = new HashSet<>();",
            "set.add(null);",
            "set.add(new HashSet<>());",
            "set.add(null);",
            "set.add(new HashSet<>());",
            "set.add(nestedSet1);",
            "set.add(nestedSet2);",
            "String serializer = \"jackson\";",
            "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestedSet1-1\\\",\\\"nestedSet1-2\\\"]A@R#E$X[\\\"nestedSet2-1\\\",\\\"nestedSet2-2\\\"]\";",
            "String typeName2 = \"java.util.HashSet-java.util.HashSet,java.lang.String,java.lang.String\";"
        ]
    },
    "io.vertx.core.json.jackson.HybridJacksonPoolTest.testVirtualThreadPoolWithSingleThread()": {
        "generated_inputs_class": [
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h3Test0",
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h3Test1",
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h3Test2",
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h3Test3",
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(0);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(0);"
            ],
            [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(10);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(10);"
            ],
            [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(-1);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(-1);"
            ],
            [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(Integer.MAX_VALUE);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(Integer.MAX_VALUE);"
            ],
            [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(Integer.MIN_VALUE);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(Integer.MIN_VALUE);"
            ]
        ],
        "selected": {
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h3Test0": [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(0);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(0);"
            ],
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h3Test1": [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(10);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(10);"
            ],
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h3Test2": [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(-1);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(-1);"
            ],
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h3Test3": [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(Integer.MAX_VALUE);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(Integer.MAX_VALUE);"
            ],
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h3Test4": [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(Integer.MIN_VALUE);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(Integer.MIN_VALUE);"
            ]
        },
        "processed_generated": {
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h3Test0": [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(0);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(0);"
            ],
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h3Test1": [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(10);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(10);"
            ],
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h3Test2": [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(-1);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(-1);"
            ],
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h3Test3": [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(Integer.MAX_VALUE);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(Integer.MAX_VALUE);"
            ],
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h3Test4": [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(Integer.MIN_VALUE);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(Integer.MIN_VALUE);"
            ]
        },
        "original_h": [
            "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(4);",
            "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(4);"
        ]
    },
    "org.ojalgo.data.transform.DiscreteFourierTransformTest.testShiftAndRevertEven()": {
        "generated_inputs_class": [
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test0",
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test1",
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test2",
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test3",
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test4",
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test5",
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test6",
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test7",
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test8",
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test9"
        ],
        "generated_all_blocks": [
            [
                "Primitive64Store original = Primitive64Store.FACTORY.make(1, 1);",
                "original.set(0, 0, 0);"
            ],
            [
                "Primitive64Store shifted2 = Primitive64Store.FACTORY.make(1, 1);",
                "shifted2.set(0, 0, 0);"
            ],
            [
                "Primitive64Store original = Primitive64Store.FACTORY.make(3, 3);",
                "original.set(0, 0, 1);",
                "original.set(0, 1, 2);",
                "original.set(0, 2, 3);",
                "original.set(1, 0, 4);",
                "original.set(1, 1, 5);",
                "original.set(1, 2, 6);",
                "original.set(2, 0, 7);",
                "original.set(2, 1, 8);",
                "original.set(2, 2, 9);"
            ],
            [
                "Primitive64Store shifted2 = Primitive64Store.FACTORY.make(3, 3);",
                "shifted2.set(0, 0, 9);",
                "shifted2.set(0, 1, 8);",
                "shifted2.set(0, 2, 7);",
                "shifted2.set(1, 0, 6);",
                "shifted2.set(1, 1, 5);",
                "shifted2.set(1, 2, 4);",
                "shifted2.set(2, 0, 3);",
                "shifted2.set(2, 1, 2);",
                "shifted2.set(2, 2, 1);"
            ],
            [
                "Primitive64Store original = Primitive64Store.FACTORY.make(4, 2);",
                "original.set(0, 0, 1);",
                "original.set(0, 1, 2);",
                "original.set(1, 0, 3);",
                "original.set(1, 1, 4);",
                "original.set(2, 0, 5);",
                "original.set(2, 1, 6);",
                "original.set(3, 0, 7);",
                "original.set(3, 1, 8);"
            ],
            [
                "Primitive64Store shifted2 = Primitive64Store.FACTORY.make(4, 2);",
                "shifted2.set(0, 0, 8);",
                "shifted2.set(0, 1, 7);",
                "shifted2.set(1, 0, 6);",
                "shifted2.set(1, 1, 5);",
                "shifted2.set(2, 0, 4);",
                "shifted2.set(2, 1, 3);",
                "shifted2.set(3, 0, 2);",
                "shifted2.set(3, 1, 1);"
            ],
            [
                "Primitive64Store original = Primitive64Store.FACTORY.make(2, 4);",
                "original.set(0, 0, 1);",
                "original.set(0, 1, 2);",
                "original.set(0, 2, 3);",
                "original.set(0, 3, 4);",
                "original.set(1, 0, 5);",
                "original.set(1, 1, 6);",
                "original.set(1, 2, 7);",
                "original.set(1, 3, 8);"
            ],
            [
                "Primitive64Store shifted2 = Primitive64Store.FACTORY.make(2, 4);",
                "shifted2.set(0, 0, 8);",
                "shifted2.set(0, 1, 7);",
                "shifted2.set(0, 2, 6);",
                "shifted2.set(0, 3, 5);",
                "shifted2.set(1, 0, 4);",
                "shifted2.set(1, 1, 3);",
                "shifted2.set(1, 2, 2);",
                "shifted2.set(1, 3, 1);"
            ],
            [
                "Primitive64Store original = Primitive64Store.FACTORY.make(0, 0);"
            ],
            [
                "Primitive64Store shifted2 = Primitive64Store.FACTORY.make(0, 0);"
            ]
        ],
        "selected": {
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test0": [
                "Primitive64Store original = Primitive64Store.FACTORY.make(1, 1);",
                "original.set(0, 0, 0);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test1": [
                "Primitive64Store shifted2 = Primitive64Store.FACTORY.make(1, 1);",
                "shifted2.set(0, 0, 0);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test2": [
                "Primitive64Store original = Primitive64Store.FACTORY.make(3, 3);",
                "original.set(0, 0, 1);",
                "original.set(0, 1, 2);",
                "original.set(0, 2, 3);",
                "original.set(1, 0, 4);",
                "original.set(1, 1, 5);",
                "original.set(1, 2, 6);",
                "original.set(2, 0, 7);",
                "original.set(2, 1, 8);",
                "original.set(2, 2, 9);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test3": [
                "Primitive64Store shifted2 = Primitive64Store.FACTORY.make(3, 3);",
                "shifted2.set(0, 0, 9);",
                "shifted2.set(0, 1, 8);",
                "shifted2.set(0, 2, 7);",
                "shifted2.set(1, 0, 6);",
                "shifted2.set(1, 1, 5);",
                "shifted2.set(1, 2, 4);",
                "shifted2.set(2, 0, 3);",
                "shifted2.set(2, 1, 2);",
                "shifted2.set(2, 2, 1);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test4": [
                "Primitive64Store original = Primitive64Store.FACTORY.make(4, 2);",
                "original.set(0, 0, 1);",
                "original.set(0, 1, 2);",
                "original.set(1, 0, 3);",
                "original.set(1, 1, 4);",
                "original.set(2, 0, 5);",
                "original.set(2, 1, 6);",
                "original.set(3, 0, 7);",
                "original.set(3, 1, 8);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test5": [
                "Primitive64Store shifted2 = Primitive64Store.FACTORY.make(4, 2);",
                "shifted2.set(0, 0, 8);",
                "shifted2.set(0, 1, 7);",
                "shifted2.set(1, 0, 6);",
                "shifted2.set(1, 1, 5);",
                "shifted2.set(2, 0, 4);",
                "shifted2.set(2, 1, 3);",
                "shifted2.set(3, 0, 2);",
                "shifted2.set(3, 1, 1);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test6": [
                "Primitive64Store original = Primitive64Store.FACTORY.make(2, 4);",
                "original.set(0, 0, 1);",
                "original.set(0, 1, 2);",
                "original.set(0, 2, 3);",
                "original.set(0, 3, 4);",
                "original.set(1, 0, 5);",
                "original.set(1, 1, 6);",
                "original.set(1, 2, 7);",
                "original.set(1, 3, 8);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test7": [
                "Primitive64Store shifted2 = Primitive64Store.FACTORY.make(2, 4);",
                "shifted2.set(0, 0, 8);",
                "shifted2.set(0, 1, 7);",
                "shifted2.set(0, 2, 6);",
                "shifted2.set(0, 3, 5);",
                "shifted2.set(1, 0, 4);",
                "shifted2.set(1, 1, 3);",
                "shifted2.set(1, 2, 2);",
                "shifted2.set(1, 3, 1);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test8": [
                "Primitive64Store original = Primitive64Store.FACTORY.make(0, 0);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test9": [
                "Primitive64Store shifted2 = Primitive64Store.FACTORY.make(0, 0);"
            ]
        },
        "processed_generated": {
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test0": [
                "Primitive64Store original = Primitive64Store.FACTORY.make(1, 1);",
                "original.set(0, 0, 0);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test1": [
                "Primitive64Store shifted2 = Primitive64Store.FACTORY.make(1, 1);",
                "shifted2.set(0, 0, 0);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test2": [
                "Primitive64Store original = Primitive64Store.FACTORY.make(3, 3);",
                "original.set(0, 0, 1);",
                "original.set(0, 1, 2);",
                "original.set(0, 2, 3);",
                "original.set(1, 0, 4);",
                "original.set(1, 1, 5);",
                "original.set(1, 2, 6);",
                "original.set(2, 0, 7);",
                "original.set(2, 1, 8);",
                "original.set(2, 2, 9);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test3": [
                "Primitive64Store shifted2 = Primitive64Store.FACTORY.make(3, 3);",
                "shifted2.set(0, 0, 9);",
                "shifted2.set(0, 1, 8);",
                "shifted2.set(0, 2, 7);",
                "shifted2.set(1, 0, 6);",
                "shifted2.set(1, 1, 5);",
                "shifted2.set(1, 2, 4);",
                "shifted2.set(2, 0, 3);",
                "shifted2.set(2, 1, 2);",
                "shifted2.set(2, 2, 1);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test4": [
                "Primitive64Store original = Primitive64Store.FACTORY.make(4, 2);",
                "original.set(0, 0, 1);",
                "original.set(0, 1, 2);",
                "original.set(1, 0, 3);",
                "original.set(1, 1, 4);",
                "original.set(2, 0, 5);",
                "original.set(2, 1, 6);",
                "original.set(3, 0, 7);",
                "original.set(3, 1, 8);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test5": [
                "Primitive64Store shifted2 = Primitive64Store.FACTORY.make(4, 2);",
                "shifted2.set(0, 0, 8);",
                "shifted2.set(0, 1, 7);",
                "shifted2.set(1, 0, 6);",
                "shifted2.set(1, 1, 5);",
                "shifted2.set(2, 0, 4);",
                "shifted2.set(2, 1, 3);",
                "shifted2.set(3, 0, 2);",
                "shifted2.set(3, 1, 1);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test6": [
                "Primitive64Store original = Primitive64Store.FACTORY.make(2, 4);",
                "original.set(0, 0, 1);",
                "original.set(0, 1, 2);",
                "original.set(0, 2, 3);",
                "original.set(0, 3, 4);",
                "original.set(1, 0, 5);",
                "original.set(1, 1, 6);",
                "original.set(1, 2, 7);",
                "original.set(1, 3, 8);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test7": [
                "Primitive64Store shifted2 = Primitive64Store.FACTORY.make(2, 4);",
                "shifted2.set(0, 0, 8);",
                "shifted2.set(0, 1, 7);",
                "shifted2.set(0, 2, 6);",
                "shifted2.set(0, 3, 5);",
                "shifted2.set(1, 0, 4);",
                "shifted2.set(1, 1, 3);",
                "shifted2.set(1, 2, 2);",
                "shifted2.set(1, 3, 1);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test8": [
                "Primitive64Store original = Primitive64Store.FACTORY.make(0, 0);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h3Test9": [
                ""
            ]
        },
        "original_h": [
            "Primitive64Store original = Primitive64Store.FACTORY.make(2, 2);",
            "original.set(i, j, i + j);"
        ]
    },
    "org.threeten.extra.TestYearHalf.test_isLeapYear_int()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h3Test0"
        ],
        "generated_all_blocks": [
            [
                "YearHalf test2 = YearHalf.of(year, half.getValue());"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h3Test0": [
                "YearHalf test2 = YearHalf.of(year, half.getValue());"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h3Test0": [
                "YearHalf test2 = YearHalf.of(year, half.getValue());"
            ]
        },
        "original_h": [
            "Half half = Half.H1;",
            "int year = 500;"
        ]
    },
    "org.ethereum.rpc.FilterTest.testGetEventsInternal()": {
        "generated_inputs_class": [
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h3Test0",
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h3Test1",
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h3Test2",
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h3Test3"
        ],
        "generated_all_blocks": [
            [
                "Filter filter = new Filter();",
                "filter.add(mockEvent1);",
                "filter.add(mockEvent2);",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent1);",
                "filter2.add(mockEvent2);"
            ],
            [
                "Filter filter = new Filter();",
                "filter.add(mockEvent1);",
                "filter.add(mockEvent2);",
                "filter.add(mockEvent1);",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent1);",
                "filter2.add(mockEvent2);",
                "filter2.add(mockEvent1);"
            ],
            [
                "Filter filter = new Filter();",
                "filter.add(mockEvent1);",
                "filter.add(mockEvent2);",
                "filter.add(null);",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent1);",
                "filter2.add(mockEvent2);",
                "filter2.add(null);"
            ],
            [
                "Filter filter = new Filter();",
                "filter.add(mockEvent1);",
                "filter.add(mockEvent2);",
                "filter.add(new FilterEventMock());",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent1);",
                "filter2.add(mockEvent2);",
                "filter2.add(new FilterEventMock());"
            ]
        ],
        "selected": {
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h3Test0": [
                "Filter filter = new Filter();",
                "filter.add(mockEvent1);",
                "filter.add(mockEvent2);",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent1);",
                "filter2.add(mockEvent2);"
            ],
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h3Test1": [
                "Filter filter = new Filter();",
                "filter.add(mockEvent1);",
                "filter.add(mockEvent2);",
                "filter.add(mockEvent1);",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent1);",
                "filter2.add(mockEvent2);",
                "filter2.add(mockEvent1);"
            ],
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h3Test2": [
                "Filter filter = new Filter();",
                "filter.add(mockEvent1);",
                "filter.add(mockEvent2);",
                "filter.add(null);",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent1);",
                "filter2.add(mockEvent2);",
                "filter2.add(null);"
            ],
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h3Test3": [
                "Filter filter = new Filter();",
                "filter.add(mockEvent1);",
                "filter.add(mockEvent2);",
                "filter.add(new FilterEventMock());",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent1);",
                "filter2.add(mockEvent2);",
                "filter2.add(new FilterEventMock());"
            ]
        },
        "processed_generated": {
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h3Test0": [
                "Filter filter = new Filter();",
                "filter.add(mockEvent1);",
                "filter.add(mockEvent2);",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent1);",
                "filter2.add(mockEvent2);"
            ],
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h3Test1": [
                "Filter filter = new Filter();",
                "filter.add(mockEvent1);",
                "filter.add(mockEvent2);",
                "filter.add(mockEvent1);",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent1);",
                "filter2.add(mockEvent2);",
                "filter2.add(mockEvent1);"
            ],
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h3Test2": [
                "Filter filter = new Filter();",
                "filter.add(mockEvent1);",
                "filter.add(mockEvent2);",
                "filter.add(null);",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent1);",
                "filter2.add(mockEvent2);",
                "filter2.add(null);"
            ],
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h3Test3": [
                "Filter filter = new Filter();",
                "filter.add(mockEvent1);",
                "filter.add(mockEvent2);",
                "filter.add(new FilterEventMock());",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent1);",
                "filter2.add(mockEvent2);",
                "filter2.add(new FilterEventMock());"
            ]
        },
        "original_h": [
            "Filter filter = new Filter();",
            "filter.add(mockEvent1);",
            "filter.add(mockEvent2);",
            "Filter filter2 = new Filter();",
            "filter2.add(mockEvent1);",
            "filter2.add(mockEvent2);"
        ]
    },
    "io.arex.inst.runtime.model.SerializeSkipInfoTest.testToString()": {
        "generated_inputs_class": [
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h3Test0",
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h3Test1",
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h3Test2",
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h3Test3",
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName\");",
                "serializeSkipInfo.setFullClassName(\"\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName\");",
                "serializeSkipInfo2.setFullClassName(\"\");"
            ],
            [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(null);",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(null);",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName\");",
                "serializeSkipInfo.setFullClassName(null);",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName\");",
                "serializeSkipInfo2.setFullClassName(null);"
            ]
        ],
        "selected": {
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h3Test0": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h3Test1": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName\");",
                "serializeSkipInfo.setFullClassName(\"\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName\");",
                "serializeSkipInfo2.setFullClassName(\"\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h3Test2": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h3Test3": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(null);",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(null);",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h3Test4": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName\");",
                "serializeSkipInfo.setFullClassName(null);",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName\");",
                "serializeSkipInfo2.setFullClassName(null);"
            ]
        },
        "processed_generated": {
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h3Test0": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h3Test1": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName\");",
                "serializeSkipInfo.setFullClassName(\"\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName\");",
                "serializeSkipInfo2.setFullClassName(\"\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h3Test2": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h3Test3": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(null);",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(null);",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h3Test4": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName\");",
                "serializeSkipInfo.setFullClassName(null);",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName\");",
                "serializeSkipInfo2.setFullClassName(null);"
            ]
        },
        "original_h": [
            "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
            "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
            "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
            "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
            "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
            "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
        ]
    },
    "org.myrobotlab.service.I2cMuxTest.testSetDeviceBus()": {
        "generated_inputs_class": [
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h3Test0",
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h3Test1",
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h3Test2",
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h3Test3",
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"0\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
            ],
            [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"7\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
            ],
            [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"3\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
            ],
            [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"2\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
            ],
            [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"5\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
            ]
        ],
        "selected": {
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h3Test0": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"0\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h3Test1": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"7\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h3Test2": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"3\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h3Test3": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"2\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h3Test4": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"5\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
            ]
        },
        "processed_generated": {
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h3Test0": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"0\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h3Test1": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"7\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h3Test2": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"3\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h3Test3": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"2\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h3Test4": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"5\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
            ]
        },
        "original_h": [
            "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
            "String deviceBus = \"1\";",
            "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test5()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test0",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test1",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test2",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test3",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test4",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test5",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test6",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test7",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test8",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test9"
        ],
        "generated_all_blocks": [
            [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"103\", 3D);",
                "v01.put(\"104\", 4D);"
            ],
            [
                "String str = \"{\\\"103\\\":3.0,\\\"104\\\":4.0}\";",
                "Map<String, Double> v02 = JSON.parseObject(str, new TypeReference<Map<String, Double>>() {}.getType());"
            ],
            [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"105\", 5D);"
            ],
            [
                "String str = \"{\\\"105\\\":5.0}\";",
                "Map<String, Double> v02 = JSON.parseObject(str, new TypeReference<Map<String, Double>>() {}.getType());"
            ],
            [
                "Map<String, Double> v01 = new HashMap<>();"
            ],
            [
                "String str = \"{}\";",
                "Map<String, Double> v02 = JSON.parseObject(str, new TypeReference<Map<String, Double>>() {}.getType());"
            ],
            [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"101\", 1D);",
                "v01.put(\"102\", null);"
            ],
            [
                "String str = \"{\\\"101\\\":1.0,\\\"102\\\":null}\";",
                "Map<String, Double> v02 = JSON.parseObject(str, new TypeReference<Map<String, Double>>() {}.getType());"
            ],
            [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"101\", Double.POSITIVE_INFINITY);",
                "v01.put(\"102\", Double.NEGATIVE_INFINITY);"
            ],
            [
                "String str = \"{\\\"101\\\":Infinity,\\\"102\\\":-Infinity}\";",
                "Map<String, Double> v02 = JSON.parseObject(str, new TypeReference<Map<String, Double>>() {}.getType());"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test0": [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"103\", 3D);",
                "v01.put(\"104\", 4D);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test1": [
                "String str = \"{\\\"103\\\":3.0,\\\"104\\\":4.0}\";",
                "Map<String, Double> v02 = JSON.parseObject(str, new TypeReference<Map<String, Double>>() {}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test2": [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"105\", 5D);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test3": [
                "String str = \"{\\\"105\\\":5.0}\";",
                "Map<String, Double> v02 = JSON.parseObject(str, new TypeReference<Map<String, Double>>() {}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test4": [
                "Map<String, Double> v01 = new HashMap<>();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test5": [
                "String str = \"{}\";",
                "Map<String, Double> v02 = JSON.parseObject(str, new TypeReference<Map<String, Double>>() {}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test6": [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"101\", 1D);",
                "v01.put(\"102\", null);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test7": [
                "String str = \"{\\\"101\\\":1.0,\\\"102\\\":null}\";",
                "Map<String, Double> v02 = JSON.parseObject(str, new TypeReference<Map<String, Double>>() {}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test8": [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"101\", Double.POSITIVE_INFINITY);",
                "v01.put(\"102\", Double.NEGATIVE_INFINITY);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test9": [
                "String str = \"{\\\"101\\\":Infinity,\\\"102\\\":-Infinity}\";",
                "Map<String, Double> v02 = JSON.parseObject(str, new TypeReference<Map<String, Double>>() {}.getType());"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test0": [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"103\", 3D);",
                "v01.put(\"104\", 4D);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test1": [
                ""
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test2": [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"105\", 5D);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test3": [
                ""
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test4": [
                "Map<String, Double> v01 = new HashMap<>();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test5": [
                ""
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test6": [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"101\", 1D);",
                "v01.put(\"102\", null);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test7": [
                ""
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test8": [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"101\", Double.POSITIVE_INFINITY);",
                "v01.put(\"102\", Double.NEGATIVE_INFINITY);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test9": [
                ""
            ]
        },
        "original_h": [
            "Map<String, Double> v01 = new HashMap<>();",
            "v01.put(\"101\", 1D);",
            "v01.put(\"102\", 2D);"
        ]
    },
    "io.cucumber.core.eventbus.RandomUuidGeneratorTest.generates_different_non_null_uuids()": {
        "generated_inputs_class": [
            "io.cucumber.core.eventbus.RandomUuidGeneratorTest_generates_different_non_null_uuids_h3Test0",
            "io.cucumber.core.eventbus.RandomUuidGeneratorTest_generates_different_non_null_uuids_h3Test1",
            "io.cucumber.core.eventbus.RandomUuidGeneratorTest_generates_different_non_null_uuids_h3Test2",
            "io.cucumber.core.eventbus.RandomUuidGeneratorTest_generates_different_non_null_uuids_h3Test3",
            "io.cucumber.core.eventbus.RandomUuidGeneratorTest_generates_different_non_null_uuids_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "UuidGenerator generator = new SequentialUuidGenerator();",
                "UuidGenerator generator2 = new SequentialUuidGenerator();"
            ],
            [
                "UuidGenerator generator = new CustomUuidGenerator();",
                "UuidGenerator generator2 = new CustomUuidGenerator();"
            ],
            [
                "UuidGenerator generator = new CachedUuidGenerator(new RandomUuidGenerator());",
                "UuidGenerator generator2 = new CachedUuidGenerator(new RandomUuidGenerator());"
            ],
            [
                "UuidGenerator generator = new SecureRandomUuidGenerator();",
                "UuidGenerator generator2 = new SecureRandomUuidGenerator();"
            ],
            [
                "UuidGenerator generator = new TimeBasedUuidGenerator();",
                "UuidGenerator generator2 = new TimeBasedUuidGenerator();"
            ]
        ],
        "selected": {
            "io.cucumber.core.eventbus.RandomUuidGeneratorTest_generates_different_non_null_uuids_h3Test0": [
                "UuidGenerator generator = new SequentialUuidGenerator();",
                "UuidGenerator generator2 = new SequentialUuidGenerator();"
            ],
            "io.cucumber.core.eventbus.RandomUuidGeneratorTest_generates_different_non_null_uuids_h3Test1": [
                "UuidGenerator generator = new CustomUuidGenerator();",
                "UuidGenerator generator2 = new CustomUuidGenerator();"
            ],
            "io.cucumber.core.eventbus.RandomUuidGeneratorTest_generates_different_non_null_uuids_h3Test2": [
                "UuidGenerator generator = new CachedUuidGenerator(new RandomUuidGenerator());",
                "UuidGenerator generator2 = new CachedUuidGenerator(new RandomUuidGenerator());"
            ],
            "io.cucumber.core.eventbus.RandomUuidGeneratorTest_generates_different_non_null_uuids_h3Test3": [
                "UuidGenerator generator = new SecureRandomUuidGenerator();",
                "UuidGenerator generator2 = new SecureRandomUuidGenerator();"
            ],
            "io.cucumber.core.eventbus.RandomUuidGeneratorTest_generates_different_non_null_uuids_h3Test4": [
                "UuidGenerator generator = new TimeBasedUuidGenerator();",
                "UuidGenerator generator2 = new TimeBasedUuidGenerator();"
            ]
        },
        "processed_generated": {
            "io.cucumber.core.eventbus.RandomUuidGeneratorTest_generates_different_non_null_uuids_h3Test0": [
                "UuidGenerator generator = new SequentialUuidGenerator();",
                "UuidGenerator generator2 = new SequentialUuidGenerator();"
            ],
            "io.cucumber.core.eventbus.RandomUuidGeneratorTest_generates_different_non_null_uuids_h3Test1": [
                "UuidGenerator generator = new CustomUuidGenerator();",
                "UuidGenerator generator2 = new CustomUuidGenerator();"
            ],
            "io.cucumber.core.eventbus.RandomUuidGeneratorTest_generates_different_non_null_uuids_h3Test2": [
                "UuidGenerator generator = new CachedUuidGenerator(new RandomUuidGenerator());",
                "UuidGenerator generator2 = new CachedUuidGenerator(new RandomUuidGenerator());"
            ],
            "io.cucumber.core.eventbus.RandomUuidGeneratorTest_generates_different_non_null_uuids_h3Test3": [
                "UuidGenerator generator = new SecureRandomUuidGenerator();",
                "UuidGenerator generator2 = new SecureRandomUuidGenerator();"
            ],
            "io.cucumber.core.eventbus.RandomUuidGeneratorTest_generates_different_non_null_uuids_h3Test4": [
                "UuidGenerator generator = new TimeBasedUuidGenerator();",
                "UuidGenerator generator2 = new TimeBasedUuidGenerator();"
            ]
        },
        "original_h": [
            "UuidGenerator generator = new RandomUuidGenerator();",
            "UuidGenerator generator2 = new RandomUuidGenerator();"
        ]
    },
    "org.opentripplanner.framework.model.CostTest.testHashCodeAndEquals()": {
        "generated_inputs_class": [
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h3Test0",
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h3Test1",
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h3Test2",
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h3Test3",
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "Cost subject = Cost.costOfSeconds(0);",
                "Cost other = Cost.costOfSeconds(1);"
            ],
            [
                "Cost subject = Cost.costOfSeconds(Integer.MAX_VALUE);",
                "Cost other = Cost.costOfSeconds(Integer.MIN_VALUE);"
            ],
            [
                "Cost subject = Cost.costOfSeconds(-10);",
                "Cost other = Cost.costOfSeconds(-11);"
            ],
            [
                "Cost subject = Cost.costOfSeconds(1000000);",
                "Cost other = Cost.costOfSeconds(1000001);"
            ],
            [
                "Cost subject = Cost.costOfSeconds(1);",
                "Cost other = Cost.costOfSeconds(2);"
            ]
        ],
        "selected": {
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h3Test0": [
                "Cost subject = Cost.costOfSeconds(0);",
                "Cost other = Cost.costOfSeconds(1);"
            ],
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h3Test1": [
                "Cost subject = Cost.costOfSeconds(Integer.MAX_VALUE);",
                "Cost other = Cost.costOfSeconds(Integer.MIN_VALUE);"
            ],
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h3Test2": [
                "Cost subject = Cost.costOfSeconds(-10);",
                "Cost other = Cost.costOfSeconds(-11);"
            ],
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h3Test3": [
                "Cost subject = Cost.costOfSeconds(1000000);",
                "Cost other = Cost.costOfSeconds(1000001);"
            ],
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h3Test4": [
                "Cost subject = Cost.costOfSeconds(1);",
                "Cost other = Cost.costOfSeconds(2);"
            ]
        },
        "processed_generated": {
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h3Test0": [
                "Cost subject = Cost.costOfSeconds(0);",
                "Cost other = Cost.costOfSeconds(1);"
            ],
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h3Test1": [
                "Cost subject = Cost.costOfSeconds(Integer.MAX_VALUE);",
                "Cost other = Cost.costOfSeconds(Integer.MIN_VALUE);"
            ],
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h3Test2": [
                "Cost subject = Cost.costOfSeconds(-10);",
                "Cost other = Cost.costOfSeconds(-11);"
            ],
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h3Test3": [
                "Cost subject = Cost.costOfSeconds(1000000);",
                "Cost other = Cost.costOfSeconds(1000001);"
            ],
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h3Test4": [
                "Cost subject = Cost.costOfSeconds(1);",
                "Cost other = Cost.costOfSeconds(2);"
            ]
        },
        "original_h": [
            "Cost subject = Cost.costOfSeconds(10);",
            "Cost other = Cost.costOfSeconds(11);"
        ]
    },
    "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest.testGetThreadPoolId()": {
        "generated_inputs_class": [
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetThreadPoolId_h3Test0"
        ],
        "generated_all_blocks": [
            [
                "@Test",
                "public void testGetThreadPoolId() {",
                "ExtensibleThreadPoolExecutor executor = new ExtensibleThreadPoolExecutor(\"test\", manager, 5, 5, 1000L, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(1), Thread::new, new ThreadPoolExecutor.AbortPolicy());",
                "ThreadPoolPluginSupport support = new TestSupport(executor.getThreadPoolId(), executor, manager);",
                "Assert.assertEquals(executor.getThreadPoolId(), support.getThreadPoolId());",
                "",
                "// New source input",
                "ExtensibleThreadPoolExecutor newExecutor = new ExtensibleThreadPoolExecutor(\"newTest\", manager, 10, 10, 2000L, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(1), Thread::new, new ThreadPoolExecutor.AbortPolicy());",
                "ThreadPoolPluginSupport newSupport = new TestSupport(newExecutor.getThreadPoolId(), newExecutor, manager);",
                "Assert.assertEquals(newExecutor.getThreadPoolId(), newSupport.getThreadPoolId());",
                "}"
            ]
        ],
        "selected": {
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetThreadPoolId_h3Test0": [
                "@Test",
                "public void testGetThreadPoolId() {",
                "ExtensibleThreadPoolExecutor executor = new ExtensibleThreadPoolExecutor(\"test\", manager, 5, 5, 1000L, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(1), Thread::new, new ThreadPoolExecutor.AbortPolicy());",
                "ThreadPoolPluginSupport support = new TestSupport(executor.getThreadPoolId(), executor, manager);",
                "Assert.assertEquals(executor.getThreadPoolId(), support.getThreadPoolId());",
                "",
                "// New source input",
                "ExtensibleThreadPoolExecutor newExecutor = new ExtensibleThreadPoolExecutor(\"newTest\", manager, 10, 10, 2000L, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(1), Thread::new, new ThreadPoolExecutor.AbortPolicy());",
                "ThreadPoolPluginSupport newSupport = new TestSupport(newExecutor.getThreadPoolId(), newExecutor, manager);",
                "Assert.assertEquals(newExecutor.getThreadPoolId(), newSupport.getThreadPoolId());",
                "}"
            ]
        },
        "processed_generated": {
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetThreadPoolId_h3Test0": [
                "ExtensibleThreadPoolExecutor executor = new ExtensibleThreadPoolExecutor(\"test\", manager, 5, 5, 1000L, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(1), Thread::new, new ThreadPoolExecutor.AbortPolicy());",
                "ThreadPoolPluginSupport support = new TestSupport(executor.getThreadPoolId(), executor, manager);"
            ]
        },
        "original_h": [
            ""
        ]
    },
    "org.apache.druid.collections.CloseableResourceHolderTest.testCloseableResourceHolder()": {
        "generated_inputs_class": [
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h3Test0",
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h3Test1",
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h3Test2",
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h3Test3",
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "Closeable closeable = new FileInputStream(\"file.txt\");",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            [
                "Closeable closeable = new Socket(\"localhost\", 8080);",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            [
                "Closeable closeable = new ByteArrayOutputStream();",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            [
                "Closeable closeable = new StringReader(\"Hello, World!\");",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            [
                "Closeable closeable = new PipedOutputStream();",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ]
        ],
        "selected": {
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h3Test0": [
                "Closeable closeable = new FileInputStream(\"file.txt\");",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h3Test1": [
                "Closeable closeable = new Socket(\"localhost\", 8080);",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h3Test2": [
                "Closeable closeable = new ByteArrayOutputStream();",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h3Test3": [
                "Closeable closeable = new StringReader(\"Hello, World!\");",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h3Test4": [
                "Closeable closeable = new PipedOutputStream();",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ]
        },
        "processed_generated": {
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h3Test0": [
                "Closeable closeable = new FileInputStream(\"file.txt\");",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h3Test1": [
                "Closeable closeable = new Socket(\"localhost\", 8080);",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h3Test2": [
                "Closeable closeable = new ByteArrayOutputStream();",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h3Test3": [
                "Closeable closeable = new StringReader(\"Hello, World!\");",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h3Test4": [
                "Closeable closeable = new PipedOutputStream();",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ]
        },
        "original_h": [
            "Closeable closeable = closeCounter::incrementAndGet;",
            "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
        ]
    },
    "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest.test_stripJobName_avoidDuplicatesWithLongDataSourceName()": {
        "generated_inputs_class": [
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test0",
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test1",
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test2",
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test3",
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_118_pcgkebcl_2023-07-19T16:53:11.416Z\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z\";"
            ],
            [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.417Z\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";"
            ],
            [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:12.416Z\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";"
            ],
            [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:54:11.416Z\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";"
            ],
            [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T17:53:11.416Z\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";"
            ]
        ],
        "selected": {
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test0": [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_118_pcgkebcl_2023-07-19T16:53:11.416Z\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z\";"
            ],
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test1": [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.417Z\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";"
            ],
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test2": [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:12.416Z\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";"
            ],
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test3": [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:54:11.416Z\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";"
            ],
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test4": [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T17:53:11.416Z\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";"
            ]
        },
        "processed_generated": {
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test0": [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_118_pcgkebcl_2023-07-19T16:53:11.416Z\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z\";"
            ],
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test1": [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.417Z\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";"
            ],
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test2": [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:12.416Z\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";"
            ],
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test3": [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:54:11.416Z\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";"
            ],
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test4": [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T17:53:11.416Z\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";"
            ]
        },
        "original_h": [
            "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";",
            "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z\";"
        ]
    },
    "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase.startupListeners()": {
        "generated_inputs_class": [
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h3Test0",
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h3Test1",
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h3Test2",
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h3Test3",
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "StartupListener startUpListener1 = mock(StartupListener.class);",
                "StartupListener startUpListener2 = mock(StartupListener.class);"
            ],
            [
                "StartupListener startUpListener1 = new StartupListenerImpl();",
                "StartupListener startUpListener2 = new StartupListenerImpl();"
            ],
            [
                "StartupListener startUpListener1 = null;",
                "StartupListener startUpListener2 = null;"
            ],
            [
                "StartupListener startUpListener1 = mock(StartupListener.class, withSettings().serializable());",
                "StartupListener startUpListener2 = mock(StartupListener.class, withSettings().serializable());"
            ],
            [
                "StartupListener startUpListener1 = new StartupListener() {",
                "@Override",
                "public void onStartup() {",
                "// Custom implementation",
                "}",
                "};",
                "StartupListener startUpListener2 = new StartupListener() {",
                "@Override",
                "public void onStartup() {",
                "// Custom implementation",
                "}",
                "};"
            ]
        ],
        "selected": {
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h3Test0": [
                "StartupListener startUpListener1 = mock(StartupListener.class);",
                "StartupListener startUpListener2 = mock(StartupListener.class);"
            ],
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h3Test1": [
                "StartupListener startUpListener1 = new StartupListenerImpl();",
                "StartupListener startUpListener2 = new StartupListenerImpl();"
            ],
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h3Test2": [
                "StartupListener startUpListener1 = null;",
                "StartupListener startUpListener2 = null;"
            ],
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h3Test3": [
                "StartupListener startUpListener1 = mock(StartupListener.class, withSettings().serializable());",
                "StartupListener startUpListener2 = mock(StartupListener.class, withSettings().serializable());"
            ],
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h3Test4": [
                "StartupListener startUpListener1 = new StartupListener() {",
                "@Override",
                "public void onStartup() {",
                "// Custom implementation",
                "}",
                "};",
                "StartupListener startUpListener2 = new StartupListener() {",
                "@Override",
                "public void onStartup() {",
                "// Custom implementation",
                "}",
                "};"
            ]
        },
        "processed_generated": {
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h3Test0": [
                "StartupListener startUpListener1 = mock(StartupListener.class);",
                "StartupListener startUpListener2 = mock(StartupListener.class);"
            ],
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h3Test1": [
                "StartupListener startUpListener1 = new StartupListenerImpl();",
                "StartupListener startUpListener2 = new StartupListenerImpl();"
            ],
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h3Test2": [
                "StartupListener startUpListener1 = null;",
                "StartupListener startUpListener2 = null;"
            ],
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h3Test3": [
                "StartupListener startUpListener1 = mock(StartupListener.class, withSettings().serializable());",
                "StartupListener startUpListener2 = mock(StartupListener.class, withSettings().serializable());"
            ],
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h3Test4": [
                "StartupListener startUpListener1 = new StartupListener() {",
                "@Override",
                "public void onStartup() {",
                "// Custom implementation",
                "}",
                "StartupListener startUpListener2 = new StartupListener() {",
                "@Override",
                "public void onStartup() {",
                "// Custom implementation",
                "}"
            ]
        },
        "original_h": [
            "StartupListener startUpListener1 = mock(StartupListener.class);",
            "StartupListener startUpListener2 = mock(StartupListener.class);"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest.test1()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h3Test0",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h3Test1",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h3Test2",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h3Test3",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "JSONObject v01 = JSONObject.of(\"id\", 0);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ],
            [
                "JSONObject v01 = JSONObject.of(\"id\", 9999);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ],
            [
                "JSONObject v01 = JSONObject.of(\"id\", -100);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ],
            [
                "JSONObject v01 = JSONObject.of(\"id\", 1234567890);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ],
            [
                "JSONObject v01 = JSONObject.of(\"id\", null);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h3Test0": [
                "JSONObject v01 = JSONObject.of(\"id\", 0);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h3Test1": [
                "JSONObject v01 = JSONObject.of(\"id\", 9999);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h3Test2": [
                "JSONObject v01 = JSONObject.of(\"id\", -100);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h3Test3": [
                "JSONObject v01 = JSONObject.of(\"id\", 1234567890);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h3Test4": [
                "JSONObject v01 = JSONObject.of(\"id\", null);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);",
                "assertEquals(v01, v02);"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h3Test0": [
                "JSONObject v01 = JSONObject.of(\"id\", 0);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h3Test1": [
                "JSONObject v01 = JSONObject.of(\"id\", 9999);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h3Test2": [
                "JSONObject v01 = JSONObject.of(\"id\", -100);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h3Test3": [
                "JSONObject v01 = JSONObject.of(\"id\", 1234567890);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h3Test4": [
                "JSONObject v01 = JSONObject.of(\"id\", null);"
            ]
        },
        "original_h": [
            "JSONObject v01 = JSONObject.of(\"id\", 1001);"
        ]
    },
    "org.myrobotlab.service.I2cMuxTest.testSetDeviceAddress()": {
        "generated_inputs_class": [
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h3Test0"
        ],
        "generated_all_blocks": [
            [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceAddress = \"0x70\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
            ]
        ],
        "selected": {
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h3Test0": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceAddress = \"0x70\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
            ]
        },
        "processed_generated": {
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h3Test0": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceAddress = \"0x70\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
            ]
        },
        "original_h": [
            "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
            "String deviceAddress = \"0x70\";",
            "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
        ]
    },
    "io.arex.inst.runtime.serializer.SerializerTest.testNestedList()": {
        "generated_inputs_class": [
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedList_h3Test0",
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedList_h3Test1"
        ],
        "generated_all_blocks": [
            [
                "List<List<Object>> list = new ArrayList<>();",
                "list.add(null);",
                "list.add(new ArrayList<>());",
                "list.add(nestedList1);",
                "list.add(nestedList2);",
                "String serializer = \"jackson\";",
                "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestList1-1\\\",\\\"nestList1-2\\\"]A@R#E$X[\\\"nestList2-1\\\",\\\"nestList2-2\\\"]\";",
                "String typeName2 = \"java.util.ArrayList-java.util.ArrayList,java.lang.String,java.lang.String\";"
            ],
            [
                "List<List<Object>> list = new ArrayList<>();",
                "list.add(null);",
                "list.add(new ArrayList<>());",
                "list.add(nestedList1);",
                "list.add(nestedList2);",
                "String serializer = \"gson\";",
                "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestList1-1\\\",\\\"nestList1-2\\\"]A@R#E$X[\\\"nestList2-1\\\",\\\"nestList2-2\\\"]\";",
                "String typeName2 = \"java.util.ArrayList-java.util.ArrayList,java.lang.String,java.lang.String\";"
            ]
        ],
        "selected": {
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedList_h3Test0": [
                "List<List<Object>> list = new ArrayList<>();",
                "list.add(null);",
                "list.add(new ArrayList<>());",
                "list.add(nestedList1);",
                "list.add(nestedList2);",
                "String serializer = \"jackson\";",
                "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestList1-1\\\",\\\"nestList1-2\\\"]A@R#E$X[\\\"nestList2-1\\\",\\\"nestList2-2\\\"]\";",
                "String typeName2 = \"java.util.ArrayList-java.util.ArrayList,java.lang.String,java.lang.String\";"
            ],
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedList_h3Test1": [
                "List<List<Object>> list = new ArrayList<>();",
                "list.add(null);",
                "list.add(new ArrayList<>());",
                "list.add(nestedList1);",
                "list.add(nestedList2);",
                "String serializer = \"gson\";",
                "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestList1-1\\\",\\\"nestList1-2\\\"]A@R#E$X[\\\"nestList2-1\\\",\\\"nestList2-2\\\"]\";",
                "String typeName2 = \"java.util.ArrayList-java.util.ArrayList,java.lang.String,java.lang.String\";"
            ]
        },
        "processed_generated": {
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedList_h3Test0": [
                "List<List<Object>> list = new ArrayList<>();",
                "list.add(null);",
                "list.add(new ArrayList<>());",
                "list.add(nestedList1);",
                "list.add(nestedList2);",
                "String serializer = \"jackson\";",
                "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestList1-1\\\",\\\"nestList1-2\\\"]A@R#E$X[\\\"nestList2-1\\\",\\\"nestList2-2\\\"]\";",
                "String typeName2 = \"java.util.ArrayList-java.util.ArrayList,java.lang.String,java.lang.String\";"
            ],
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedList_h3Test1": [
                "List<List<Object>> list = new ArrayList<>();",
                "list.add(null);",
                "list.add(new ArrayList<>());",
                "list.add(nestedList1);",
                "list.add(nestedList2);",
                "String serializer = \"gson\";",
                "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestList1-1\\\",\\\"nestList1-2\\\"]A@R#E$X[\\\"nestList2-1\\\",\\\"nestList2-2\\\"]\";",
                "String typeName2 = \"java.util.ArrayList-java.util.ArrayList,java.lang.String,java.lang.String\";"
            ]
        },
        "original_h": [
            "List<List<Object>> list = new ArrayList<>();",
            "list.add(null);",
            "list.add(new ArrayList<>());",
            "list.add(nestedList1);",
            "list.add(nestedList2);",
            "String serializer = \"jackson\";",
            "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestList1-1\\\",\\\"nestList1-2\\\"]A@R#E$X[\\\"nestList2-1\\\",\\\"nestList2-2\\\"]\";",
            "String typeName2 = \"java.util.ArrayList-java.util.ArrayList,java.lang.String,java.lang.String\";"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test6()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h3Test0",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h3Test1",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h3Test2",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h3Test3",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "String str2 = \"{\\\"103\\\":103,\\\"104\\\":104}\";",
                "Map<String, BigDecimal> mapType = new HashMap<>();",
                "mapType.put(\"103\", BigDecimal.valueOf(103));",
                "mapType.put(\"104\", BigDecimal.valueOf(104));"
            ],
            [
                "String str2 = \"{\\\"105\\\":105,\\\"106\\\":106,\\\"107\\\":107}\";",
                "Map<String, BigDecimal> mapType = new HashMap<>();",
                "mapType.put(\"105\", BigDecimal.valueOf(105));",
                "mapType.put(\"106\", BigDecimal.valueOf(106));",
                "mapType.put(\"107\", BigDecimal.valueOf(107));"
            ],
            [
                "String str2 = \"{\\\"108\\\":108,\\\"109\\\":109,\\\"110\\\":110,\\\"111\\\":111}\";",
                "Map<String, BigDecimal> mapType = new HashMap<>();",
                "mapType.put(\"108\", BigDecimal.valueOf(108));",
                "mapType.put(\"109\", BigDecimal.valueOf(109));",
                "mapType.put(\"110\", BigDecimal.valueOf(110));",
                "mapType.put(\"111\", BigDecimal.valueOf(111));"
            ],
            [
                "String str2 = \"{\\\"112\\\":112,\\\"113\\\":113,\\\"114\\\":114,\\\"115\\\":115,\\\"116\\\":116}\";",
                "Map<String, BigDecimal> mapType = new HashMap<>();",
                "mapType.put(\"112\", BigDecimal.valueOf(112));",
                "mapType.put(\"113\", BigDecimal.valueOf(113));",
                "mapType.put(\"114\", BigDecimal.valueOf(114));",
                "mapType.put(\"115\", BigDecimal.valueOf(115));",
                "mapType.put(\"116\", BigDecimal.valueOf(116));"
            ],
            [
                "String str2 = \"{\\\"117\\\":117,\\\"118\\\":118,\\\"119\\\":119,\\\"120\\\":120,\\\"121\\\":121,\\\"122\\\":122}\";",
                "Map<String, BigDecimal> mapType = new HashMap<>();",
                "mapType.put(\"117\", BigDecimal.valueOf(117));",
                "mapType.put(\"118\", BigDecimal.valueOf(118));",
                "mapType.put(\"119\", BigDecimal.valueOf(119));",
                "mapType.put(\"120\", BigDecimal.valueOf(120));",
                "mapType.put(\"121\", BigDecimal.valueOf(121));",
                "mapType.put(\"122\", BigDecimal.valueOf(122));"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h3Test0": [
                "String str2 = \"{\\\"103\\\":103,\\\"104\\\":104}\";",
                "Map<String, BigDecimal> mapType = new HashMap<>();",
                "mapType.put(\"103\", BigDecimal.valueOf(103));",
                "mapType.put(\"104\", BigDecimal.valueOf(104));"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h3Test1": [
                "String str2 = \"{\\\"105\\\":105,\\\"106\\\":106,\\\"107\\\":107}\";",
                "Map<String, BigDecimal> mapType = new HashMap<>();",
                "mapType.put(\"105\", BigDecimal.valueOf(105));",
                "mapType.put(\"106\", BigDecimal.valueOf(106));",
                "mapType.put(\"107\", BigDecimal.valueOf(107));"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h3Test2": [
                "String str2 = \"{\\\"108\\\":108,\\\"109\\\":109,\\\"110\\\":110,\\\"111\\\":111}\";",
                "Map<String, BigDecimal> mapType = new HashMap<>();",
                "mapType.put(\"108\", BigDecimal.valueOf(108));",
                "mapType.put(\"109\", BigDecimal.valueOf(109));",
                "mapType.put(\"110\", BigDecimal.valueOf(110));",
                "mapType.put(\"111\", BigDecimal.valueOf(111));"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h3Test3": [
                "String str2 = \"{\\\"112\\\":112,\\\"113\\\":113,\\\"114\\\":114,\\\"115\\\":115,\\\"116\\\":116}\";",
                "Map<String, BigDecimal> mapType = new HashMap<>();",
                "mapType.put(\"112\", BigDecimal.valueOf(112));",
                "mapType.put(\"113\", BigDecimal.valueOf(113));",
                "mapType.put(\"114\", BigDecimal.valueOf(114));",
                "mapType.put(\"115\", BigDecimal.valueOf(115));",
                "mapType.put(\"116\", BigDecimal.valueOf(116));"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h3Test4": [
                "String str2 = \"{\\\"117\\\":117,\\\"118\\\":118,\\\"119\\\":119,\\\"120\\\":120,\\\"121\\\":121,\\\"122\\\":122}\";",
                "Map<String, BigDecimal> mapType = new HashMap<>();",
                "mapType.put(\"117\", BigDecimal.valueOf(117));",
                "mapType.put(\"118\", BigDecimal.valueOf(118));",
                "mapType.put(\"119\", BigDecimal.valueOf(119));",
                "mapType.put(\"120\", BigDecimal.valueOf(120));",
                "mapType.put(\"121\", BigDecimal.valueOf(121));",
                "mapType.put(\"122\", BigDecimal.valueOf(122));"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h3Test0": [
                "String str2 = \"{\\\"103\\\":103,\\\"104\\\":104}\";",
                "mapType.put(\"103\", BigDecimal.valueOf(103));",
                "mapType.put(\"104\", BigDecimal.valueOf(104));"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h3Test1": [
                "String str2 = \"{\\\"105\\\":105,\\\"106\\\":106,\\\"107\\\":107}\";",
                "mapType.put(\"105\", BigDecimal.valueOf(105));",
                "mapType.put(\"106\", BigDecimal.valueOf(106));",
                "mapType.put(\"107\", BigDecimal.valueOf(107));"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h3Test2": [
                "String str2 = \"{\\\"108\\\":108,\\\"109\\\":109,\\\"110\\\":110,\\\"111\\\":111}\";",
                "mapType.put(\"108\", BigDecimal.valueOf(108));",
                "mapType.put(\"109\", BigDecimal.valueOf(109));",
                "mapType.put(\"110\", BigDecimal.valueOf(110));",
                "mapType.put(\"111\", BigDecimal.valueOf(111));"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h3Test3": [
                "String str2 = \"{\\\"112\\\":112,\\\"113\\\":113,\\\"114\\\":114,\\\"115\\\":115,\\\"116\\\":116}\";",
                "mapType.put(\"112\", BigDecimal.valueOf(112));",
                "mapType.put(\"113\", BigDecimal.valueOf(113));",
                "mapType.put(\"114\", BigDecimal.valueOf(114));",
                "mapType.put(\"115\", BigDecimal.valueOf(115));",
                "mapType.put(\"116\", BigDecimal.valueOf(116));"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h3Test4": [
                "String str2 = \"{\\\"117\\\":117,\\\"118\\\":118,\\\"119\\\":119,\\\"120\\\":120,\\\"121\\\":121,\\\"122\\\":122}\";",
                "mapType.put(\"117\", BigDecimal.valueOf(117));",
                "mapType.put(\"118\", BigDecimal.valueOf(118));",
                "mapType.put(\"119\", BigDecimal.valueOf(119));",
                "mapType.put(\"120\", BigDecimal.valueOf(120));",
                "mapType.put(\"121\", BigDecimal.valueOf(121));",
                "mapType.put(\"122\", BigDecimal.valueOf(122));"
            ]
        },
        "original_h": [
            "Map<String, BigDecimal> v01 = new HashMap<>();",
            "v01.put(\"101\", BigDecimal.valueOf(101));",
            "v01.put(\"102\", BigDecimal.valueOf(102));"
        ]
    },
    "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest.testMinSegmentsArePickedForMoveWhenNoSkew()": {
        "generated_inputs_class": [
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h3Test0",
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h3Test1",
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h3Test2",
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h3Test3",
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "int totalSegmentsInTier = 0;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS), createServer(\"B\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            [
                "int totalSegmentsInTier = 1;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS), createServer(\"B\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            [
                "int totalSegmentsInTier = 100_000;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS), createServer(\"B\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            [
                "int totalSegmentsInTier = 50_000;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS), createServer(\"B\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            [
                "int totalSegmentsInTier = Integer.MAX_VALUE;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS), createServer(\"B\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ]
        ],
        "selected": {
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h3Test0": [
                "int totalSegmentsInTier = 0;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS), createServer(\"B\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h3Test1": [
                "int totalSegmentsInTier = 1;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS), createServer(\"B\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h3Test2": [
                "int totalSegmentsInTier = 100_000;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS), createServer(\"B\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h3Test3": [
                "int totalSegmentsInTier = 50_000;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS), createServer(\"B\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h3Test4": [
                "int totalSegmentsInTier = Integer.MAX_VALUE;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS), createServer(\"B\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ]
        },
        "processed_generated": {
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h3Test0": [
                "int totalSegmentsInTier = 0;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS), createServer(\"B\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h3Test1": [
                "int totalSegmentsInTier = 1;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS), createServer(\"B\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h3Test2": [
                "int totalSegmentsInTier = 100_000;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS), createServer(\"B\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h3Test3": [
                "int totalSegmentsInTier = 50_000;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS), createServer(\"B\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h3Test4": [
                "int totalSegmentsInTier = Integer.MAX_VALUE;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS), createServer(\"B\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ]
        },
        "original_h": [
            "int totalSegmentsInTier = 20_000;",
            "String tier = \"tier1\";",
            "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS), createServer(\"B\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS));",
            "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h3Test0",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h3Test1",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h3Test2",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h3Test3",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "String str2 = \"{\\\"456\\\":\\\"def\\\"}\";",
                "Map<String, String> mapType = JSON.parseObject(str2, new TypeReference<Map<String, String>>() {}.getType());"
            ],
            [
                "String str2 = \"{\\\"789\\\":\\\"ghi\\\"}\";",
                "Map<String, String> mapType = JSON.parseObject(str2, new TypeReference<Map<String, String>>() {}.getType());"
            ],
            [
                "String str2 = \"{\\\"abc\\\":\\\"123\\\"}\";",
                "Map<String, String> mapType = JSON.parseObject(str2, new TypeReference<Map<String, String>>() {}.getType());"
            ],
            [
                "String str2 = \"{\\\"xyz\\\":\\\"789\\\"}\";",
                "Map<String, String> mapType = JSON.parseObject(str2, new TypeReference<Map<String, String>>() {}.getType());"
            ],
            [
                "String str2 = \"{\\\"pqr\\\":\\\"mno\\\"}\";",
                "Map<String, String> mapType = JSON.parseObject(str2, new TypeReference<Map<String, String>>() {}.getType());"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h3Test0": [
                "String str2 = \"{\\\"456\\\":\\\"def\\\"}\";",
                "Map<String, String> mapType = JSON.parseObject(str2, new TypeReference<Map<String, String>>() {}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h3Test1": [
                "String str2 = \"{\\\"789\\\":\\\"ghi\\\"}\";",
                "Map<String, String> mapType = JSON.parseObject(str2, new TypeReference<Map<String, String>>() {}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h3Test2": [
                "String str2 = \"{\\\"abc\\\":\\\"123\\\"}\";",
                "Map<String, String> mapType = JSON.parseObject(str2, new TypeReference<Map<String, String>>() {}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h3Test3": [
                "String str2 = \"{\\\"xyz\\\":\\\"789\\\"}\";",
                "Map<String, String> mapType = JSON.parseObject(str2, new TypeReference<Map<String, String>>() {}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h3Test4": [
                "String str2 = \"{\\\"pqr\\\":\\\"mno\\\"}\";",
                "Map<String, String> mapType = JSON.parseObject(str2, new TypeReference<Map<String, String>>() {}.getType());"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h3Test0": [
                "String str2 = \"{\\\"456\\\":\\\"def\\\"}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h3Test1": [
                "String str2 = \"{\\\"789\\\":\\\"ghi\\\"}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h3Test2": [
                "String str2 = \"{\\\"abc\\\":\\\"123\\\"}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h3Test3": [
                "String str2 = \"{\\\"xyz\\\":\\\"789\\\"}\";"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h3Test4": [
                "String str2 = \"{\\\"pqr\\\":\\\"mno\\\"}\";"
            ]
        },
        "original_h": [
            "Map<String, String> v01 = new HashMap<>();",
            "v01.put(\"123\", \"abc\");"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test7()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h3Test0"
        ],
        "generated_all_blocks": [
            [
                "Map<String, BigInteger> v01 = new HashMap<>();",
                "v01.put(\"103\", BigInteger.valueOf(103));",
                "v01.put(\"104\", BigInteger.valueOf(104));",
                "",
                "String str2 = JSON.toJSONString(v01);"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h3Test0": [
                "Map<String, BigInteger> v01 = new HashMap<>();",
                "v01.put(\"103\", BigInteger.valueOf(103));",
                "v01.put(\"104\", BigInteger.valueOf(104));",
                "",
                "String str2 = JSON.toJSONString(v01);"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h3Test0": [
                "Map<String, BigInteger> v01 = new HashMap<>();",
                "v01.put(\"103\", BigInteger.valueOf(103));",
                "v01.put(\"104\", BigInteger.valueOf(104));",
                "String str2 = JSON.toJSONString(v01);"
            ]
        },
        "original_h": [
            "Map<String, BigInteger> v01 = new HashMap<>();",
            "v01.put(\"101\", BigInteger.valueOf(101));",
            "v01.put(\"102\", BigInteger.valueOf(102));"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test8()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h3Test0",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h3Test1",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h3Test2",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h3Test3",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"103\", UUID.randomUUID());",
                "v01.put(\"104\", UUID.randomUUID());",
                "",
                "String str = JSON.toJSONString(v01);"
            ],
            [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"105\", UUID.randomUUID());",
                "v01.put(\"106\", UUID.randomUUID());",
                "v01.put(\"107\", UUID.randomUUID());",
                "",
                "String str = JSON.toJSONString(v01);"
            ],
            [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"108\", UUID.randomUUID());",
                "v01.put(\"109\", UUID.randomUUID());",
                "v01.put(\"110\", UUID.randomUUID());",
                "v01.put(\"111\", UUID.randomUUID());",
                "",
                "String str = JSON.toJSONString(v01);"
            ],
            [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"112\", UUID.randomUUID());",
                "",
                "String str = JSON.toJSONString(v01);"
            ],
            [
                "Map<String, UUID> v01 = new HashMap<>();",
                "",
                "String str = JSON.toJSONString(v01);"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h3Test0": [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"103\", UUID.randomUUID());",
                "v01.put(\"104\", UUID.randomUUID());",
                "",
                "String str = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h3Test1": [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"105\", UUID.randomUUID());",
                "v01.put(\"106\", UUID.randomUUID());",
                "v01.put(\"107\", UUID.randomUUID());",
                "",
                "String str = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h3Test2": [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"108\", UUID.randomUUID());",
                "v01.put(\"109\", UUID.randomUUID());",
                "v01.put(\"110\", UUID.randomUUID());",
                "v01.put(\"111\", UUID.randomUUID());",
                "",
                "String str = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h3Test3": [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"112\", UUID.randomUUID());",
                "",
                "String str = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h3Test4": [
                "Map<String, UUID> v01 = new HashMap<>();",
                "",
                "String str = JSON.toJSONString(v01);"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h3Test0": [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"103\", UUID.randomUUID());",
                "v01.put(\"104\", UUID.randomUUID());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h3Test1": [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"105\", UUID.randomUUID());",
                "v01.put(\"106\", UUID.randomUUID());",
                "v01.put(\"107\", UUID.randomUUID());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h3Test2": [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"108\", UUID.randomUUID());",
                "v01.put(\"109\", UUID.randomUUID());",
                "v01.put(\"110\", UUID.randomUUID());",
                "v01.put(\"111\", UUID.randomUUID());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h3Test3": [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"112\", UUID.randomUUID());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h3Test4": [
                "Map<String, UUID> v01 = new HashMap<>();"
            ]
        },
        "original_h": [
            "Map<String, UUID> v01 = new HashMap<>();",
            "v01.put(\"101\", UUID.randomUUID());",
            "v01.put(\"102\", UUID.randomUUID());"
        ]
    },
    "org.tsugi.util.Base64DoubleUrlEncodeSafeTest.testAllNonSurrogateCodePoints()": {
        "generated_inputs_class": [
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h3Test0",
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h3Test1"
        ],
        "generated_all_blocks": [
            [
                "StringBuffer sb = new StringBuffer();",
                "String input = sb.toString();",
                "String encoded2 = \"AAAAAA==\";"
            ],
            [
                "StringBuffer sb = new StringBuffer();",
                "sb.append(\"!@#$%^&*()_+-={}[]:\\\";'<>?,./\");",
                "String input = sb.toString();",
                "String encoded2 = \"IUAjJCVeJiooKV8rLT17fVtdOjwvPz4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJj\";"
            ]
        ],
        "selected": {
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h3Test0": [
                "StringBuffer sb = new StringBuffer();",
                "String input = sb.toString();",
                "String encoded2 = \"AAAAAA==\";"
            ],
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h3Test1": [
                "StringBuffer sb = new StringBuffer();",
                "sb.append(\"!@#$%^&*()_+-={}[]:\\\";'<>?,./\");",
                "String input = sb.toString();",
                "String encoded2 = \"IUAjJCVeJiooKV8rLT17fVtdOjwvPz4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJj\";"
            ]
        },
        "processed_generated": {
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h3Test0": [
                "StringBuffer sb = new StringBuffer();",
                "String input = sb.toString();",
                "String encoded2 = \"AAAAAA==\";"
            ],
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h3Test1": [
                "StringBuffer sb = new StringBuffer();",
                "sb.append(\"!@#$%^&*()_+-={}[]:\\\";'<>?,./\");",
                "String input = sb.toString();",
                "String encoded2 = \"IUAjJCVeJiooKV8rLT17fVtdOjwvPz4/QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJj\";"
            ]
        },
        "original_h": [
            "StringBuffer sb = new StringBuffer();",
            "String input = sb.toString();",
            "String encoded2 = \"AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4_QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJj\";"
        ]
    },
    "org.threeten.extra.TestYearHalf.test_lengthOfYear()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h3Test0"
        ],
        "generated_all_blocks": [
            [
                "YearHalf test2 = YearHalf.of(0, 1);"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h3Test0": [
                "YearHalf test2 = YearHalf.of(0, 1);"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h3Test0": [
                "YearHalf test2 = YearHalf.of(0, 1);"
            ]
        },
        "original_h": [
            "int year = 500;",
            "Half half = Half.H1;"
        ]
    },
    "com.zfoo.net.util.NetUtilsTest.ipv4Test()": {
        "generated_inputs_class": [
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h3Test0",
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h3Test1",
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h3Test2",
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h3Test3",
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "String ipStr1 = \"192.168.0.1\";",
                "long ipLong2 = 192168000001L;"
            ],
            [
                "String ipStr1 = \"10.0.0.1\";",
                "long ipLong2 = 100000000001L;"
            ],
            [
                "String ipStr1 = \"172.16.0.1\";",
                "long ipLong2 = 172016000001L;"
            ],
            [
                "String ipStr1 = \"255.255.255.255\";",
                "long ipLong2 = 255255255255L;"
            ],
            [
                "String ipStr1 = \"0.0.0.0\";",
                "long ipLong2 = 0L;"
            ]
        ],
        "selected": {
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h3Test0": [
                "String ipStr1 = \"192.168.0.1\";",
                "long ipLong2 = 192168000001L;"
            ],
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h3Test1": [
                "String ipStr1 = \"10.0.0.1\";",
                "long ipLong2 = 100000000001L;"
            ],
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h3Test2": [
                "String ipStr1 = \"172.16.0.1\";",
                "long ipLong2 = 172016000001L;"
            ],
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h3Test3": [
                "String ipStr1 = \"255.255.255.255\";",
                "long ipLong2 = 255255255255L;"
            ],
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h3Test4": [
                "String ipStr1 = \"0.0.0.0\";",
                "long ipLong2 = 0L;"
            ]
        },
        "processed_generated": {
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h3Test0": [
                "String ipStr1 = \"192.168.0.1\";",
                "long ipLong2 = 192168000001L;"
            ],
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h3Test1": [
                "String ipStr1 = \"10.0.0.1\";",
                "long ipLong2 = 100000000001L;"
            ],
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h3Test2": [
                "String ipStr1 = \"172.16.0.1\";",
                "long ipLong2 = 172016000001L;"
            ],
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h3Test3": [
                "String ipStr1 = \"255.255.255.255\";",
                "long ipLong2 = 255255255255L;"
            ],
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h3Test4": [
                "String ipStr1 = \"0.0.0.0\";",
                "long ipLong2 = 0L;"
            ]
        },
        "original_h": [
            "String ipStr1 = NetUtils.LOCAL_LOOPBACK_IP;",
            "long ipLong2 = 127000000001L;"
        ]
    },
    "com.alibaba.druid.bvt.sql.hive.issues.Issue5430.test_createTable()": {
        "generated_inputs_class": [
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h3Test0",
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h3Test1",
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h3Test2",
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h3Test3",
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "String sql = \"CREATE TABLE my_table(a string, b bigint)\";",
                "String newSql = \"CREATE TABLE my_table (a string,b bigint)\";"
            ],
            [
                "String sql = \"CREATE TABLE my_table(a string, b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";",
                "String newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";"
            ],
            [
                "String sql = \"CREATE TABLE my_table(a string, b bigint) ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE\";",
                "String newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE\";"
            ],
            [
                "String sql = \"CREATE TABLE my_table(a string, b bigint) PARTITIONED BY (c int) STORED AS PARQUET\";",
                "String newSql = \"CREATE TABLE my_table (a string,b bigint) PARTITIONED BY (c int) STORED AS PARQUET\";"
            ],
            [
                "String sql = \"CREATE EXTERNAL TABLE my_table(a string, b bigint) LOCATION '/path/to/data' STORED AS ORC\";",
                "String newSql = \"CREATE EXTERNAL TABLE my_table (a string,b bigint) LOCATION '/path/to/data' STORED AS ORC\";"
            ]
        ],
        "selected": {
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h3Test0": [
                "String sql = \"CREATE TABLE my_table(a string, b bigint)\";",
                "String newSql = \"CREATE TABLE my_table (a string,b bigint)\";"
            ],
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h3Test1": [
                "String sql = \"CREATE TABLE my_table(a string, b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";",
                "String newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";"
            ],
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h3Test2": [
                "String sql = \"CREATE TABLE my_table(a string, b bigint) ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE\";",
                "String newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE\";"
            ],
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h3Test3": [
                "String sql = \"CREATE TABLE my_table(a string, b bigint) PARTITIONED BY (c int) STORED AS PARQUET\";",
                "String newSql = \"CREATE TABLE my_table (a string,b bigint) PARTITIONED BY (c int) STORED AS PARQUET\";"
            ],
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h3Test4": [
                "String sql = \"CREATE EXTERNAL TABLE my_table(a string, b bigint) LOCATION '/path/to/data' STORED AS ORC\";",
                "String newSql = \"CREATE EXTERNAL TABLE my_table (a string,b bigint) LOCATION '/path/to/data' STORED AS ORC\";"
            ]
        },
        "processed_generated": {
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h3Test0": [
                "String sql = \"CREATE TABLE my_table(a string, b bigint)\";",
                "String newSql = \"CREATE TABLE my_table (a string,b bigint)\";"
            ],
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h3Test1": [
                "String sql = \"CREATE TABLE my_table(a string, b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";",
                "String newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";"
            ],
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h3Test2": [
                "String sql = \"CREATE TABLE my_table(a string, b bigint) ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE\";",
                "String newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE\";"
            ],
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h3Test3": [
                "String sql = \"CREATE TABLE my_table(a string, b bigint) PARTITIONED BY (c int) STORED AS PARQUET\";",
                "String newSql = \"CREATE TABLE my_table (a string,b bigint) PARTITIONED BY (c int) STORED AS PARQUET\";"
            ],
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h3Test4": [
                "String sql = \"CREATE EXTERNAL TABLE my_table(a string, b bigint) LOCATION '/path/to/data' STORED AS ORC\";",
                "String newSql = \"CREATE EXTERNAL TABLE my_table (a string,b bigint) LOCATION '/path/to/data' STORED AS ORC\";"
            ]
        },
        "original_h": [
            "String sql = \"CREATE TABLE my_table(a string, b bigint)\\n\" + \"ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe'\\n\" + \"STORED AS TEXTFILE\";",
            "String newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";"
        ]
    },
    "org.apache.druid.storage.azure.AzureClientFactoryTest.test_blobServiceClientBuilder_useCachedClient()": {
        "generated_inputs_class": [
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h3Test0",
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h3Test1",
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h3Test2",
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h3Test3",
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "Integer retryCount1 = 0;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 0;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = 3;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 3;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = null;",
                "String ACCOUNT1 = \"account2\";",
                "Integer retryCount2 = null;",
                "String ACCOUNT2 = \"account2\";"
            ],
            [
                "Integer retryCount1 = 5;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 5;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = 2;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 2;",
                "String ACCOUNT2 = \"account\";"
            ]
        ],
        "selected": {
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h3Test0": [
                "Integer retryCount1 = 0;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 0;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h3Test1": [
                "Integer retryCount1 = 3;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 3;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h3Test2": [
                "Integer retryCount1 = null;",
                "String ACCOUNT1 = \"account2\";",
                "Integer retryCount2 = null;",
                "String ACCOUNT2 = \"account2\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h3Test3": [
                "Integer retryCount1 = 5;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 5;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h3Test4": [
                "Integer retryCount1 = 2;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 2;",
                "String ACCOUNT2 = \"account\";"
            ]
        },
        "processed_generated": {
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h3Test0": [
                "Integer retryCount1 = 0;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 0;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h3Test1": [
                "Integer retryCount1 = 3;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 3;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h3Test2": [
                "Integer retryCount1 = null;",
                "String ACCOUNT1 = \"account2\";",
                "Integer retryCount2 = null;",
                "String ACCOUNT2 = \"account2\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h3Test3": [
                "Integer retryCount1 = 5;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 5;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h3Test4": [
                "Integer retryCount1 = 2;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 2;",
                "String ACCOUNT2 = \"account\";"
            ]
        },
        "original_h": [
            "Integer retryCount1 = null;",
            "String ACCOUNT1 = \"account\";",
            "Integer retryCount2 = null;",
            "String ACCOUNT2 = \"account\";"
        ]
    },
    "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686.test_column_comment()": {
        "generated_inputs_class": [
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h3Test0",
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h3Test1",
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h3Test2",
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h3Test3",
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID,-- qianzhushi\\n\" + \"\\tCUS_NO -- houzhushi\\n,\\n\" + \"\\tCUS_NAME\\n\" + \")\\n\" + \"SELECT A.DATE_ID,\\n\" + \"\\tA.CUS_NO,\\n\" + \"\\tA.CUS_NAME\\n\" + \"FROM TABLE_TEST_2 \\n\" + \"WHERE COL1='1';\";",
                "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);"
            ],
            [
                "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID,-- qianzhushi\\n\" + \"\\tCUS_NO -- houzhushi\\n,\\n\" + \"\\tCUS_NAME\\n\" + \")\\n\" + \"VALUES ('2022-01-01', '12345', 'John Doe');\";",
                "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);"
            ],
            [
                "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID, CUS_NO, CUS_NAME\\n\" + \")\\n\" + \"SELECT DATE_ID, CUS_NO, CUS_NAME\\n\" + \"FROM TABLE_TEST_2 \\n\" + \"WHERE COL1='1';\";",
                "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);"
            ],
            [
                "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID, CUS_NO, CUS_NAME\\n\" + \")\\n\" + \"VALUES (1, 12345, 'John Doe');\";",
                "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);"
            ],
            [
                "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID, CUS_NO, CUS_NAME\\n\" + \")\\n\" + \"SELECT DATE_ID, CUS_NO, CUS_NAME\\n\" + \"FROM TABLE_TEST_2 \\n\" + \"WHERE COL1='1' LIMIT 10;\";",
                "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);"
            ]
        ],
        "selected": {
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h3Test0": [
                "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID,-- qianzhushi\\n\" + \"\\tCUS_NO -- houzhushi\\n,\\n\" + \"\\tCUS_NAME\\n\" + \")\\n\" + \"SELECT A.DATE_ID,\\n\" + \"\\tA.CUS_NO,\\n\" + \"\\tA.CUS_NAME\\n\" + \"FROM TABLE_TEST_2 \\n\" + \"WHERE COL1='1';\";",
                "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);"
            ],
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h3Test1": [
                "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID,-- qianzhushi\\n\" + \"\\tCUS_NO -- houzhushi\\n,\\n\" + \"\\tCUS_NAME\\n\" + \")\\n\" + \"VALUES ('2022-01-01', '12345', 'John Doe');\";",
                "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);"
            ],
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h3Test2": [
                "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID, CUS_NO, CUS_NAME\\n\" + \")\\n\" + \"SELECT DATE_ID, CUS_NO, CUS_NAME\\n\" + \"FROM TABLE_TEST_2 \\n\" + \"WHERE COL1='1';\";",
                "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);"
            ],
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h3Test3": [
                "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID, CUS_NO, CUS_NAME\\n\" + \")\\n\" + \"VALUES (1, 12345, 'John Doe');\";",
                "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);"
            ],
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h3Test4": [
                "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID, CUS_NO, CUS_NAME\\n\" + \")\\n\" + \"SELECT DATE_ID, CUS_NO, CUS_NAME\\n\" + \"FROM TABLE_TEST_2 \\n\" + \"WHERE COL1='1' LIMIT 10;\";",
                "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);"
            ]
        },
        "processed_generated": {
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h3Test0": [
                "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID,-- qianzhushi\\n\" + \"\\tCUS_NO -- houzhushi\\n,\\n\" + \"\\tCUS_NAME\\n\" + \")\\n\" + \"SELECT A.DATE_ID,\\n\" + \"\\tA.CUS_NO,\\n\" + \"\\tA.CUS_NAME\\n\" + \"FROM TABLE_TEST_2 \\n\" + \"WHERE COL1='1';\";",
                "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);"
            ],
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h3Test1": [
                "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID,-- qianzhushi\\n\" + \"\\tCUS_NO -- houzhushi\\n,\\n\" + \"\\tCUS_NAME\\n\" + \")\\n\" + \"VALUES ('2022-01-01', '12345', 'John Doe');\";",
                "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);"
            ],
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h3Test2": [
                "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID, CUS_NO, CUS_NAME\\n\" + \")\\n\" + \"SELECT DATE_ID, CUS_NO, CUS_NAME\\n\" + \"FROM TABLE_TEST_2 \\n\" + \"WHERE COL1='1';\";",
                "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);"
            ],
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h3Test3": [
                "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID, CUS_NO, CUS_NAME\\n\" + \")\\n\" + \"VALUES (1, 12345, 'John Doe');\";",
                "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);"
            ],
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h3Test4": [
                "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID, CUS_NO, CUS_NAME\\n\" + \")\\n\" + \"SELECT DATE_ID, CUS_NO, CUS_NAME\\n\" + \"FROM TABLE_TEST_2 \\n\" + \"WHERE COL1='1' LIMIT 10;\";",
                "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);"
            ]
        },
        "original_h": [
            "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID,-- qianzhushi\\n\" + \"\\tCUS_NO -- houzhushi\\n,\\n\" + \"\\tCUS_NAME\\n\" + \")\\n\" + \"SELECT A.DATE_ID,\\n\" + \"\\tA.CUS_NO,\\n\" + \"\\tA.CUS_NAME\\n\" + \"FROM TABLE_TEST_2 \\n\" + \"WHERE COL1='1';\";",
            "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
            "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);"
        ]
    },
    "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366.test_create_table()": {
        "generated_inputs_class": [
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h3Test0",
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h3Test1",
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h3Test2",
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h3Test3",
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "String sql = \"CREATE TABLE orders_p5 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 5, REMAINDER 4);\";",
                "String newSql = \"CREATE TABLE orders_p5 PARTITION OF orders FOR VALUES WITH (MODULUS 5 , REMAINDER 4);\";"
            ],
            [
                "String sql = \"CREATE TABLE orders_p6 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 6, REMAINDER 2);\";",
                "String newSql = \"CREATE TABLE orders_p6 PARTITION OF orders FOR VALUES WITH (MODULUS 6 , REMAINDER 2);\";"
            ],
            [
                "String sql = \"CREATE TABLE orders_p7 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 7, REMAINDER 5);\";",
                "String newSql = \"CREATE TABLE orders_p7 PARTITION OF orders FOR VALUES WITH (MODULUS 7 , REMAINDER 5);\";"
            ],
            [
                "String sql = \"CREATE TABLE orders_p8 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 8, REMAINDER 6);\";",
                "String newSql = \"CREATE TABLE orders_p8 PARTITION OF orders FOR VALUES WITH (MODULUS 8 , REMAINDER 6);\";"
            ],
            [
                "String sql = \"CREATE TABLE orders_p9 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 9, REMAINDER 1);\";",
                "String newSql = \"CREATE TABLE orders_p9 PARTITION OF orders FOR VALUES WITH (MODULUS 9 , REMAINDER 1);\";"
            ]
        ],
        "selected": {
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h3Test0": [
                "String sql = \"CREATE TABLE orders_p5 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 5, REMAINDER 4);\";",
                "String newSql = \"CREATE TABLE orders_p5 PARTITION OF orders FOR VALUES WITH (MODULUS 5 , REMAINDER 4);\";"
            ],
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h3Test1": [
                "String sql = \"CREATE TABLE orders_p6 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 6, REMAINDER 2);\";",
                "String newSql = \"CREATE TABLE orders_p6 PARTITION OF orders FOR VALUES WITH (MODULUS 6 , REMAINDER 2);\";"
            ],
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h3Test2": [
                "String sql = \"CREATE TABLE orders_p7 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 7, REMAINDER 5);\";",
                "String newSql = \"CREATE TABLE orders_p7 PARTITION OF orders FOR VALUES WITH (MODULUS 7 , REMAINDER 5);\";"
            ],
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h3Test3": [
                "String sql = \"CREATE TABLE orders_p8 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 8, REMAINDER 6);\";",
                "String newSql = \"CREATE TABLE orders_p8 PARTITION OF orders FOR VALUES WITH (MODULUS 8 , REMAINDER 6);\";"
            ],
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h3Test4": [
                "String sql = \"CREATE TABLE orders_p9 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 9, REMAINDER 1);\";",
                "String newSql = \"CREATE TABLE orders_p9 PARTITION OF orders FOR VALUES WITH (MODULUS 9 , REMAINDER 1);\";"
            ]
        },
        "processed_generated": {
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h3Test0": [
                "String sql = \"CREATE TABLE orders_p5 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 5, REMAINDER 4);\";",
                "String newSql = \"CREATE TABLE orders_p5 PARTITION OF orders FOR VALUES WITH (MODULUS 5 , REMAINDER 4);\";"
            ],
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h3Test1": [
                "String sql = \"CREATE TABLE orders_p6 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 6, REMAINDER 2);\";",
                "String newSql = \"CREATE TABLE orders_p6 PARTITION OF orders FOR VALUES WITH (MODULUS 6 , REMAINDER 2);\";"
            ],
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h3Test2": [
                "String sql = \"CREATE TABLE orders_p7 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 7, REMAINDER 5);\";",
                "String newSql = \"CREATE TABLE orders_p7 PARTITION OF orders FOR VALUES WITH (MODULUS 7 , REMAINDER 5);\";"
            ],
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h3Test3": [
                "String sql = \"CREATE TABLE orders_p8 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 8, REMAINDER 6);\";",
                "String newSql = \"CREATE TABLE orders_p8 PARTITION OF orders FOR VALUES WITH (MODULUS 8 , REMAINDER 6);\";"
            ],
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h3Test4": [
                "String sql = \"CREATE TABLE orders_p9 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 9, REMAINDER 1);\";",
                "String newSql = \"CREATE TABLE orders_p9 PARTITION OF orders FOR VALUES WITH (MODULUS 9 , REMAINDER 1);\";"
            ]
        },
        "original_h": [
            "String sql = \"CREATE TABLE orders_p4 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 4, REMAINDER 3);\";",
            "String newSql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 4 , REMAINDER 3);\";"
        ]
    },
    "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest.testHalfSegmentsArePickedForMoveWhenFullSkew()": {
        "generated_inputs_class": [
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h3Test0",
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h3Test1",
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h3Test2",
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h3Test3",
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()));",
                "String tier2 = \"tier1\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            [
                "String tier = \"tier2\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS));",
                "String tier2 = \"tier2\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            [
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()), createServer(\"C\", WIKI_SEGMENTS));",
                "String tier2 = \"tier1\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()), createServer(\"C\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            [
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS));",
                "String tier2 = \"tier1\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            [
                "String tier = \"tier2\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", Collections.emptyList()));",
                "String tier2 = \"tier2\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", Collections.emptyList()));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ]
        ],
        "selected": {
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h3Test0": [
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()));",
                "String tier2 = \"tier1\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h3Test1": [
                "String tier = \"tier2\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS));",
                "String tier2 = \"tier2\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h3Test2": [
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()), createServer(\"C\", WIKI_SEGMENTS));",
                "String tier2 = \"tier1\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()), createServer(\"C\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h3Test3": [
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS));",
                "String tier2 = \"tier1\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h3Test4": [
                "String tier = \"tier2\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", Collections.emptyList()));",
                "String tier2 = \"tier2\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", Collections.emptyList()));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ]
        },
        "processed_generated": {
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h3Test0": [
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()));",
                "String tier2 = \"tier1\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h3Test1": [
                "String tier = \"tier2\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS));",
                "String tier2 = \"tier2\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h3Test2": [
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()), createServer(\"C\", WIKI_SEGMENTS));",
                "String tier2 = \"tier1\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()), createServer(\"C\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h3Test3": [
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS));",
                "String tier2 = \"tier1\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h3Test4": [
                "String tier = \"tier2\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", Collections.emptyList()));",
                "String tier2 = \"tier2\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", Collections.emptyList()));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ]
        },
        "original_h": [
            "String tier = \"tier1\";",
            "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()));",
            "String tier2 = \"tier1\";",
            "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()));",
            "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
        ]
    },
    "io.bootique.di.TypeLiteralTest.normalize()": {
        "generated_inputs_class": [
            "io.bootique.di.TypeLiteralTest_normalize_h3Test0",
            "io.bootique.di.TypeLiteralTest_normalize_h3Test1",
            "io.bootique.di.TypeLiteralTest_normalize_h3Test2",
            "io.bootique.di.TypeLiteralTest_normalize_h3Test3",
            "io.bootique.di.TypeLiteralTest_normalize_h3Test4",
            "io.bootique.di.TypeLiteralTest_normalize_h3Test5",
            "io.bootique.di.TypeLiteralTest_normalize_h3Test6",
            "io.bootique.di.TypeLiteralTest_normalize_h3Test7",
            "io.bootique.di.TypeLiteralTest_normalize_h3Test8",
            "io.bootique.di.TypeLiteralTest_normalize_h3Test9"
        ],
        "generated_all_blocks": [
            [
                "Class input = String.class;"
            ],
            [
                "TypeLiteral<List<String>> input2 = TypeLiteral.listOf(String.class);"
            ],
            [
                "Class input = Double.class;"
            ],
            [
                "TypeLiteral<List<Double>> input2 = TypeLiteral.listOf(Double.class);"
            ],
            [
                "Class input = Object.class;"
            ],
            [
                "TypeLiteral<List<Object>> input2 = TypeLiteral.listOf(Object.class);"
            ],
            [
                "Class input = Boolean.class;"
            ],
            [
                "TypeLiteral<List<Boolean>> input2 = TypeLiteral.listOf(Boolean.class);"
            ],
            [
                "Class input = Long.class;"
            ],
            [
                "TypeLiteral<List<Long>> input2 = TypeLiteral.listOf(Long.class);"
            ]
        ],
        "selected": {
            "io.bootique.di.TypeLiteralTest_normalize_h3Test0": [
                "Class input = String.class;"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h3Test1": [
                "TypeLiteral<List<String>> input2 = TypeLiteral.listOf(String.class);"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h3Test2": [
                "Class input = Double.class;"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h3Test3": [
                "TypeLiteral<List<Double>> input2 = TypeLiteral.listOf(Double.class);"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h3Test4": [
                "Class input = Object.class;"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h3Test5": [
                "TypeLiteral<List<Object>> input2 = TypeLiteral.listOf(Object.class);"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h3Test6": [
                "Class input = Boolean.class;"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h3Test7": [
                "TypeLiteral<List<Boolean>> input2 = TypeLiteral.listOf(Boolean.class);"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h3Test8": [
                "Class input = Long.class;"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h3Test9": [
                "TypeLiteral<List<Long>> input2 = TypeLiteral.listOf(Long.class);"
            ]
        },
        "processed_generated": {
            "io.bootique.di.TypeLiteralTest_normalize_h3Test0": [
                "Class input = String.class;"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h3Test1": [
                ""
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h3Test2": [
                "Class input = Double.class;"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h3Test3": [
                ""
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h3Test4": [
                "Class input = Object.class;"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h3Test5": [
                ""
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h3Test6": [
                "Class input = Boolean.class;"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h3Test7": [
                ""
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h3Test8": [
                "Class input = Long.class;"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h3Test9": [
                ""
            ]
        },
        "original_h": [
            "Class input = Integer.class;"
        ]
    },
    "se.michaelthelin.spotify.Base64Test.testCustomBase64()": {
        "generated_inputs_class": [
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test0",
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test1",
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test2",
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test3",
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test4",
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test5"
        ],
        "generated_all_blocks": [
            [
                "byte[] testDataBytes = BASE_64_TEST_DATA.getBytes();",
                "String input2 = \"SGVsbG8gV29ybGQ=\";"
            ],
            [
                "byte[] testDataBytes = new byte[]{};",
                "String input2 = \"\";"
            ],
            [
                "byte[] testDataBytes = new byte[]{0x00, 0x01, 0x02};",
                "String input2 = \"AAEC\";"
            ],
            [
                "byte[] testDataBytes = new byte[]{0x7F, (byte) 0xFF};",
                "String input2 = \"f/8=\";"
            ],
            [
                "byte[] testDataBytes = new byte[]{(byte) 0x80, (byte) 0x81, (byte) 0x82};",
                "String input2 = \"gIEC\";"
            ],
            [
                "byte[] testDataBytes = new byte[]{(byte) 0xFF, (byte) 0xFE, (byte) 0xFD, (byte) 0xFC};",
                "String input2 = \"/v7+\";"
            ]
        ],
        "selected": {
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test0": [
                "byte[] testDataBytes = BASE_64_TEST_DATA.getBytes();",
                "String input2 = \"SGVsbG8gV29ybGQ=\";"
            ],
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test1": [
                "byte[] testDataBytes = new byte[]{};",
                "String input2 = \"\";"
            ],
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test2": [
                "byte[] testDataBytes = new byte[]{0x00, 0x01, 0x02};",
                "String input2 = \"AAEC\";"
            ],
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test3": [
                "byte[] testDataBytes = new byte[]{0x7F, (byte) 0xFF};",
                "String input2 = \"f/8=\";"
            ],
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test4": [
                "byte[] testDataBytes = new byte[]{(byte) 0x80, (byte) 0x81, (byte) 0x82};",
                "String input2 = \"gIEC\";"
            ],
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test5": [
                "byte[] testDataBytes = new byte[]{(byte) 0xFF, (byte) 0xFE, (byte) 0xFD, (byte) 0xFC};",
                "String input2 = \"/v7+\";"
            ]
        },
        "processed_generated": {
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test0": [
                "byte[] testDataBytes = BASE_64_TEST_DATA.getBytes();",
                "String input2 = \"SGVsbG8gV29ybGQ=\";"
            ],
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test1": [
                "byte[] testDataBytes = new byte[]{};",
                "String input2 = \"\";"
            ],
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test2": [
                "byte[] testDataBytes = new byte[]{0x00, 0x01, 0x02};",
                "String input2 = \"AAEC\";"
            ],
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test3": [
                "byte[] testDataBytes = new byte[]{0x7F, (byte) 0xFF};",
                "String input2 = \"f/8=\";"
            ],
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test4": [
                "byte[] testDataBytes = new byte[]{(byte) 0x80, (byte) 0x81, (byte) 0x82};",
                "String input2 = \"gIEC\";"
            ],
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test5": [
                "byte[] testDataBytes = new byte[]{(byte) 0xFF, (byte) 0xFE, (byte) 0xFD, (byte) 0xFC};",
                "String input2 = \"/v7+\";"
            ]
        },
        "original_h": [
            "byte[] testDataBytes = BASE_64_TEST_DATA.getBytes();",
            "String input2 = \"SGVsbG8gV29ybGQ=\";"
        ]
    },
    "org.apache.druid.storage.azure.AzureClientFactoryTest.test_blobServiceClientBuilder_useNewClientForDifferentRetryCount()": {
        "generated_inputs_class": [
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test0",
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test1",
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test2",
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test3",
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "Integer retryCount1 = 0;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 1;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = 3;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 1;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = Integer.MAX_VALUE;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 1;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = -1;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 1;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = null;",
                "String ACCOUNT1 = \"\";",
                "Integer retryCount2 = 1;",
                "String ACCOUNT2 = \"\";"
            ]
        ],
        "selected": {
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test0": [
                "Integer retryCount1 = 0;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 1;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test1": [
                "Integer retryCount1 = 3;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 1;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test2": [
                "Integer retryCount1 = Integer.MAX_VALUE;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 1;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test3": [
                "Integer retryCount1 = -1;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 1;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test4": [
                "Integer retryCount1 = null;",
                "String ACCOUNT1 = \"\";",
                "Integer retryCount2 = 1;",
                "String ACCOUNT2 = \"\";"
            ]
        },
        "processed_generated": {
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test0": [
                "Integer retryCount1 = 0;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 1;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test1": [
                "Integer retryCount1 = 3;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 1;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test2": [
                "Integer retryCount1 = Integer.MAX_VALUE;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 1;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test3": [
                "Integer retryCount1 = -1;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 1;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test4": [
                "Integer retryCount1 = null;",
                "String ACCOUNT1 = \"\";",
                "Integer retryCount2 = 1;",
                "String ACCOUNT2 = \"\";"
            ]
        },
        "original_h": [
            "Integer retryCount1 = null;",
            "String ACCOUNT1 = \"account\";",
            "Integer retryCount2 = 1;",
            "String ACCOUNT2 = \"account\";"
        ]
    },
    "org.threeten.extra.TestTemporalFields.test_HALF_YEARS()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h3Test0",
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h3Test1",
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h3Test2",
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h3Test3",
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "int year1 = 2023;",
                "int quarter1 = 1;",
                "int year2 = 2023;",
                "int quarter2 = 3;",
                "int amount = 2;"
            ],
            [
                "int year1 = 2023;",
                "int quarter1 = 2;",
                "int year2 = 2023;",
                "int quarter2 = 4;",
                "int amount = 3;"
            ],
            [
                "int year1 = 2023;",
                "int quarter1 = 3;",
                "int year2 = 2023;",
                "int quarter2 = 1;",
                "int amount = 4;"
            ],
            [
                "int year1 = 2023;",
                "int quarter1 = 4;",
                "int year2 = 2024;",
                "int quarter2 = 1;",
                "int amount = 5;"
            ],
            [
                "int year1 = 2024;",
                "int quarter1 = 1;",
                "int year2 = 2024;",
                "int quarter2 = 2;",
                "int amount = 6;"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h3Test0": [
                "int year1 = 2023;",
                "int quarter1 = 1;",
                "int year2 = 2023;",
                "int quarter2 = 3;",
                "int amount = 2;"
            ],
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h3Test1": [
                "int year1 = 2023;",
                "int quarter1 = 2;",
                "int year2 = 2023;",
                "int quarter2 = 4;",
                "int amount = 3;"
            ],
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h3Test2": [
                "int year1 = 2023;",
                "int quarter1 = 3;",
                "int year2 = 2023;",
                "int quarter2 = 1;",
                "int amount = 4;"
            ],
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h3Test3": [
                "int year1 = 2023;",
                "int quarter1 = 4;",
                "int year2 = 2024;",
                "int quarter2 = 1;",
                "int amount = 5;"
            ],
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h3Test4": [
                "int year1 = 2024;",
                "int quarter1 = 1;",
                "int year2 = 2024;",
                "int quarter2 = 2;",
                "int amount = 6;"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h3Test0": [
                "int year1 = 2023;",
                "int quarter1 = 1;",
                "int year2 = 2023;",
                "int quarter2 = 3;",
                "int amount = 2;"
            ],
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h3Test1": [
                "int year1 = 2023;",
                "int quarter1 = 2;",
                "int year2 = 2023;",
                "int quarter2 = 4;",
                "int amount = 3;"
            ],
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h3Test2": [
                "int year1 = 2023;",
                "int quarter1 = 3;",
                "int year2 = 2023;",
                "int quarter2 = 1;",
                "int amount = 4;"
            ],
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h3Test3": [
                "int year1 = 2023;",
                "int quarter1 = 4;",
                "int year2 = 2024;",
                "int quarter2 = 1;",
                "int amount = 5;"
            ],
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h3Test4": [
                "int year1 = 2024;",
                "int quarter1 = 1;",
                "int year2 = 2024;",
                "int quarter2 = 2;",
                "int amount = 6;"
            ]
        },
        "original_h": [
            "int year1 = 2023;",
            "int quarter1 = 4;",
            "int year2 = 2023;",
            "int quarter2 = 2;",
            "int amount = 1;"
        ]
    },
    "org.threeten.extra.TestYearHalf.test_from_TemporalAccessor_notLeapYear()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_notLeapYear_h3Test0"
        ],
        "generated_all_blocks": [
            [
                "LocalDate date = LocalDate.of(2022, 7, 1);",
                "int year = date.getYear();",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_notLeapYear_h3Test0": [
                "LocalDate date = LocalDate.of(2022, 7, 1);",
                "int year = date.getYear();",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_notLeapYear_h3Test0": [
                "LocalDate date = LocalDate.of(2022, 7, 1);",
                "int year = date.getYear();",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ]
        },
        "original_h": [
            "int year = 2007;",
            "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
        ]
    },
    "org.threeten.extra.TestYearHalf.test_from_TemporalAccessor_leapYear()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h3Test0"
        ],
        "generated_all_blocks": [
            [
                "LocalDate date = LocalDate.of(2022, 7, 1);",
                "int year = 2022;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h3Test0": [
                "LocalDate date = LocalDate.of(2022, 7, 1);",
                "int year = 2022;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h3Test0": [
                "LocalDate date = LocalDate.of(2022, 7, 1);",
                "int year = 2022;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ]
        },
        "original_h": [
            "int year = 2008;",
            "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
        ]
    },
    "org.threeten.extra.TestYearHalf.test_parse_CharSequence()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h3Test0",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h3Test1",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h3Test2",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h3Test3",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "int year = Year.MIN_VALUE;",
                "int half = 1;",
                "CharSequence text = \"-H1\";"
            ],
            [
                "int year = 2021;",
                "int half = 2;",
                "CharSequence text = \"2021-H2\";"
            ],
            [
                "int year = 2000;",
                "int half = 1;",
                "CharSequence text = \"2000-H1\";"
            ],
            [
                "int year = 2025;",
                "int half = 2;",
                "CharSequence text = \"2025-H2\";"
            ],
            [
                "int year = Year.MAX_VALUE;",
                "int half = 1;",
                "CharSequence text = \"-H1\";"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h3Test0": [
                "int year = Year.MIN_VALUE;",
                "int half = 1;",
                "CharSequence text = \"-H1\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h3Test1": [
                "int year = 2021;",
                "int half = 2;",
                "CharSequence text = \"2021-H2\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h3Test2": [
                "int year = 2000;",
                "int half = 1;",
                "CharSequence text = \"2000-H1\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h3Test3": [
                "int year = 2025;",
                "int half = 2;",
                "CharSequence text = \"2025-H2\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h3Test4": [
                "int year = Year.MAX_VALUE;",
                "int half = 1;",
                "CharSequence text = \"-H1\";"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h3Test0": [
                "int year = Year.MIN_VALUE;",
                "int half = 1;",
                "CharSequence text = \"-H1\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h3Test1": [
                "int year = 2021;",
                "int half = 2;",
                "CharSequence text = \"2021-H2\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h3Test2": [
                "int year = 2000;",
                "int half = 1;",
                "CharSequence text = \"2000-H1\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h3Test3": [
                "int year = 2025;",
                "int half = 2;",
                "CharSequence text = \"2025-H2\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h3Test4": [
                "int year = Year.MAX_VALUE;",
                "int half = 1;",
                "CharSequence text = \"-H1\";"
            ]
        },
        "original_h": [
            "int year = 2012;",
            "int half = 2;",
            "CharSequence text = \"2012-H2\";"
        ]
    },
    "org.apache.druid.msq.exec.WorkerStorageParametersTest.test_WorkerStorageParameter_createInstance()": {
        "generated_inputs_class": [
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h3Test0",
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h3Test1",
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h3Test2",
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h3Test3",
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h3Test4"
        ],
        "generated_all_blocks": [
            [
                "long l = 0;",
                "long l2 = -1;",
                "boolean b = true;"
            ],
            [
                "long l = Long.MAX_VALUE;",
                "long l2 = -1;",
                "boolean b = true;"
            ],
            [
                "long l = 100000000;",
                "long l2 = computeUsableStorage(l);",
                "boolean b = true;"
            ],
            [
                "long l = -1;",
                "long l2 = -1;",
                "boolean b = true;"
            ],
            [
                "long l = 500000000;",
                "long l2 = computeUsableStorage(l);",
                "boolean b = true;"
            ]
        ],
        "selected": {
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h3Test0": [
                "long l = 0;",
                "long l2 = -1;",
                "boolean b = true;"
            ],
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h3Test1": [
                "long l = Long.MAX_VALUE;",
                "long l2 = -1;",
                "boolean b = true;"
            ],
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h3Test2": [
                "long l = 100000000;",
                "long l2 = computeUsableStorage(l);",
                "boolean b = true;"
            ],
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h3Test3": [
                "long l = -1;",
                "long l2 = -1;",
                "boolean b = true;"
            ],
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h3Test4": [
                "long l = 500000000;",
                "long l2 = computeUsableStorage(l);",
                "boolean b = true;"
            ]
        },
        "processed_generated": {
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h3Test0": [
                "long l = 0;",
                "long l2 = -1;",
                "boolean b = true;"
            ],
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h3Test1": [
                "long l = Long.MAX_VALUE;",
                "long l2 = -1;",
                "boolean b = true;"
            ],
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h3Test2": [
                "long l = 100000000;",
                "long l2 = computeUsableStorage(l);",
                "boolean b = true;"
            ],
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h3Test3": [
                "long l = -1;",
                "long l2 = -1;",
                "boolean b = true;"
            ],
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h3Test4": [
                "long l = 500000000;",
                "long l2 = computeUsableStorage(l);",
                "boolean b = true;"
            ]
        },
        "original_h": [
            "long l = 1000000000;",
            "long l2 = 2_250_000_000L;",
            "boolean b = true;"
        ]
    }
}