{
    "be.seeseemelk.mockbukkit.profile.PlayerTexturesMockTest.testHashCode()": {
        "generated_inputs_class": [
            "be.seeseemelk.mockbukkit.profile.PlayerTexturesMockTest_testHashCode_h1Test0",
            "be.seeseemelk.mockbukkit.profile.PlayerTexturesMockTest_testHashCode_h1Test1",
            "be.seeseemelk.mockbukkit.profile.PlayerTexturesMockTest_testHashCode_h1Test2",
            "be.seeseemelk.mockbukkit.profile.PlayerTexturesMockTest_testHashCode_h1Test3",
            "be.seeseemelk.mockbukkit.profile.PlayerTexturesMockTest_testHashCode_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "PlayerTexturesMock playerTexturesMock = new PlayerTexturesMock(profile);",
                "playerTexturesMock.setSkin(null);",
                "PlayerTexturesMock otherPlayerTexturesMock = new PlayerTexturesMock(profile);",
                "otherPlayerTexturesMock.setSkin(null);"
            ],
            [
                "PlayerTexturesMock playerTexturesMock = new PlayerTexturesMock(profile);",
                "playerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "ProfileProperty property = new ProfileProperty(\"textures\", \"value\", \"signature\");",
                "playerTexturesMock.setProperty(property);",
                "PlayerTexturesMock otherPlayerTexturesMock = new PlayerTexturesMock(profile);",
                "otherPlayerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "otherPlayerTexturesMock.setProperty(property);"
            ],
            [
                "PlayerTexturesMock playerTexturesMock = new PlayerTexturesMock(profile);",
                "playerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "ProfileProperty property = new ProfileProperty(\"textures\", \"value\", null);",
                "playerTexturesMock.setProperty(property);",
                "PlayerTexturesMock otherPlayerTexturesMock = new PlayerTexturesMock(profile);",
                "otherPlayerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "otherPlayerTexturesMock.setProperty(property);"
            ],
            [
                "PlayerTexturesMock playerTexturesMock = new PlayerTexturesMock(profile);",
                "playerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "ProfileProperty property = new ProfileProperty(\"textures\", null, \"signature\");",
                "playerTexturesMock.setProperty(property);",
                "PlayerTexturesMock otherPlayerTexturesMock = new PlayerTexturesMock(profile);",
                "otherPlayerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "otherPlayerTexturesMock.setProperty(property);"
            ],
            [
                "PlayerTexturesMock playerTexturesMock = new PlayerTexturesMock(profile);",
                "playerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "ProfileProperty property = new ProfileProperty(null, \"value\", \"signature\");",
                "playerTexturesMock.setProperty(property);",
                "PlayerTexturesMock otherPlayerTexturesMock = new PlayerTexturesMock(profile);",
                "otherPlayerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "otherPlayerTexturesMock.setProperty(property);"
            ]
        ],
        "selected": {
            "be.seeseemelk.mockbukkit.profile.PlayerTexturesMockTest_testHashCode_h1Test0": [
                "PlayerTexturesMock playerTexturesMock = new PlayerTexturesMock(profile);",
                "playerTexturesMock.setSkin(null);",
                "PlayerTexturesMock otherPlayerTexturesMock = new PlayerTexturesMock(profile);",
                "otherPlayerTexturesMock.setSkin(null);"
            ],
            "be.seeseemelk.mockbukkit.profile.PlayerTexturesMockTest_testHashCode_h1Test1": [
                "PlayerTexturesMock playerTexturesMock = new PlayerTexturesMock(profile);",
                "playerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "ProfileProperty property = new ProfileProperty(\"textures\", \"value\", \"signature\");",
                "playerTexturesMock.setProperty(property);",
                "PlayerTexturesMock otherPlayerTexturesMock = new PlayerTexturesMock(profile);",
                "otherPlayerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "otherPlayerTexturesMock.setProperty(property);"
            ],
            "be.seeseemelk.mockbukkit.profile.PlayerTexturesMockTest_testHashCode_h1Test2": [
                "PlayerTexturesMock playerTexturesMock = new PlayerTexturesMock(profile);",
                "playerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "ProfileProperty property = new ProfileProperty(\"textures\", \"value\", null);",
                "playerTexturesMock.setProperty(property);",
                "PlayerTexturesMock otherPlayerTexturesMock = new PlayerTexturesMock(profile);",
                "otherPlayerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "otherPlayerTexturesMock.setProperty(property);"
            ],
            "be.seeseemelk.mockbukkit.profile.PlayerTexturesMockTest_testHashCode_h1Test3": [
                "PlayerTexturesMock playerTexturesMock = new PlayerTexturesMock(profile);",
                "playerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "ProfileProperty property = new ProfileProperty(\"textures\", null, \"signature\");",
                "playerTexturesMock.setProperty(property);",
                "PlayerTexturesMock otherPlayerTexturesMock = new PlayerTexturesMock(profile);",
                "otherPlayerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "otherPlayerTexturesMock.setProperty(property);"
            ],
            "be.seeseemelk.mockbukkit.profile.PlayerTexturesMockTest_testHashCode_h1Test4": [
                "PlayerTexturesMock playerTexturesMock = new PlayerTexturesMock(profile);",
                "playerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "ProfileProperty property = new ProfileProperty(null, \"value\", \"signature\");",
                "playerTexturesMock.setProperty(property);",
                "PlayerTexturesMock otherPlayerTexturesMock = new PlayerTexturesMock(profile);",
                "otherPlayerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "otherPlayerTexturesMock.setProperty(property);"
            ]
        },
        "processed_generated": {
            "be.seeseemelk.mockbukkit.profile.PlayerTexturesMockTest_testHashCode_h1Test0": [
                "PlayerTexturesMock playerTexturesMock = new PlayerTexturesMock(profile);",
                "playerTexturesMock.setSkin(null);",
                "PlayerTexturesMock otherPlayerTexturesMock = new PlayerTexturesMock(profile);",
                "otherPlayerTexturesMock.setSkin(null);"
            ],
            "be.seeseemelk.mockbukkit.profile.PlayerTexturesMockTest_testHashCode_h1Test1": [
                "PlayerTexturesMock playerTexturesMock = new PlayerTexturesMock(profile);",
                "playerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "ProfileProperty property = new ProfileProperty(\"textures\", \"value\", \"signature\");",
                "playerTexturesMock.setProperty(property);",
                "PlayerTexturesMock otherPlayerTexturesMock = new PlayerTexturesMock(profile);",
                "otherPlayerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "otherPlayerTexturesMock.setProperty(property);"
            ],
            "be.seeseemelk.mockbukkit.profile.PlayerTexturesMockTest_testHashCode_h1Test2": [
                "PlayerTexturesMock playerTexturesMock = new PlayerTexturesMock(profile);",
                "playerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "ProfileProperty property = new ProfileProperty(\"textures\", \"value\", null);",
                "playerTexturesMock.setProperty(property);",
                "PlayerTexturesMock otherPlayerTexturesMock = new PlayerTexturesMock(profile);",
                "otherPlayerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "otherPlayerTexturesMock.setProperty(property);"
            ],
            "be.seeseemelk.mockbukkit.profile.PlayerTexturesMockTest_testHashCode_h1Test3": [
                "PlayerTexturesMock playerTexturesMock = new PlayerTexturesMock(profile);",
                "playerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "ProfileProperty property = new ProfileProperty(\"textures\", null, \"signature\");",
                "playerTexturesMock.setProperty(property);",
                "PlayerTexturesMock otherPlayerTexturesMock = new PlayerTexturesMock(profile);",
                "otherPlayerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "otherPlayerTexturesMock.setProperty(property);"
            ],
            "be.seeseemelk.mockbukkit.profile.PlayerTexturesMockTest_testHashCode_h1Test4": [
                "PlayerTexturesMock playerTexturesMock = new PlayerTexturesMock(profile);",
                "playerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "ProfileProperty property = new ProfileProperty(null, \"value\", \"signature\");",
                "playerTexturesMock.setProperty(property);",
                "PlayerTexturesMock otherPlayerTexturesMock = new PlayerTexturesMock(profile);",
                "otherPlayerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
                "otherPlayerTexturesMock.setProperty(property);"
            ]
        },
        "original_h": [
            "PlayerTexturesMock playerTexturesMock = new PlayerTexturesMock(profile);",
            "playerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));",
            "PlayerTexturesMock otherPlayerTexturesMock = new PlayerTexturesMock(profile);",
            "otherPlayerTexturesMock.setSkin(new URL(\"https://github.com/skin\"));"
        ]
    },
    "com.dslplatform.json.DateTest.zonedDateTimeBoundary()": {
        "generated_inputs_class": [
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h1Test0",
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h1Test1",
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h1Test2",
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h1Test3",
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");",
                "JsonWriter jw = dslJson.newWriter(34);",
                "ZonedDateTime[] lts = new ZonedDateTime[3];",
                "Arrays.fill(lts, now.minusYears(1));",
                "Class<ZonedDateTime[]> manifest = ZonedDateTime[].class;",
                "byte[] body = { 91, 34, 50, 48, 49, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 49, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 49, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };",
                "int size = 115;"
            ],
            [
                "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");",
                "JsonWriter jw = dslJson.newWriter(34);",
                "ZonedDateTime[] lts = new ZonedDateTime[3];",
                "Arrays.fill(lts, now.plusYears(1));",
                "Class<ZonedDateTime[]> manifest = ZonedDateTime[].class;",
                "byte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };",
                "int size = 115;"
            ],
            [
                "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");",
                "JsonWriter jw = dslJson.newWriter(34);",
                "ZonedDateTime[] lts = new ZonedDateTime[3];",
                "Arrays.fill(lts, now.minusMonths(1));",
                "Class<ZonedDateTime[]> manifest = ZonedDateTime[].class;",
                "byte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };",
                "int size = 115;"
            ],
            [
                "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");",
                "JsonWriter jw = dslJson.newWriter(34);",
                "ZonedDateTime[] lts = new ZonedDateTime[3];",
                "Arrays.fill(lts, now.plusMonths(1));",
                "Class<ZonedDateTime[]> manifest = ZonedDateTime[].class;",
                "byte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };",
                "int size = 115;"
            ],
            [
                "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");",
                "JsonWriter jw = dslJson.newWriter(34);",
                "ZonedDateTime[] lts = new ZonedDateTime[3];",
                "Arrays.fill(lts, now.minusDays(1));",
                "Class<ZonedDateTime[]> manifest = ZonedDateTime[].class;",
                "byte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };",
                "int size = 115;"
            ]
        ],
        "selected": {
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h1Test0": [
                "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");",
                "JsonWriter jw = dslJson.newWriter(34);",
                "ZonedDateTime[] lts = new ZonedDateTime[3];",
                "Arrays.fill(lts, now.minusYears(1));",
                "Class<ZonedDateTime[]> manifest = ZonedDateTime[].class;",
                "byte[] body = { 91, 34, 50, 48, 49, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 49, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 49, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };",
                "int size = 115;"
            ],
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h1Test1": [
                "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");",
                "JsonWriter jw = dslJson.newWriter(34);",
                "ZonedDateTime[] lts = new ZonedDateTime[3];",
                "Arrays.fill(lts, now.plusYears(1));",
                "Class<ZonedDateTime[]> manifest = ZonedDateTime[].class;",
                "byte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };",
                "int size = 115;"
            ],
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h1Test2": [
                "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");",
                "JsonWriter jw = dslJson.newWriter(34);",
                "ZonedDateTime[] lts = new ZonedDateTime[3];",
                "Arrays.fill(lts, now.minusMonths(1));",
                "Class<ZonedDateTime[]> manifest = ZonedDateTime[].class;",
                "byte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };",
                "int size = 115;"
            ],
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h1Test3": [
                "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");",
                "JsonWriter jw = dslJson.newWriter(34);",
                "ZonedDateTime[] lts = new ZonedDateTime[3];",
                "Arrays.fill(lts, now.plusMonths(1));",
                "Class<ZonedDateTime[]> manifest = ZonedDateTime[].class;",
                "byte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };",
                "int size = 115;"
            ],
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h1Test4": [
                "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");",
                "JsonWriter jw = dslJson.newWriter(34);",
                "ZonedDateTime[] lts = new ZonedDateTime[3];",
                "Arrays.fill(lts, now.minusDays(1));",
                "Class<ZonedDateTime[]> manifest = ZonedDateTime[].class;",
                "byte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };",
                "int size = 115;"
            ]
        },
        "processed_generated": {
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h1Test0": [
                "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");",
                "JsonWriter jw = dslJson.newWriter(34);",
                "ZonedDateTime[] lts = new ZonedDateTime[3];",
                "Arrays.fill(lts, now.minusYears(1));",
                "Class<ZonedDateTime[]> manifest = ZonedDateTime[].class;",
                "byte[] body = { 91, 34, 50, 48, 49, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 49, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 49, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };",
                "int size = 115;"
            ],
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h1Test1": [
                "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");",
                "JsonWriter jw = dslJson.newWriter(34);",
                "ZonedDateTime[] lts = new ZonedDateTime[3];",
                "Arrays.fill(lts, now.plusYears(1));",
                "Class<ZonedDateTime[]> manifest = ZonedDateTime[].class;",
                "byte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };",
                "int size = 115;"
            ],
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h1Test2": [
                "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");",
                "JsonWriter jw = dslJson.newWriter(34);",
                "ZonedDateTime[] lts = new ZonedDateTime[3];",
                "Arrays.fill(lts, now.minusMonths(1));",
                "Class<ZonedDateTime[]> manifest = ZonedDateTime[].class;",
                "byte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };",
                "int size = 115;"
            ],
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h1Test3": [
                "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");",
                "JsonWriter jw = dslJson.newWriter(34);",
                "ZonedDateTime[] lts = new ZonedDateTime[3];",
                "Arrays.fill(lts, now.plusMonths(1));",
                "Class<ZonedDateTime[]> manifest = ZonedDateTime[].class;",
                "byte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };",
                "int size = 115;"
            ],
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h1Test4": [
                "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");",
                "JsonWriter jw = dslJson.newWriter(34);",
                "ZonedDateTime[] lts = new ZonedDateTime[3];",
                "Arrays.fill(lts, now.minusDays(1));",
                "Class<ZonedDateTime[]> manifest = ZonedDateTime[].class;",
                "byte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };",
                "int size = 115;"
            ]
        },
        "original_h": [
            "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");",
            "JsonWriter jw = dslJson.newWriter(34);",
            "ZonedDateTime[] lts = new ZonedDateTime[3];",
            "Arrays.fill(lts, now);",
            "Class<ZonedDateTime[]> manifest = ZonedDateTime[].class;",
            "byte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };",
            "int size = 115;"
        ]
    },
    "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest.testInFlightRequestKey()": {
        "generated_inputs_class": [
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h1Test0",
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h1Test1",
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h1Test2",
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h1Test3",
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 0);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 1, 0);"
            ],
            [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 0);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 0, Integer.MAX_VALUE);"
            ],
            [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 0);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"\", 0, 0);"
            ],
            [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 0);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 0, -1);"
            ],
            [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 0);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", -1, 0);"
            ]
        ],
        "selected": {
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h1Test0": [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 0);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 1, 0);"
            ],
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h1Test1": [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 0);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 0, Integer.MAX_VALUE);"
            ],
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h1Test2": [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 0);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"\", 0, 0);"
            ],
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h1Test3": [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 0);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 0, -1);"
            ],
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h1Test4": [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 0);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", -1, 0);"
            ]
        },
        "processed_generated": {
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h1Test0": [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 0);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 1, 0);"
            ],
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h1Test1": [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 0);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 0, Integer.MAX_VALUE);"
            ],
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h1Test2": [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 0);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"\", 0, 0);"
            ],
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h1Test3": [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 0);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 0, -1);"
            ],
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h1Test4": [
                "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 0);",
                "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", -1, 0);"
            ]
        },
        "original_h": [
            "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 0);",
            "InFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 1, 1);"
        ]
    },
    "cn.hutool.json.IssueI6SZYBTest.pairTest()": {
        "generated_inputs_class": [
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h1Test0",
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h1Test1",
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h1Test2",
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h1Test3",
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "Pair<Integer, Integer> pair = Pair.of(0, 0);",
                "String jsonString = \"{\\\"key\\\":0,\\\"value\\\":0}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            [
                "Pair<Integer, Integer> pair = Pair.of(Integer.MAX_VALUE, Integer.MAX_VALUE);",
                "String jsonString = \"{\\\"key\\\":2147483647,\\\"value\\\":2147483647}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            [
                "Pair<Integer, Integer> pair = Pair.of(Integer.MIN_VALUE, Integer.MIN_VALUE);",
                "String jsonString = \"{\\\"key\\\":-2147483648,\\\"value\\\":-2147483648}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            [
                "Pair<Integer, Integer> pair = Pair.of(null, 2);",
                "String jsonString = \"{\\\"key\\\":null,\\\"value\\\":2}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            [
                "Pair<Integer, Integer> pair = Pair.of(1, null);",
                "String jsonString = \"{\\\"key\\\":1,\\\"value\\\":null}\";",
                "Class<Pair> beanClass = Pair.class;"
            ]
        ],
        "selected": {
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h1Test0": [
                "Pair<Integer, Integer> pair = Pair.of(0, 0);",
                "String jsonString = \"{\\\"key\\\":0,\\\"value\\\":0}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h1Test1": [
                "Pair<Integer, Integer> pair = Pair.of(Integer.MAX_VALUE, Integer.MAX_VALUE);",
                "String jsonString = \"{\\\"key\\\":2147483647,\\\"value\\\":2147483647}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h1Test2": [
                "Pair<Integer, Integer> pair = Pair.of(Integer.MIN_VALUE, Integer.MIN_VALUE);",
                "String jsonString = \"{\\\"key\\\":-2147483648,\\\"value\\\":-2147483648}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h1Test3": [
                "Pair<Integer, Integer> pair = Pair.of(null, 2);",
                "String jsonString = \"{\\\"key\\\":null,\\\"value\\\":2}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h1Test4": [
                "Pair<Integer, Integer> pair = Pair.of(1, null);",
                "String jsonString = \"{\\\"key\\\":1,\\\"value\\\":null}\";",
                "Class<Pair> beanClass = Pair.class;"
            ]
        },
        "processed_generated": {
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h1Test0": [
                "Pair<Integer, Integer> pair = Pair.of(0, 0);",
                "String jsonString = \"{\\\"key\\\":0,\\\"value\\\":0}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h1Test1": [
                "Pair<Integer, Integer> pair = Pair.of(Integer.MAX_VALUE, Integer.MAX_VALUE);",
                "String jsonString = \"{\\\"key\\\":2147483647,\\\"value\\\":2147483647}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h1Test2": [
                "Pair<Integer, Integer> pair = Pair.of(Integer.MIN_VALUE, Integer.MIN_VALUE);",
                "String jsonString = \"{\\\"key\\\":-2147483648,\\\"value\\\":-2147483648}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h1Test3": [
                "Pair<Integer, Integer> pair = Pair.of(null, 2);",
                "String jsonString = \"{\\\"key\\\":null,\\\"value\\\":2}\";",
                "Class<Pair> beanClass = Pair.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h1Test4": [
                "Pair<Integer, Integer> pair = Pair.of(1, null);",
                "String jsonString = \"{\\\"key\\\":1,\\\"value\\\":null}\";",
                "Class<Pair> beanClass = Pair.class;"
            ]
        },
        "original_h": [
            "Pair<Integer, Integer> pair = Pair.of(1, 2);",
            "String jsonString = \"{\\\"key\\\":1,\\\"value\\\":2}\";",
            "Class<Pair> beanClass = Pair.class;"
        ]
    },
    "cn.hutool.json.IssueI6SZYBTest.entryTest()": {
        "generated_inputs_class": [
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h1Test0",
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h1Test1",
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h1Test2",
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h1Test3",
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"\", 0);",
                "String jsonString = \"{\\\"\\\":0}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"1234567890\", Integer.MAX_VALUE);",
                "String jsonString = \"{\\\"1234567890\\\":2147483647}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key\", null);",
                "String jsonString = \"{\\\"key\\\":null}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key\", -1);",
                "String jsonString = \"{\\\"key\\\":-1}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key\", 0);",
                "String jsonString = \"{\\\"key\\\":0}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ]
        ],
        "selected": {
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h1Test0": [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"\", 0);",
                "String jsonString = \"{\\\"\\\":0}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h1Test1": [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"1234567890\", Integer.MAX_VALUE);",
                "String jsonString = \"{\\\"1234567890\\\":2147483647}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h1Test2": [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key\", null);",
                "String jsonString = \"{\\\"key\\\":null}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h1Test3": [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key\", -1);",
                "String jsonString = \"{\\\"key\\\":-1}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h1Test4": [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key\", 0);",
                "String jsonString = \"{\\\"key\\\":0}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ]
        },
        "processed_generated": {
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h1Test0": [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"\", 0);",
                "String jsonString = \"{\\\"\\\":0}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h1Test1": [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"1234567890\", Integer.MAX_VALUE);",
                "String jsonString = \"{\\\"1234567890\\\":2147483647}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h1Test2": [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key\", null);",
                "String jsonString = \"{\\\"key\\\":null}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h1Test3": [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key\", -1);",
                "String jsonString = \"{\\\"key\\\":-1}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ],
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h1Test4": [
                "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key\", 0);",
                "String jsonString = \"{\\\"key\\\":0}\";",
                "Class beanClass = AbstractMap.SimpleEntry.class;"
            ]
        },
        "original_h": [
            "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"1\", 2);",
            "String jsonString = \"{\\\"1\\\":2}\";",
            "Class beanClass = AbstractMap.SimpleEntry.class;"
        ]
    },
    "cn.hutool.json.IssueI7GPGXTest.toBeanTest()": {
        "generated_inputs_class": [
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h1Test0",
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h1Test1",
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h1Test2",
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h1Test3"
        ],
        "generated_all_blocks": [
            [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"\", false);",
                "String jsonString = \"{\\\"key\\\":\\\"\\\",\\\"value\\\":false}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {",
                "};",
                "boolean ignoreError = false;"
            ],
            [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"test1\", null);",
                "String jsonString = \"{\\\"key\\\":\\\"test1\\\",\\\"value\\\":null}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {",
                "};",
                "boolean ignoreError = false;"
            ],
            [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"test1\", true);",
                "String jsonString = \"{\\\"key\\\":\\\"test1\\\",\\\"value\\\":true}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {",
                "};",
                "boolean ignoreError = false;"
            ],
            [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"test1\", false);",
                "String jsonString = \"{\\\"key\\\":\\\"test1\\\",\\\"value\\\":false}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {",
                "};",
                "boolean ignoreError = false;"
            ]
        ],
        "selected": {
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h1Test0": [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"\", false);",
                "String jsonString = \"{\\\"key\\\":\\\"\\\",\\\"value\\\":false}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {",
                "};",
                "boolean ignoreError = false;"
            ],
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h1Test1": [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"test1\", null);",
                "String jsonString = \"{\\\"key\\\":\\\"test1\\\",\\\"value\\\":null}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {",
                "};",
                "boolean ignoreError = false;"
            ],
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h1Test2": [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"test1\", true);",
                "String jsonString = \"{\\\"key\\\":\\\"test1\\\",\\\"value\\\":true}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {",
                "};",
                "boolean ignoreError = false;"
            ],
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h1Test3": [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"test1\", false);",
                "String jsonString = \"{\\\"key\\\":\\\"test1\\\",\\\"value\\\":false}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {",
                "};",
                "boolean ignoreError = false;"
            ]
        },
        "processed_generated": {
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h1Test0": [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"\", false);",
                "String jsonString = \"{\\\"key\\\":\\\"\\\",\\\"value\\\":false}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {",
                "};",
                "boolean ignoreError = false;"
            ],
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h1Test1": [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"test1\", null);",
                "String jsonString = \"{\\\"key\\\":\\\"test1\\\",\\\"value\\\":null}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {",
                "};",
                "boolean ignoreError = false;"
            ],
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h1Test2": [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"test1\", true);",
                "String jsonString = \"{\\\"key\\\":\\\"test1\\\",\\\"value\\\":true}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {",
                "};",
                "boolean ignoreError = false;"
            ],
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h1Test3": [
                "Pair<String, Boolean> hutoolPair = new Pair<>(\"test1\", false);",
                "String jsonString = \"{\\\"key\\\":\\\"test1\\\",\\\"value\\\":false}\";",
                "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {",
                "};",
                "boolean ignoreError = false;"
            ]
        },
        "original_h": [
            "Pair<String, Boolean> hutoolPair = new Pair<>(\"test1\", true);",
            "String jsonString = \"{\\\"key\\\":\\\"test1\\\",\\\"value\\\":true}\";",
            "TypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {",
            "};",
            "boolean ignoreError = false;"
        ]
    },
    "io.bootique.di.KeyTest.equals()": {
        "generated_inputs_class": [
            "io.bootique.di.KeyTest_equals_h1Test0",
            "io.bootique.di.KeyTest_equals_h1Test1",
            "io.bootique.di.KeyTest_equals_h1Test2",
            "io.bootique.di.KeyTest_equals_h1Test3",
            "io.bootique.di.KeyTest_equals_h1Test4",
            "io.bootique.di.KeyTest_equals_h1Test5",
            "io.bootique.di.KeyTest_equals_h1Test6",
            "io.bootique.di.KeyTest_equals_h1Test7",
            "io.bootique.di.KeyTest_equals_h1Test8",
            "io.bootique.di.KeyTest_equals_h1Test9"
        ],
        "generated_all_blocks": [
            [
                "Class<?> type1 = Integer.class;",
                "Class<?> type2 = Integer.class;"
            ],
            [
                "Key<Integer> key1 = Key.get(type1);",
                "Key<Integer> key2 = Key.get(type2);"
            ],
            [
                "Class<?> type1 = Double.class;",
                "Class<?> type2 = Double.class;"
            ],
            [
                "Key<Double> key1 = Key.get(type1);",
                "Key<Double> key2 = Key.get(type2);"
            ],
            [
                "Class<?> type1 = Character.class;",
                "Class<?> type2 = Character.class;"
            ],
            [
                "Key<Character> key1 = Key.get(type1);",
                "Key<Character> key2 = Key.get(type2);"
            ],
            [
                "Class<?> type1 = Void.class;",
                "Class<?> type2 = Void.class;"
            ],
            [
                "Key<Void> key1 = Key.get(type1);",
                "Key<Void> key2 = Key.get(type2);"
            ],
            [
                "Class<?> type1 = Object.class;",
                "Class<?> type2 = Object.class;"
            ],
            [
                "Key<Object> key1 = Key.get(type1);",
                "Key<Object> key2 = Key.get(type2);"
            ]
        ],
        "selected": {
            "io.bootique.di.KeyTest_equals_h1Test0": [
                "Class<?> type1 = Integer.class;",
                "Class<?> type2 = Integer.class;"
            ],
            "io.bootique.di.KeyTest_equals_h1Test1": [
                "Key<Integer> key1 = Key.get(type1);",
                "Key<Integer> key2 = Key.get(type2);"
            ],
            "io.bootique.di.KeyTest_equals_h1Test2": [
                "Class<?> type1 = Double.class;",
                "Class<?> type2 = Double.class;"
            ],
            "io.bootique.di.KeyTest_equals_h1Test3": [
                "Key<Double> key1 = Key.get(type1);",
                "Key<Double> key2 = Key.get(type2);"
            ],
            "io.bootique.di.KeyTest_equals_h1Test4": [
                "Class<?> type1 = Character.class;",
                "Class<?> type2 = Character.class;"
            ],
            "io.bootique.di.KeyTest_equals_h1Test5": [
                "Key<Character> key1 = Key.get(type1);",
                "Key<Character> key2 = Key.get(type2);"
            ],
            "io.bootique.di.KeyTest_equals_h1Test6": [
                "Class<?> type1 = Void.class;",
                "Class<?> type2 = Void.class;"
            ],
            "io.bootique.di.KeyTest_equals_h1Test7": [
                "Key<Void> key1 = Key.get(type1);",
                "Key<Void> key2 = Key.get(type2);"
            ],
            "io.bootique.di.KeyTest_equals_h1Test8": [
                "Class<?> type1 = Object.class;",
                "Class<?> type2 = Object.class;"
            ],
            "io.bootique.di.KeyTest_equals_h1Test9": [
                "Key<Object> key1 = Key.get(type1);",
                "Key<Object> key2 = Key.get(type2);"
            ]
        },
        "processed_generated": {
            "io.bootique.di.KeyTest_equals_h1Test0": [
                "Class<?> type1 = Integer.class;",
                "Class<?> type2 = Integer.class;"
            ],
            "io.bootique.di.KeyTest_equals_h1Test1": [
                ""
            ],
            "io.bootique.di.KeyTest_equals_h1Test2": [
                "Class<?> type1 = Double.class;",
                "Class<?> type2 = Double.class;"
            ],
            "io.bootique.di.KeyTest_equals_h1Test3": [
                ""
            ],
            "io.bootique.di.KeyTest_equals_h1Test4": [
                "Class<?> type1 = Character.class;",
                "Class<?> type2 = Character.class;"
            ],
            "io.bootique.di.KeyTest_equals_h1Test5": [
                ""
            ],
            "io.bootique.di.KeyTest_equals_h1Test6": [
                "Class<?> type1 = Void.class;",
                "Class<?> type2 = Void.class;"
            ],
            "io.bootique.di.KeyTest_equals_h1Test7": [
                ""
            ],
            "io.bootique.di.KeyTest_equals_h1Test8": [
                "Class<?> type1 = Object.class;",
                "Class<?> type2 = Object.class;"
            ],
            "io.bootique.di.KeyTest_equals_h1Test9": [
                ""
            ]
        },
        "original_h": [
            "Class<?> type1 = String.class;",
            "Class<?> type2 = String.class;"
        ]
    },
    "org.quartz.impl.RemoteMBeanSchedulerTest.testJobOperations()": {
        "generated_inputs_class": [
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h1Test0"
        ],
        "generated_all_blocks": [
            [
                "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().build();",
                "JobKey job22 = new JobKey(\"job2\", GROUP_KEY);"
            ]
        ],
        "selected": {
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h1Test0": [
                "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().build();",
                "JobKey job22 = new JobKey(\"job2\", GROUP_KEY);"
            ]
        },
        "processed_generated": {
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h1Test0": [
                "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().build();",
                "JobKey job22 = new JobKey(\"job2\", GROUP_KEY);"
            ]
        },
        "original_h": [
            "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().build();",
            "JobKey job22 = new JobKey(\"job2\", GROUP_KEY);"
        ]
    },
    "org.jsoup.parser.StreamParserTest.select()": {
        "generated_inputs_class": [
            "org.jsoup.parser.StreamParserTest_select_h1Test0",
            "org.jsoup.parser.StreamParserTest_select_h1Test1",
            "org.jsoup.parser.StreamParserTest_select_h1Test2",
            "org.jsoup.parser.StreamParserTest_select_h1Test3",
            "org.jsoup.parser.StreamParserTest_select_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"p\";",
                "String queryTitle2 = \"p\";"
            ],
            [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"h1\";",
                "String queryTitle2 = \"h1\";"
            ],
            [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"\";",
                "String queryTitle2 = \"\";"
            ],
            [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"*\";",
                "String queryTitle2 = \"*\";"
            ],
            [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"title[id=1]\";",
                "String queryTitle2 = \"title[id=1]\";"
            ]
        ],
        "selected": {
            "org.jsoup.parser.StreamParserTest_select_h1Test0": [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"p\";",
                "String queryTitle2 = \"p\";"
            ],
            "org.jsoup.parser.StreamParserTest_select_h1Test1": [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"h1\";",
                "String queryTitle2 = \"h1\";"
            ],
            "org.jsoup.parser.StreamParserTest_select_h1Test2": [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"\";",
                "String queryTitle2 = \"\";"
            ],
            "org.jsoup.parser.StreamParserTest_select_h1Test3": [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"*\";",
                "String queryTitle2 = \"*\";"
            ],
            "org.jsoup.parser.StreamParserTest_select_h1Test4": [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"title[id=1]\";",
                "String queryTitle2 = \"title[id=1]\";"
            ]
        },
        "processed_generated": {
            "org.jsoup.parser.StreamParserTest_select_h1Test0": [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"p\";",
                "String queryTitle2 = \"p\";"
            ],
            "org.jsoup.parser.StreamParserTest_select_h1Test1": [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"h1\";",
                "String queryTitle2 = \"h1\";"
            ],
            "org.jsoup.parser.StreamParserTest_select_h1Test2": [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"\";",
                "String queryTitle2 = \"\";"
            ],
            "org.jsoup.parser.StreamParserTest_select_h1Test3": [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"*\";",
                "String queryTitle2 = \"*\";"
            ],
            "org.jsoup.parser.StreamParserTest_select_h1Test4": [
                "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
                "String queryTitle = \"title[id=1]\";",
                "String queryTitle2 = \"title[id=1]\";"
            ]
        },
        "original_h": [
            "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");",
            "String queryTitle = \"title\";",
            "String queryTitle2 = \"title\";"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test3()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h1Test0",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h1Test1",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h1Test2",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h1Test3",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h1Test4",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h1Test5"
        ],
        "generated_all_blocks": [
            [
                "Map<String, Boolean> v01 = new HashMap<>();",
                "v01.put(\"101\", true);",
                "v01.put(\"102\", false);",
                "v01.put(\"103\", true);"
            ],
            [
                "Map<String, Boolean> v01 = new HashMap<>();",
                "v01.put(\"101\", true);",
                "v01.put(\"102\", false);",
                "v01.put(\"\", true);"
            ],
            [
                "Map<String, Boolean> v01 = new HashMap<>();",
                "v01.put(\"101\", true);",
                "v01.put(\"102\", false);",
                "v01.put(\"null\", true);"
            ],
            [
                "Map<String, Boolean> v01 = new HashMap<>();",
                "v01.put(\"101\", true);",
                "v01.put(\"102\", false);",
                "v01.put(\"true\", true);"
            ],
            [
                "Map<String, Boolean> v01 = new HashMap<>();",
                "v01.put(\"101\", true);",
                "v01.put(\"102\", false);",
                "v01.put(\"false\", true);"
            ],
            [
                "String str = JSON.toJSONString(v01);"
            ],
            [
                "String str = JSON.toJSONString(v01);"
            ],
            [
                "String str = JSON.toJSONString(v01);"
            ],
            [
                "String str = JSON.toJSONString(v01);"
            ],
            [
                "String str = JSON.toJSONString(v01);"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h1Test0": [
                "Map<String, Boolean> v01 = new HashMap<>();",
                "v01.put(\"101\", true);",
                "v01.put(\"102\", false);",
                "v01.put(\"103\", true);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h1Test1": [
                "Map<String, Boolean> v01 = new HashMap<>();",
                "v01.put(\"101\", true);",
                "v01.put(\"102\", false);",
                "v01.put(\"\", true);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h1Test2": [
                "Map<String, Boolean> v01 = new HashMap<>();",
                "v01.put(\"101\", true);",
                "v01.put(\"102\", false);",
                "v01.put(\"null\", true);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h1Test3": [
                "Map<String, Boolean> v01 = new HashMap<>();",
                "v01.put(\"101\", true);",
                "v01.put(\"102\", false);",
                "v01.put(\"true\", true);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h1Test4": [
                "Map<String, Boolean> v01 = new HashMap<>();",
                "v01.put(\"101\", true);",
                "v01.put(\"102\", false);",
                "v01.put(\"false\", true);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h1Test5": [
                "String str = JSON.toJSONString(v01);"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h1Test0": [
                "Map<String, Boolean> v01 = new HashMap<>();",
                "v01.put(\"101\", true);",
                "v01.put(\"102\", false);",
                "v01.put(\"103\", true);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h1Test1": [
                "Map<String, Boolean> v01 = new HashMap<>();",
                "v01.put(\"101\", true);",
                "v01.put(\"102\", false);",
                "v01.put(\"\", true);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h1Test2": [
                "Map<String, Boolean> v01 = new HashMap<>();",
                "v01.put(\"101\", true);",
                "v01.put(\"102\", false);",
                "v01.put(\"null\", true);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h1Test3": [
                "Map<String, Boolean> v01 = new HashMap<>();",
                "v01.put(\"101\", true);",
                "v01.put(\"102\", false);",
                "v01.put(\"true\", true);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h1Test4": [
                "Map<String, Boolean> v01 = new HashMap<>();",
                "v01.put(\"101\", true);",
                "v01.put(\"102\", false);",
                "v01.put(\"false\", true);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h1Test5": [
                ""
            ]
        },
        "original_h": [
            "Map<String, Boolean> v01 = new HashMap<>();",
            "v01.put(\"101\", true);",
            "v01.put(\"102\", false);"
        ]
    },
    "org.threeten.extra.TestYearHalf.test_of_int_int()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestYearHalf_test_of_int_int_h1Test0",
            "org.threeten.extra.TestYearHalf_test_of_int_int_h1Test1",
            "org.threeten.extra.TestYearHalf_test_of_int_int_h1Test2",
            "org.threeten.extra.TestYearHalf_test_of_int_int_h1Test3",
            "org.threeten.extra.TestYearHalf_test_of_int_int_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "int year = 0;",
                "int half = 1;",
                "YearHalf test2 = YearHalf.of(year, half);",
                "assertEquals(year, test2.getYear());",
                "assertEquals(half, test2.getHalfValue());",
                "assertEquals(Half.of(half), test2.getHalf());",
                "assertEquals(test2, YearHalf.of(year, half));",
                "assertEquals(test2.hashCode(), YearHalf.of(year, half).hashCode());"
            ],
            [
                "int year = 9999;",
                "int half = 2;",
                "YearHalf test2 = YearHalf.of(year, half);",
                "assertEquals(year, test2.getYear());",
                "assertEquals(half, test2.getHalfValue());",
                "assertEquals(Half.of(half), test2.getHalf());",
                "assertEquals(test2, YearHalf.of(year, half));",
                "assertEquals(test2.hashCode(), YearHalf.of(year, half).hashCode());"
            ],
            [
                "int year = 5000;",
                "int half = 1;",
                "YearHalf test2 = YearHalf.of(year, half);",
                "assertEquals(year, test2.getYear());",
                "assertEquals(half, test2.getHalfValue());",
                "assertEquals(Half.of(half), test2.getHalf());",
                "assertEquals(test2, YearHalf.of(year, half));",
                "assertEquals(test2.hashCode(), YearHalf.of(year, half).hashCode());"
            ],
            [
                "int year = -1;",
                "int half = 2;",
                "YearHalf test2 = YearHalf.of(year, half);",
                "assertEquals(year, test2.getYear());",
                "assertEquals(half, test2.getHalfValue());",
                "assertEquals(Half.of(half), test2.getHalf());",
                "assertEquals(test2, YearHalf.of(year, half));",
                "assertEquals(test2.hashCode(), YearHalf.of(year, half).hashCode());"
            ],
            [
                "int year = 10000;",
                "int half = 1;",
                "YearHalf test2 = YearHalf.of(year, half);",
                "assertEquals(year, test2.getYear());",
                "assertEquals(half, test2.getHalfValue());",
                "assertEquals(Half.of(half), test2.getHalf());",
                "assertEquals(test2, YearHalf.of(year, half));",
                "assertEquals(test2.hashCode(), YearHalf.of(year, half).hashCode());"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestYearHalf_test_of_int_int_h1Test0": [
                "int year = 0;",
                "int half = 1;",
                "YearHalf test2 = YearHalf.of(year, half);",
                "assertEquals(year, test2.getYear());",
                "assertEquals(half, test2.getHalfValue());",
                "assertEquals(Half.of(half), test2.getHalf());",
                "assertEquals(test2, YearHalf.of(year, half));",
                "assertEquals(test2.hashCode(), YearHalf.of(year, half).hashCode());"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h1Test1": [
                "int year = 9999;",
                "int half = 2;",
                "YearHalf test2 = YearHalf.of(year, half);",
                "assertEquals(year, test2.getYear());",
                "assertEquals(half, test2.getHalfValue());",
                "assertEquals(Half.of(half), test2.getHalf());",
                "assertEquals(test2, YearHalf.of(year, half));",
                "assertEquals(test2.hashCode(), YearHalf.of(year, half).hashCode());"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h1Test2": [
                "int year = 5000;",
                "int half = 1;",
                "YearHalf test2 = YearHalf.of(year, half);",
                "assertEquals(year, test2.getYear());",
                "assertEquals(half, test2.getHalfValue());",
                "assertEquals(Half.of(half), test2.getHalf());",
                "assertEquals(test2, YearHalf.of(year, half));",
                "assertEquals(test2.hashCode(), YearHalf.of(year, half).hashCode());"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h1Test3": [
                "int year = -1;",
                "int half = 2;",
                "YearHalf test2 = YearHalf.of(year, half);",
                "assertEquals(year, test2.getYear());",
                "assertEquals(half, test2.getHalfValue());",
                "assertEquals(Half.of(half), test2.getHalf());",
                "assertEquals(test2, YearHalf.of(year, half));",
                "assertEquals(test2.hashCode(), YearHalf.of(year, half).hashCode());"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h1Test4": [
                "int year = 10000;",
                "int half = 1;",
                "YearHalf test2 = YearHalf.of(year, half);",
                "assertEquals(year, test2.getYear());",
                "assertEquals(half, test2.getHalfValue());",
                "assertEquals(Half.of(half), test2.getHalf());",
                "assertEquals(test2, YearHalf.of(year, half));",
                "assertEquals(test2.hashCode(), YearHalf.of(year, half).hashCode());"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestYearHalf_test_of_int_int_h1Test0": [
                "int year = 0;",
                "int half = 1;",
                "YearHalf test2 = YearHalf.of(year, half);"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h1Test1": [
                "int year = 9999;",
                "int half = 2;",
                "YearHalf test2 = YearHalf.of(year, half);"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h1Test2": [
                "int year = 5000;",
                "int half = 1;",
                "YearHalf test2 = YearHalf.of(year, half);"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h1Test3": [
                "int year = -1;",
                "int half = 2;",
                "YearHalf test2 = YearHalf.of(year, half);"
            ],
            "org.threeten.extra.TestYearHalf_test_of_int_int_h1Test4": [
                "int year = 10000;",
                "int half = 1;",
                "YearHalf test2 = YearHalf.of(year, half);"
            ]
        },
        "original_h": [
            "int year = 100;",
            "int half = 1;"
        ]
    },
    "org.datagear.util.version.VersionTest.isEqualTest()": {
        "generated_inputs_class": [
            "org.datagear.util.version.VersionTest_isEqualTest_h1Test0",
            "org.datagear.util.version.VersionTest_isEqualTest_h1Test1",
            "org.datagear.util.version.VersionTest_isEqualTest_h1Test2",
            "org.datagear.util.version.VersionTest_isEqualTest_h1Test3",
            "org.datagear.util.version.VersionTest_isEqualTest_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "String v1 = \"1.0-A1\";",
                "String v2 = \"1.0-A1\";"
            ],
            [
                "String v1 = \"1.1.0\";",
                "String v2 = \"1.1.0\";"
            ],
            [
                "String v1 = \"1.1.0-A1\";",
                "String v2 = \"1.1.0-A1\";"
            ],
            [
                "String v1 = \"1.0.0-A1\";",
                "String v2 = \"1.0.0-A1\";"
            ],
            [
                "String v1 = \"1.0.0.A1\";",
                "String v2 = \"1.0.0.A1\";"
            ]
        ],
        "selected": {
            "org.datagear.util.version.VersionTest_isEqualTest_h1Test0": [
                "String v1 = \"1.0-A1\";",
                "String v2 = \"1.0-A1\";"
            ],
            "org.datagear.util.version.VersionTest_isEqualTest_h1Test1": [
                "String v1 = \"1.1.0\";",
                "String v2 = \"1.1.0\";"
            ],
            "org.datagear.util.version.VersionTest_isEqualTest_h1Test2": [
                "String v1 = \"1.1.0-A1\";",
                "String v2 = \"1.1.0-A1\";"
            ],
            "org.datagear.util.version.VersionTest_isEqualTest_h1Test3": [
                "String v1 = \"1.0.0-A1\";",
                "String v2 = \"1.0.0-A1\";"
            ],
            "org.datagear.util.version.VersionTest_isEqualTest_h1Test4": [
                "String v1 = \"1.0.0.A1\";",
                "String v2 = \"1.0.0.A1\";"
            ]
        },
        "processed_generated": {
            "org.datagear.util.version.VersionTest_isEqualTest_h1Test0": [
                "String v1 = \"1.0-A1\";",
                "String v2 = \"1.0-A1\";"
            ],
            "org.datagear.util.version.VersionTest_isEqualTest_h1Test1": [
                "String v1 = \"1.1.0\";",
                "String v2 = \"1.1.0\";"
            ],
            "org.datagear.util.version.VersionTest_isEqualTest_h1Test2": [
                "String v1 = \"1.1.0-A1\";",
                "String v2 = \"1.1.0-A1\";"
            ],
            "org.datagear.util.version.VersionTest_isEqualTest_h1Test3": [
                "String v1 = \"1.0.0-A1\";",
                "String v2 = \"1.0.0-A1\";"
            ],
            "org.datagear.util.version.VersionTest_isEqualTest_h1Test4": [
                "String v1 = \"1.0.0.A1\";",
                "String v2 = \"1.0.0.A1\";"
            ]
        },
        "original_h": [
            "String v1 = \"1.0\";",
            "String v2 = \"1.10\";"
        ]
    },
    "org.mitre.synthea.engine.ExpressedSymptomTest.testExpressedSymtpom()": {
        "generated_inputs_class": [
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h1Test0",
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h1Test1",
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h1Test2",
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h1Test3",
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "String name = \"pain\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"\";",
                "symptom2.addressSource(module2);"
            ],
            [
                "String name = \"pain\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = null;",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = null;",
                "symptom2.addressSource(module2);"
            ],
            [
                "String name = \"pain\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"testModule1234567890\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"testModule1234567890\";",
                "symptom2.addressSource(module2);"
            ],
            [
                "String name = \"pain\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"testModule!@#$%\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"testModule!@#$%\";",
                "symptom2.addressSource(module2);"
            ],
            [
                "String name = \"pain\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"testModule\";",
                "symptom.addressSource(module);",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"testModule\";",
                "symptom2.addressSource(module2);"
            ]
        ],
        "selected": {
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h1Test0": [
                "String name = \"pain\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"\";",
                "symptom2.addressSource(module2);"
            ],
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h1Test1": [
                "String name = \"pain\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = null;",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = null;",
                "symptom2.addressSource(module2);"
            ],
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h1Test2": [
                "String name = \"pain\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"testModule1234567890\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"testModule1234567890\";",
                "symptom2.addressSource(module2);"
            ],
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h1Test3": [
                "String name = \"pain\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"testModule!@#$%\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"testModule!@#$%\";",
                "symptom2.addressSource(module2);"
            ],
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h1Test4": [
                "String name = \"pain\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"testModule\";",
                "symptom.addressSource(module);",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"testModule\";",
                "symptom2.addressSource(module2);"
            ]
        },
        "processed_generated": {
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h1Test0": [
                "String name = \"pain\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"\";",
                "symptom2.addressSource(module2);"
            ],
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h1Test1": [
                "String name = \"pain\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = null;",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = null;",
                "symptom2.addressSource(module2);"
            ],
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h1Test2": [
                "String name = \"pain\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"testModule1234567890\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"testModule1234567890\";",
                "symptom2.addressSource(module2);"
            ],
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h1Test3": [
                "String name = \"pain\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"testModule!@#$%\";",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"testModule!@#$%\";",
                "symptom2.addressSource(module2);"
            ],
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h1Test4": [
                "String name = \"pain\";",
                "ExpressedSymptom symptom = new ExpressedSymptom(name);",
                "String module = \"testModule\";",
                "symptom.addressSource(module);",
                "symptom.addressSource(module);",
                "ExpressedSymptom symptom2 = symptom;",
                "String module2 = \"testModule\";",
                "symptom2.addressSource(module2);"
            ]
        },
        "original_h": [
            "String name = \"pain\";",
            "ExpressedSymptom symptom = new ExpressedSymptom(name);",
            "String module = \"testModule\";",
            "symptom.addressSource(module);",
            "ExpressedSymptom symptom2 = symptom;",
            "String module2 = \"testModule\";",
            "symptom2.addressSource(module2);"
        ]
    },
    "org.apache.paimon.spark.ConvertBinaryUtilTest.testConvertToLong()": {
        "generated_inputs_class": [
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h1Test0",
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h1Test1",
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h1Test2",
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h1Test3",
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "String randomString = \"0\";",
                "byte[] randomStringBytes = { 48 };"
            ],
            [
                "String randomString = \"9223372036854775807\";",
                "byte[] randomStringBytes = { 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };"
            ],
            [
                "String randomString = \"-1\";",
                "byte[] randomStringBytes = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };"
            ],
            [
                "String randomString = \"1\";",
                "byte[] randomStringBytes = { 49 };"
            ],
            [
                "String randomString = \"1234567890123456789\";",
                "byte[] randomStringBytes = { 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 };"
            ]
        ],
        "selected": {
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h1Test0": [
                "String randomString = \"0\";",
                "byte[] randomStringBytes = { 48 };"
            ],
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h1Test1": [
                "String randomString = \"9223372036854775807\";",
                "byte[] randomStringBytes = { 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };"
            ],
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h1Test2": [
                "String randomString = \"-1\";",
                "byte[] randomStringBytes = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };"
            ],
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h1Test3": [
                "String randomString = \"1\";",
                "byte[] randomStringBytes = { 49 };"
            ],
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h1Test4": [
                "String randomString = \"1234567890123456789\";",
                "byte[] randomStringBytes = { 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 };"
            ]
        },
        "processed_generated": {
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h1Test0": [
                "String randomString = \"0\";",
                "byte[] randomStringBytes = { 48 };"
            ],
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h1Test1": [
                "String randomString = \"9223372036854775807\";",
                "byte[] randomStringBytes = { 0x7f, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };"
            ],
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h1Test2": [
                "String randomString = \"-1\";",
                "byte[] randomStringBytes = { 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff };"
            ],
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h1Test3": [
                "String randomString = \"1\";",
                "byte[] randomStringBytes = { 49 };"
            ],
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h1Test4": [
                "String randomString = \"1234567890123456789\";",
                "byte[] randomStringBytes = { 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57 };"
            ]
        },
        "original_h": [
            "String randomString = \"randomString\";",
            "byte[] randomStringBytes = { 114, 97, 110, 100, 111, 109, 83, 116, 114, 105, 110, 103 };"
        ]
    },
    "org.apache.sysds.test.component.compress.util.ArrayListTest.extract()": {
        "generated_inputs_class": [
            "org.apache.sysds.test.component.compress.util.ArrayListTest_extract_h1Test0",
            "org.apache.sysds.test.component.compress.util.ArrayListTest_extract_h1Test1"
        ],
        "generated_all_blocks": [
            [
                "IntArrayList a = new IntArrayList();",
                "a.appendValue(0);",
                "a.appendValue(1);",
                "a.appendValue(0);",
                "boolean trimFlag = true;",
                "boolean trimFlag2 = true;",
                "int[] ex = a.extractValues(trimFlag);",
                "int[] et = a.extractValues(trimFlag2);",
                "assertTrue(ex.length >= et.length);"
            ],
            [
                "IntArrayList a = new IntArrayList();",
                "a.appendValue(0);",
                "a.appendValue(1);",
                "a.appendValue(0);",
                "boolean trimFlag = false;",
                "boolean trimFlag2 = false;",
                "int[] ex = a.extractValues(trimFlag);",
                "int[] et = a.extractValues(trimFlag2);",
                "assertTrue(ex.length >= et.length);"
            ]
        ],
        "selected": {
            "org.apache.sysds.test.component.compress.util.ArrayListTest_extract_h1Test0": [
                "IntArrayList a = new IntArrayList();",
                "a.appendValue(0);",
                "a.appendValue(1);",
                "a.appendValue(0);",
                "boolean trimFlag = true;",
                "boolean trimFlag2 = true;",
                "int[] ex = a.extractValues(trimFlag);",
                "int[] et = a.extractValues(trimFlag2);",
                "assertTrue(ex.length >= et.length);"
            ],
            "org.apache.sysds.test.component.compress.util.ArrayListTest_extract_h1Test1": [
                "IntArrayList a = new IntArrayList();",
                "a.appendValue(0);",
                "a.appendValue(1);",
                "a.appendValue(0);",
                "boolean trimFlag = false;",
                "boolean trimFlag2 = false;",
                "int[] ex = a.extractValues(trimFlag);",
                "int[] et = a.extractValues(trimFlag2);",
                "assertTrue(ex.length >= et.length);"
            ]
        },
        "processed_generated": {
            "org.apache.sysds.test.component.compress.util.ArrayListTest_extract_h1Test0": [
                "IntArrayList a = new IntArrayList();",
                "boolean trimFlag = true;",
                "boolean trimFlag2 = true;"
            ],
            "org.apache.sysds.test.component.compress.util.ArrayListTest_extract_h1Test1": [
                "IntArrayList a = new IntArrayList();",
                "boolean trimFlag = false;",
                "boolean trimFlag2 = false;"
            ]
        },
        "original_h": [
            "IntArrayList a = new IntArrayList();",
            "boolean trimFlag = false;",
            "boolean trimFlag2 = true;"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test4()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h1Test0",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h1Test1",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h1Test2",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h1Test3",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h1Test4",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h1Test5"
        ],
        "generated_all_blocks": [
            [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", 1F);",
                "v01.put(\"102\", 2F);",
                "v01.put(\"103\", 3F);"
            ],
            [
                "String str2 = JSON.toJSONString(v01);",
                "Map<String, Float> mapType = JSON.parseObject(str2, new TypeReference<Map<String, Float>>() {",
                "}.getType());"
            ],
            [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", 1F);",
                "v01.put(\"102\", 2F);",
                "v01.put(\"\", 0F);"
            ],
            [
                "String str2 = JSON.toJSONString(v01);",
                "Map<String, Float> mapType = JSON.parseObject(str2, new TypeReference<Map<String, Float>>() {",
                "}.getType());"
            ],
            [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", 1F);",
                "v01.put(\"102\", 2F);",
                "v01.put(\"101\", 3F);"
            ],
            [
                "String str2 = JSON.toJSONString(v01);",
                "Map<String, Float> mapType = JSON.parseObject(str2, new TypeReference<Map<String, Float>>() {",
                "}.getType());"
            ],
            [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", 1F);",
                "v01.put(\"102\", 2F);",
                "v01.put(null, 0F);"
            ],
            [
                "String str2 = JSON.toJSONString(v01);",
                "Map<String, Float> mapType = JSON.parseObject(str2, new TypeReference<Map<String, Float>>() {",
                "}.getType());"
            ],
            [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", 1F);",
                "v01.put(\"102\", 2F);",
                "v01.put(\"101\", null);"
            ],
            [
                "String str2 = JSON.toJSONString(v01);",
                "Map<String, Float> mapType = JSON.parseObject(str2, new TypeReference<Map<String, Float>>() {",
                "}.getType());"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h1Test0": [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", 1F);",
                "v01.put(\"102\", 2F);",
                "v01.put(\"103\", 3F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h1Test1": [
                "String str2 = JSON.toJSONString(v01);",
                "Map<String, Float> mapType = JSON.parseObject(str2, new TypeReference<Map<String, Float>>() {",
                "}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h1Test2": [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", 1F);",
                "v01.put(\"102\", 2F);",
                "v01.put(\"\", 0F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h1Test3": [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", 1F);",
                "v01.put(\"102\", 2F);",
                "v01.put(\"101\", 3F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h1Test4": [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", 1F);",
                "v01.put(\"102\", 2F);",
                "v01.put(null, 0F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h1Test5": [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", 1F);",
                "v01.put(\"102\", 2F);",
                "v01.put(\"101\", null);"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h1Test0": [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", 1F);",
                "v01.put(\"102\", 2F);",
                "v01.put(\"103\", 3F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h1Test1": [
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h1Test2": [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", 1F);",
                "v01.put(\"102\", 2F);",
                "v01.put(\"\", 0F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h1Test3": [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", 1F);",
                "v01.put(\"102\", 2F);",
                "v01.put(\"101\", 3F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h1Test4": [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", 1F);",
                "v01.put(\"102\", 2F);",
                "v01.put(null, 0F);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h1Test5": [
                "Map<String, Float> v01 = new HashMap<>();",
                "v01.put(\"101\", 1F);",
                "v01.put(\"102\", 2F);",
                "v01.put(\"101\", null);"
            ]
        },
        "original_h": [
            "Map<String, Float> v01 = new HashMap<>();",
            "v01.put(\"101\", 1F);",
            "v01.put(\"102\", 2F);"
        ]
    },
    "org.ethereum.rpc.FilterTest.testGetEventsInternal()": {
        "generated_inputs_class": [
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h1Test0",
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h1Test1",
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h1Test2",
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h1Test3"
        ],
        "generated_all_blocks": [
            [
                "Filter filter = new Filter();",
                "filter.add(mockEvent1);",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent1);"
            ],
            [
                "Filter filter = new Filter();",
                "filter.add(mockEvent1);",
                "filter.add(mockEvent2);",
                "filter.add(mockEvent3);",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent1);",
                "filter2.add(mockEvent2);",
                "filter2.add(mockEvent3);"
            ],
            [
                "Filter filter = new Filter();",
                "Filter filter2 = new Filter();"
            ],
            [
                "Filter filter = new Filter();",
                "filter.add(mockEvent1);",
                "filter.add(mockEvent2);",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent1);",
                "filter2.add(mockEvent2);"
            ]
        ],
        "selected": {
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h1Test0": [
                "Filter filter = new Filter();",
                "filter.add(mockEvent1);",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent1);"
            ],
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h1Test1": [
                "Filter filter = new Filter();",
                "filter.add(mockEvent1);",
                "filter.add(mockEvent2);",
                "filter.add(mockEvent3);",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent1);",
                "filter2.add(mockEvent2);",
                "filter2.add(mockEvent3);"
            ],
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h1Test2": [
                "Filter filter = new Filter();",
                "Filter filter2 = new Filter();"
            ],
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h1Test3": [
                "Filter filter = new Filter();",
                "filter.add(mockEvent1);",
                "filter.add(mockEvent2);",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent1);",
                "filter2.add(mockEvent2);"
            ]
        },
        "processed_generated": {
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h1Test0": [
                "Filter filter = new Filter();",
                "filter.add(mockEvent1);",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent1);"
            ],
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h1Test1": [
                "Filter filter = new Filter();",
                "filter.add(mockEvent1);",
                "filter.add(mockEvent2);",
                "filter.add(mockEvent3);",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent1);",
                "filter2.add(mockEvent2);",
                "filter2.add(mockEvent3);"
            ],
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h1Test2": [
                "Filter filter = new Filter();",
                "Filter filter2 = new Filter();"
            ],
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h1Test3": [
                "Filter filter = new Filter();",
                "filter.add(mockEvent1);",
                "filter.add(mockEvent2);",
                "Filter filter2 = new Filter();",
                "filter2.add(mockEvent1);",
                "filter2.add(mockEvent2);"
            ]
        },
        "original_h": [
            "Filter filter = new Filter();",
            "filter.add(mockEvent1);",
            "filter.add(mockEvent2);",
            "Filter filter2 = new Filter();",
            "filter2.add(mockEvent1);",
            "filter2.add(mockEvent2);"
        ]
    },
    "org.myrobotlab.service.I2cMuxTest.testSetDeviceBus()": {
        "generated_inputs_class": [
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h1Test0",
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h1Test1",
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h1Test2",
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h1Test3",
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"0\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceBus(deviceBus);",
                "assertEquals(deviceBus, i2cMux2.getDeviceBus());"
            ],
            [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"7\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceBus(deviceBus);",
                "assertEquals(deviceBus, i2cMux2.getDeviceBus());"
            ],
            [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"8\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceBus(deviceBus);",
                "assertEquals(deviceBus, i2cMux2.getDeviceBus());"
            ],
            [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"-1\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceBus(deviceBus);",
                "assertEquals(deviceBus, i2cMux2.getDeviceBus());"
            ],
            [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"abc\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceBus(deviceBus);",
                "assertEquals(deviceBus, i2cMux2.getDeviceBus());"
            ]
        ],
        "selected": {
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h1Test0": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"0\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceBus(deviceBus);",
                "assertEquals(deviceBus, i2cMux2.getDeviceBus());"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h1Test1": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"7\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceBus(deviceBus);",
                "assertEquals(deviceBus, i2cMux2.getDeviceBus());"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h1Test2": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"8\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceBus(deviceBus);",
                "assertEquals(deviceBus, i2cMux2.getDeviceBus());"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h1Test3": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"-1\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceBus(deviceBus);",
                "assertEquals(deviceBus, i2cMux2.getDeviceBus());"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h1Test4": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"abc\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceBus(deviceBus);",
                "assertEquals(deviceBus, i2cMux2.getDeviceBus());"
            ]
        },
        "processed_generated": {
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h1Test0": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"0\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceBus(deviceBus);"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h1Test1": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"7\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceBus(deviceBus);"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h1Test2": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"8\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceBus(deviceBus);"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h1Test3": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"-1\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceBus(deviceBus);"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h1Test4": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceBus = \"abc\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceBus(deviceBus);"
            ]
        },
        "original_h": [
            "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
            "String deviceBus = \"1\";",
            "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
        ]
    },
    "org.threeten.extra.TestYearHalf.test_lengthOfYear()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test0",
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test1",
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test2",
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test3",
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test4",
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test5",
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test6",
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test7",
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test8",
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test9",
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test10",
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test11",
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test12",
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test13",
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test14"
        ],
        "generated_all_blocks": [
            [
                "int year = 2020;",
                "Half half = Half.H2;"
            ],
            [
                "YearHalf test2 = YearHalf.of(2020, 2);"
            ],
            [
                "int year = 2020;",
                "Half half = Half.H2;",
                "YearHalf test2 = YearHalf.of(year, half);"
            ],
            [
                "int year = 1900;",
                "Half half = Half.H1;"
            ],
            [
                "YearHalf test2 = YearHalf.of(1900, 1);"
            ],
            [
                "int year = 1900;",
                "Half half = Half.H1;",
                "YearHalf test2 = YearHalf.of(year, half);"
            ],
            [
                "int year = 2000;",
                "Half half = Half.H2;"
            ],
            [
                "YearHalf test2 = YearHalf.of(2000, 2);"
            ],
            [
                "int year = 2000;",
                "Half half = Half.H2;",
                "YearHalf test2 = YearHalf.of(year, half);"
            ],
            [
                "int year = 1600;",
                "Half half = Half.H1;"
            ],
            [
                "YearHalf test2 = YearHalf.of(1600, 1);"
            ],
            [
                "int year = 1600;",
                "Half half = Half.H1;",
                "YearHalf test2 = YearHalf.of(year, half);"
            ],
            [
                "int year = 0;",
                "Half half = Half.H2;"
            ],
            [
                "YearHalf test2 = YearHalf.of(0, 2);"
            ],
            [
                "int year = 0;",
                "Half half = Half.H2;",
                "YearHalf test2 = YearHalf.of(year, half);"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test0": [
                "int year = 2020;",
                "Half half = Half.H2;"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test1": [
                "YearHalf test2 = YearHalf.of(2020, 2);"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test2": [
                "int year = 2020;",
                "Half half = Half.H2;",
                "YearHalf test2 = YearHalf.of(year, half);"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test3": [
                "int year = 1900;",
                "Half half = Half.H1;"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test4": [
                "YearHalf test2 = YearHalf.of(1900, 1);"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test5": [
                "int year = 1900;",
                "Half half = Half.H1;",
                "YearHalf test2 = YearHalf.of(year, half);"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test6": [
                "int year = 2000;",
                "Half half = Half.H2;"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test7": [
                "YearHalf test2 = YearHalf.of(2000, 2);"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test8": [
                "int year = 2000;",
                "Half half = Half.H2;",
                "YearHalf test2 = YearHalf.of(year, half);"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test9": [
                "int year = 1600;",
                "Half half = Half.H1;"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test10": [
                "YearHalf test2 = YearHalf.of(1600, 1);"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test11": [
                "int year = 1600;",
                "Half half = Half.H1;",
                "YearHalf test2 = YearHalf.of(year, half);"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test12": [
                "int year = 0;",
                "Half half = Half.H2;"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test13": [
                "YearHalf test2 = YearHalf.of(0, 2);"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test14": [
                "int year = 0;",
                "Half half = Half.H2;",
                "YearHalf test2 = YearHalf.of(year, half);"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test0": [
                "int year = 2020;",
                "Half half = Half.H2;"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test1": [
                "YearHalf test2 = YearHalf.of(2020, 2);"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test2": [
                "int year = 2020;",
                "Half half = Half.H2;",
                "YearHalf test2 = YearHalf.of(year, half);"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test3": [
                "int year = 1900;",
                "Half half = Half.H1;"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test4": [
                "YearHalf test2 = YearHalf.of(1900, 1);"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test5": [
                "int year = 1900;",
                "Half half = Half.H1;",
                "YearHalf test2 = YearHalf.of(year, half);"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test6": [
                "int year = 2000;",
                "Half half = Half.H2;"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test7": [
                "YearHalf test2 = YearHalf.of(2000, 2);"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test8": [
                "int year = 2000;",
                "Half half = Half.H2;",
                "YearHalf test2 = YearHalf.of(year, half);"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test9": [
                "int year = 1600;",
                "Half half = Half.H1;"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test10": [
                "YearHalf test2 = YearHalf.of(1600, 1);"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test11": [
                "int year = 1600;",
                "Half half = Half.H1;",
                "YearHalf test2 = YearHalf.of(year, half);"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test12": [
                "int year = 0;",
                "Half half = Half.H2;"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test13": [
                "YearHalf test2 = YearHalf.of(0, 2);"
            ],
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h1Test14": [
                "int year = 0;",
                "Half half = Half.H2;",
                "YearHalf test2 = YearHalf.of(year, half);"
            ]
        },
        "original_h": [
            "int year = 500;",
            "Half half = Half.H1;"
        ]
    },
    "org.apache.druid.query.filter.IsBooleanDimFilterTest.testGetCacheKey()": {
        "generated_inputs_class": [
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h1Test0",
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h1Test1",
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h1Test2",
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h1Test3",
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "EqualityFilter f3 = new EqualityFilter(\"y\", ColumnType.STRING, \"hello\", null);",
                "EqualityFilter f4 = new EqualityFilter(\"y\", ColumnType.STRING, \"hello\", null);"
            ],
            [
                "EqualityFilter f3 = new EqualityFilter(\"y\", ColumnType.STRING, \"hello\", null);",
                "EqualityFilter f4 = new EqualityFilter(\"y\", ColumnType.STRING, \"hello\", null);"
            ],
            [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.INTEGER, \"hello\", null);",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.INTEGER, \"hello\", null);"
            ],
            [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.INTEGER, \"hello\", null);",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.INTEGER, \"hello\", null);"
            ],
            [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"world\", null);",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"world\", null);"
            ],
            [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"world\", null);",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"world\", null);"
            ],
            [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"world\");",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"world\");"
            ],
            [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"world\");",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"world\");"
            ],
            [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"null\");",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"null\");"
            ],
            [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"null\");",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"null\");"
            ]
        ],
        "selected": {
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h1Test0": [
                "EqualityFilter f3 = new EqualityFilter(\"y\", ColumnType.STRING, \"hello\", null);",
                "EqualityFilter f4 = new EqualityFilter(\"y\", ColumnType.STRING, \"hello\", null);"
            ],
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h1Test1": [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.INTEGER, \"hello\", null);",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.INTEGER, \"hello\", null);"
            ],
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h1Test2": [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"world\", null);",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"world\", null);"
            ],
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h1Test3": [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"world\");",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"world\");"
            ],
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h1Test4": [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"null\");",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"null\");"
            ]
        },
        "processed_generated": {
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h1Test0": [
                "EqualityFilter f3 = new EqualityFilter(\"y\", ColumnType.STRING, \"hello\", null);",
                "EqualityFilter f4 = new EqualityFilter(\"y\", ColumnType.STRING, \"hello\", null);"
            ],
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h1Test1": [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.INTEGER, \"hello\", null);",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.INTEGER, \"hello\", null);"
            ],
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h1Test2": [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"world\", null);",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"world\", null);"
            ],
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h1Test3": [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"world\");",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"world\");"
            ],
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h1Test4": [
                "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"null\");",
                "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", \"null\");"
            ]
        },
        "original_h": [
            "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", null);",
            "EqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"hello\", null);"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test5()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h1Test0",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h1Test1",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h1Test2",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h1Test3",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h1Test4",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h1Test5"
        ],
        "generated_all_blocks": [
            [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"101\", 1.5);",
                "v01.put(\"102\", 2.5);"
            ],
            [
                "String str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);",
                "Map<String, Double> mapType = JSON.parseObject(str2, new TypeReference<Map<String, Double>>() {",
                "}.getType());"
            ],
            [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"101\", 0.0);",
                "v01.put(\"102\", 0.0);"
            ],
            [
                "String str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);",
                "Map<String, Double> mapType = JSON.parseObject(str2, new TypeReference<Map<String, Double>>() {",
                "}.getType());"
            ],
            [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"101\", -1.5);",
                "v01.put(\"102\", -2.5);"
            ],
            [
                "String str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);",
                "Map<String, Double> mapType = JSON.parseObject(str2, new TypeReference<Map<String, Double>>() {",
                "}.getType());"
            ],
            [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"101\", Double.MAX_VALUE);",
                "v01.put(\"102\", Double.MIN_VALUE);"
            ],
            [
                "String str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);",
                "Map<String, Double> mapType = JSON.parseObject(str2, new TypeReference<Map<String, Double>>() {",
                "}.getType());"
            ],
            [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"101\", Double.NaN);",
                "v01.put(\"102\", Double.NaN);"
            ],
            [
                "String str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);",
                "Map<String, Double> mapType = JSON.parseObject(str2, new TypeReference<Map<String, Double>>() {",
                "}.getType());"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h1Test0": [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"101\", 1.5);",
                "v01.put(\"102\", 2.5);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h1Test1": [
                "String str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);",
                "Map<String, Double> mapType = JSON.parseObject(str2, new TypeReference<Map<String, Double>>() {",
                "}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h1Test2": [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"101\", 0.0);",
                "v01.put(\"102\", 0.0);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h1Test3": [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"101\", -1.5);",
                "v01.put(\"102\", -2.5);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h1Test4": [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"101\", Double.MAX_VALUE);",
                "v01.put(\"102\", Double.MIN_VALUE);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h1Test5": [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"101\", Double.NaN);",
                "v01.put(\"102\", Double.NaN);"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h1Test0": [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"101\", 1.5);",
                "v01.put(\"102\", 2.5);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h1Test1": [
                "String str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h1Test2": [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"101\", 0.0);",
                "v01.put(\"102\", 0.0);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h1Test3": [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"101\", -1.5);",
                "v01.put(\"102\", -2.5);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h1Test4": [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"101\", Double.MAX_VALUE);",
                "v01.put(\"102\", Double.MIN_VALUE);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h1Test5": [
                "Map<String, Double> v01 = new HashMap<>();",
                "v01.put(\"101\", Double.NaN);",
                "v01.put(\"102\", Double.NaN);"
            ]
        },
        "original_h": [
            "Map<String, Double> v01 = new HashMap<>();",
            "v01.put(\"101\", 1D);",
            "v01.put(\"102\", 2D);"
        ]
    },
    "com.zfoo.net.util.NetUtilsTest.ipv4Test()": {
        "generated_inputs_class": [
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h1Test0",
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h1Test1",
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h1Test2",
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h1Test3",
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h1Test4",
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h1Test5"
        ],
        "generated_all_blocks": [
            [
                "String ipStr1 = \"192.168.1.1\";",
                "long ipLong2 = 3232235777L;"
            ],
            [
                "long ipLong2 = ipv4ToLong(ipStr1);"
            ],
            [
                "String ipStr1 = \"10.0.0.1\";",
                "long ipLong2 = 167772161L;"
            ],
            [
                "long ipLong2 = ipv4ToLong(ipStr1);"
            ],
            [
                "String ipStr1 = \"172.16.0.1\";",
                "long ipLong2 = 2886723584L;"
            ],
            [
                "long ipLong2 = ipv4ToLong(ipStr1);"
            ],
            [
                "String ipStr1 = \"8.8.8.8\";",
                "long ipLong2 = 134744072L;"
            ],
            [
                "long ipLong2 = ipv4ToLong(ipStr1);"
            ],
            [
                "String ipStr1 = \"255.255.255.255\";",
                "long ipLong2 = 4294967295L;"
            ],
            [
                "long ipLong2 = ipv4ToLong(ipStr1);"
            ]
        ],
        "selected": {
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h1Test0": [
                "String ipStr1 = \"192.168.1.1\";",
                "long ipLong2 = 3232235777L;"
            ],
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h1Test1": [
                "long ipLong2 = ipv4ToLong(ipStr1);"
            ],
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h1Test2": [
                "String ipStr1 = \"10.0.0.1\";",
                "long ipLong2 = 167772161L;"
            ],
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h1Test3": [
                "String ipStr1 = \"172.16.0.1\";",
                "long ipLong2 = 2886723584L;"
            ],
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h1Test4": [
                "String ipStr1 = \"8.8.8.8\";",
                "long ipLong2 = 134744072L;"
            ],
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h1Test5": [
                "String ipStr1 = \"255.255.255.255\";",
                "long ipLong2 = 4294967295L;"
            ]
        },
        "processed_generated": {
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h1Test0": [
                "String ipStr1 = \"192.168.1.1\";",
                "long ipLong2 = 3232235777L;"
            ],
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h1Test1": [
                "long ipLong2 = ipv4ToLong(ipStr1);"
            ],
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h1Test2": [
                "String ipStr1 = \"10.0.0.1\";",
                "long ipLong2 = 167772161L;"
            ],
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h1Test3": [
                "String ipStr1 = \"172.16.0.1\";",
                "long ipLong2 = 2886723584L;"
            ],
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h1Test4": [
                "String ipStr1 = \"8.8.8.8\";",
                "long ipLong2 = 134744072L;"
            ],
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h1Test5": [
                "String ipStr1 = \"255.255.255.255\";",
                "long ipLong2 = 4294967295L;"
            ]
        },
        "original_h": [
            "String ipStr1 = NetUtils.LOCAL_LOOPBACK_IP;",
            "long ipLong2 = 127000000001L;"
        ]
    },
    "org.myrobotlab.service.I2cMuxTest.testSetDeviceAddress()": {
        "generated_inputs_class": [
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h1Test0",
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h1Test1",
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h1Test2",
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h1Test3",
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceAddress = \"0x7F\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceAddress(deviceAddress);",
                "assertEquals(deviceAddress, i2cMux2.getDeviceAddress());"
            ],
            [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceAddress = \"0x00\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceAddress(deviceAddress);",
                "assertEquals(deviceAddress, i2cMux2.getDeviceAddress());"
            ],
            [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceAddress = \"0xFF\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceAddress(deviceAddress);",
                "assertEquals(deviceAddress, i2cMux2.getDeviceAddress());"
            ],
            [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceAddress = \"0x6F\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceAddress(deviceAddress);",
                "assertEquals(deviceAddress, i2cMux2.getDeviceAddress());"
            ],
            [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceAddress = \"0x78\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceAddress(deviceAddress);",
                "assertEquals(deviceAddress, i2cMux2.getDeviceAddress());"
            ]
        ],
        "selected": {
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h1Test0": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceAddress = \"0x7F\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceAddress(deviceAddress);",
                "assertEquals(deviceAddress, i2cMux2.getDeviceAddress());"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h1Test1": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceAddress = \"0x00\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceAddress(deviceAddress);",
                "assertEquals(deviceAddress, i2cMux2.getDeviceAddress());"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h1Test2": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceAddress = \"0xFF\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceAddress(deviceAddress);",
                "assertEquals(deviceAddress, i2cMux2.getDeviceAddress());"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h1Test3": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceAddress = \"0x6F\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceAddress(deviceAddress);",
                "assertEquals(deviceAddress, i2cMux2.getDeviceAddress());"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h1Test4": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceAddress = \"0x78\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceAddress(deviceAddress);",
                "assertEquals(deviceAddress, i2cMux2.getDeviceAddress());"
            ]
        },
        "processed_generated": {
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h1Test0": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceAddress = \"0x7F\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceAddress(deviceAddress);"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h1Test1": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceAddress = \"0x00\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceAddress(deviceAddress);"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h1Test2": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceAddress = \"0xFF\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceAddress(deviceAddress);"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h1Test3": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceAddress = \"0x6F\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceAddress(deviceAddress);"
            ],
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h1Test4": [
                "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "String deviceAddress = \"0x78\";",
                "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
                "i2cMux.setDeviceAddress(deviceAddress);"
            ]
        },
        "original_h": [
            "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");",
            "String deviceAddress = \"0x70\";",
            "I2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");"
        ]
    },
    "com.alibaba.druid.bvt.sql.hive.issues.Issue5430.test_createTable()": {
        "generated_inputs_class": [
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h1Test0"
        ],
        "generated_all_blocks": [
            [
                "String sql = \"CREATE TABLE my_table(a string, b bigint)\\n\" + \"ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe'\\n\" + \"STORED AS TEXTFILE\";",
                "String newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";"
            ]
        ],
        "selected": {
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h1Test0": [
                "String sql = \"CREATE TABLE my_table(a string, b bigint)\\n\" + \"ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe'\\n\" + \"STORED AS TEXTFILE\";",
                "String newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";"
            ]
        },
        "processed_generated": {
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h1Test0": [
                "String sql = \"CREATE TABLE my_table(a string, b bigint)\\n\" + \"ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe'\\n\" + \"STORED AS TEXTFILE\";",
                "String newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";"
            ]
        },
        "original_h": [
            "String sql = \"CREATE TABLE my_table(a string, b bigint)\\n\" + \"ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe'\\n\" + \"STORED AS TEXTFILE\";",
            "String newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";"
        ]
    },
    "com.cedarsoftware.util.convert.ConverterTest.testSqlDateToString()": {
        "generated_inputs_class": [
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h1Test0",
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h1Test1",
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h1Test2",
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h1Test3",
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "Class<?> clazz1 = LocalDate.class;",
                "long now = System.currentTimeMillis();",
                "Date date = new Date(now - 1000 * 60 * 60 * 24 * 365); // 1 year ago",
                "String strDate = this.converter.convert(date, String.class);",
                "Class<?> clazz2 = LocalDate.class;",
                "Date x = this.converter.convert(strDate, Date.class);"
            ],
            [
                "Class<?> clazz1 = LocalDate.class;",
                "long now = System.currentTimeMillis();",
                "Date date = new Date(now + 1000 * 60 * 60 * 24 * 365); // 1 year from now",
                "String strDate = this.converter.convert(date, String.class);",
                "Class<?> clazz2 = LocalDate.class;",
                "Date x = this.converter.convert(strDate, Date.class);"
            ],
            [
                "Class<?> clazz1 = LocalDate.class;",
                "long now = System.currentTimeMillis();",
                "Date date = new Date(now - 1000 * 60 * 60 * 24 * 30); // 30 days ago",
                "String strDate = this.converter.convert(date, String.class);",
                "Class<?> clazz2 = LocalDate.class;",
                "Date x = this.converter.convert(strDate, Date.class);"
            ],
            [
                "Class<?> clazz1 = LocalDate.class;",
                "long now = System.currentTimeMillis();",
                "Date date = new Date(now + 1000 * 60 * 60 * 24 * 30); // 30 days from now",
                "String strDate = this.converter.convert(date, String.class);",
                "Class<?> clazz2 = LocalDate.class;",
                "Date x = this.converter.convert(strDate, Date.class);"
            ],
            [
                "Class<?> clazz1 = LocalDate.class;",
                "long now = System.currentTimeMillis();",
                "Date date = new Date(now - 1000 * 60 * 60 * 24 * 365 * 100); // 100 years ago",
                "String strDate = this.converter.convert(date, String.class);",
                "Class<?> clazz2 = LocalDate.class;",
                "Date x = this.converter.convert(strDate, Date.class);"
            ]
        ],
        "selected": {
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h1Test0": [
                "Class<?> clazz1 = LocalDate.class;",
                "long now = System.currentTimeMillis();",
                "Date date = new Date(now - 1000 * 60 * 60 * 24 * 365); // 1 year ago",
                "String strDate = this.converter.convert(date, String.class);",
                "Class<?> clazz2 = LocalDate.class;",
                "Date x = this.converter.convert(strDate, Date.class);"
            ],
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h1Test1": [
                "Class<?> clazz1 = LocalDate.class;",
                "long now = System.currentTimeMillis();",
                "Date date = new Date(now + 1000 * 60 * 60 * 24 * 365); // 1 year from now",
                "String strDate = this.converter.convert(date, String.class);",
                "Class<?> clazz2 = LocalDate.class;",
                "Date x = this.converter.convert(strDate, Date.class);"
            ],
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h1Test2": [
                "Class<?> clazz1 = LocalDate.class;",
                "long now = System.currentTimeMillis();",
                "Date date = new Date(now - 1000 * 60 * 60 * 24 * 30); // 30 days ago",
                "String strDate = this.converter.convert(date, String.class);",
                "Class<?> clazz2 = LocalDate.class;",
                "Date x = this.converter.convert(strDate, Date.class);"
            ],
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h1Test3": [
                "Class<?> clazz1 = LocalDate.class;",
                "long now = System.currentTimeMillis();",
                "Date date = new Date(now + 1000 * 60 * 60 * 24 * 30); // 30 days from now",
                "String strDate = this.converter.convert(date, String.class);",
                "Class<?> clazz2 = LocalDate.class;",
                "Date x = this.converter.convert(strDate, Date.class);"
            ],
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h1Test4": [
                "Class<?> clazz1 = LocalDate.class;",
                "long now = System.currentTimeMillis();",
                "Date date = new Date(now - 1000 * 60 * 60 * 24 * 365 * 100); // 100 years ago",
                "String strDate = this.converter.convert(date, String.class);",
                "Class<?> clazz2 = LocalDate.class;",
                "Date x = this.converter.convert(strDate, Date.class);"
            ]
        },
        "processed_generated": {
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h1Test0": [
                "Class<?> clazz1 = LocalDate.class;",
                "long now = System.currentTimeMillis();",
                "Date date = new Date(now - 1000 * 60 * 60 * 24 * 365); // 1 year ago",
                "String strDate = this.converter.convert(date, String.class);",
                "Class<?> clazz2 = LocalDate.class;",
                "Date x = this.converter.convert(strDate, Date.class);"
            ],
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h1Test1": [
                "Class<?> clazz1 = LocalDate.class;",
                "long now = System.currentTimeMillis();",
                "Date date = new Date(now + 1000 * 60 * 60 * 24 * 365); // 1 year from now",
                "String strDate = this.converter.convert(date, String.class);",
                "Class<?> clazz2 = LocalDate.class;",
                "Date x = this.converter.convert(strDate, Date.class);"
            ],
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h1Test2": [
                "Class<?> clazz1 = LocalDate.class;",
                "long now = System.currentTimeMillis();",
                "Date date = new Date(now - 1000 * 60 * 60 * 24 * 30); // 30 days ago",
                "String strDate = this.converter.convert(date, String.class);",
                "Class<?> clazz2 = LocalDate.class;",
                "Date x = this.converter.convert(strDate, Date.class);"
            ],
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h1Test3": [
                "Class<?> clazz1 = LocalDate.class;",
                "long now = System.currentTimeMillis();",
                "Date date = new Date(now + 1000 * 60 * 60 * 24 * 30); // 30 days from now",
                "String strDate = this.converter.convert(date, String.class);",
                "Class<?> clazz2 = LocalDate.class;",
                "Date x = this.converter.convert(strDate, Date.class);"
            ],
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h1Test4": [
                "Class<?> clazz1 = LocalDate.class;",
                "long now = System.currentTimeMillis();",
                "Date date = new Date(now - 1000 * 60 * 60 * 24 * 365 * 100); // 100 years ago",
                "String strDate = this.converter.convert(date, String.class);",
                "Class<?> clazz2 = LocalDate.class;",
                "Date x = this.converter.convert(strDate, Date.class);"
            ]
        },
        "original_h": [
            "Class<?> clazz1 = LocalDate.class;",
            "long now = System.currentTimeMillis();",
            "Date date = new Date(now);",
            "String strDate = this.converter.convert(date, String.class);",
            "Class<?> clazz2 = LocalDate.class;",
            "Date x = this.converter.convert(strDate, Date.class);"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test6()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h1Test0",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h1Test1",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h1Test2",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h1Test3",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "Map<String, BigDecimal> v01 = new HashMap<>();",
                "v01.put(\"101\", BigDecimal.valueOf(0));",
                "v01.put(\"102\", BigDecimal.valueOf(0));",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, BigDecimal>>() {",
                "}.getType();"
            ],
            [
                "Map<String, BigDecimal> v01 = new HashMap<>();",
                "v01.put(\"101\", BigDecimal.valueOf(999999999999999999L));",
                "v01.put(\"102\", BigDecimal.valueOf(888888888888888888L));",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, BigDecimal>>() {",
                "}.getType();"
            ],
            [
                "Map<String, BigDecimal> v01 = new HashMap<>();",
                "v01.put(\"101\", BigDecimal.valueOf(-101));",
                "v01.put(\"102\", BigDecimal.valueOf(-102));",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, BigDecimal>>() {",
                "}.getType();"
            ],
            [
                "Map<String, BigDecimal> v01 = new HashMap<>();",
                "v01.put(\"101\", BigDecimal.valueOf(Double.MAX_VALUE));",
                "v01.put(\"102\", BigDecimal.valueOf(Double.MIN_VALUE));",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, BigDecimal>>() {",
                "}.getType();"
            ],
            [
                "Map<String, BigDecimal> v01 = new HashMap<>();",
                "v01.put(\"101\", BigDecimal.valueOf(0));",
                "v01.put(\"102\", BigDecimal.valueOf(0));",
                "v01.put(\"103\", BigDecimal.valueOf(0));",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, BigDecimal>>() {",
                "}.getType();"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h1Test0": [
                "Map<String, BigDecimal> v01 = new HashMap<>();",
                "v01.put(\"101\", BigDecimal.valueOf(0));",
                "v01.put(\"102\", BigDecimal.valueOf(0));",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, BigDecimal>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h1Test1": [
                "Map<String, BigDecimal> v01 = new HashMap<>();",
                "v01.put(\"101\", BigDecimal.valueOf(999999999999999999L));",
                "v01.put(\"102\", BigDecimal.valueOf(888888888888888888L));",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, BigDecimal>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h1Test2": [
                "Map<String, BigDecimal> v01 = new HashMap<>();",
                "v01.put(\"101\", BigDecimal.valueOf(-101));",
                "v01.put(\"102\", BigDecimal.valueOf(-102));",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, BigDecimal>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h1Test3": [
                "Map<String, BigDecimal> v01 = new HashMap<>();",
                "v01.put(\"101\", BigDecimal.valueOf(Double.MAX_VALUE));",
                "v01.put(\"102\", BigDecimal.valueOf(Double.MIN_VALUE));",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, BigDecimal>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h1Test4": [
                "Map<String, BigDecimal> v01 = new HashMap<>();",
                "v01.put(\"101\", BigDecimal.valueOf(0));",
                "v01.put(\"102\", BigDecimal.valueOf(0));",
                "v01.put(\"103\", BigDecimal.valueOf(0));",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, BigDecimal>>() {",
                "}.getType();"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h1Test0": [
                "Map<String, BigDecimal> v01 = new HashMap<>();",
                "v01.put(\"101\", BigDecimal.valueOf(0));",
                "v01.put(\"102\", BigDecimal.valueOf(0));",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, BigDecimal>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h1Test1": [
                "Map<String, BigDecimal> v01 = new HashMap<>();",
                "v01.put(\"101\", BigDecimal.valueOf(999999999999999999L));",
                "v01.put(\"102\", BigDecimal.valueOf(888888888888888888L));",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, BigDecimal>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h1Test2": [
                "Map<String, BigDecimal> v01 = new HashMap<>();",
                "v01.put(\"101\", BigDecimal.valueOf(-101));",
                "v01.put(\"102\", BigDecimal.valueOf(-102));",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, BigDecimal>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h1Test3": [
                "Map<String, BigDecimal> v01 = new HashMap<>();",
                "v01.put(\"101\", BigDecimal.valueOf(Double.MAX_VALUE));",
                "v01.put(\"102\", BigDecimal.valueOf(Double.MIN_VALUE));",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, BigDecimal>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h1Test4": [
                "Map<String, BigDecimal> v01 = new HashMap<>();",
                "v01.put(\"101\", BigDecimal.valueOf(0));",
                "v01.put(\"102\", BigDecimal.valueOf(0));",
                "v01.put(\"103\", BigDecimal.valueOf(0));",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, BigDecimal>>() {",
                "}.getType();"
            ]
        },
        "original_h": [
            "Map<String, BigDecimal> v01 = new HashMap<>();",
            "v01.put(\"101\", BigDecimal.valueOf(101));",
            "v01.put(\"102\", BigDecimal.valueOf(102));"
        ]
    },
    "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366.test_create_table()": {
        "generated_inputs_class": [
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h1Test0"
        ],
        "generated_all_blocks": [
            [
                "String sql = \"CREATE TABLE orders_p4 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 4, REMAINDER 3);\";",
                "String newSql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 4, REMAINDER 3);\";"
            ]
        ],
        "selected": {
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h1Test0": [
                "String sql = \"CREATE TABLE orders_p4 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 4, REMAINDER 3);\";",
                "String newSql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 4, REMAINDER 3);\";"
            ]
        },
        "processed_generated": {
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h1Test0": [
                "String sql = \"CREATE TABLE orders_p4 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 4, REMAINDER 3);\";",
                "String newSql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 4, REMAINDER 3);\";"
            ]
        },
        "original_h": [
            "String sql = \"CREATE TABLE orders_p4 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 4, REMAINDER 3);\";",
            "String newSql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 4 , REMAINDER 3);\";"
        ]
    },
    "io.arex.inst.runtime.model.SerializeSkipInfoTest.testHashCode()": {
        "generated_inputs_class": [
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h1Test0",
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h1Test1",
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h1Test2",
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h1Test3",
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo.setFullClassName(\"\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo2.setFullClassName(\"\");"
            ],
            [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo.setFullClassName(\"a\".repeat(1000));",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo2.setFullClassName(\"a\".repeat(1000));"
            ],
            [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"a\".repeat(1000));",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"a\".repeat(1000));",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ]
        ],
        "selected": {
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h1Test0": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h1Test1": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo.setFullClassName(\"\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo2.setFullClassName(\"\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h1Test2": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h1Test3": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo.setFullClassName(\"a\".repeat(1000));",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo2.setFullClassName(\"a\".repeat(1000));"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h1Test4": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"a\".repeat(1000));",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"a\".repeat(1000));",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ]
        },
        "processed_generated": {
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h1Test0": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h1Test1": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo.setFullClassName(\"\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo2.setFullClassName(\"\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h1Test2": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h1Test3": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo.setFullClassName(\"a\".repeat(1000));",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo2.setFullClassName(\"a\".repeat(1000));"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h1Test4": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"a\".repeat(1000));",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"a\".repeat(1000));",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ]
        },
        "original_h": [
            "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
            "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
            "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
            "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
            "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
            "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test7()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h1Test0",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h1Test1",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h1Test2",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h1Test3",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "Map<String, BigInteger> v01 = new HashMap<>();",
                "v01.put(\"101\", BigInteger.valueOf(101));",
                "v01.put(\"102\", BigInteger.valueOf(102));",
                "String str2 = JSON.toJSONString(v01);",
                "Map<String, BigInteger> mapType = JSON.parseObject(str2, new TypeReference<Map<String, BigInteger>>() {",
                "}.getType());"
            ],
            [
                "Map<String, BigInteger> v01 = new HashMap<>();",
                "v01.put(\"101\", BigInteger.valueOf(101));",
                "v01.put(\"101\", BigInteger.valueOf(102));",
                "String str2 = JSON.toJSONString(v01);",
                "Map<String, BigInteger> mapType = JSON.parseObject(str2, new TypeReference<Map<String, BigInteger>>() {",
                "}.getType());"
            ],
            [
                "Map<String, BigInteger> v01 = new HashMap<>();",
                "v01.put(\"101\", BigInteger.valueOf(101));",
                "v01.put(\"102\", BigInteger.valueOf(102));",
                "v01.put(\"103\", BigInteger.valueOf(103));",
                "String str2 = JSON.toJSONString(v01);",
                "Map<String, BigInteger> mapType = JSON.parseObject(str2, new TypeReference<Map<String, BigInteger>>() {",
                "}.getType());"
            ],
            [
                "Map<String, BigInteger> v01 = new HashMap<>();",
                "v01.put(\"101\", BigInteger.valueOf(101));",
                "v01.put(\"102\", BigInteger.valueOf(102));",
                "v01.put(\"103\", BigInteger.valueOf(103));",
                "v01.put(\"104\", BigInteger.valueOf(104));",
                "String str2 = JSON.toJSONString(v01);",
                "Map<String, BigInteger> mapType = JSON.parseObject(str2, new TypeReference<Map<String, BigInteger>>() {",
                "}.getType());"
            ],
            [
                "Map<String, BigInteger> v01 = new HashMap<>();",
                "v01.put(\"101\", BigInteger.valueOf(101));",
                "v01.put(\"102\", BigInteger.valueOf(102));",
                "v01.put(\"103\", BigInteger.valueOf(103));",
                "v01.put(\"104\", BigInteger.valueOf(104));",
                "v01.put(\"105\", BigInteger.valueOf(105));",
                "String str2 = JSON.toJSONString(v01);",
                "Map<String, BigInteger> mapType = JSON.parseObject(str2, new TypeReference<Map<String, BigInteger>>() {",
                "}.getType());"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h1Test0": [
                "Map<String, BigInteger> v01 = new HashMap<>();",
                "v01.put(\"101\", BigInteger.valueOf(101));",
                "v01.put(\"102\", BigInteger.valueOf(102));",
                "String str2 = JSON.toJSONString(v01);",
                "Map<String, BigInteger> mapType = JSON.parseObject(str2, new TypeReference<Map<String, BigInteger>>() {",
                "}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h1Test1": [
                "Map<String, BigInteger> v01 = new HashMap<>();",
                "v01.put(\"101\", BigInteger.valueOf(101));",
                "v01.put(\"101\", BigInteger.valueOf(102));",
                "String str2 = JSON.toJSONString(v01);",
                "Map<String, BigInteger> mapType = JSON.parseObject(str2, new TypeReference<Map<String, BigInteger>>() {",
                "}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h1Test2": [
                "Map<String, BigInteger> v01 = new HashMap<>();",
                "v01.put(\"101\", BigInteger.valueOf(101));",
                "v01.put(\"102\", BigInteger.valueOf(102));",
                "v01.put(\"103\", BigInteger.valueOf(103));",
                "String str2 = JSON.toJSONString(v01);",
                "Map<String, BigInteger> mapType = JSON.parseObject(str2, new TypeReference<Map<String, BigInteger>>() {",
                "}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h1Test3": [
                "Map<String, BigInteger> v01 = new HashMap<>();",
                "v01.put(\"101\", BigInteger.valueOf(101));",
                "v01.put(\"102\", BigInteger.valueOf(102));",
                "v01.put(\"103\", BigInteger.valueOf(103));",
                "v01.put(\"104\", BigInteger.valueOf(104));",
                "String str2 = JSON.toJSONString(v01);",
                "Map<String, BigInteger> mapType = JSON.parseObject(str2, new TypeReference<Map<String, BigInteger>>() {",
                "}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h1Test4": [
                "Map<String, BigInteger> v01 = new HashMap<>();",
                "v01.put(\"101\", BigInteger.valueOf(101));",
                "v01.put(\"102\", BigInteger.valueOf(102));",
                "v01.put(\"103\", BigInteger.valueOf(103));",
                "v01.put(\"104\", BigInteger.valueOf(104));",
                "v01.put(\"105\", BigInteger.valueOf(105));",
                "String str2 = JSON.toJSONString(v01);",
                "Map<String, BigInteger> mapType = JSON.parseObject(str2, new TypeReference<Map<String, BigInteger>>() {",
                "}.getType());"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h1Test0": [
                "Map<String, BigInteger> v01 = new HashMap<>();",
                "v01.put(\"101\", BigInteger.valueOf(101));",
                "v01.put(\"102\", BigInteger.valueOf(102));",
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h1Test1": [
                "Map<String, BigInteger> v01 = new HashMap<>();",
                "v01.put(\"101\", BigInteger.valueOf(101));",
                "v01.put(\"101\", BigInteger.valueOf(102));",
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h1Test2": [
                "Map<String, BigInteger> v01 = new HashMap<>();",
                "v01.put(\"101\", BigInteger.valueOf(101));",
                "v01.put(\"102\", BigInteger.valueOf(102));",
                "v01.put(\"103\", BigInteger.valueOf(103));",
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h1Test3": [
                "Map<String, BigInteger> v01 = new HashMap<>();",
                "v01.put(\"101\", BigInteger.valueOf(101));",
                "v01.put(\"102\", BigInteger.valueOf(102));",
                "v01.put(\"103\", BigInteger.valueOf(103));",
                "v01.put(\"104\", BigInteger.valueOf(104));",
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h1Test4": [
                "Map<String, BigInteger> v01 = new HashMap<>();",
                "v01.put(\"101\", BigInteger.valueOf(101));",
                "v01.put(\"102\", BigInteger.valueOf(102));",
                "v01.put(\"103\", BigInteger.valueOf(103));",
                "v01.put(\"104\", BigInteger.valueOf(104));",
                "v01.put(\"105\", BigInteger.valueOf(105));",
                "String str2 = JSON.toJSONString(v01);"
            ]
        },
        "original_h": [
            "Map<String, BigInteger> v01 = new HashMap<>();",
            "v01.put(\"101\", BigInteger.valueOf(101));",
            "v01.put(\"102\", BigInteger.valueOf(102));"
        ]
    },
    "io.arex.inst.runtime.model.SerializeSkipInfoTest.testToString()": {
        "generated_inputs_class": [
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h1Test0",
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h1Test1",
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h1Test2",
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h1Test3",
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo.setFullClassName(\"\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo2.setFullClassName(\"\");"
            ],
            [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo.setFullClassName(\"a\".repeat(1000));",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo2.setFullClassName(\"a\".repeat(1000));"
            ],
            [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"a\".repeat(1000));",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"a\".repeat(1000));",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ]
        ],
        "selected": {
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h1Test0": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h1Test1": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo.setFullClassName(\"\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo2.setFullClassName(\"\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h1Test2": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h1Test3": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo.setFullClassName(\"a\".repeat(1000));",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo2.setFullClassName(\"a\".repeat(1000));"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h1Test4": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"a\".repeat(1000));",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"a\".repeat(1000));",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ]
        },
        "processed_generated": {
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h1Test0": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h1Test1": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo.setFullClassName(\"\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo2.setFullClassName(\"\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h1Test2": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h1Test3": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo.setFullClassName(\"a\".repeat(1000));",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
                "serializeSkipInfo2.setFullClassName(\"a\".repeat(1000));"
            ],
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h1Test4": [
                "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
                "serializeSkipInfo.setFieldName(\"a\".repeat(1000));",
                "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
                "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
                "serializeSkipInfo2.setFieldName(\"a\".repeat(1000));",
                "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
            ]
        },
        "original_h": [
            "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();",
            "serializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");",
            "serializeSkipInfo.setFullClassName(\"testFullClassName\");",
            "SerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();",
            "serializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");",
            "serializeSkipInfo2.setFullClassName(\"testFullClassName\");"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test8()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h1Test0",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h1Test1",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h1Test2",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h1Test3",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h1Test4",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h1Test5"
        ],
        "generated_all_blocks": [
            [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"101\", UUID.randomUUID());",
                "v01.put(\"102\", UUID.randomUUID());",
                "v01.put(\"103\", UUID.randomUUID());"
            ],
            [
                "String str = JSON.toJSONString(v01);",
                "Map<String, UUID> v02 = JSON.parseObject(str, new TypeReference<Map<String, UUID>>() {",
                "}.getType());"
            ],
            [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"101\", UUID.randomUUID());",
                "v01.put(\"102\", UUID.randomUUID());",
                "v01.put(\"\", UUID.randomUUID());"
            ],
            [
                "String str = JSON.toJSONString(v01);",
                "Map<String, UUID> v02 = JSON.parseObject(str, new TypeReference<Map<String, UUID>>() {",
                "}.getType());"
            ],
            [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"101\", UUID.randomUUID());",
                "v01.put(\"102\", UUID.randomUUID());",
                "v01.put(null, UUID.randomUUID());"
            ],
            [
                "String str = JSON.toJSONString(v01);",
                "Map<String, UUID> v02 = JSON.parseObject(str, new TypeReference<Map<String, UUID>>() {",
                "}.getType());"
            ],
            [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"101\", UUID.randomUUID());",
                "v01.put(\"102\", UUID.randomUUID());",
                "v01.put(\"101\", UUID.randomUUID());"
            ],
            [
                "String str = JSON.toJSONString(v01);",
                "Map<String, UUID> v02 = JSON.parseObject(str, new TypeReference<Map<String, UUID>>() {",
                "}.getType());"
            ],
            [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"101\", UUID.randomUUID());",
                "v01.put(\"102\", UUID.randomUUID());",
                "v01.put(\"101\", null);"
            ],
            [
                "String str = JSON.toJSONString(v01);",
                "Map<String, UUID> v02 = JSON.parseObject(str, new TypeReference<Map<String, UUID>>() {",
                "}.getType());"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h1Test0": [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"101\", UUID.randomUUID());",
                "v01.put(\"102\", UUID.randomUUID());",
                "v01.put(\"103\", UUID.randomUUID());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h1Test1": [
                "String str = JSON.toJSONString(v01);",
                "Map<String, UUID> v02 = JSON.parseObject(str, new TypeReference<Map<String, UUID>>() {",
                "}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h1Test2": [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"101\", UUID.randomUUID());",
                "v01.put(\"102\", UUID.randomUUID());",
                "v01.put(\"\", UUID.randomUUID());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h1Test3": [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"101\", UUID.randomUUID());",
                "v01.put(\"102\", UUID.randomUUID());",
                "v01.put(null, UUID.randomUUID());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h1Test4": [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"101\", UUID.randomUUID());",
                "v01.put(\"102\", UUID.randomUUID());",
                "v01.put(\"101\", UUID.randomUUID());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h1Test5": [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"101\", UUID.randomUUID());",
                "v01.put(\"102\", UUID.randomUUID());",
                "v01.put(\"101\", null);"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h1Test0": [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"101\", UUID.randomUUID());",
                "v01.put(\"102\", UUID.randomUUID());",
                "v01.put(\"103\", UUID.randomUUID());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h1Test1": [
                ""
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h1Test2": [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"101\", UUID.randomUUID());",
                "v01.put(\"102\", UUID.randomUUID());",
                "v01.put(\"\", UUID.randomUUID());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h1Test3": [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"101\", UUID.randomUUID());",
                "v01.put(\"102\", UUID.randomUUID());",
                "v01.put(null, UUID.randomUUID());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h1Test4": [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"101\", UUID.randomUUID());",
                "v01.put(\"102\", UUID.randomUUID());",
                "v01.put(\"101\", UUID.randomUUID());"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h1Test5": [
                "Map<String, UUID> v01 = new HashMap<>();",
                "v01.put(\"101\", UUID.randomUUID());",
                "v01.put(\"102\", UUID.randomUUID());",
                "v01.put(\"101\", null);"
            ]
        },
        "original_h": [
            "Map<String, UUID> v01 = new HashMap<>();",
            "v01.put(\"101\", UUID.randomUUID());",
            "v01.put(\"102\", UUID.randomUUID());"
        ]
    },
    "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest.testMinSegmentsArePickedForMoveWhenNoSkew()": {
        "generated_inputs_class": [
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h1Test0",
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h1Test1",
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h1Test2",
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h1Test3",
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "int totalSegmentsInTier = 0;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            [
                "int totalSegmentsInTier = 0;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            [
                "int totalSegmentsInTier = 1;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            [
                "int totalSegmentsInTier = 1;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            [
                "int totalSegmentsInTier = 10_000;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            [
                "int totalSegmentsInTier = 10_000;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            [
                "int totalSegmentsInTier = 100_000;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            [
                "int totalSegmentsInTier = 100_000;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            [
                "int totalSegmentsInTier = Integer.MAX_VALUE;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            [
                "int totalSegmentsInTier = Integer.MAX_VALUE;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ]
        ],
        "selected": {
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h1Test0": [
                "int totalSegmentsInTier = 0;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h1Test1": [
                "int totalSegmentsInTier = 1;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h1Test2": [
                "int totalSegmentsInTier = 10_000;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h1Test3": [
                "int totalSegmentsInTier = 100_000;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h1Test4": [
                "int totalSegmentsInTier = Integer.MAX_VALUE;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ]
        },
        "processed_generated": {
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h1Test0": [
                "int totalSegmentsInTier = 0;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h1Test1": [
                "int totalSegmentsInTier = 1;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h1Test2": [
                "int totalSegmentsInTier = 10_000;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h1Test3": [
                "int totalSegmentsInTier = 100_000;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h1Test4": [
                "int totalSegmentsInTier = Integer.MAX_VALUE;",
                "String tier = \"tier1\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ]
        },
        "original_h": [
            "int totalSegmentsInTier = 20_000;",
            "String tier = \"tier1\";",
            "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS), createServer(\"B\", SegmentToMoveCalculatorTest.WIKI_SEGMENTS));",
            "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
        ]
    },
    "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase.startupListeners()": {
        "generated_inputs_class": [
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h1Test0",
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h1Test1",
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h1Test2",
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h1Test3",
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "StartupListener startUpListener1 = mock(StartupListener.class);",
                "StartupListener startUpListener2 = mock(StartupListener.class);",
                "singleAppDeploymentService.addStartupListener(startUpListener1);",
                "singleAppDeploymentService.addStartupListener(startUpListener2);",
                "assertThat(singleAppDeploymentService.getStartupListeners(), hasItems(startUpListener1, startUpListener2));"
            ],
            [
                "StartupListener startUpListener1 = new StartupListener() {",
                "@Override",
                "public void onStartup() {",
                "// No implementation",
                "}",
                "};",
                "StartupListener startUpListener2 = mock(StartupListener.class);",
                "singleAppDeploymentService.addStartupListener(startUpListener1);",
                "singleAppDeploymentService.addStartupListener(startUpListener2);",
                "assertThat(singleAppDeploymentService.getStartupListeners(), hasItems(startUpListener1, startUpListener2));"
            ],
            [
                "StartupListener startUpListener1 = new StartupListener() {",
                "@Override",
                "public void onStartup() {",
                "throw new RuntimeException(\"Test exception\");",
                "}",
                "};",
                "StartupListener startUpListener2 = mock(StartupListener.class);",
                "singleAppDeploymentService.addStartupListener(startUpListener1);",
                "singleAppDeploymentService.addStartupListener(startUpListener2);",
                "assertThat(singleAppDeploymentService.getStartupListeners(), hasItems(startUpListener1, startUpListener2));"
            ],
            [
                "StartupListener startUpListener1 = new StartupListener() {",
                "@Override",
                "public void onStartup() {",
                "// Infinite loop",
                "while (true) {",
                "// Do nothing",
                "}",
                "}",
                "};",
                "StartupListener startUpListener2 = mock(StartupListener.class);",
                "singleAppDeploymentService.addStartupListener(startUpListener1);",
                "singleAppDeploymentService.addStartupListener(startUpListener2);",
                "assertThat(singleAppDeploymentService.getStartupListeners(), hasItems(startUpListener1, startUpListener2));"
            ],
            [
                "StartupListener startUpListener1 = null;",
                "StartupListener startUpListener2 = mock(StartupListener.class);",
                "singleAppDeploymentService.addStartupListener(startUpListener1);",
                "singleAppDeploymentService.addStartupListener(startUpListener2);",
                "assertThat(singleAppDeploymentService.getStartupListeners(), hasItems(startUpListener2));"
            ]
        ],
        "selected": {
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h1Test0": [
                "StartupListener startUpListener1 = mock(StartupListener.class);",
                "StartupListener startUpListener2 = mock(StartupListener.class);",
                "singleAppDeploymentService.addStartupListener(startUpListener1);",
                "singleAppDeploymentService.addStartupListener(startUpListener2);",
                "assertThat(singleAppDeploymentService.getStartupListeners(), hasItems(startUpListener1, startUpListener2));"
            ],
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h1Test1": [
                "StartupListener startUpListener1 = new StartupListener() {",
                "@Override",
                "public void onStartup() {",
                "// No implementation",
                "}",
                "};",
                "StartupListener startUpListener2 = mock(StartupListener.class);",
                "singleAppDeploymentService.addStartupListener(startUpListener1);",
                "singleAppDeploymentService.addStartupListener(startUpListener2);",
                "assertThat(singleAppDeploymentService.getStartupListeners(), hasItems(startUpListener1, startUpListener2));"
            ],
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h1Test2": [
                "StartupListener startUpListener1 = new StartupListener() {",
                "@Override",
                "public void onStartup() {",
                "throw new RuntimeException(\"Test exception\");",
                "}",
                "};",
                "StartupListener startUpListener2 = mock(StartupListener.class);",
                "singleAppDeploymentService.addStartupListener(startUpListener1);",
                "singleAppDeploymentService.addStartupListener(startUpListener2);",
                "assertThat(singleAppDeploymentService.getStartupListeners(), hasItems(startUpListener1, startUpListener2));"
            ],
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h1Test3": [
                "StartupListener startUpListener1 = new StartupListener() {",
                "@Override",
                "public void onStartup() {",
                "// Infinite loop",
                "while (true) {",
                "// Do nothing",
                "}",
                "}",
                "};",
                "StartupListener startUpListener2 = mock(StartupListener.class);",
                "singleAppDeploymentService.addStartupListener(startUpListener1);",
                "singleAppDeploymentService.addStartupListener(startUpListener2);",
                "assertThat(singleAppDeploymentService.getStartupListeners(), hasItems(startUpListener1, startUpListener2));"
            ],
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h1Test4": [
                "StartupListener startUpListener1 = null;",
                "StartupListener startUpListener2 = mock(StartupListener.class);",
                "singleAppDeploymentService.addStartupListener(startUpListener1);",
                "singleAppDeploymentService.addStartupListener(startUpListener2);",
                "assertThat(singleAppDeploymentService.getStartupListeners(), hasItems(startUpListener2));"
            ]
        },
        "processed_generated": {
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h1Test0": [
                "StartupListener startUpListener1 = mock(StartupListener.class);",
                "StartupListener startUpListener2 = mock(StartupListener.class);"
            ],
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h1Test1": [
                "StartupListener startUpListener1 = new StartupListener() {",
                "@Override",
                "public void onStartup() {",
                "// No implementation",
                "}",
                "StartupListener startUpListener2 = mock(StartupListener.class);"
            ],
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h1Test2": [
                "StartupListener startUpListener1 = new StartupListener() {",
                "@Override",
                "public void onStartup() {",
                "throw new RuntimeException(\"Test exception\");",
                "StartupListener startUpListener2 = mock(StartupListener.class);"
            ],
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h1Test3": [
                "StartupListener startUpListener1 = new StartupListener() {",
                "@Override",
                "public void onStartup() {",
                "// Infinite loop",
                "while (true) {",
                "// Do nothing",
                "}",
                "StartupListener startUpListener2 = mock(StartupListener.class);"
            ],
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h1Test4": [
                "StartupListener startUpListener1 = null;",
                "StartupListener startUpListener2 = mock(StartupListener.class);"
            ]
        },
        "original_h": [
            "StartupListener startUpListener1 = mock(StartupListener.class);",
            "StartupListener startUpListener2 = mock(StartupListener.class);"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.MapTest.test1()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h1Test0",
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h1Test1",
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h1Test2",
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h1Test3",
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "v01.put(\"123\", 456);",
                "str2 = JSON.toJSONString(v01);",
                "mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ],
            [
                "v01.put(\"12x\", 789);",
                "str2 = JSON.toJSONString(v01);",
                "mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ],
            [
                "v01.put(\"\", 123);",
                "str2 = JSON.toJSONString(v01);",
                "mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ],
            [
                "v01.put(\"123\", null);",
                "str2 = JSON.toJSONString(v01);",
                "mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ],
            [
                "v01.put(\"12x\", null);",
                "str2 = JSON.toJSONString(v01);",
                "mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h1Test0": [
                "v01.put(\"123\", 456);",
                "str2 = JSON.toJSONString(v01);",
                "mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h1Test1": [
                "v01.put(\"12x\", 789);",
                "str2 = JSON.toJSONString(v01);",
                "mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h1Test2": [
                "v01.put(\"\", 123);",
                "str2 = JSON.toJSONString(v01);",
                "mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h1Test3": [
                "v01.put(\"123\", null);",
                "str2 = JSON.toJSONString(v01);",
                "mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h1Test4": [
                "v01.put(\"12x\", null);",
                "str2 = JSON.toJSONString(v01);",
                "mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h1Test0": [
                "v01.put(\"123\", 456);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h1Test1": [
                "v01.put(\"12x\", 789);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h1Test2": [
                "v01.put(\"\", 123);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h1Test3": [
                "v01.put(\"123\", null);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h1Test4": [
                "v01.put(\"12x\", null);"
            ]
        },
        "original_h": [
            "v01.put(\"123\", 123);",
            "v01.put(\"12x\", 123);"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.primitives.IntTest.test1()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h1Test0",
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h1Test1",
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h1Test2",
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h1Test3",
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "Integer v01 = 0;",
                "String str = JSON.toJSONString(v01);",
                "Integer v02 = JSON.parseObject(str, Integer.class);"
            ],
            [
                "Integer v01 = 0;",
                "String str = JSON.toJSONString(v01);",
                "Integer v02 = JSON.parseObject(str, Integer.class);"
            ],
            [
                "Integer v01 = 2147483647;",
                "String str = JSON.toJSONString(v01);",
                "Integer v02 = JSON.parseObject(str, Integer.class);"
            ],
            [
                "Integer v01 = 2147483647;",
                "String str = JSON.toJSONString(v01);",
                "Integer v02 = JSON.parseObject(str, Integer.class);"
            ],
            [
                "Integer v01 = -2147483648;",
                "String str = JSON.toJSONString(v01);",
                "Integer v02 = JSON.parseObject(str, Integer.class);"
            ],
            [
                "Integer v01 = -2147483648;",
                "String str = JSON.toJSONString(v01);",
                "Integer v02 = JSON.parseObject(str, Integer.class);"
            ],
            [
                "Integer v01 = null;",
                "String str = JSON.toJSONString(v01);",
                "Integer v02 = JSON.parseObject(str, Integer.class);"
            ],
            [
                "Integer v01 = null;",
                "String str = JSON.toJSONString(v01);",
                "Integer v02 = JSON.parseObject(str, Integer.class);"
            ],
            [
                "Integer v01 = 1000000;",
                "String str = JSON.toJSONString(v01);",
                "Integer v02 = JSON.parseObject(str, Integer.class);"
            ],
            [
                "Integer v01 = 1000000;",
                "String str = JSON.toJSONString(v01);",
                "Integer v02 = JSON.parseObject(str, Integer.class);"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h1Test0": [
                "Integer v01 = 0;",
                "String str = JSON.toJSONString(v01);",
                "Integer v02 = JSON.parseObject(str, Integer.class);"
            ],
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h1Test1": [
                "Integer v01 = 2147483647;",
                "String str = JSON.toJSONString(v01);",
                "Integer v02 = JSON.parseObject(str, Integer.class);"
            ],
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h1Test2": [
                "Integer v01 = -2147483648;",
                "String str = JSON.toJSONString(v01);",
                "Integer v02 = JSON.parseObject(str, Integer.class);"
            ],
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h1Test3": [
                "Integer v01 = null;",
                "String str = JSON.toJSONString(v01);",
                "Integer v02 = JSON.parseObject(str, Integer.class);"
            ],
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h1Test4": [
                "Integer v01 = 1000000;",
                "String str = JSON.toJSONString(v01);",
                "Integer v02 = JSON.parseObject(str, Integer.class);"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h1Test0": [
                "Integer v01 = 0;"
            ],
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h1Test1": [
                "Integer v01 = 2147483647;"
            ],
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h1Test2": [
                "Integer v01 = -2147483648;"
            ],
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h1Test3": [
                "Integer v01 = null;"
            ],
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h1Test4": [
                "Integer v01 = 1000000;"
            ]
        },
        "original_h": [
            "Integer v01 = 1001;"
        ]
    },
    "io.bootique.di.TypeLiteralTest.normalize()": {
        "generated_inputs_class": [
            "io.bootique.di.TypeLiteralTest_normalize_h1Test0",
            "io.bootique.di.TypeLiteralTest_normalize_h1Test1",
            "io.bootique.di.TypeLiteralTest_normalize_h1Test2",
            "io.bootique.di.TypeLiteralTest_normalize_h1Test3",
            "io.bootique.di.TypeLiteralTest_normalize_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "Class input = Integer.class;",
                "TypeLiteral<List<Integer>> input2 = TypeLiteral.listOf(Integer.class);"
            ],
            [
                "Class input = String.class;",
                "TypeLiteral<List<String>> input2 = TypeLiteral.listOf(String.class);"
            ],
            [
                "Class input = List.class;",
                "TypeLiteral<List<List<Integer>>> input2 = TypeLiteral.listOf(TypeLiteral.listOf(Integer.class));"
            ],
            [
                "Class input = ArrayList.class;",
                "TypeLiteral<List<ArrayList<Integer>>> input2 = TypeLiteral.listOf(TypeLiteral.listOf(Integer.class));"
            ],
            [
                "Class input = Object.class;",
                "TypeLiteral<List<Object>> input2 = TypeLiteral.listOf(TypeLiteral.listOf(Object.class));"
            ]
        ],
        "selected": {
            "io.bootique.di.TypeLiteralTest_normalize_h1Test0": [
                "Class input = Integer.class;",
                "TypeLiteral<List<Integer>> input2 = TypeLiteral.listOf(Integer.class);"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h1Test1": [
                "Class input = String.class;",
                "TypeLiteral<List<String>> input2 = TypeLiteral.listOf(String.class);"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h1Test2": [
                "Class input = List.class;",
                "TypeLiteral<List<List<Integer>>> input2 = TypeLiteral.listOf(TypeLiteral.listOf(Integer.class));"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h1Test3": [
                "Class input = ArrayList.class;",
                "TypeLiteral<List<ArrayList<Integer>>> input2 = TypeLiteral.listOf(TypeLiteral.listOf(Integer.class));"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h1Test4": [
                "Class input = Object.class;",
                "TypeLiteral<List<Object>> input2 = TypeLiteral.listOf(TypeLiteral.listOf(Object.class));"
            ]
        },
        "processed_generated": {
            "io.bootique.di.TypeLiteralTest_normalize_h1Test0": [
                "Class input = Integer.class;",
                "TypeLiteral<List<Integer>> input2 = TypeLiteral.listOf(Integer.class);"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h1Test1": [
                "Class input = String.class;"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h1Test2": [
                "Class input = List.class;"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h1Test3": [
                "Class input = ArrayList.class;"
            ],
            "io.bootique.di.TypeLiteralTest_normalize_h1Test4": [
                "Class input = Object.class;"
            ]
        },
        "original_h": [
            "Class input = Integer.class;"
        ]
    },
    "se.michaelthelin.spotify.Base64Test.testCustomBase64()": {
        "generated_inputs_class": [
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h1Test0",
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h1Test1",
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h1Test2",
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h1Test3",
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "byte[] testDataBytes = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};",
                "String input2 = \"MDEyMzQ1Njc4OTA=\";"
            ],
            [
                "byte[] testDataBytes = {10, 11, 12, 13, 14, 15, 16, 17, 18, 19};",
                "String input2 = \"MTAyMzQ1Njc4OTE=\";"
            ],
            [
                "byte[] testDataBytes = {20, 21, 22, 23, 24, 25, 26, 27, 28, 29};",
                "String input2 = \"MjAyMzQ1Njc4OTI=\";"
            ],
            [
                "byte[] testDataBytes = {30, 31, 32, 33, 34, 35, 36, 37, 38, 39};",
                "String input2 = \"MzAyMzQ1Njc4OTM=\";"
            ],
            [
                "byte[] testDataBytes = {40, 41, 42, 43, 44, 45, 46, 47, 48, 49};",
                "String input2 = \"NDAyMzQ1Njc4OTQ=\";"
            ]
        ],
        "selected": {
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h1Test0": [
                "byte[] testDataBytes = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};",
                "String input2 = \"MDEyMzQ1Njc4OTA=\";"
            ],
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h1Test1": [
                "byte[] testDataBytes = {10, 11, 12, 13, 14, 15, 16, 17, 18, 19};",
                "String input2 = \"MTAyMzQ1Njc4OTE=\";"
            ],
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h1Test2": [
                "byte[] testDataBytes = {20, 21, 22, 23, 24, 25, 26, 27, 28, 29};",
                "String input2 = \"MjAyMzQ1Njc4OTI=\";"
            ],
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h1Test3": [
                "byte[] testDataBytes = {30, 31, 32, 33, 34, 35, 36, 37, 38, 39};",
                "String input2 = \"MzAyMzQ1Njc4OTM=\";"
            ],
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h1Test4": [
                "byte[] testDataBytes = {40, 41, 42, 43, 44, 45, 46, 47, 48, 49};",
                "String input2 = \"NDAyMzQ1Njc4OTQ=\";"
            ]
        },
        "processed_generated": {
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h1Test0": [
                "byte[] testDataBytes = {0, 1, 2, 3, 4, 5, 6, 7, 8, 9};",
                "String input2 = \"MDEyMzQ1Njc4OTA=\";"
            ],
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h1Test1": [
                "byte[] testDataBytes = {10, 11, 12, 13, 14, 15, 16, 17, 18, 19};",
                "String input2 = \"MTAyMzQ1Njc4OTE=\";"
            ],
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h1Test2": [
                "byte[] testDataBytes = {20, 21, 22, 23, 24, 25, 26, 27, 28, 29};",
                "String input2 = \"MjAyMzQ1Njc4OTI=\";"
            ],
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h1Test3": [
                "byte[] testDataBytes = {30, 31, 32, 33, 34, 35, 36, 37, 38, 39};",
                "String input2 = \"MzAyMzQ1Njc4OTM=\";"
            ],
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h1Test4": [
                "byte[] testDataBytes = {40, 41, 42, 43, 44, 45, 46, 47, 48, 49};",
                "String input2 = \"NDAyMzQ1Njc4OTQ=\";"
            ]
        },
        "original_h": [
            "byte[] testDataBytes = BASE_64_TEST_DATA.getBytes();",
            "String input2 = \"SGVsbG8gV29ybGQ=\";"
        ]
    },
    "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest.testHalfSegmentsArePickedForMoveWhenFullSkew()": {
        "generated_inputs_class": [
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h1Test0",
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h1Test1",
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h1Test2",
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h1Test3",
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "String tier = \"tier2\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "String tier2 = \"tier2\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            [
                "String tier = \"tier3\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS));",
                "String tier2 = \"tier3\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            [
                "String tier = \"tier4\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS));",
                "String tier2 = \"tier4\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            [
                "String tier = \"tier5\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS), createServer(\"E\", WIKI_SEGMENTS));",
                "String tier2 = \"tier5\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS), createServer(\"E\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            [
                "String tier = \"tier6\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS), createServer(\"E\", WIKI_SEGMENTS), createServer(\"F\", WIKI_SEGMENTS));",
                "String tier2 = \"tier6\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS), createServer(\"E\", WIKI_SEGMENTS), createServer(\"F\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ]
        ],
        "selected": {
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h1Test0": [
                "String tier = \"tier2\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "String tier2 = \"tier2\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h1Test1": [
                "String tier = \"tier3\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS));",
                "String tier2 = \"tier3\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h1Test2": [
                "String tier = \"tier4\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS));",
                "String tier2 = \"tier4\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h1Test3": [
                "String tier = \"tier5\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS), createServer(\"E\", WIKI_SEGMENTS));",
                "String tier2 = \"tier5\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS), createServer(\"E\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h1Test4": [
                "String tier = \"tier6\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS), createServer(\"E\", WIKI_SEGMENTS), createServer(\"F\", WIKI_SEGMENTS));",
                "String tier2 = \"tier6\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS), createServer(\"E\", WIKI_SEGMENTS), createServer(\"F\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ]
        },
        "processed_generated": {
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h1Test0": [
                "String tier = \"tier2\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "String tier2 = \"tier2\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h1Test1": [
                "String tier = \"tier3\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS));",
                "String tier2 = \"tier3\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h1Test2": [
                "String tier = \"tier4\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS));",
                "String tier2 = \"tier4\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h1Test3": [
                "String tier = \"tier5\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS), createServer(\"E\", WIKI_SEGMENTS));",
                "String tier2 = \"tier5\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS), createServer(\"E\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ],
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h1Test4": [
                "String tier = \"tier6\";",
                "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS), createServer(\"E\", WIKI_SEGMENTS), createServer(\"F\", WIKI_SEGMENTS));",
                "String tier2 = \"tier6\";",
                "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS), createServer(\"E\", WIKI_SEGMENTS), createServer(\"F\", WIKI_SEGMENTS));",
                "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
            ]
        },
        "original_h": [
            "String tier = \"tier1\";",
            "List<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()));",
            "String tier2 = \"tier1\";",
            "List<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()));",
            "int maxSegmentsToMoveInTier = Integer.MAX_VALUE;"
        ]
    },
    "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest.entrySetTest()": {
        "generated_inputs_class": [
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h1Test0",
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h1Test1",
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h1Test2",
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h1Test3",
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(1, 1);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(5, 10);",
                "map.put(4, 3);",
                "map.put(3, 7);",
                "map.put(1, 1);"
            ],
            [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(0, 0);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(5, 10);",
                "map.put(4, 3);",
                "map.put(3, 7);",
                "map.put(0, 0);"
            ],
            [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(Integer.MAX_VALUE, Integer.MAX_VALUE);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(5, 10);",
                "map.put(4, 3);",
                "map.put(3, 7);",
                "map.put(Integer.MAX_VALUE, Integer.MAX_VALUE);"
            ],
            [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(Integer.MIN_VALUE, Integer.MIN_VALUE);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(5, 10);",
                "map.put(4, 3);",
                "map.put(3, 7);",
                "map.put(Integer.MIN_VALUE, Integer.MIN_VALUE);"
            ],
            [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(null, 10);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(5, 10);",
                "map.put(4, 3);",
                "map.put(3, 7);",
                "map.put(null, 10);"
            ]
        ],
        "selected": {
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h1Test0": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(1, 1);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(5, 10);",
                "map.put(4, 3);",
                "map.put(3, 7);",
                "map.put(1, 1);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h1Test1": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(0, 0);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(5, 10);",
                "map.put(4, 3);",
                "map.put(3, 7);",
                "map.put(0, 0);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h1Test2": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(Integer.MAX_VALUE, Integer.MAX_VALUE);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(5, 10);",
                "map.put(4, 3);",
                "map.put(3, 7);",
                "map.put(Integer.MAX_VALUE, Integer.MAX_VALUE);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h1Test3": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(Integer.MIN_VALUE, Integer.MIN_VALUE);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(5, 10);",
                "map.put(4, 3);",
                "map.put(3, 7);",
                "map.put(Integer.MIN_VALUE, Integer.MIN_VALUE);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h1Test4": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(null, 10);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(5, 10);",
                "map.put(4, 3);",
                "map.put(3, 7);",
                "map.put(null, 10);"
            ]
        },
        "processed_generated": {
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h1Test0": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(1, 1);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(5, 10);",
                "map.put(4, 3);",
                "map.put(3, 7);",
                "map.put(1, 1);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h1Test1": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(0, 0);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(5, 10);",
                "map.put(4, 3);",
                "map.put(3, 7);",
                "map.put(0, 0);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h1Test2": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(Integer.MAX_VALUE, Integer.MAX_VALUE);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(5, 10);",
                "map.put(4, 3);",
                "map.put(3, 7);",
                "map.put(Integer.MAX_VALUE, Integer.MAX_VALUE);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h1Test3": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(Integer.MIN_VALUE, Integer.MIN_VALUE);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(5, 10);",
                "map.put(4, 3);",
                "map.put(3, 7);",
                "map.put(Integer.MIN_VALUE, Integer.MIN_VALUE);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h1Test4": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(null, 10);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(5, 10);",
                "map.put(4, 3);",
                "map.put(3, 7);",
                "map.put(null, 10);"
            ]
        },
        "original_h": [
            "Map<Integer, Integer> anotherMap = new HashMap<>();",
            "anotherMap.put(5, 10);",
            "anotherMap.put(4, 3);",
            "anotherMap.put(3, 7);",
            "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
            "map.put(5, 6);",
            "map.put(5, 10);",
            "map.put(4, 3);",
            "map.put(3, 7);"
        ]
    },
    "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest.keySetTest()": {
        "generated_inputs_class": [
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h1Test0",
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h1Test1",
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h1Test2",
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h1Test3",
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(1, 1);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(3, 6);",
                "map.put(4, 6);",
                "map.put(1, 1);"
            ],
            [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(0, 0);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(3, 6);",
                "map.put(4, 6);",
                "map.put(0, 0);"
            ],
            [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(Integer.MAX_VALUE, Integer.MAX_VALUE);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(3, 6);",
                "map.put(4, 6);",
                "map.put(Integer.MAX_VALUE, Integer.MAX_VALUE);"
            ],
            [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(Integer.MIN_VALUE, Integer.MIN_VALUE);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(3, 6);",
                "map.put(4, 6);",
                "map.put(Integer.MIN_VALUE, Integer.MIN_VALUE);"
            ],
            [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(null, 10);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(3, 6);",
                "map.put(4, 6);",
                "map.put(null, 10);"
            ]
        ],
        "selected": {
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h1Test0": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(1, 1);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(3, 6);",
                "map.put(4, 6);",
                "map.put(1, 1);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h1Test1": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(0, 0);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(3, 6);",
                "map.put(4, 6);",
                "map.put(0, 0);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h1Test2": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(Integer.MAX_VALUE, Integer.MAX_VALUE);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(3, 6);",
                "map.put(4, 6);",
                "map.put(Integer.MAX_VALUE, Integer.MAX_VALUE);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h1Test3": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(Integer.MIN_VALUE, Integer.MIN_VALUE);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(3, 6);",
                "map.put(4, 6);",
                "map.put(Integer.MIN_VALUE, Integer.MIN_VALUE);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h1Test4": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(null, 10);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(3, 6);",
                "map.put(4, 6);",
                "map.put(null, 10);"
            ]
        },
        "processed_generated": {
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h1Test0": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(1, 1);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(3, 6);",
                "map.put(4, 6);",
                "map.put(1, 1);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h1Test1": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(0, 0);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(3, 6);",
                "map.put(4, 6);",
                "map.put(0, 0);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h1Test2": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(Integer.MAX_VALUE, Integer.MAX_VALUE);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(3, 6);",
                "map.put(4, 6);",
                "map.put(Integer.MAX_VALUE, Integer.MAX_VALUE);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h1Test3": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(Integer.MIN_VALUE, Integer.MIN_VALUE);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(3, 6);",
                "map.put(4, 6);",
                "map.put(Integer.MIN_VALUE, Integer.MIN_VALUE);"
            ],
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h1Test4": [
                "Map<Integer, Integer> anotherMap = new HashMap<>();",
                "anotherMap.put(5, 10);",
                "anotherMap.put(4, 3);",
                "anotherMap.put(3, 7);",
                "anotherMap.put(null, 10);",
                "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
                "map.put(5, 6);",
                "map.put(3, 6);",
                "map.put(4, 6);",
                "map.put(null, 10);"
            ]
        },
        "original_h": [
            "Map<Integer, Integer> anotherMap = new HashMap<>();",
            "anotherMap.put(5, 10);",
            "anotherMap.put(4, 3);",
            "anotherMap.put(3, 7);",
            "ConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();",
            "map.put(5, 6);",
            "map.put(3, 6);",
            "map.put(4, 6);"
        ]
    },
    "software.amazon.event.ruler.SubRuleContextTest.testGetters()": {
        "generated_inputs_class": [
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h1Test0",
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h1Test1",
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h1Test2",
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h1Test3",
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = \"\";",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
                "generator2.generate(\"\");",
                "assertEquals(\"\", generator2.getNameForGeneratedId(id));",
                "Set<Double> expectedIds = new HashSet<>();",
                "expectedIds.add(generator.generate(\"\").getId());",
                "assertEquals(expectedIds, generator.getIdsGeneratedForName(\"\"));"
            ],
            [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = \"a\".repeat(1000);",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
                "generator2.generate(\"a\".repeat(1000));",
                "assertEquals(\"a\".repeat(1000), generator2.getNameForGeneratedId(id));",
                "Set<Double> expectedIds = new HashSet<>();",
                "expectedIds.add(generator.generate(\"a\".repeat(1000)).getId());",
                "assertEquals(expectedIds, generator.getIdsGeneratedForName(\"a\".repeat(1000)));"
            ],
            [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = null;",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
                "generator2.generate(null);",
                "assertEquals(null, generator2.getNameForGeneratedId(id));",
                "Set<Double> expectedIds = new HashSet<>();",
                "expectedIds.add(generator.generate(null).getId());",
                "assertEquals(expectedIds, generator.getIdsGeneratedForName(null));"
            ],
            [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = \"1234567890\";",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
                "generator2.generate(\"1234567890\");",
                "assertEquals(\"1234567890\", generator2.getNameForGeneratedId(id));",
                "Set<Double> expectedIds = new HashSet<>();",
                "expectedIds.add(generator.generate(\"1234567890\").getId());",
                "assertEquals(expectedIds, generator.getIdsGeneratedForName(\"1234567890\"));"
            ],
            [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = \"name\\nname\";",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
                "generator2.generate(\"name\\nname\");",
                "assertEquals(\"name\\nname\", generator2.getNameForGeneratedId(id));",
                "Set<Double> expectedIds = new HashSet<>();",
                "expectedIds.add(generator.generate(\"name\\nname\").getId());",
                "assertEquals(expectedIds, generator.getIdsGeneratedForName(\"name\\nname\"));"
            ]
        ],
        "selected": {
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h1Test0": [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = \"\";",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
                "generator2.generate(\"\");",
                "assertEquals(\"\", generator2.getNameForGeneratedId(id));",
                "Set<Double> expectedIds = new HashSet<>();",
                "expectedIds.add(generator.generate(\"\").getId());",
                "assertEquals(expectedIds, generator.getIdsGeneratedForName(\"\"));"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h1Test1": [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = \"a\".repeat(1000);",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
                "generator2.generate(\"a\".repeat(1000));",
                "assertEquals(\"a\".repeat(1000), generator2.getNameForGeneratedId(id));",
                "Set<Double> expectedIds = new HashSet<>();",
                "expectedIds.add(generator.generate(\"a\".repeat(1000)).getId());",
                "assertEquals(expectedIds, generator.getIdsGeneratedForName(\"a\".repeat(1000)));"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h1Test2": [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = null;",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
                "generator2.generate(null);",
                "assertEquals(null, generator2.getNameForGeneratedId(id));",
                "Set<Double> expectedIds = new HashSet<>();",
                "expectedIds.add(generator.generate(null).getId());",
                "assertEquals(expectedIds, generator.getIdsGeneratedForName(null));"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h1Test3": [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = \"1234567890\";",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
                "generator2.generate(\"1234567890\");",
                "assertEquals(\"1234567890\", generator2.getNameForGeneratedId(id));",
                "Set<Double> expectedIds = new HashSet<>();",
                "expectedIds.add(generator.generate(\"1234567890\").getId());",
                "assertEquals(expectedIds, generator.getIdsGeneratedForName(\"1234567890\"));"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h1Test4": [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = \"name\\nname\";",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
                "generator2.generate(\"name\\nname\");",
                "assertEquals(\"name\\nname\", generator2.getNameForGeneratedId(id));",
                "Set<Double> expectedIds = new HashSet<>();",
                "expectedIds.add(generator.generate(\"name\\nname\").getId());",
                "assertEquals(expectedIds, generator.getIdsGeneratedForName(\"name\\nname\"));"
            ]
        },
        "processed_generated": {
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h1Test0": [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = \"\";",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h1Test1": [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = \"a\".repeat(1000);",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h1Test2": [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = null;",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h1Test3": [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = \"1234567890\";",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h1Test4": [
                "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
                "String NAME = \"name\\nname\";",
                "Double id = -1.7976931348623157E308;",
                "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();"
            ]
        },
        "original_h": [
            "SubRuleContext.Generator generator = new SubRuleContext.Generator();",
            "String NAME = \"name\";",
            "Double id = -1.7976931348623157E308;",
            "SubRuleContext.Generator generator2 = new SubRuleContext.Generator();"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.collections.ListTest1.test()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test0",
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test1",
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test2",
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test3",
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test4",
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test5",
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test6",
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test7",
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test8",
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test9"
        ],
        "generated_all_blocks": [
            [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = 0;",
                "v01.add(id);",
                "String str = JSON.toJSONString(v01);",
                "List<Integer> v02 = JSON.parseObject(str, new TypeReference<List<Integer>>() {",
                "}.getType());"
            ],
            [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = 0;",
                "v01.add(id);"
            ],
            [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = Integer.MAX_VALUE;",
                "v01.add(id);",
                "String str = JSON.toJSONString(v01);",
                "List<Integer> v02 = JSON.parseObject(str, new TypeReference<List<Integer>>() {",
                "}.getType());"
            ],
            [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = Integer.MAX_VALUE;",
                "v01.add(id);"
            ],
            [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = -1;",
                "v01.add(id);",
                "String str = JSON.toJSONString(v01);",
                "List<Integer> v02 = JSON.parseObject(str, new TypeReference<List<Integer>>() {",
                "}.getType());"
            ],
            [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = -1;",
                "v01.add(id);"
            ],
            [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = Integer.MIN_VALUE;",
                "v01.add(id);",
                "String str = JSON.toJSONString(v01);",
                "List<Integer> v02 = JSON.parseObject(str, new TypeReference<List<Integer>>() {",
                "}.getType());"
            ],
            [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = Integer.MIN_VALUE;",
                "v01.add(id);"
            ],
            [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = 1234567890;",
                "v01.add(id);",
                "String str = JSON.toJSONString(v01);",
                "List<Integer> v02 = JSON.parseObject(str, new TypeReference<List<Integer>>() {",
                "}.getType());"
            ],
            [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = 1234567890;",
                "v01.add(id);"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test0": [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = 0;",
                "v01.add(id);",
                "String str = JSON.toJSONString(v01);",
                "List<Integer> v02 = JSON.parseObject(str, new TypeReference<List<Integer>>() {",
                "}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test1": [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = 0;",
                "v01.add(id);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test2": [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = Integer.MAX_VALUE;",
                "v01.add(id);",
                "String str = JSON.toJSONString(v01);",
                "List<Integer> v02 = JSON.parseObject(str, new TypeReference<List<Integer>>() {",
                "}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test3": [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = Integer.MAX_VALUE;",
                "v01.add(id);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test4": [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = -1;",
                "v01.add(id);",
                "String str = JSON.toJSONString(v01);",
                "List<Integer> v02 = JSON.parseObject(str, new TypeReference<List<Integer>>() {",
                "}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test5": [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = -1;",
                "v01.add(id);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test6": [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = Integer.MIN_VALUE;",
                "v01.add(id);",
                "String str = JSON.toJSONString(v01);",
                "List<Integer> v02 = JSON.parseObject(str, new TypeReference<List<Integer>>() {",
                "}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test7": [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = Integer.MIN_VALUE;",
                "v01.add(id);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test8": [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = 1234567890;",
                "v01.add(id);",
                "String str = JSON.toJSONString(v01);",
                "List<Integer> v02 = JSON.parseObject(str, new TypeReference<List<Integer>>() {",
                "}.getType());"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test9": [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = 1234567890;",
                "v01.add(id);"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test0": [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = 0;",
                "v01.add(id);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test1": [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = 0;",
                "v01.add(id);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test2": [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = Integer.MAX_VALUE;",
                "v01.add(id);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test3": [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = Integer.MAX_VALUE;",
                "v01.add(id);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test4": [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = -1;",
                "v01.add(id);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test5": [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = -1;",
                "v01.add(id);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test6": [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = Integer.MIN_VALUE;",
                "v01.add(id);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test7": [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = Integer.MIN_VALUE;",
                "v01.add(id);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test8": [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = 1234567890;",
                "v01.add(id);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h1Test9": [
                "List<Integer> v01 = new ArrayList<>();",
                "int id = 1234567890;",
                "v01.add(id);"
            ]
        },
        "original_h": [
            "List<Integer> v01 = new ArrayList<>();",
            "int id = 123;",
            "v01.add(id);"
        ]
    },
    "org.datagear.util.version.VersionTest.stringOfTest()": {
        "generated_inputs_class": [
            "org.datagear.util.version.VersionTest_stringOfTest_h1Test0",
            "org.datagear.util.version.VersionTest_stringOfTest_h1Test1",
            "org.datagear.util.version.VersionTest_stringOfTest_h1Test2",
            "org.datagear.util.version.VersionTest_stringOfTest_h1Test3",
            "org.datagear.util.version.VersionTest_stringOfTest_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "String v = \"1.0.0-alpha\";",
                "String v1 = \"1.0.0-alpha\";",
                "Version version = Version.valueOf(v);",
                "Version version1 = Version.valueOf(v1);",
                "assertEquals(v, version.stringOf());",
                "assertEquals(v, Version.stringOf(version1));"
            ],
            [
                "String v = \"1.0.0-beta1\";",
                "String v1 = \"1.0.0-beta1\";",
                "Version version = Version.valueOf(v);",
                "Version version1 = Version.valueOf(v1);",
                "assertEquals(v, version.stringOf());",
                "assertEquals(v, Version.stringOf(version1));"
            ],
            [
                "String v = \"1.0.0-rc\";",
                "String v1 = \"1.0.0-rc\";",
                "Version version = Version.valueOf(v);",
                "Version version1 = Version.valueOf(v1);",
                "assertEquals(v, version.stringOf());",
                "assertEquals(v, Version.stringOf(version1));"
            ],
            [
                "String v = \"1.0.0-rc1\";",
                "String v1 = \"1.0.0-rc1\";",
                "Version version = Version.valueOf(v);",
                "Version version1 = Version.valueOf(v1);",
                "assertEquals(v, version.stringOf());",
                "assertEquals(v, Version.stringOf(version1));"
            ],
            [
                "String v = \"1.0.0-dev\";",
                "String v1 = \"1.0.0-dev\";",
                "Version version = Version.valueOf(v);",
                "Version version1 = Version.valueOf(v1);",
                "assertEquals(v, version.stringOf());",
                "assertEquals(v, Version.stringOf(version1));"
            ]
        ],
        "selected": {
            "org.datagear.util.version.VersionTest_stringOfTest_h1Test0": [
                "String v = \"1.0.0-alpha\";",
                "String v1 = \"1.0.0-alpha\";",
                "Version version = Version.valueOf(v);",
                "Version version1 = Version.valueOf(v1);",
                "assertEquals(v, version.stringOf());",
                "assertEquals(v, Version.stringOf(version1));"
            ],
            "org.datagear.util.version.VersionTest_stringOfTest_h1Test1": [
                "String v = \"1.0.0-beta1\";",
                "String v1 = \"1.0.0-beta1\";",
                "Version version = Version.valueOf(v);",
                "Version version1 = Version.valueOf(v1);",
                "assertEquals(v, version.stringOf());",
                "assertEquals(v, Version.stringOf(version1));"
            ],
            "org.datagear.util.version.VersionTest_stringOfTest_h1Test2": [
                "String v = \"1.0.0-rc\";",
                "String v1 = \"1.0.0-rc\";",
                "Version version = Version.valueOf(v);",
                "Version version1 = Version.valueOf(v1);",
                "assertEquals(v, version.stringOf());",
                "assertEquals(v, Version.stringOf(version1));"
            ],
            "org.datagear.util.version.VersionTest_stringOfTest_h1Test3": [
                "String v = \"1.0.0-rc1\";",
                "String v1 = \"1.0.0-rc1\";",
                "Version version = Version.valueOf(v);",
                "Version version1 = Version.valueOf(v1);",
                "assertEquals(v, version.stringOf());",
                "assertEquals(v, Version.stringOf(version1));"
            ],
            "org.datagear.util.version.VersionTest_stringOfTest_h1Test4": [
                "String v = \"1.0.0-dev\";",
                "String v1 = \"1.0.0-dev\";",
                "Version version = Version.valueOf(v);",
                "Version version1 = Version.valueOf(v1);",
                "assertEquals(v, version.stringOf());",
                "assertEquals(v, Version.stringOf(version1));"
            ]
        },
        "processed_generated": {
            "org.datagear.util.version.VersionTest_stringOfTest_h1Test0": [
                "String v = \"1.0.0-alpha\";",
                "String v1 = \"1.0.0-alpha\";",
                "Version version1 = Version.valueOf(v1);"
            ],
            "org.datagear.util.version.VersionTest_stringOfTest_h1Test1": [
                "String v = \"1.0.0-beta1\";",
                "String v1 = \"1.0.0-beta1\";",
                "Version version1 = Version.valueOf(v1);"
            ],
            "org.datagear.util.version.VersionTest_stringOfTest_h1Test2": [
                "String v = \"1.0.0-rc\";",
                "String v1 = \"1.0.0-rc\";",
                "Version version1 = Version.valueOf(v1);"
            ],
            "org.datagear.util.version.VersionTest_stringOfTest_h1Test3": [
                "String v = \"1.0.0-rc1\";",
                "String v1 = \"1.0.0-rc1\";",
                "Version version1 = Version.valueOf(v1);"
            ],
            "org.datagear.util.version.VersionTest_stringOfTest_h1Test4": [
                "String v = \"1.0.0-dev\";",
                "String v1 = \"1.0.0-dev\";",
                "Version version1 = Version.valueOf(v1);"
            ]
        },
        "original_h": [
            "String v = \"1.0.0\";"
        ]
    },
    "org.ojalgo.data.transform.DiscreteFourierTransformTest.testNonPowerOf2()": {
        "generated_inputs_class": [],
        "generated_all_blocks": [],
        "selected": {},
        "processed_generated": {},
        "original_h": [
            "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(dimension, 1, Uniform.of(-2, 4));",
            "DiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(dimension);",
            "MatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);"
        ]
    },
    "org.opentripplanner.framework.model.CostTest.testHashCodeAndEquals()": {
        "generated_inputs_class": [
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h1Test0",
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h1Test1",
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h1Test2",
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h1Test3",
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "Cost subject = Cost.costOfSeconds(0);",
                "Cost other = Cost.costOfSeconds(1);"
            ],
            [
                "Cost subject = Cost.costOfSeconds(100);",
                "Cost other = Cost.costOfSeconds(101);"
            ],
            [
                "Cost subject = Cost.costOfSeconds(-1);",
                "Cost other = Cost.costOfSeconds(-2);"
            ],
            [
                "Cost subject = Cost.costOfSeconds(50);",
                "Cost other = Cost.costOfSeconds(51);"
            ],
            [
                "Cost subject = Cost.costOfSeconds(999);",
                "Cost other = Cost.costOfSeconds(1000);"
            ]
        ],
        "selected": {
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h1Test0": [
                "Cost subject = Cost.costOfSeconds(0);",
                "Cost other = Cost.costOfSeconds(1);"
            ],
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h1Test1": [
                "Cost subject = Cost.costOfSeconds(100);",
                "Cost other = Cost.costOfSeconds(101);"
            ],
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h1Test2": [
                "Cost subject = Cost.costOfSeconds(-1);",
                "Cost other = Cost.costOfSeconds(-2);"
            ],
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h1Test3": [
                "Cost subject = Cost.costOfSeconds(50);",
                "Cost other = Cost.costOfSeconds(51);"
            ],
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h1Test4": [
                "Cost subject = Cost.costOfSeconds(999);",
                "Cost other = Cost.costOfSeconds(1000);"
            ]
        },
        "processed_generated": {
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h1Test0": [
                "Cost subject = Cost.costOfSeconds(0);",
                "Cost other = Cost.costOfSeconds(1);"
            ],
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h1Test1": [
                "Cost subject = Cost.costOfSeconds(100);",
                "Cost other = Cost.costOfSeconds(101);"
            ],
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h1Test2": [
                "Cost subject = Cost.costOfSeconds(-1);",
                "Cost other = Cost.costOfSeconds(-2);"
            ],
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h1Test3": [
                "Cost subject = Cost.costOfSeconds(50);",
                "Cost other = Cost.costOfSeconds(51);"
            ],
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h1Test4": [
                "Cost subject = Cost.costOfSeconds(999);",
                "Cost other = Cost.costOfSeconds(1000);"
            ]
        },
        "original_h": [
            "Cost subject = Cost.costOfSeconds(10);",
            "Cost other = Cost.costOfSeconds(11);"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.collections.ListTest1.test1()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h1Test0",
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h1Test1",
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h1Test2",
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h1Test3",
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"456\";",
                "v01.add(id);",
                "String str2 = JSON.toJSONString(v01);",
                "Type listType = new TypeReference<List<String>>() {}.getType();"
            ],
            [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"789\";",
                "v01.add(id);",
                "String str2 = JSON.toJSONString(v01);",
                "Type listType = new TypeReference<List<String>>() {}.getType();"
            ],
            [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"012\";",
                "v01.add(id);",
                "String str2 = JSON.toJSONString(v01);",
                "Type listType = new TypeReference<List<String>>() {}.getType();"
            ],
            [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"\";",
                "v01.add(id);",
                "String str2 = JSON.toJSONString(v01);",
                "Type listType = new TypeReference<List<String>>() {}.getType();"
            ],
            [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"null\";",
                "v01.add(id);",
                "String str2 = JSON.toJSONString(v01);",
                "Type listType = new TypeReference<List<String>>() {}.getType();"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h1Test0": [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"456\";",
                "v01.add(id);",
                "String str2 = JSON.toJSONString(v01);",
                "Type listType = new TypeReference<List<String>>() {}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h1Test1": [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"789\";",
                "v01.add(id);",
                "String str2 = JSON.toJSONString(v01);",
                "Type listType = new TypeReference<List<String>>() {}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h1Test2": [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"012\";",
                "v01.add(id);",
                "String str2 = JSON.toJSONString(v01);",
                "Type listType = new TypeReference<List<String>>() {}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h1Test3": [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"\";",
                "v01.add(id);",
                "String str2 = JSON.toJSONString(v01);",
                "Type listType = new TypeReference<List<String>>() {}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h1Test4": [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"null\";",
                "v01.add(id);",
                "String str2 = JSON.toJSONString(v01);",
                "Type listType = new TypeReference<List<String>>() {}.getType();"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h1Test0": [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"456\";",
                "v01.add(id);",
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h1Test1": [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"789\";",
                "v01.add(id);",
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h1Test2": [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"012\";",
                "v01.add(id);",
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h1Test3": [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"\";",
                "v01.add(id);",
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h1Test4": [
                "List<String> v01 = new ArrayList<>();",
                "String id = \"null\";",
                "v01.add(id);",
                "String str2 = JSON.toJSONString(v01);"
            ]
        },
        "original_h": [
            "List<String> v01 = new ArrayList<>();",
            "String id = \"123\";",
            "v01.add(id);"
        ]
    },
    "org.threeten.extra.TestTemporalFields.test_HALF_YEARS()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h1Test0",
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h1Test1",
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h1Test2",
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h1Test3",
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "int year1 = 2023;",
                "int quarter1 = 1;",
                "int year2 = 2023;",
                "int quarter2 = 3;",
                "int amount = 1;"
            ],
            [
                "int year1 = 2023;",
                "int quarter1 = 2;",
                "int year2 = 2023;",
                "int quarter2 = 4;",
                "int amount = 1;"
            ],
            [
                "int year1 = 2023;",
                "int quarter1 = 3;",
                "int year2 = 2023;",
                "int quarter2 = 1;",
                "int amount = 1;"
            ],
            [
                "int year1 = 2023;",
                "int quarter1 = 4;",
                "int year2 = 2023;",
                "int quarter2 = 2;",
                "int amount = 1;"
            ],
            [
                "int year1 = 2023;",
                "int quarter1 = 5;",
                "int year2 = 2023;",
                "int quarter2 = 3;",
                "int amount = 1;"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h1Test0": [
                "int year1 = 2023;",
                "int quarter1 = 1;",
                "int year2 = 2023;",
                "int quarter2 = 3;",
                "int amount = 1;"
            ],
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h1Test1": [
                "int year1 = 2023;",
                "int quarter1 = 2;",
                "int year2 = 2023;",
                "int quarter2 = 4;",
                "int amount = 1;"
            ],
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h1Test2": [
                "int year1 = 2023;",
                "int quarter1 = 3;",
                "int year2 = 2023;",
                "int quarter2 = 1;",
                "int amount = 1;"
            ],
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h1Test3": [
                "int year1 = 2023;",
                "int quarter1 = 4;",
                "int year2 = 2023;",
                "int quarter2 = 2;",
                "int amount = 1;"
            ],
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h1Test4": [
                "int year1 = 2023;",
                "int quarter1 = 5;",
                "int year2 = 2023;",
                "int quarter2 = 3;",
                "int amount = 1;"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h1Test0": [
                "int year1 = 2023;",
                "int quarter1 = 1;",
                "int year2 = 2023;",
                "int quarter2 = 3;",
                "int amount = 1;"
            ],
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h1Test1": [
                "int year1 = 2023;",
                "int quarter1 = 2;",
                "int year2 = 2023;",
                "int quarter2 = 4;",
                "int amount = 1;"
            ],
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h1Test2": [
                "int year1 = 2023;",
                "int quarter1 = 3;",
                "int year2 = 2023;",
                "int quarter2 = 1;",
                "int amount = 1;"
            ],
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h1Test3": [
                "int year1 = 2023;",
                "int quarter1 = 4;",
                "int year2 = 2023;",
                "int quarter2 = 2;",
                "int amount = 1;"
            ],
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h1Test4": [
                "int year1 = 2023;",
                "int quarter1 = 5;",
                "int year2 = 2023;",
                "int quarter2 = 3;",
                "int amount = 1;"
            ]
        },
        "original_h": [
            "int year1 = 2023;",
            "int quarter1 = 4;",
            "int year2 = 2023;",
            "int quarter2 = 2;",
            "int amount = 1;"
        ]
    },
    "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest.testGetThreadPoolId()": {
        "generated_inputs_class": [
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetThreadPoolId_h1Test0",
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetThreadPoolId_h1Test1"
        ],
        "generated_all_blocks": [
            [
                "ExtensibleThreadPoolExecutor executor = new ExtensibleThreadPoolExecutor(\"test\", manager, 5, 5, 1000L, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(1), Thread::new, new ThreadPoolExecutor.AbortPolicy());",
                "ThreadPoolPluginSupport support = new TestSupport(executor.getThreadPoolId(), executor, manager);"
            ],
            [
                "ThreadPoolPluginSupport support = new TestSupport(executor.getThreadPoolId(), executor, manager);"
            ],
            [
                "ExtensibleThreadPoolExecutor executor = new ExtensibleThreadPoolExecutor(\"test\", manager, 5, 5, 1000L, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(1), Thread::new, new ThreadPoolExecutor.AbortPolicy());",
                "ThreadPoolPluginSupport support = new TestSupport(executor.getThreadPoolId(), executor, manager);"
            ],
            [
                "ThreadPoolPluginSupport support = new TestSupport(executor.getThreadPoolId(), executor, manager);"
            ],
            [
                "ExtensibleThreadPoolExecutor executor = new ExtensibleThreadPoolExecutor(\"test\", manager, 5, 5, 1000L, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(1), Thread::new, new ThreadPoolExecutor.AbortPolicy());",
                "ThreadPoolPluginSupport support = new TestSupport(executor.getThreadPoolId(), executor, manager);"
            ],
            [
                "ThreadPoolPluginSupport support = new TestSupport(executor.getThreadPoolId(), executor, manager);"
            ]
        ],
        "selected": {
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetThreadPoolId_h1Test0": [
                "ExtensibleThreadPoolExecutor executor = new ExtensibleThreadPoolExecutor(\"test\", manager, 5, 5, 1000L, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(1), Thread::new, new ThreadPoolExecutor.AbortPolicy());",
                "ThreadPoolPluginSupport support = new TestSupport(executor.getThreadPoolId(), executor, manager);"
            ],
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetThreadPoolId_h1Test1": [
                "ThreadPoolPluginSupport support = new TestSupport(executor.getThreadPoolId(), executor, manager);"
            ]
        },
        "processed_generated": {
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetThreadPoolId_h1Test0": [
                "ExtensibleThreadPoolExecutor executor = new ExtensibleThreadPoolExecutor(\"test\", manager, 5, 5, 1000L, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(1), Thread::new, new ThreadPoolExecutor.AbortPolicy());",
                "ThreadPoolPluginSupport support = new TestSupport(executor.getThreadPoolId(), executor, manager);"
            ],
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetThreadPoolId_h1Test1": [
                "ThreadPoolPluginSupport support = new TestSupport(executor.getThreadPoolId(), executor, manager);"
            ]
        },
        "original_h": [
            ""
        ]
    },
    "org.threeten.extra.TestYearHalf.test_from_TemporalAccessor_notLeapYear()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_notLeapYear_h1Test0",
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_notLeapYear_h1Test1"
        ],
        "generated_all_blocks": [
            [
                "int year = 2007;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            [
                "int year = 2007;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            [
                "int year = 2020;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            [
                "int year = 2020;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            [
                "int year = 2007;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            [
                "int year = 2007;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_notLeapYear_h1Test0": [
                "int year = 2007;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_notLeapYear_h1Test1": [
                "int year = 2020;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_notLeapYear_h1Test0": [
                "int year = 2007;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_notLeapYear_h1Test1": [
                "int year = 2020;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ]
        },
        "original_h": [
            "int year = 2007;",
            "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest.test()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h1Test0",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h1Test1"
        ],
        "generated_all_blocks": [
            [
                "JSONObject v01 = JSONObject.of(\"id\", 1001);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);"
            ],
            [
                "String str = JSON.toJSONString(v01);"
            ],
            [
                "JSONObject v01 = JSONObject.of(\"id\", 1001);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);"
            ],
            [
                "String str = JSON.toJSONString(v01);"
            ],
            [
                "JSONObject v01 = JSONObject.of(\"id\", 1001);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);"
            ],
            [
                "String str = JSON.toJSONString(v01);"
            ],
            [
                "JSONObject v01 = JSONObject.of(\"id\", 1001);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);"
            ],
            [
                "String str = JSON.toJSONString(v01);"
            ],
            [
                "JSONObject v01 = JSONObject.of(\"id\", 1001);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);"
            ],
            [
                "String str = JSON.toJSONString(v01);"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h1Test0": [
                "JSONObject v01 = JSONObject.of(\"id\", 1001);",
                "String str = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str, JSONObject.class);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h1Test1": [
                "String str = JSON.toJSONString(v01);"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h1Test0": [
                "JSONObject v01 = JSONObject.of(\"id\", 1001);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h1Test1": [
                ""
            ]
        },
        "original_h": [
            "JSONObject v01 = JSONObject.of(\"id\", 1001);"
        ]
    },
    "org.threeten.extra.TestYearHalf.test_from_TemporalAccessor_leapYear()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test0",
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test1",
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test2",
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test3",
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test4",
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test5",
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test6",
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test7",
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test8",
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test9"
        ],
        "generated_all_blocks": [
            [
                "int year = 2020;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            [
                "LocalDate date = LocalDate.of(2020, 7, 15);",
                "int year = 2020;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            [
                "int year = 2019;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            [
                "LocalDate date = LocalDate.of(2019, 12, 31);",
                "int year = 2019;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            [
                "int year = 2021;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            [
                "LocalDate date = LocalDate.of(2021, 1, 1);",
                "int year = 2021;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            [
                "int year = 2022;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            [
                "LocalDate date = LocalDate.of(2022, 6, 30);",
                "int year = 2022;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            [
                "int year = 2023;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            [
                "LocalDate date = LocalDate.of(2023, 7, 1);",
                "int year = 2023;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test0": [
                "int year = 2020;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test1": [
                "LocalDate date = LocalDate.of(2020, 7, 15);",
                "int year = 2020;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test2": [
                "int year = 2019;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test3": [
                "LocalDate date = LocalDate.of(2019, 12, 31);",
                "int year = 2019;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test4": [
                "int year = 2021;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test5": [
                "LocalDate date = LocalDate.of(2021, 1, 1);",
                "int year = 2021;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test6": [
                "int year = 2022;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test7": [
                "LocalDate date = LocalDate.of(2022, 6, 30);",
                "int year = 2022;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test8": [
                "int year = 2023;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test9": [
                "LocalDate date = LocalDate.of(2023, 7, 1);",
                "int year = 2023;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test0": [
                "int year = 2020;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test1": [
                "LocalDate date = LocalDate.of(2020, 7, 15);",
                "int year = 2020;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test2": [
                "int year = 2019;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test3": [
                "LocalDate date = LocalDate.of(2019, 12, 31);",
                "int year = 2019;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test4": [
                "int year = 2021;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test5": [
                "LocalDate date = LocalDate.of(2021, 1, 1);",
                "int year = 2021;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test6": [
                "int year = 2022;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test7": [
                "LocalDate date = LocalDate.of(2022, 6, 30);",
                "int year = 2022;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test8": [
                "int year = 2023;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h1Test9": [
                "LocalDate date = LocalDate.of(2023, 7, 1);",
                "int year = 2023;",
                "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
            ]
        },
        "original_h": [
            "int year = 2008;",
            "int expected = ((date.getMonthValue() - 1) / 6) + 1;"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest.test1()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h1Test0",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h1Test1",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h1Test2",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h1Test3",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h1Test4",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h1Test5",
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h1Test6"
        ],
        "generated_all_blocks": [
            [
                "String str2 = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str2, JSONObject.class);"
            ],
            [
                "String str2 = JSON.toJSONString(v01);"
            ],
            [
                "String str2 = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str2, JSONObject.class);"
            ],
            [
                "JSONObject v01 = JSONObject.of(\"id\", 1001, \"name\", \"John Doe\");",
                "String str2 = JSON.toJSONString(v01);"
            ],
            [
                "String str2 = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str2, JSONObject.class);"
            ],
            [
                "JSONObject v01 = JSONObject.of(\"id\", 1001, \"age\", 30);",
                "String str2 = JSON.toJSONString(v01);"
            ],
            [
                "String str2 = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str2, JSONObject.class);"
            ],
            [
                "JSONObject v01 = JSONObject.of(\"id\", 1001, \"address\", \"123 Main St\");",
                "String str2 = JSON.toJSONString(v01);"
            ],
            [
                "String str2 = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str2, JSONObject.class);"
            ],
            [
                "JSONObject v01 = JSONObject.of(\"id\", 1001, \"email\", \"john.doe@example.com\");",
                "String str2 = JSON.toJSONString(v01);"
            ],
            [
                "String str2 = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str2, JSONObject.class);"
            ],
            [
                "JSONObject v01 = JSONObject.of(\"id\", 1001, \"phone\", \"123-456-7890\");",
                "String str2 = JSON.toJSONString(v01);"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h1Test0": [
                "String str2 = JSON.toJSONString(v01);",
                "JSONObject v02 = JSON.parseObject(str2, JSONObject.class);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h1Test1": [
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h1Test2": [
                "JSONObject v01 = JSONObject.of(\"id\", 1001, \"name\", \"John Doe\");",
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h1Test3": [
                "JSONObject v01 = JSONObject.of(\"id\", 1001, \"age\", 30);",
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h1Test4": [
                "JSONObject v01 = JSONObject.of(\"id\", 1001, \"address\", \"123 Main St\");",
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h1Test5": [
                "JSONObject v01 = JSONObject.of(\"id\", 1001, \"email\", \"john.doe@example.com\");",
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h1Test6": [
                "JSONObject v01 = JSONObject.of(\"id\", 1001, \"phone\", \"123-456-7890\");",
                "String str2 = JSON.toJSONString(v01);"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h1Test0": [
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h1Test1": [
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h1Test2": [
                "JSONObject v01 = JSONObject.of(\"id\", 1001, \"name\", \"John Doe\");",
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h1Test3": [
                "JSONObject v01 = JSONObject.of(\"id\", 1001, \"age\", 30);",
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h1Test4": [
                "JSONObject v01 = JSONObject.of(\"id\", 1001, \"address\", \"123 Main St\");",
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h1Test5": [
                "JSONObject v01 = JSONObject.of(\"id\", 1001, \"email\", \"john.doe@example.com\");",
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h1Test6": [
                "JSONObject v01 = JSONObject.of(\"id\", 1001, \"phone\", \"123-456-7890\");",
                "String str2 = JSON.toJSONString(v01);"
            ]
        },
        "original_h": [
            "JSONObject v01 = JSONObject.of(\"id\", 1001);"
        ]
    },
    "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest.test_stripJobName_avoidDuplicatesWithLongDataSourceName()": {
        "generated_inputs_class": [
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h1Test0",
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h1Test1",
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h1Test2",
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h1Test3",
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z\";"
            ],
            [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z\";"
            ],
            [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_extra_data\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_extra_data\";"
            ],
            [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_extra_data\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_extra_data\";"
            ],
            [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_1234567890123456789012345678901234567890123456789012345678901234567890\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_1234567890123456789012345678901234567890123456789012345678901234567890\";"
            ],
            [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_1234567890123456789012345678901234567890123456789012345678901234567890\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_1234567890123456789012345678901234567890123456789012345678901234567890\";"
            ],
            [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_with_special_characters!@#$%^&*()\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_with_special_characters!@#$%^&*()\";"
            ],
            [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_with_special_characters!@#$%^&*()\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_with_special_characters!@#$%^&*()\";"
            ],
            [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_with_null_taskId\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_with_null_taskId\";"
            ],
            [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_with_null_taskId\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_with_null_taskId\";"
            ]
        ],
        "selected": {
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h1Test0": [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z\";"
            ],
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h1Test1": [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_extra_data\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_extra_data\";"
            ],
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h1Test2": [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_1234567890123456789012345678901234567890123456789012345678901234567890\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_1234567890123456789012345678901234567890123456789012345678901234567890\";"
            ],
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h1Test3": [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_with_special_characters!@#$%^&*()\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_with_special_characters!@#$%^&*()\";"
            ],
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h1Test4": [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_with_null_taskId\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_with_null_taskId\";"
            ]
        },
        "processed_generated": {
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h1Test0": [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z\";"
            ],
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h1Test1": [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_extra_data\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_extra_data\";"
            ],
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h1Test2": [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_1234567890123456789012345678901234567890123456789012345678901234567890\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_1234567890123456789012345678901234567890123456789012345678901234567890\";"
            ],
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h1Test3": [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_with_special_characters!@#$%^&*()\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_with_special_characters!@#$%^&*()\";"
            ],
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h1Test4": [
                "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_with_null_taskId\";",
                "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_with_null_taskId\";"
            ]
        },
        "original_h": [
            "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";",
            "String taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z\";"
        ]
    },
    "org.threeten.extra.TestYearHalf.test_parse_CharSequence()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test0",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test1",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test2",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test3",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test4",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test5",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test6",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test7",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test8",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test9"
        ],
        "generated_all_blocks": [
            [
                "int year = 2020;",
                "int half = 1;",
                "CharSequence text = \"2020-H1\";"
            ],
            [
                "int year = 2020;",
                "int half = 1;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            [
                "int year = 2020;",
                "int half = 2;",
                "CharSequence text = \"2020-H2\";"
            ],
            [
                "int year = 2020;",
                "int half = 2;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            [
                "int year = 2020;",
                "int half = 3;",
                "CharSequence text = \"2020-H3\";"
            ],
            [
                "int year = 2020;",
                "int half = 3;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            [
                "int year = 2020;",
                "int half = 0;",
                "CharSequence text = \"2020-H0\";"
            ],
            [
                "int year = 2020;",
                "int half = 0;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            [
                "int year = 2020;",
                "int half = -1;",
                "CharSequence text = \"2020-H-1\";"
            ],
            [
                "int year = 2020;",
                "int half = -1;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test0": [
                "int year = 2020;",
                "int half = 1;",
                "CharSequence text = \"2020-H1\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test1": [
                "int year = 2020;",
                "int half = 1;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test2": [
                "int year = 2020;",
                "int half = 2;",
                "CharSequence text = \"2020-H2\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test3": [
                "int year = 2020;",
                "int half = 2;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test4": [
                "int year = 2020;",
                "int half = 3;",
                "CharSequence text = \"2020-H3\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test5": [
                "int year = 2020;",
                "int half = 3;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test6": [
                "int year = 2020;",
                "int half = 0;",
                "CharSequence text = \"2020-H0\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test7": [
                "int year = 2020;",
                "int half = 0;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test8": [
                "int year = 2020;",
                "int half = -1;",
                "CharSequence text = \"2020-H-1\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test9": [
                "int year = 2020;",
                "int half = -1;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test0": [
                "int year = 2020;",
                "int half = 1;",
                "CharSequence text = \"2020-H1\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test1": [
                "int year = 2020;",
                "int half = 1;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test2": [
                "int year = 2020;",
                "int half = 2;",
                "CharSequence text = \"2020-H2\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test3": [
                "int year = 2020;",
                "int half = 2;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test4": [
                "int year = 2020;",
                "int half = 3;",
                "CharSequence text = \"2020-H3\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test5": [
                "int year = 2020;",
                "int half = 3;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test6": [
                "int year = 2020;",
                "int half = 0;",
                "CharSequence text = \"2020-H0\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test7": [
                "int year = 2020;",
                "int half = 0;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test8": [
                "int year = 2020;",
                "int half = -1;",
                "CharSequence text = \"2020-H-1\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h1Test9": [
                "int year = 2020;",
                "int half = -1;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ]
        },
        "original_h": [
            "int year = 2012;",
            "int half = 2;",
            "CharSequence text = \"2012-H2\";"
        ]
    },
    "org.threeten.extra.TestYearHalf.test_parse_CharSequence_caseInsensitive()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test0",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test1",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test2",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test3",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test4",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test5",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test6",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test7",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test8",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test9"
        ],
        "generated_all_blocks": [
            [
                "int year = 2020;",
                "int half = 2;",
                "CharSequence text = \"2020-h2\";"
            ],
            [
                "int year = 2020;",
                "int half = 2;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            [
                "int year = 1900;",
                "int half = 1;",
                "CharSequence text = \"1900-h1\";"
            ],
            [
                "int year = 1900;",
                "int half = 1;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            [
                "int year = 2000;",
                "int half = 2;",
                "CharSequence text = \"2000-h2\";"
            ],
            [
                "int year = 2000;",
                "int half = 2;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            [
                "int year = 2100;",
                "int half = 1;",
                "CharSequence text = \"2100-h1\";"
            ],
            [
                "int year = 2100;",
                "int half = 1;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            [
                "int year = 1800;",
                "int half = 2;",
                "CharSequence text = \"1800-h2\";"
            ],
            [
                "int year = 1800;",
                "int half = 2;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test0": [
                "int year = 2020;",
                "int half = 2;",
                "CharSequence text = \"2020-h2\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test1": [
                "int year = 2020;",
                "int half = 2;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test2": [
                "int year = 1900;",
                "int half = 1;",
                "CharSequence text = \"1900-h1\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test3": [
                "int year = 1900;",
                "int half = 1;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test4": [
                "int year = 2000;",
                "int half = 2;",
                "CharSequence text = \"2000-h2\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test5": [
                "int year = 2000;",
                "int half = 2;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test6": [
                "int year = 2100;",
                "int half = 1;",
                "CharSequence text = \"2100-h1\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test7": [
                "int year = 2100;",
                "int half = 1;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test8": [
                "int year = 1800;",
                "int half = 2;",
                "CharSequence text = \"1800-h2\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test9": [
                "int year = 1800;",
                "int half = 2;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test0": [
                "int year = 2020;",
                "int half = 2;",
                "CharSequence text = \"2020-h2\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test1": [
                "int year = 2020;",
                "int half = 2;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test2": [
                "int year = 1900;",
                "int half = 1;",
                "CharSequence text = \"1900-h1\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test3": [
                "int year = 1900;",
                "int half = 1;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test4": [
                "int year = 2000;",
                "int half = 2;",
                "CharSequence text = \"2000-h2\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test5": [
                "int year = 2000;",
                "int half = 2;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test6": [
                "int year = 2100;",
                "int half = 1;",
                "CharSequence text = \"2100-h1\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test7": [
                "int year = 2100;",
                "int half = 1;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test8": [
                "int year = 1800;",
                "int half = 2;",
                "CharSequence text = \"1800-h2\";"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h1Test9": [
                "int year = 1800;",
                "int half = 2;",
                "CharSequence text = YearHalf.of(year, half).toString();"
            ]
        },
        "original_h": [
            "int year = 2012;",
            "int half = 1;",
            "CharSequence text = \"2012-h1\";"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h1Test0",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h1Test1",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h1Test2",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h1Test3",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "Map<String, String> v01 = new HashMap<>();",
                "v01.put(\"456\", \"def\");",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, String>>() {",
                "}.getType();"
            ],
            [
                "Map<String, String> v01 = new HashMap<>();",
                "v01.put(\"123\", \"abc\");",
                "v01.put(\"456\", \"def\");",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, String>>() {",
                "}.getType();"
            ],
            [
                "Map<String, String> v01 = new HashMap<>();",
                "v01.put(\"123\", \"abc\");",
                "v01.put(\"456\", \"def\");",
                "v01.put(\"789\", \"ghi\");",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, String>>() {",
                "}.getType();"
            ],
            [
                "Map<String, String> v01 = new HashMap<>();",
                "v01.put(\"123\", \"abc\");",
                "v01.put(\"456\", \"def\");",
                "v01.put(\"789\", \"ghi\");",
                "v01.put(\"012\", \"jkl\");",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, String>>() {",
                "}.getType();"
            ],
            [
                "Map<String, String> v01 = new HashMap<>();",
                "v01.put(\"123\", \"abc\");",
                "v01.put(\"456\", \"def\");",
                "v01.put(\"789\", \"ghi\");",
                "v01.put(\"012\", \"jkl\");",
                "v01.put(\"345\", \"mno\");",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, String>>() {",
                "}.getType();"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h1Test0": [
                "Map<String, String> v01 = new HashMap<>();",
                "v01.put(\"456\", \"def\");",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, String>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h1Test1": [
                "Map<String, String> v01 = new HashMap<>();",
                "v01.put(\"123\", \"abc\");",
                "v01.put(\"456\", \"def\");",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, String>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h1Test2": [
                "Map<String, String> v01 = new HashMap<>();",
                "v01.put(\"123\", \"abc\");",
                "v01.put(\"456\", \"def\");",
                "v01.put(\"789\", \"ghi\");",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, String>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h1Test3": [
                "Map<String, String> v01 = new HashMap<>();",
                "v01.put(\"123\", \"abc\");",
                "v01.put(\"456\", \"def\");",
                "v01.put(\"789\", \"ghi\");",
                "v01.put(\"012\", \"jkl\");",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, String>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h1Test4": [
                "Map<String, String> v01 = new HashMap<>();",
                "v01.put(\"123\", \"abc\");",
                "v01.put(\"456\", \"def\");",
                "v01.put(\"789\", \"ghi\");",
                "v01.put(\"012\", \"jkl\");",
                "v01.put(\"345\", \"mno\");",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, String>>() {",
                "}.getType();"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h1Test0": [
                "Map<String, String> v01 = new HashMap<>();",
                "v01.put(\"456\", \"def\");",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, String>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h1Test1": [
                "Map<String, String> v01 = new HashMap<>();",
                "v01.put(\"123\", \"abc\");",
                "v01.put(\"456\", \"def\");",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, String>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h1Test2": [
                "Map<String, String> v01 = new HashMap<>();",
                "v01.put(\"123\", \"abc\");",
                "v01.put(\"456\", \"def\");",
                "v01.put(\"789\", \"ghi\");",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, String>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h1Test3": [
                "Map<String, String> v01 = new HashMap<>();",
                "v01.put(\"123\", \"abc\");",
                "v01.put(\"456\", \"def\");",
                "v01.put(\"789\", \"ghi\");",
                "v01.put(\"012\", \"jkl\");",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, String>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h1Test4": [
                "Map<String, String> v01 = new HashMap<>();",
                "v01.put(\"123\", \"abc\");",
                "v01.put(\"456\", \"def\");",
                "v01.put(\"789\", \"ghi\");",
                "v01.put(\"012\", \"jkl\");",
                "v01.put(\"345\", \"mno\");",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, String>>() {",
                "}.getType();"
            ]
        },
        "original_h": [
            "Map<String, String> v01 = new HashMap<>();",
            "v01.put(\"123\", \"abc\");"
        ]
    },
    "org.threeten.extra.TestYearHalf.test_with_TemporalAdjuster_Year()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test0",
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test1",
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test2",
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test3",
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test4",
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test5",
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test6",
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test7",
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test8",
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test9"
        ],
        "generated_all_blocks": [
            [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2021;",
                "int year3 = 2021;",
                "int half3 = 1;"
            ],
            [
                "int year1 = 2020;",
                "int half1 = 2;",
                "int year2 = 2022;",
                "int year3 = 2022;",
                "int half3 = 2;"
            ],
            [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2023;",
                "int year3 = 2023;",
                "int half3 = 1;"
            ],
            [
                "int year1 = 2020;",
                "int half1 = 2;",
                "int year2 = 2024;",
                "int year3 = 2024;",
                "int half3 = 2;"
            ],
            [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2025;",
                "int year3 = 2025;",
                "int half3 = 1;"
            ],
            [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2021;",
                "int year3 = year1;",
                "int half3 = half1;"
            ],
            [
                "int year1 = 2020;",
                "int half1 = 2;",
                "int year2 = 2022;",
                "int year3 = year1;",
                "int half3 = half1;"
            ],
            [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2023;",
                "int year3 = year1;",
                "int half3 = half1;"
            ],
            [
                "int year1 = 2020;",
                "int half1 = 2;",
                "int year2 = 2024;",
                "int year3 = year1;",
                "int half3 = half1;"
            ],
            [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2025;",
                "int year3 = year1;",
                "int half3 = half1;"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test0": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2021;",
                "int year3 = 2021;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test1": [
                "int year1 = 2020;",
                "int half1 = 2;",
                "int year2 = 2022;",
                "int year3 = 2022;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test2": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2023;",
                "int year3 = 2023;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test3": [
                "int year1 = 2020;",
                "int half1 = 2;",
                "int year2 = 2024;",
                "int year3 = 2024;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test4": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2025;",
                "int year3 = 2025;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test5": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2021;",
                "int year3 = year1;",
                "int half3 = half1;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test6": [
                "int year1 = 2020;",
                "int half1 = 2;",
                "int year2 = 2022;",
                "int year3 = year1;",
                "int half3 = half1;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test7": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2023;",
                "int year3 = year1;",
                "int half3 = half1;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test8": [
                "int year1 = 2020;",
                "int half1 = 2;",
                "int year2 = 2024;",
                "int year3 = year1;",
                "int half3 = half1;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test9": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2025;",
                "int year3 = year1;",
                "int half3 = half1;"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test0": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2021;",
                "int year3 = 2021;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test1": [
                "int year1 = 2020;",
                "int half1 = 2;",
                "int year2 = 2022;",
                "int year3 = 2022;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test2": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2023;",
                "int year3 = 2023;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test3": [
                "int year1 = 2020;",
                "int half1 = 2;",
                "int year2 = 2024;",
                "int year3 = 2024;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test4": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2025;",
                "int year3 = 2025;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test5": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2021;",
                "int year3 = year1;",
                "int half3 = half1;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test6": [
                "int year1 = 2020;",
                "int half1 = 2;",
                "int year2 = 2022;",
                "int year3 = year1;",
                "int half3 = half1;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test7": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2023;",
                "int year3 = year1;",
                "int half3 = half1;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test8": [
                "int year1 = 2020;",
                "int half1 = 2;",
                "int year2 = 2024;",
                "int year3 = year1;",
                "int half3 = half1;"
            ],
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test9": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2025;",
                "int year3 = year1;",
                "int half3 = half1;"
            ]
        },
        "original_h": [
            "int year1 = 2007;",
            "int half1 = 2;",
            "int year2 = 2012;",
            "int year3 = 2012;",
            "int half3 = 2;"
        ]
    },
    "org.threeten.extra.TestYearHalf.test_withYear()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test0",
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test1",
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test2",
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test3",
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test4",
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test5",
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test6",
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test7",
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test8",
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test9"
        ],
        "generated_all_blocks": [
            [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2030;",
                "int year3 = 2030;",
                "int half3 = 1;"
            ],
            [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2030;",
                "int year3 = YearHalf.of(year1, half1).withYear(year2).getYear();",
                "int half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();"
            ],
            [
                "int year1 = 1900;",
                "int half1 = 2;",
                "int year2 = 2000;",
                "int year3 = 2000;",
                "int half3 = 2;"
            ],
            [
                "int year1 = 1900;",
                "int half1 = 2;",
                "int year2 = 2000;",
                "int year3 = YearHalf.of(year1, half1).withYear(year2).getYear();",
                "int half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();"
            ],
            [
                "int year1 = 2100;",
                "int half1 = 1;",
                "int year2 = 2200;",
                "int year3 = 2200;",
                "int half3 = 1;"
            ],
            [
                "int year1 = 2100;",
                "int half1 = 1;",
                "int year2 = 2200;",
                "int year3 = YearHalf.of(year1, half1).withYear(year2).getYear();",
                "int half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();"
            ],
            [
                "int year1 = 1800;",
                "int half1 = 2;",
                "int year2 = 1900;",
                "int year3 = 1900;",
                "int half3 = 2;"
            ],
            [
                "int year1 = 1800;",
                "int half1 = 2;",
                "int year2 = 1900;",
                "int year3 = YearHalf.of(year1, half1).withYear(year2).getYear();",
                "int half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();"
            ],
            [
                "int year1 = 1600;",
                "int half1 = 1;",
                "int year2 = 1700;",
                "int year3 = 1700;",
                "int half3 = 1;"
            ],
            [
                "int year1 = 1600;",
                "int half1 = 1;",
                "int year2 = 1700;",
                "int year3 = YearHalf.of(year1, half1).withYear(year2).getYear();",
                "int half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test0": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2030;",
                "int year3 = 2030;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test1": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2030;",
                "int year3 = YearHalf.of(year1, half1).withYear(year2).getYear();",
                "int half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test2": [
                "int year1 = 1900;",
                "int half1 = 2;",
                "int year2 = 2000;",
                "int year3 = 2000;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test3": [
                "int year1 = 1900;",
                "int half1 = 2;",
                "int year2 = 2000;",
                "int year3 = YearHalf.of(year1, half1).withYear(year2).getYear();",
                "int half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test4": [
                "int year1 = 2100;",
                "int half1 = 1;",
                "int year2 = 2200;",
                "int year3 = 2200;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test5": [
                "int year1 = 2100;",
                "int half1 = 1;",
                "int year2 = 2200;",
                "int year3 = YearHalf.of(year1, half1).withYear(year2).getYear();",
                "int half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test6": [
                "int year1 = 1800;",
                "int half1 = 2;",
                "int year2 = 1900;",
                "int year3 = 1900;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test7": [
                "int year1 = 1800;",
                "int half1 = 2;",
                "int year2 = 1900;",
                "int year3 = YearHalf.of(year1, half1).withYear(year2).getYear();",
                "int half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test8": [
                "int year1 = 1600;",
                "int half1 = 1;",
                "int year2 = 1700;",
                "int year3 = 1700;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test9": [
                "int year1 = 1600;",
                "int half1 = 1;",
                "int year2 = 1700;",
                "int year3 = YearHalf.of(year1, half1).withYear(year2).getYear();",
                "int half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test0": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2030;",
                "int year3 = 2030;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test1": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int year2 = 2030;",
                "int year3 = YearHalf.of(year1, half1).withYear(year2).getYear();",
                "int half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test2": [
                "int year1 = 1900;",
                "int half1 = 2;",
                "int year2 = 2000;",
                "int year3 = 2000;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test3": [
                "int year1 = 1900;",
                "int half1 = 2;",
                "int year2 = 2000;",
                "int year3 = YearHalf.of(year1, half1).withYear(year2).getYear();",
                "int half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test4": [
                "int year1 = 2100;",
                "int half1 = 1;",
                "int year2 = 2200;",
                "int year3 = 2200;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test5": [
                "int year1 = 2100;",
                "int half1 = 1;",
                "int year2 = 2200;",
                "int year3 = YearHalf.of(year1, half1).withYear(year2).getYear();",
                "int half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test6": [
                "int year1 = 1800;",
                "int half1 = 2;",
                "int year2 = 1900;",
                "int year3 = 1900;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test7": [
                "int year1 = 1800;",
                "int half1 = 2;",
                "int year2 = 1900;",
                "int year3 = YearHalf.of(year1, half1).withYear(year2).getYear();",
                "int half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test8": [
                "int year1 = 1600;",
                "int half1 = 1;",
                "int year2 = 1700;",
                "int year3 = 1700;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_withYear_h1Test9": [
                "int year1 = 1600;",
                "int half1 = 1;",
                "int year2 = 1700;",
                "int year3 = YearHalf.of(year1, half1).withYear(year2).getYear();",
                "int half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();"
            ]
        },
        "original_h": [
            "int year1 = 2007;",
            "int half1 = 2;",
            "int year2 = 2012;",
            "int year3 = 2012;",
            "int half3 = 2;"
        ]
    },
    "org.apache.druid.storage.azure.AzureClientFactoryTest.test_blobServiceClientBuilder_useCachedClient()": {
        "generated_inputs_class": [
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h1Test0",
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h1Test1",
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h1Test2",
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h1Test3",
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "Integer retryCount1 = 0;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 0;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = 1;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 1;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = 10;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 10;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = 100;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 100;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = null;",
                "String ACCOUNT1 = \"newAccount\";",
                "Integer retryCount2 = null;",
                "String ACCOUNT2 = \"newAccount\";"
            ],
            [
                "Integer retryCount1 = 0;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 0;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = 1;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 1;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = 10;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 10;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = 100;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 100;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = null;",
                "String ACCOUNT1 = \"newAccount\";",
                "Integer retryCount2 = null;",
                "String ACCOUNT2 = \"newAccount\";"
            ]
        ],
        "selected": {
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h1Test0": [
                "Integer retryCount1 = 0;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 0;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h1Test1": [
                "Integer retryCount1 = 1;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 1;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h1Test2": [
                "Integer retryCount1 = 10;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 10;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h1Test3": [
                "Integer retryCount1 = 100;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 100;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h1Test4": [
                "Integer retryCount1 = null;",
                "String ACCOUNT1 = \"newAccount\";",
                "Integer retryCount2 = null;",
                "String ACCOUNT2 = \"newAccount\";"
            ]
        },
        "processed_generated": {
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h1Test0": [
                "Integer retryCount1 = 0;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 0;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h1Test1": [
                "Integer retryCount1 = 1;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 1;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h1Test2": [
                "Integer retryCount1 = 10;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 10;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h1Test3": [
                "Integer retryCount1 = 100;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 100;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h1Test4": [
                "Integer retryCount1 = null;",
                "String ACCOUNT1 = \"newAccount\";",
                "Integer retryCount2 = null;",
                "String ACCOUNT2 = \"newAccount\";"
            ]
        },
        "original_h": [
            "Integer retryCount1 = null;",
            "String ACCOUNT1 = \"account\";",
            "Integer retryCount2 = null;",
            "String ACCOUNT2 = \"account\";"
        ]
    },
    "org.threeten.extra.TestYearHalf.test_withHalf_int()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h1Test0",
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h1Test1",
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h1Test2",
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h1Test3",
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int half2 = 2;",
                "int year3 = 2020;",
                "int half3 = 2;"
            ],
            [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int half2 = 2;",
                "int year3 = 2020;",
                "int half3 = 2;"
            ],
            [
                "int year1 = 2020;",
                "int half1 = 2;",
                "int half2 = 1;",
                "int year3 = 2020;",
                "int half3 = 1;"
            ],
            [
                "int year1 = 2020;",
                "int half1 = 2;",
                "int half2 = 1;",
                "int year3 = 2020;",
                "int half3 = 1;"
            ],
            [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int half2 = 1;",
                "int year3 = 2020;",
                "int half3 = 1;"
            ],
            [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int half2 = 1;",
                "int year3 = 2020;",
                "int half3 = 1;"
            ],
            [
                "int year1 = 2020;",
                "int half1 = 2;",
                "int half2 = 2;",
                "int year3 = 2020;",
                "int half3 = 2;"
            ],
            [
                "int year1 = 2020;",
                "int half1 = 2;",
                "int half2 = 2;",
                "int year3 = 2020;",
                "int half3 = 2;"
            ],
            [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int half2 = 3;",
                "int year3 = 2020;",
                "int half3 = 3;"
            ],
            [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int half2 = 3;",
                "int year3 = 2020;",
                "int half3 = 3;"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h1Test0": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int half2 = 2;",
                "int year3 = 2020;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h1Test1": [
                "int year1 = 2020;",
                "int half1 = 2;",
                "int half2 = 1;",
                "int year3 = 2020;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h1Test2": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int half2 = 1;",
                "int year3 = 2020;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h1Test3": [
                "int year1 = 2020;",
                "int half1 = 2;",
                "int half2 = 2;",
                "int year3 = 2020;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h1Test4": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int half2 = 3;",
                "int year3 = 2020;",
                "int half3 = 3;"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h1Test0": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int half2 = 2;",
                "int year3 = 2020;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h1Test1": [
                "int year1 = 2020;",
                "int half1 = 2;",
                "int half2 = 1;",
                "int year3 = 2020;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h1Test2": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int half2 = 1;",
                "int year3 = 2020;",
                "int half3 = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h1Test3": [
                "int year1 = 2020;",
                "int half1 = 2;",
                "int half2 = 2;",
                "int year3 = 2020;",
                "int half3 = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h1Test4": [
                "int year1 = 2020;",
                "int half1 = 1;",
                "int half2 = 3;",
                "int year3 = 2020;",
                "int half3 = 3;"
            ]
        },
        "original_h": [
            "int year1 = 2007;",
            "int half1 = 2;",
            "int half2 = 1;",
            "int year3 = 2007;",
            "int half3 = 1;"
        ]
    },
    "org.openscience.cdk.AssociationTest.testGetAtomAt()": {
        "generated_inputs_class": [
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test0",
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test1",
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test2",
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test3",
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test4",
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test5",
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test6",
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test7",
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test8",
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test9"
        ],
        "generated_all_blocks": [
            [
                "Atom c = new Atom(\"C\");",
                "Atom o = new Atom(\"O\");",
                "Atom n = new Atom(\"N\");",
                "Association association = new Association(c, o);",
                "int position = 1;",
                "Association association2 = new Association(o, n);",
                "int position2 = 1;"
            ],
            [
                "int position = 1;",
                "Atom n = new Atom(\"N\");",
                "association.setAtomAt(n, position);",
                "Association association2 = new Association(o, n);"
            ],
            [
                "Atom c = new Atom(\"C\");",
                "Atom o = new Atom(\"O\");",
                "Atom n = new Atom(\"N\");",
                "Association association = new Association(c, o);",
                "int position = 2;",
                "Association association2 = new Association(o, n);",
                "int position2 = 2;"
            ],
            [
                "int position = 2;",
                "Atom n = new Atom(\"N\");",
                "association.setAtomAt(n, position);",
                "Association association2 = new Association(o, n);"
            ],
            [
                "Atom c = new Atom(\"C\");",
                "Atom o = new Atom(\"O\");",
                "Atom n = new Atom(\"N\");",
                "Association association = new Association(c, o);",
                "int position = -1;",
                "Association association2 = new Association(c, o);",
                "int position2 = 0;"
            ],
            [
                "int position = -1;",
                "Atom n = new Atom(\"N\");",
                "association.setAtomAt(n, position);",
                "Association association2 = new Association(c, o);"
            ],
            [
                "Atom c = new Atom(\"C\");",
                "Atom o = new Atom(\"O\");",
                "Atom n = new Atom(\"N\");",
                "Association association = new Association(c, o);",
                "int position = 3;",
                "Association association2 = new Association(c, o);",
                "int position2 = 0;"
            ],
            [
                "int position = 3;",
                "Atom n = new Atom(\"N\");",
                "association.setAtomAt(n, position);",
                "Association association2 = new Association(c, o);"
            ],
            [
                "Atom c = new Atom(\"C\");",
                "Atom o = new Atom(\"O\");",
                "Atom n = new Atom(\"N\");",
                "Association association = new Association(c, o);",
                "int position = 0;",
                "Association association2 = new Association(n, o);",
                "int position2 = 0;"
            ],
            [
                "int position = 0;",
                "Atom n = new Atom(\"N\");",
                "association.setAtomAt(n, position);",
                "Association association2 = new Association(n, o);"
            ]
        ],
        "selected": {
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test0": [
                "Atom c = new Atom(\"C\");",
                "Atom o = new Atom(\"O\");",
                "Atom n = new Atom(\"N\");",
                "Association association = new Association(c, o);",
                "int position = 1;",
                "Association association2 = new Association(o, n);",
                "int position2 = 1;"
            ],
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test1": [
                "int position = 1;",
                "Atom n = new Atom(\"N\");",
                "association.setAtomAt(n, position);",
                "Association association2 = new Association(o, n);"
            ],
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test2": [
                "Atom c = new Atom(\"C\");",
                "Atom o = new Atom(\"O\");",
                "Atom n = new Atom(\"N\");",
                "Association association = new Association(c, o);",
                "int position = 2;",
                "Association association2 = new Association(o, n);",
                "int position2 = 2;"
            ],
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test3": [
                "int position = 2;",
                "Atom n = new Atom(\"N\");",
                "association.setAtomAt(n, position);",
                "Association association2 = new Association(o, n);"
            ],
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test4": [
                "Atom c = new Atom(\"C\");",
                "Atom o = new Atom(\"O\");",
                "Atom n = new Atom(\"N\");",
                "Association association = new Association(c, o);",
                "int position = -1;",
                "Association association2 = new Association(c, o);",
                "int position2 = 0;"
            ],
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test5": [
                "int position = -1;",
                "Atom n = new Atom(\"N\");",
                "association.setAtomAt(n, position);",
                "Association association2 = new Association(c, o);"
            ],
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test6": [
                "Atom c = new Atom(\"C\");",
                "Atom o = new Atom(\"O\");",
                "Atom n = new Atom(\"N\");",
                "Association association = new Association(c, o);",
                "int position = 3;",
                "Association association2 = new Association(c, o);",
                "int position2 = 0;"
            ],
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test7": [
                "int position = 3;",
                "Atom n = new Atom(\"N\");",
                "association.setAtomAt(n, position);",
                "Association association2 = new Association(c, o);"
            ],
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test8": [
                "Atom c = new Atom(\"C\");",
                "Atom o = new Atom(\"O\");",
                "Atom n = new Atom(\"N\");",
                "Association association = new Association(c, o);",
                "int position = 0;",
                "Association association2 = new Association(n, o);",
                "int position2 = 0;"
            ],
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test9": [
                "int position = 0;",
                "Atom n = new Atom(\"N\");",
                "association.setAtomAt(n, position);",
                "Association association2 = new Association(n, o);"
            ]
        },
        "processed_generated": {
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test0": [
                "Atom c = new Atom(\"C\");",
                "Atom o = new Atom(\"O\");",
                "Atom n = new Atom(\"N\");",
                "Association association = new Association(c, o);",
                "int position = 1;",
                "Association association2 = new Association(o, n);",
                "int position2 = 1;"
            ],
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test1": [
                "int position = 1;",
                "Atom n = new Atom(\"N\");",
                "association.setAtomAt(n, position);",
                "Association association2 = new Association(o, n);"
            ],
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test2": [
                "Atom c = new Atom(\"C\");",
                "Atom o = new Atom(\"O\");",
                "Atom n = new Atom(\"N\");",
                "Association association = new Association(c, o);",
                "int position = 2;",
                "Association association2 = new Association(o, n);",
                "int position2 = 2;"
            ],
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test3": [
                "int position = 2;",
                "Atom n = new Atom(\"N\");",
                "association.setAtomAt(n, position);",
                "Association association2 = new Association(o, n);"
            ],
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test4": [
                "Atom c = new Atom(\"C\");",
                "Atom o = new Atom(\"O\");",
                "Atom n = new Atom(\"N\");",
                "Association association = new Association(c, o);",
                "int position = -1;",
                "Association association2 = new Association(c, o);",
                "int position2 = 0;"
            ],
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test5": [
                "int position = -1;",
                "Atom n = new Atom(\"N\");",
                "association.setAtomAt(n, position);",
                "Association association2 = new Association(c, o);"
            ],
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test6": [
                "Atom c = new Atom(\"C\");",
                "Atom o = new Atom(\"O\");",
                "Atom n = new Atom(\"N\");",
                "Association association = new Association(c, o);",
                "int position = 3;",
                "Association association2 = new Association(c, o);",
                "int position2 = 0;"
            ],
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test7": [
                "int position = 3;",
                "Atom n = new Atom(\"N\");",
                "association.setAtomAt(n, position);",
                "Association association2 = new Association(c, o);"
            ],
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test8": [
                "Atom c = new Atom(\"C\");",
                "Atom o = new Atom(\"O\");",
                "Atom n = new Atom(\"N\");",
                "Association association = new Association(c, o);",
                "int position = 0;",
                "Association association2 = new Association(n, o);",
                "int position2 = 0;"
            ],
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h1Test9": [
                "int position = 0;",
                "Atom n = new Atom(\"N\");",
                "association.setAtomAt(n, position);",
                "Association association2 = new Association(n, o);"
            ]
        },
        "original_h": [
            "Atom c = new Atom(\"C\");",
            "Atom o = new Atom(\"O\");",
            "Atom n = new Atom(\"N\");",
            "Association association = new Association(c, o);",
            "int position = 0;",
            "Association association2 = new Association(n, o);",
            "int position2 = 0;"
        ]
    },
    "org.apache.druid.storage.azure.AzureClientFactoryTest.test_blobServiceClientBuilder_useNewClientForDifferentRetryCount()": {
        "generated_inputs_class": [
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h1Test0",
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h1Test1",
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h1Test2",
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h1Test3",
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "Integer retryCount1 = 0;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 0;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = 0;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 0;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = 10;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 10;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = 10;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 10;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = -1;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = -1;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = -1;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = -1;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = Integer.MAX_VALUE;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = Integer.MAX_VALUE;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = Integer.MAX_VALUE;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = Integer.MAX_VALUE;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = null;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = null;",
                "String ACCOUNT2 = \"account\";"
            ],
            [
                "Integer retryCount1 = null;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = null;",
                "String ACCOUNT2 = \"account\";"
            ]
        ],
        "selected": {
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h1Test0": [
                "Integer retryCount1 = 0;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 0;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h1Test1": [
                "Integer retryCount1 = 10;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 10;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h1Test2": [
                "Integer retryCount1 = -1;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = -1;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h1Test3": [
                "Integer retryCount1 = Integer.MAX_VALUE;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = Integer.MAX_VALUE;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h1Test4": [
                "Integer retryCount1 = null;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = null;",
                "String ACCOUNT2 = \"account\";"
            ]
        },
        "processed_generated": {
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h1Test0": [
                "Integer retryCount1 = 0;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 0;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h1Test1": [
                "Integer retryCount1 = 10;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = 10;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h1Test2": [
                "Integer retryCount1 = -1;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = -1;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h1Test3": [
                "Integer retryCount1 = Integer.MAX_VALUE;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = Integer.MAX_VALUE;",
                "String ACCOUNT2 = \"account\";"
            ],
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h1Test4": [
                "Integer retryCount1 = null;",
                "String ACCOUNT1 = \"account\";",
                "Integer retryCount2 = null;",
                "String ACCOUNT2 = \"account\";"
            ]
        },
        "original_h": [
            "Integer retryCount1 = null;",
            "String ACCOUNT1 = \"account\";",
            "Integer retryCount2 = 1;",
            "String ACCOUNT2 = \"account\";"
        ]
    },
    "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase.returnsMuleLoggerContextForArtifactClassLoaderChild()": {
        "generated_inputs_class": [
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h1Test0",
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h1Test1",
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h1Test2",
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h1Test3",
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "RegionClassLoader regionClassLoader = null;",
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = false;",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = false;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            [
                "RegionClassLoader regionClassLoader = this.regionClassLoader;",
                "String fqcn = \"\";",
                "boolean currentContext = true;",
                "String fqcn2 = \"\";",
                "boolean currentContext2 = true;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            [
                "RegionClassLoader regionClassLoader = this.regionClassLoader;",
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = true;",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = true;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            [
                "RegionClassLoader regionClassLoader = new RegionClassLoader();",
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = false;",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = false;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            [
                "RegionClassLoader regionClassLoader = this.regionClassLoader;",
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = false;",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = false;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ]
        ],
        "selected": {
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h1Test0": [
                "RegionClassLoader regionClassLoader = null;",
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = false;",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = false;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h1Test1": [
                "RegionClassLoader regionClassLoader = this.regionClassLoader;",
                "String fqcn = \"\";",
                "boolean currentContext = true;",
                "String fqcn2 = \"\";",
                "boolean currentContext2 = true;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h1Test2": [
                "RegionClassLoader regionClassLoader = this.regionClassLoader;",
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = true;",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = true;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h1Test3": [
                "RegionClassLoader regionClassLoader = new RegionClassLoader();",
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = false;",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = false;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h1Test4": [
                "RegionClassLoader regionClassLoader = this.regionClassLoader;",
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = false;",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = false;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ]
        },
        "processed_generated": {
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h1Test0": [
                "RegionClassLoader regionClassLoader = null;",
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = false;",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = false;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h1Test1": [
                "RegionClassLoader regionClassLoader = this.regionClassLoader;",
                "String fqcn = \"\";",
                "boolean currentContext = true;",
                "String fqcn2 = \"\";",
                "boolean currentContext2 = true;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h1Test2": [
                "RegionClassLoader regionClassLoader = this.regionClassLoader;",
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = true;",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = true;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h1Test3": [
                "RegionClassLoader regionClassLoader = new RegionClassLoader();",
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = false;",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = false;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h1Test4": [
                "RegionClassLoader regionClassLoader = this.regionClassLoader;",
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = false;",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = false;",
                "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
            ]
        },
        "original_h": [
            "RegionClassLoader regionClassLoader = this.regionClassLoader;",
            "String fqcn = \"\";",
            "boolean currentContext = true;",
            "String fqcn2 = \"\";",
            "boolean currentContext2 = true;",
            "ClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);"
        ]
    },
    "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase.returnsMuleLoggerContextForInternalArtifactClassLoader()": {
        "generated_inputs_class": [
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test0",
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test1",
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test2",
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test3",
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test4",
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test5",
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test6",
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test7",
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test8",
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test9"
        ],
        "generated_all_blocks": [
            [
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = true;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            [
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = fqcn;",
                "boolean currentContext2 = currentContext;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            [
                "String fqcn = \"com.example.NonExistentClass\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = \"com.example.NonExistentClass\";",
                "boolean currentContext2 = true;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            [
                "String fqcn = \"com.example.NonExistentClass\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = fqcn;",
                "boolean currentContext2 = currentContext;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            [
                "String fqcn = \"\";",
                "boolean currentContext = false;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = \"\";",
                "boolean currentContext2 = false;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            [
                "String fqcn = \"\";",
                "boolean currentContext = false;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = fqcn;",
                "boolean currentContext2 = currentContext;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            [
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = false;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = false;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            [
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = false;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = fqcn;",
                "boolean currentContext2 = currentContext;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            [
                "String fqcn = \"\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = null;",
                "String fqcn2 = \"\";",
                "boolean currentContext2 = true;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            [
                "String fqcn = \"\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = null;",
                "String fqcn2 = fqcn;",
                "boolean currentContext2 = currentContext;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ]
        ],
        "selected": {
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test0": [
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = true;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test1": [
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = fqcn;",
                "boolean currentContext2 = currentContext;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test2": [
                "String fqcn = \"com.example.NonExistentClass\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = \"com.example.NonExistentClass\";",
                "boolean currentContext2 = true;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test3": [
                "String fqcn = \"com.example.NonExistentClass\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = fqcn;",
                "boolean currentContext2 = currentContext;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test4": [
                "String fqcn = \"\";",
                "boolean currentContext = false;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = \"\";",
                "boolean currentContext2 = false;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test5": [
                "String fqcn = \"\";",
                "boolean currentContext = false;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = fqcn;",
                "boolean currentContext2 = currentContext;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test6": [
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = false;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = false;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test7": [
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = false;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = fqcn;",
                "boolean currentContext2 = currentContext;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test8": [
                "String fqcn = \"\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = null;",
                "String fqcn2 = \"\";",
                "boolean currentContext2 = true;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test9": [
                "String fqcn = \"\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = null;",
                "String fqcn2 = fqcn;",
                "boolean currentContext2 = currentContext;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ]
        },
        "processed_generated": {
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test0": [
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = true;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test1": [
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = fqcn;",
                "boolean currentContext2 = currentContext;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test2": [
                "String fqcn = \"com.example.NonExistentClass\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = \"com.example.NonExistentClass\";",
                "boolean currentContext2 = true;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test3": [
                "String fqcn = \"com.example.NonExistentClass\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = fqcn;",
                "boolean currentContext2 = currentContext;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test4": [
                "String fqcn = \"\";",
                "boolean currentContext = false;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = \"\";",
                "boolean currentContext2 = false;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test5": [
                "String fqcn = \"\";",
                "boolean currentContext = false;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = fqcn;",
                "boolean currentContext2 = currentContext;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test6": [
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = false;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = \"com.example.MyClass\";",
                "boolean currentContext2 = false;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test7": [
                "String fqcn = \"com.example.MyClass\";",
                "boolean currentContext = false;",
                "ClassLoader systemLoader = this.getClass().getClassLoader();",
                "String fqcn2 = fqcn;",
                "boolean currentContext2 = currentContext;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test8": [
                "String fqcn = \"\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = null;",
                "String fqcn2 = \"\";",
                "boolean currentContext2 = true;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ],
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test9": [
                "String fqcn = \"\";",
                "boolean currentContext = true;",
                "ClassLoader systemLoader = null;",
                "String fqcn2 = fqcn;",
                "boolean currentContext2 = currentContext;",
                "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));",
                "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
            ]
        },
        "original_h": [
            "String fqcn = \"\";",
            "boolean currentContext = true;",
            "ClassLoader systemLoader = this.getClass().getClassLoader();",
            "String fqcn2 = \"\";",
            "boolean currentContext2 = true;",
            "ArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));",
            "ClassLoader serviceLoader = serviceClassLoader.getClassLoader();"
        ]
    },
    "org.tsugi.util.Base64DoubleUrlEncodeSafeTest.testAllNonSurrogateCodePoints()": {
        "generated_inputs_class": [
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h1Test0"
        ],
        "generated_all_blocks": [
            [
                "StringBuffer sb = new StringBuffer();",
                "String input = sb.toString();",
                "String encoded2 = \"AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4_QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJj\";"
            ]
        ],
        "selected": {
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h1Test0": [
                "StringBuffer sb = new StringBuffer();",
                "String input = sb.toString();",
                "String encoded2 = \"AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4_QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJj\";"
            ]
        },
        "processed_generated": {
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h1Test0": [
                "StringBuffer sb = new StringBuffer();",
                "String input = sb.toString();",
                "String encoded2 = \"AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4_QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJj\";"
            ]
        },
        "original_h": [
            "StringBuffer sb = new StringBuffer();",
            "String input = sb.toString();",
            "String encoded2 = \"AQIDBAUGBwgJCgsMDQ4PEBESExQVFhcYGRobHB0eHyAhIiMkJSYnKCkqKywtLi8wMTIzNDU2Nzg5Ojs8PT4_QEFCQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJj\";"
        ]
    },
    "org.ojalgo.data.transform.DiscreteFourierTransformTest.testShiftAndRevertEven()": {
        "generated_inputs_class": [
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h1Test0",
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h1Test1",
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h1Test2",
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h1Test3",
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "Primitive64Store original = Primitive64Store.FACTORY.make(3, 3);",
                "original.set(0, 0, 1);",
                "original.set(0, 1, 2);",
                "original.set(0, 2, 3);",
                "original.set(1, 0, 4);",
                "original.set(1, 1, 5);",
                "original.set(1, 2, 6);",
                "original.set(2, 0, 7);",
                "original.set(2, 1, 8);",
                "original.set(2, 2, 9);"
            ],
            [
                "Primitive64Store original = Primitive64Store.FACTORY.make(4, 4);",
                "original.set(0, 0, 1);",
                "original.set(0, 1, 2);",
                "original.set(0, 2, 3);",
                "original.set(0, 3, 4);",
                "original.set(1, 0, 5);",
                "original.set(1, 1, 6);",
                "original.set(1, 2, 7);",
                "original.set(1, 3, 8);",
                "original.set(2, 0, 9);",
                "original.set(2, 1, 10);",
                "original.set(2, 2, 11);",
                "original.set(2, 3, 12);",
                "original.set(3, 0, 13);",
                "original.set(3, 1, 14);",
                "original.set(3, 2, 15);",
                "original.set(3, 3, 16);"
            ],
            [
                "Primitive64Store original = Primitive64Store.FACTORY.make(5, 5);",
                "original.set(0, 0, 1);",
                "original.set(0, 1, 2);",
                "original.set(0, 2, 3);",
                "original.set(0, 3, 4);",
                "original.set(0, 4, 5);",
                "original.set(1, 0, 6);",
                "original.set(1, 1, 7);",
                "original.set(1, 2, 8);",
                "original.set(1, 3, 9);",
                "original.set(1, 4, 10);",
                "original.set(2, 0, 11);",
                "original.set(2, 1, 12);",
                "original.set(2, 2, 13);",
                "original.set(2, 3, 14);",
                "original.set(2, 4, 15);",
                "original.set(3, 0, 16);",
                "original.set(3, 1, 17);",
                "original.set(3, 2, 18);",
                "original.set(3, 3, 19);",
                "original.set(3, 4, 20);",
                "original.set(4, 0, 21);",
                "original.set(4, 1, 22);",
                "original.set(4, 2, 23);",
                "original.set(4, 3, 24);",
                "original.set(4, 4, 25);"
            ],
            [
                "Primitive64Store original = Primitive64Store.FACTORY.make(1, 1);",
                "original.set(0, 0, 1);"
            ],
            [
                "Primitive64Store original = Primitive64Store.FACTORY.make(2, 2);",
                "original.set(0, 0, 1);",
                "original.set(0, 1, 2);",
                "original.set(1, 0, 3);",
                "original.set(1, 1, 4);"
            ]
        ],
        "selected": {
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h1Test0": [
                "Primitive64Store original = Primitive64Store.FACTORY.make(3, 3);",
                "original.set(0, 0, 1);",
                "original.set(0, 1, 2);",
                "original.set(0, 2, 3);",
                "original.set(1, 0, 4);",
                "original.set(1, 1, 5);",
                "original.set(1, 2, 6);",
                "original.set(2, 0, 7);",
                "original.set(2, 1, 8);",
                "original.set(2, 2, 9);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h1Test1": [
                "Primitive64Store original = Primitive64Store.FACTORY.make(4, 4);",
                "original.set(0, 0, 1);",
                "original.set(0, 1, 2);",
                "original.set(0, 2, 3);",
                "original.set(0, 3, 4);",
                "original.set(1, 0, 5);",
                "original.set(1, 1, 6);",
                "original.set(1, 2, 7);",
                "original.set(1, 3, 8);",
                "original.set(2, 0, 9);",
                "original.set(2, 1, 10);",
                "original.set(2, 2, 11);",
                "original.set(2, 3, 12);",
                "original.set(3, 0, 13);",
                "original.set(3, 1, 14);",
                "original.set(3, 2, 15);",
                "original.set(3, 3, 16);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h1Test2": [
                "Primitive64Store original = Primitive64Store.FACTORY.make(5, 5);",
                "original.set(0, 0, 1);",
                "original.set(0, 1, 2);",
                "original.set(0, 2, 3);",
                "original.set(0, 3, 4);",
                "original.set(0, 4, 5);",
                "original.set(1, 0, 6);",
                "original.set(1, 1, 7);",
                "original.set(1, 2, 8);",
                "original.set(1, 3, 9);",
                "original.set(1, 4, 10);",
                "original.set(2, 0, 11);",
                "original.set(2, 1, 12);",
                "original.set(2, 2, 13);",
                "original.set(2, 3, 14);",
                "original.set(2, 4, 15);",
                "original.set(3, 0, 16);",
                "original.set(3, 1, 17);",
                "original.set(3, 2, 18);",
                "original.set(3, 3, 19);",
                "original.set(3, 4, 20);",
                "original.set(4, 0, 21);",
                "original.set(4, 1, 22);",
                "original.set(4, 2, 23);",
                "original.set(4, 3, 24);",
                "original.set(4, 4, 25);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h1Test3": [
                "Primitive64Store original = Primitive64Store.FACTORY.make(1, 1);",
                "original.set(0, 0, 1);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h1Test4": [
                "Primitive64Store original = Primitive64Store.FACTORY.make(2, 2);",
                "original.set(0, 0, 1);",
                "original.set(0, 1, 2);",
                "original.set(1, 0, 3);",
                "original.set(1, 1, 4);"
            ]
        },
        "processed_generated": {
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h1Test0": [
                "Primitive64Store original = Primitive64Store.FACTORY.make(3, 3);",
                "original.set(0, 0, 1);",
                "original.set(0, 1, 2);",
                "original.set(0, 2, 3);",
                "original.set(1, 0, 4);",
                "original.set(1, 1, 5);",
                "original.set(1, 2, 6);",
                "original.set(2, 0, 7);",
                "original.set(2, 1, 8);",
                "original.set(2, 2, 9);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h1Test1": [
                "Primitive64Store original = Primitive64Store.FACTORY.make(4, 4);",
                "original.set(0, 0, 1);",
                "original.set(0, 1, 2);",
                "original.set(0, 2, 3);",
                "original.set(0, 3, 4);",
                "original.set(1, 0, 5);",
                "original.set(1, 1, 6);",
                "original.set(1, 2, 7);",
                "original.set(1, 3, 8);",
                "original.set(2, 0, 9);",
                "original.set(2, 1, 10);",
                "original.set(2, 2, 11);",
                "original.set(2, 3, 12);",
                "original.set(3, 0, 13);",
                "original.set(3, 1, 14);",
                "original.set(3, 2, 15);",
                "original.set(3, 3, 16);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h1Test2": [
                "Primitive64Store original = Primitive64Store.FACTORY.make(5, 5);",
                "original.set(0, 0, 1);",
                "original.set(0, 1, 2);",
                "original.set(0, 2, 3);",
                "original.set(0, 3, 4);",
                "original.set(0, 4, 5);",
                "original.set(1, 0, 6);",
                "original.set(1, 1, 7);",
                "original.set(1, 2, 8);",
                "original.set(1, 3, 9);",
                "original.set(1, 4, 10);",
                "original.set(2, 0, 11);",
                "original.set(2, 1, 12);",
                "original.set(2, 2, 13);",
                "original.set(2, 3, 14);",
                "original.set(2, 4, 15);",
                "original.set(3, 0, 16);",
                "original.set(3, 1, 17);",
                "original.set(3, 2, 18);",
                "original.set(3, 3, 19);",
                "original.set(3, 4, 20);",
                "original.set(4, 0, 21);",
                "original.set(4, 1, 22);",
                "original.set(4, 2, 23);",
                "original.set(4, 3, 24);",
                "original.set(4, 4, 25);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h1Test3": [
                "Primitive64Store original = Primitive64Store.FACTORY.make(1, 1);",
                "original.set(0, 0, 1);"
            ],
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h1Test4": [
                "Primitive64Store original = Primitive64Store.FACTORY.make(2, 2);",
                "original.set(0, 0, 1);",
                "original.set(0, 1, 2);",
                "original.set(1, 0, 3);",
                "original.set(1, 1, 4);"
            ]
        },
        "original_h": [
            "Primitive64Store original = Primitive64Store.FACTORY.make(r, c);",
            "original.set(i, j, i + j);"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest.test()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h1Test0"
        ],
        "generated_all_blocks": [
            [
                "JSONArray v01 = new JSONArray();",
                "String str2 = JSON.toJSONString(v01);",
                "String str = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);"
            ],
            [
                "JSONArray v01 = new JSONArray();",
                "String str2 = JSON.toJSONString(v01);",
                "String str = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);"
            ],
            [
                "JSONArray v01 = new JSONArray();",
                "String str2 = JSON.toJSONString(v01);",
                "String str = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);"
            ],
            [
                "JSONArray v01 = new JSONArray();",
                "String str2 = JSON.toJSONString(v01);",
                "String str = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);"
            ],
            [
                "JSONArray v01 = new JSONArray();",
                "String str2 = JSON.toJSONString(v01);",
                "String str = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h1Test0": [
                "JSONArray v01 = new JSONArray();",
                "String str2 = JSON.toJSONString(v01);",
                "String str = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h1Test0": [
                "JSONArray v01 = new JSONArray();",
                "String str2 = JSON.toJSONString(v01);"
            ]
        },
        "original_h": [
            "JSONArray v01 = new JSONArray();"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest.test1()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h1Test0",
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h1Test1",
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h1Test2",
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h1Test3",
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "JSONArray v01 = new JSONArray();",
                "v01.add(\"Hello\");",
                "v01.add(123);",
                "v01.add(true);",
                "String str2 = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);",
                "assertEquals(v01, v02);"
            ],
            [
                "JSONArray v01 = new JSONArray();",
                "v01.add(null);",
                "v01.add(new JSONObject());",
                "v01.add(new JSONArray());",
                "String str2 = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);",
                "assertEquals(v01, v02);"
            ],
            [
                "JSONArray v01 = new JSONArray();",
                "v01.add(new Date());",
                "v01.add(new BigDecimal(\"123.456\"));",
                "v01.add(new BigInteger(\"12345678901234567890\"));",
                "String str2 = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);",
                "assertEquals(v01, v02);"
            ],
            [
                "JSONArray v01 = new JSONArray();",
                "v01.add(Arrays.asList(\"Apple\", \"Banana\", \"Cherry\"));",
                "v01.add(Map.of(\"Name\", \"John\", \"Age\", 30));",
                "String str2 = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);",
                "assertEquals(v01, v02);"
            ],
            [
                "JSONArray v01 = new JSONArray();",
                "v01.add(JSONObject.parseObject(\"{\\\"Name\\\":\\\"John\\\", \\\"Age\\\":30}\"));",
                "v01.add(JSONArray.parseArray(\"[1, 2, 3, 4, 5]\"));",
                "String str2 = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);",
                "assertEquals(v01, v02);"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h1Test0": [
                "JSONArray v01 = new JSONArray();",
                "v01.add(\"Hello\");",
                "v01.add(123);",
                "v01.add(true);",
                "String str2 = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h1Test1": [
                "JSONArray v01 = new JSONArray();",
                "v01.add(null);",
                "v01.add(new JSONObject());",
                "v01.add(new JSONArray());",
                "String str2 = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h1Test2": [
                "JSONArray v01 = new JSONArray();",
                "v01.add(new Date());",
                "v01.add(new BigDecimal(\"123.456\"));",
                "v01.add(new BigInteger(\"12345678901234567890\"));",
                "String str2 = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h1Test3": [
                "JSONArray v01 = new JSONArray();",
                "v01.add(Arrays.asList(\"Apple\", \"Banana\", \"Cherry\"));",
                "v01.add(Map.of(\"Name\", \"John\", \"Age\", 30));",
                "String str2 = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);",
                "assertEquals(v01, v02);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h1Test4": [
                "JSONArray v01 = new JSONArray();",
                "v01.add(JSONObject.parseObject(\"{\\\"Name\\\":\\\"John\\\", \\\"Age\\\":30}\"));",
                "v01.add(JSONArray.parseArray(\"[1, 2, 3, 4, 5]\"));",
                "String str2 = JSON.toJSONString(v01);",
                "JSONArray v02 = JSON.parseObject(str2, JSONArray.class);",
                "assertEquals(v01, v02);"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h1Test0": [
                "JSONArray v01 = new JSONArray();",
                "v01.add(\"Hello\");",
                "v01.add(123);",
                "v01.add(true);",
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h1Test1": [
                "JSONArray v01 = new JSONArray();",
                "v01.add(null);",
                "v01.add(new JSONObject());",
                "v01.add(new JSONArray());",
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h1Test2": [
                "JSONArray v01 = new JSONArray();",
                "v01.add(new Date());",
                "v01.add(new BigDecimal(\"123.456\"));",
                "v01.add(new BigInteger(\"12345678901234567890\"));",
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h1Test3": [
                "JSONArray v01 = new JSONArray();",
                "v01.add(Arrays.asList(\"Apple\", \"Banana\", \"Cherry\"));",
                "v01.add(Map.of(\"Name\", \"John\", \"Age\", 30));",
                "String str2 = JSON.toJSONString(v01);"
            ],
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h1Test4": [
                "JSONArray v01 = new JSONArray();",
                "v01.add(JSONObject.parseObject(\"{\\\"Name\\\":\\\"John\\\", \\\"Age\\\":30}\"));",
                "v01.add(JSONArray.parseArray(\"[1, 2, 3, 4, 5]\"));",
                "String str2 = JSON.toJSONString(v01);"
            ]
        },
        "original_h": [
            "JSONArray v01 = new JSONArray();"
        ]
    },
    "io.arex.inst.runtime.serializer.SerializerTest.testNestedList()": {
        "generated_inputs_class": [
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedList_h1Test0"
        ],
        "generated_all_blocks": [
            [
                "List<List<Object>> list = new ArrayList<>();",
                "list.add(null);",
                "list.add(new ArrayList<>());",
                "list.add(nestedList1);",
                "list.add(nestedList2);",
                "String serializer = \"jackson\";",
                "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestList1-1\\\",\\\"nestList1-2\\\"]A@R#E$X[\\\"nestList2-1\\\",\\\"nestList2-2\\\"]\";",
                "String typeName2 = \"java.util.ArrayList-java.util.ArrayList,java.lang.String,java.lang.String\";"
            ]
        ],
        "selected": {
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedList_h1Test0": [
                "List<List<Object>> list = new ArrayList<>();",
                "list.add(null);",
                "list.add(new ArrayList<>());",
                "list.add(nestedList1);",
                "list.add(nestedList2);",
                "String serializer = \"jackson\";",
                "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestList1-1\\\",\\\"nestList1-2\\\"]A@R#E$X[\\\"nestList2-1\\\",\\\"nestList2-2\\\"]\";",
                "String typeName2 = \"java.util.ArrayList-java.util.ArrayList,java.lang.String,java.lang.String\";"
            ]
        },
        "processed_generated": {
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedList_h1Test0": [
                "List<List<Object>> list = new ArrayList<>();",
                "list.add(null);",
                "list.add(new ArrayList<>());",
                "list.add(nestedList1);",
                "list.add(nestedList2);",
                "String serializer = \"jackson\";",
                "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestList1-1\\\",\\\"nestList1-2\\\"]A@R#E$X[\\\"nestList2-1\\\",\\\"nestList2-2\\\"]\";",
                "String typeName2 = \"java.util.ArrayList-java.util.ArrayList,java.lang.String,java.lang.String\";"
            ]
        },
        "original_h": [
            "List<List<Object>> list = new ArrayList<>();",
            "list.add(null);",
            "list.add(new ArrayList<>());",
            "list.add(nestedList1);",
            "list.add(nestedList2);",
            "String serializer = \"jackson\";",
            "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestList1-1\\\",\\\"nestList1-2\\\"]A@R#E$X[\\\"nestList2-1\\\",\\\"nestList2-2\\\"]\";",
            "String typeName2 = \"java.util.ArrayList-java.util.ArrayList,java.lang.String,java.lang.String\";"
        ]
    },
    "com.thealgorithms.datastructures.crdt.LWWElementSetTest.testCompareDifferentSets()": {
        "generated_inputs_class": [
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h1Test0"
        ],
        "generated_all_blocks": [
            [
                "Element element2 = new Element(\"key2\", 2, bias);"
            ],
            [
                "Element element2 = new Element(\"key2\", 2, bias);"
            ]
        ],
        "selected": {
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h1Test0": [
                "Element element2 = new Element(\"key2\", 2, bias);"
            ]
        },
        "processed_generated": {
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h1Test0": [
                "Element element2 = new Element(\"key2\", 2, bias);"
            ]
        },
        "original_h": [
            "Element element2 = new Element(\"key2\", 2, bias);"
        ]
    },
    "com.thealgorithms.datastructures.crdt.ORSetTest.testCompareDifferentSets()": {
        "generated_inputs_class": [
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h1Test0",
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h1Test1",
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h1Test2",
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h1Test3",
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "String element2 = \"C\";"
            ],
            [
                "String element2 = \"C\";"
            ],
            [
                "String element2 = \"D\";"
            ],
            [
                "String element2 = \"D\";"
            ],
            [
                "String element2 = \"E\";"
            ],
            [
                "String element2 = \"E\";"
            ],
            [
                "String element2 = \"F\";"
            ],
            [
                "String element2 = \"F\";"
            ],
            [
                "String element2 = \"G\";"
            ],
            [
                "String element2 = \"G\";"
            ]
        ],
        "selected": {
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h1Test0": [
                "String element2 = \"C\";"
            ],
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h1Test1": [
                "String element2 = \"D\";"
            ],
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h1Test2": [
                "String element2 = \"E\";"
            ],
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h1Test3": [
                "String element2 = \"F\";"
            ],
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h1Test4": [
                "String element2 = \"G\";"
            ]
        },
        "processed_generated": {
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h1Test0": [
                "String element2 = \"C\";"
            ],
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h1Test1": [
                "String element2 = \"D\";"
            ],
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h1Test2": [
                "String element2 = \"E\";"
            ],
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h1Test3": [
                "String element2 = \"F\";"
            ],
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h1Test4": [
                "String element2 = \"G\";"
            ]
        },
        "original_h": [
            "String element2 = \"B\";"
        ]
    },
    "io.arex.inst.runtime.serializer.SerializerTest.testNestedSet()": {
        "generated_inputs_class": [],
        "generated_all_blocks": [],
        "selected": {},
        "processed_generated": {},
        "original_h": [
            "Set<Set<Object>> set = new HashSet<>();",
            "set.add(null);",
            "set.add(new HashSet<>());",
            "set.add(null);",
            "set.add(new HashSet<>());",
            "set.add(nestedSet1);",
            "set.add(nestedSet2);",
            "String serializer = \"jackson\";",
            "String json2 = \"nullA@R#E$X[]A@R#E$X[\\\"nestedSet1-1\\\",\\\"nestedSet1-2\\\"]A@R#E$X[\\\"nestedSet2-1\\\",\\\"nestedSet2-2\\\"]\";",
            "String typeName2 = \"java.util.HashSet-java.util.HashSet,java.lang.String,java.lang.String\";"
        ]
    },
    "org.opentripplanner.framework.token.FieldDefinitionTest.testEqualsAndHashCode()": {
        "generated_inputs_class": [
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h1Test0",
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h1Test1",
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h1Test2",
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h1Test3",
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "FieldDefinition subject = new FieldDefinition(\"\", TokenType.STRING);",
                "FieldDefinition other3 = new FieldDefinition(\"\", TokenType.STRING).deprecate();"
            ],
            [
                "FieldDefinition subject = new FieldDefinition(\"foo\", null);",
                "FieldDefinition other3 = new FieldDefinition(\"foo\", null).deprecate();"
            ],
            [
                "FieldDefinition subject = new FieldDefinition(\"foo\", TokenType.STRING).deprecate();",
                "FieldDefinition other3 = new FieldDefinition(\"foo\", TokenType.STRING).deprecate();"
            ],
            [
                "FieldDefinition subject = new FieldDefinition(\"foo\", TokenType.STRING).setDescription(\"This is a description\");",
                "FieldDefinition other3 = new FieldDefinition(\"foo\", TokenType.STRING).setDescription(\"This is a description\").deprecate();"
            ],
            [
                "FieldDefinition subject = new FieldDefinition(\"foo\", TokenType.STRING).setExample(\"example\");",
                "FieldDefinition other3 = new FieldDefinition(\"foo\", TokenType.STRING).setExample(\"example\").deprecate();"
            ]
        ],
        "selected": {
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h1Test0": [
                "FieldDefinition subject = new FieldDefinition(\"\", TokenType.STRING);",
                "FieldDefinition other3 = new FieldDefinition(\"\", TokenType.STRING).deprecate();"
            ],
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h1Test1": [
                "FieldDefinition subject = new FieldDefinition(\"foo\", null);",
                "FieldDefinition other3 = new FieldDefinition(\"foo\", null).deprecate();"
            ],
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h1Test2": [
                "FieldDefinition subject = new FieldDefinition(\"foo\", TokenType.STRING).deprecate();",
                "FieldDefinition other3 = new FieldDefinition(\"foo\", TokenType.STRING).deprecate();"
            ],
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h1Test3": [
                "FieldDefinition subject = new FieldDefinition(\"foo\", TokenType.STRING).setDescription(\"This is a description\");",
                "FieldDefinition other3 = new FieldDefinition(\"foo\", TokenType.STRING).setDescription(\"This is a description\").deprecate();"
            ],
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h1Test4": [
                "FieldDefinition subject = new FieldDefinition(\"foo\", TokenType.STRING).setExample(\"example\");",
                "FieldDefinition other3 = new FieldDefinition(\"foo\", TokenType.STRING).setExample(\"example\").deprecate();"
            ]
        },
        "processed_generated": {
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h1Test0": [
                "FieldDefinition subject = new FieldDefinition(\"\", TokenType.STRING);",
                "FieldDefinition other3 = new FieldDefinition(\"\", TokenType.STRING).deprecate();"
            ],
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h1Test1": [
                "FieldDefinition subject = new FieldDefinition(\"foo\", null);",
                "FieldDefinition other3 = new FieldDefinition(\"foo\", null).deprecate();"
            ],
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h1Test2": [
                "FieldDefinition subject = new FieldDefinition(\"foo\", TokenType.STRING).deprecate();",
                "FieldDefinition other3 = new FieldDefinition(\"foo\", TokenType.STRING).deprecate();"
            ],
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h1Test3": [
                "FieldDefinition subject = new FieldDefinition(\"foo\", TokenType.STRING).setDescription(\"This is a description\");",
                "FieldDefinition other3 = new FieldDefinition(\"foo\", TokenType.STRING).setDescription(\"This is a description\").deprecate();"
            ],
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h1Test4": [
                "FieldDefinition subject = new FieldDefinition(\"foo\", TokenType.STRING).setExample(\"example\");",
                "FieldDefinition other3 = new FieldDefinition(\"foo\", TokenType.STRING).setExample(\"example\").deprecate();"
            ]
        },
        "original_h": [
            "FieldDefinition subject = new FieldDefinition(\"foo\", TokenType.STRING);",
            "FieldDefinition other3 = new FieldDefinition(\"foo\", TokenType.STRING).deprecate();"
        ]
    },
    "org.apache.druid.audit.AuditInfoTest.testAuditInfoEquality()": {
        "generated_inputs_class": [
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h1Test0",
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h1Test1",
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h1Test2",
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h1Test3",
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"192.168.1.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"192.168.1.1\");"
            ],
            [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"192.168.1.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"192.168.1.1\");"
            ],
            [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"10.0.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"10.0.0.1\");"
            ],
            [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"10.0.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"10.0.0.1\");"
            ],
            [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"172.16.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"172.16.0.1\");"
            ],
            [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"172.16.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"172.16.0.1\");"
            ],
            [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"192.168.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"192.168.0.1\");"
            ],
            [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"192.168.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"192.168.0.1\");"
            ],
            [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"8.8.8.8\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"8.8.8.8\");"
            ],
            [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"8.8.8.8\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"8.8.8.8\");"
            ]
        ],
        "selected": {
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h1Test0": [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"192.168.1.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"192.168.1.1\");"
            ],
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h1Test1": [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"10.0.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"10.0.0.1\");"
            ],
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h1Test2": [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"172.16.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"172.16.0.1\");"
            ],
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h1Test3": [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"192.168.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"192.168.0.1\");"
            ],
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h1Test4": [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"8.8.8.8\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"8.8.8.8\");"
            ]
        },
        "processed_generated": {
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h1Test0": [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"192.168.1.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"192.168.1.1\");"
            ],
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h1Test1": [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"10.0.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"10.0.0.1\");"
            ],
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h1Test2": [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"172.16.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"172.16.0.1\");"
            ],
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h1Test3": [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"192.168.0.1\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"192.168.0.1\");"
            ],
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h1Test4": [
                "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"8.8.8.8\");",
                "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"8.8.8.8\");"
            ]
        },
        "original_h": [
            "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"127.0.0.1\");",
            "AuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"127.0.0.1\");"
        ]
    },
    "com.vladmihalcea.hpjp.util.CryptoUtilsTest.testPerformance()": {
        "generated_inputs_class": [
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h1Test0",
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h1Test1",
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h1Test2",
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h1Test3",
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "Long value = 0L;",
                "String message = encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            [
                "Long value = Long.MAX_VALUE;",
                "String message = encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            [
                "Long value = -1L;",
                "String message = encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            [
                "Long value = null;",
                "String message = encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            [
                "Long value = 100_000L;",
                "String message = encrypt(value);",
                "Class<?> clazz = Long.class;"
            ]
        ],
        "selected": {
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h1Test0": [
                "Long value = 0L;",
                "String message = encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h1Test1": [
                "Long value = Long.MAX_VALUE;",
                "String message = encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h1Test2": [
                "Long value = -1L;",
                "String message = encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h1Test3": [
                "Long value = null;",
                "String message = encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h1Test4": [
                "Long value = 100_000L;",
                "String message = encrypt(value);",
                "Class<?> clazz = Long.class;"
            ]
        },
        "processed_generated": {
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h1Test0": [
                "Long value = 0L;",
                "String message = encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h1Test1": [
                "Long value = Long.MAX_VALUE;",
                "String message = encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h1Test2": [
                "Long value = -1L;",
                "String message = encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h1Test3": [
                "Long value = null;",
                "String message = encrypt(value);",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h1Test4": [
                "Long value = 100_000L;",
                "String message = encrypt(value);",
                "Class<?> clazz = Long.class;"
            ]
        },
        "original_h": [
            "Long value = random.nextLong(100_000L);",
            "String message = encryptedValue;",
            "Class<?> clazz = Long.class;"
        ]
    },
    "com.networknt.schema.JsonNodePathTest.equalsEquals()": {
        "generated_inputs_class": [
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h1Test0",
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h1Test1",
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h1Test2",
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h1Test3",
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h1Test4",
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h1Test5",
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h1Test6"
        ],
        "generated_all_blocks": [
            [
                "String token1 = \"b\";",
                "String token2 = \"b\";"
            ],
            [
                "JsonNodePath a1 = root.append(token1);",
                "JsonNodePath a2 = root.append(token2);"
            ],
            [
                "String token1 = \"1\";",
                "String token2 = \"1\";"
            ],
            [
                "JsonNodePath a1 = root.append(Integer.parseInt(token1));",
                "JsonNodePath a2 = root.append(Integer.parseInt(token2));"
            ],
            [
                "String token1 = \"\";",
                "String token2 = \"\";"
            ],
            [
                "JsonNodePath a1 = root.append(token1);",
                "JsonNodePath a2 = root.append(token2);"
            ],
            [
                "String token1 = \"a123\";",
                "String token2 = \"a123\";"
            ],
            [
                "JsonNodePath a1 = root.append(token1);",
                "JsonNodePath a2 = root.append(token2);"
            ],
            [
                "String token1 = \"a!@#\";",
                "String token2 = \"a!@#\";"
            ],
            [
                "JsonNodePath a1 = root.append(token1);",
                "JsonNodePath a2 = root.append(token2);"
            ]
        ],
        "selected": {
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h1Test0": [
                "String token1 = \"b\";",
                "String token2 = \"b\";"
            ],
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h1Test1": [
                "JsonNodePath a1 = root.append(token1);",
                "JsonNodePath a2 = root.append(token2);"
            ],
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h1Test2": [
                "String token1 = \"1\";",
                "String token2 = \"1\";"
            ],
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h1Test3": [
                "JsonNodePath a1 = root.append(Integer.parseInt(token1));",
                "JsonNodePath a2 = root.append(Integer.parseInt(token2));"
            ],
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h1Test4": [
                "String token1 = \"\";",
                "String token2 = \"\";"
            ],
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h1Test5": [
                "String token1 = \"a123\";",
                "String token2 = \"a123\";"
            ],
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h1Test6": [
                "String token1 = \"a!@#\";",
                "String token2 = \"a!@#\";"
            ]
        },
        "processed_generated": {
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h1Test0": [
                "String token1 = \"b\";",
                "String token2 = \"b\";"
            ],
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h1Test1": [
                ""
            ],
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h1Test2": [
                "String token1 = \"1\";",
                "String token2 = \"1\";"
            ],
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h1Test3": [
                ""
            ],
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h1Test4": [
                "String token1 = \"\";",
                "String token2 = \"\";"
            ],
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h1Test5": [
                "String token1 = \"a123\";",
                "String token2 = \"a123\";"
            ],
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h1Test6": [
                "String token1 = \"a!@#\";",
                "String token2 = \"a!@#\";"
            ]
        },
        "original_h": [
            "String token1 = \"a\";",
            "String token2 = \"a\";"
        ]
    },
    "io.cucumber.core.eventbus.RandomUuidGeneratorTest.generates_different_non_null_uuids()": {
        "generated_inputs_class": [
            "io.cucumber.core.eventbus.RandomUuidGeneratorTest_generates_different_non_null_uuids_h1Test0"
        ],
        "generated_all_blocks": [
            [
                "UuidGenerator generator = new RandomUuidGenerator();",
                "UuidGenerator generator2 = new RandomUuidGenerator();",
                "UUID uuid1 = generator.generateId();",
                "UUID uuid2 = generator2.generateId();"
            ],
            [
                "UuidGenerator generator = new RandomUuidGenerator();",
                "UuidGenerator generator2 = new RandomUuidGenerator();",
                "UUID uuid1 = generator.generateId();",
                "UUID uuid2 = generator2.generateId();"
            ],
            [
                "UuidGenerator generator = new RandomUuidGenerator();",
                "UuidGenerator generator2 = new RandomUuidGenerator();",
                "UUID uuid1 = generator.generateId();",
                "UUID uuid2 = generator2.generateId();"
            ],
            [
                "UuidGenerator generator = new RandomUuidGenerator();",
                "UuidGenerator generator2 = new RandomUuidGenerator();",
                "UUID uuid1 = generator.generateId();",
                "UUID uuid2 = generator2.generateId();"
            ]
        ],
        "selected": {
            "io.cucumber.core.eventbus.RandomUuidGeneratorTest_generates_different_non_null_uuids_h1Test0": [
                "UuidGenerator generator = new RandomUuidGenerator();",
                "UuidGenerator generator2 = new RandomUuidGenerator();",
                "UUID uuid1 = generator.generateId();",
                "UUID uuid2 = generator2.generateId();"
            ]
        },
        "processed_generated": {
            "io.cucumber.core.eventbus.RandomUuidGeneratorTest_generates_different_non_null_uuids_h1Test0": [
                "UuidGenerator generator = new RandomUuidGenerator();",
                "UuidGenerator generator2 = new RandomUuidGenerator();"
            ]
        },
        "original_h": [
            "UuidGenerator generator = new RandomUuidGenerator();",
            "UuidGenerator generator2 = new RandomUuidGenerator();"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test1()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h1Test0",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h1Test1",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h1Test2",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h1Test3",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"456\", 456);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ],
            [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"123\", 456);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ],
            [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"123\", 123);",
                "v01.put(\"456\", 456);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ],
            [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"123\", 123);",
                "v01.put(\"456\", 456);",
                "v01.put(\"789\", 789);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ],
            [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"123\", 123);",
                "v01.put(\"456\", 456);",
                "v01.put(\"789\", 789);",
                "v01.put(\"101112\", 101112);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h1Test0": [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"456\", 456);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h1Test1": [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"123\", 456);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h1Test2": [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"123\", 123);",
                "v01.put(\"456\", 456);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h1Test3": [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"123\", 123);",
                "v01.put(\"456\", 456);",
                "v01.put(\"789\", 789);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h1Test4": [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"123\", 123);",
                "v01.put(\"456\", 456);",
                "v01.put(\"789\", 789);",
                "v01.put(\"101112\", 101112);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h1Test0": [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"456\", 456);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h1Test1": [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"123\", 456);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h1Test2": [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"123\", 123);",
                "v01.put(\"456\", 456);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h1Test3": [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"123\", 123);",
                "v01.put(\"456\", 456);",
                "v01.put(\"789\", 789);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h1Test4": [
                "Map<String, Integer> v01 = new HashMap<>();",
                "v01.put(\"123\", 123);",
                "v01.put(\"456\", 456);",
                "v01.put(\"789\", 789);",
                "v01.put(\"101112\", 101112);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Integer>>() {",
                "}.getType();"
            ]
        },
        "original_h": [
            "Map<String, Integer> v01 = new HashMap<>();",
            "v01.put(\"123\", 123);"
        ]
    },
    "org.apache.druid.collections.CloseableResourceHolderTest.testCloseableResourceHolder()": {
        "generated_inputs_class": [
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test0",
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test1",
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test2",
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test3",
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test4",
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test5",
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test6",
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test7"
        ],
        "generated_all_blocks": [
            [
                "Closeable closeable = closeCounter::incrementAndGet;",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            [
                "Closeable closeable = closeCounter::incrementAndGet;",
                "ResourceHolder<Closeable> holder2 = ResourceHolder.fromCloseable(closeable);"
            ],
            [
                "Closeable closeable = null;",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            [
                "Closeable closeable = null;",
                "ResourceHolder<Closeable> holder2 = ResourceHolder.fromCloseable(closeable);"
            ],
            [
                "Closeable closeable = new Closeable() {",
                "@Override",
                "public void close() throws IOException {",
                "throw new IOException(\"Test exception\");",
                "}",
                "};",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            [
                "Closeable closeable = new Closeable() {",
                "@Override",
                "public void close() throws IOException {",
                "throw new IOException(\"Test exception\");",
                "}",
                "};",
                "ResourceHolder<Closeable> holder2 = ResourceHolder.fromCloseable(closeable);"
            ],
            [
                "Closeable closeable = new Closeable() {",
                "@Override",
                "public void close() throws IOException {",
                "// Do nothing",
                "}",
                "};",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            [
                "Closeable closeable = new Closeable() {",
                "@Override",
                "public void close() throws IOException {",
                "// Do nothing",
                "}",
                "};",
                "ResourceHolder<Closeable> holder2 = ResourceHolder.fromCloseable(closeable);"
            ]
        ],
        "selected": {
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test0": [
                "Closeable closeable = closeCounter::incrementAndGet;",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test1": [
                "Closeable closeable = closeCounter::incrementAndGet;",
                "ResourceHolder<Closeable> holder2 = ResourceHolder.fromCloseable(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test2": [
                "Closeable closeable = null;",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test3": [
                "Closeable closeable = null;",
                "ResourceHolder<Closeable> holder2 = ResourceHolder.fromCloseable(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test4": [
                "Closeable closeable = new Closeable() {",
                "@Override",
                "public void close() throws IOException {",
                "throw new IOException(\"Test exception\");",
                "}",
                "};",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test5": [
                "Closeable closeable = new Closeable() {",
                "@Override",
                "public void close() throws IOException {",
                "throw new IOException(\"Test exception\");",
                "}",
                "};",
                "ResourceHolder<Closeable> holder2 = ResourceHolder.fromCloseable(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test6": [
                "Closeable closeable = new Closeable() {",
                "@Override",
                "public void close() throws IOException {",
                "// Do nothing",
                "}",
                "};",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test7": [
                "Closeable closeable = new Closeable() {",
                "@Override",
                "public void close() throws IOException {",
                "// Do nothing",
                "}",
                "};",
                "ResourceHolder<Closeable> holder2 = ResourceHolder.fromCloseable(closeable);"
            ]
        },
        "processed_generated": {
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test0": [
                "Closeable closeable = closeCounter::incrementAndGet;",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test1": [
                "Closeable closeable = closeCounter::incrementAndGet;",
                "ResourceHolder<Closeable> holder2 = ResourceHolder.fromCloseable(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test2": [
                "Closeable closeable = null;",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test3": [
                "Closeable closeable = null;",
                "ResourceHolder<Closeable> holder2 = ResourceHolder.fromCloseable(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test4": [
                "Closeable closeable = new Closeable() {",
                "@Override",
                "public void close() throws IOException {",
                "throw new IOException(\"Test exception\");",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test5": [
                "Closeable closeable = new Closeable() {",
                "@Override",
                "public void close() throws IOException {",
                "throw new IOException(\"Test exception\");",
                "ResourceHolder<Closeable> holder2 = ResourceHolder.fromCloseable(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test6": [
                "Closeable closeable = new Closeable() {",
                "@Override",
                "public void close() throws IOException {",
                "// Do nothing",
                "}",
                "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
            ],
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h1Test7": [
                "Closeable closeable = new Closeable() {",
                "@Override",
                "public void close() throws IOException {",
                "// Do nothing",
                "}",
                "ResourceHolder<Closeable> holder2 = ResourceHolder.fromCloseable(closeable);"
            ]
        },
        "original_h": [
            "Closeable closeable = closeCounter::incrementAndGet;",
            "ResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);"
        ]
    },
    "com.github.underscore.XmlBuilderTest.toXml()": {
        "generated_inputs_class": [
            "com.github.underscore.XmlBuilderTest_toXml_h1Test0"
        ],
        "generated_all_blocks": [
            [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";",
                "XmlBuilder xmlBuilder2 = XmlBuilder.parse(XML);"
            ]
        ],
        "selected": {
            "com.github.underscore.XmlBuilderTest_toXml_h1Test0": [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";",
                "XmlBuilder xmlBuilder2 = XmlBuilder.parse(XML);"
            ]
        },
        "processed_generated": {
            "com.github.underscore.XmlBuilderTest_toXml_h1Test0": [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";",
                "XmlBuilder xmlBuilder2 = XmlBuilder.parse(XML);"
            ]
        },
        "original_h": [
            "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";"
        ]
    },
    "com.vladmihalcea.hpjp.util.CryptoUtilsTest.testPerformanceUsingCache()": {
        "generated_inputs_class": [
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h1Test0",
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h1Test1",
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h1Test2",
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h1Test3",
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "long threshold = 5L;",
                "Long value = 0L;",
                "long startNanos = System.nanoTime();",
                "String encryptedValue = encryptCache.get(value);",
                "if (encryptedValue == null) {",
                "encryptCallCount++;",
                "encryptedValue = CryptoUtils.encrypt(value);",
                "encryptCache.put(value, encryptedValue);",
                "}",
                "encryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;",
                "startNanos = System.nanoTime();",
                "Long decryptedValue = decryptCache.get(encryptedValue);",
                "if (decryptedValue == null) {",
                "decryptCallCount++;",
                "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz);",
                "decryptCache.put(encryptedValue, decryptedValue);",
                "}",
                "decryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);",
                "assertEquals(value.longValue(), decryptedValue.longValue());"
            ],
            [
                "long threshold = 5L;",
                "Long value = 4L;",
                "long startNanos = System.nanoTime();",
                "String encryptedValue = encryptCache.get(value);",
                "if (encryptedValue == null) {",
                "encryptCallCount++;",
                "encryptedValue = CryptoUtils.encrypt(value);",
                "encryptCache.put(value, encryptedValue);",
                "}",
                "encryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;",
                "startNanos = System.nanoTime();",
                "Long decryptedValue = decryptCache.get(encryptedValue);",
                "if (decryptedValue == null) {",
                "decryptCallCount++;",
                "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz);",
                "decryptCache.put(encryptedValue, decryptedValue);",
                "}",
                "decryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);",
                "assertEquals(value.longValue(), decryptedValue.longValue());"
            ],
            [
                "long threshold = 5L;",
                "Long value = -1L;",
                "long startNanos = System.nanoTime();",
                "String encryptedValue = encryptCache.get(value);",
                "if (encryptedValue == null) {",
                "encryptCallCount++;",
                "encryptedValue = CryptoUtils.encrypt(value);",
                "encryptCache.put(value, encryptedValue);",
                "}",
                "encryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;",
                "startNanos = System.nanoTime();",
                "Long decryptedValue = decryptCache.get(encryptedValue);",
                "if (decryptedValue == null) {",
                "decryptCallCount++;",
                "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz);",
                "decryptCache.put(encryptedValue, decryptedValue);",
                "}",
                "decryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);",
                "assertEquals(value.longValue(), decryptedValue.longValue());"
            ],
            [
                "long threshold = 5L;",
                "Long value = -5L;",
                "long startNanos = System.nanoTime();",
                "String encryptedValue = encryptCache.get(value);",
                "if (encryptedValue == null) {",
                "encryptCallCount++;",
                "encryptedValue = CryptoUtils.encrypt(value);",
                "encryptCache.put(value, encryptedValue);",
                "}",
                "encryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;",
                "startNanos = System.nanoTime();",
                "Long decryptedValue = decryptCache.get(encryptedValue);",
                "if (decryptedValue == null) {",
                "decryptCallCount++;",
                "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz);",
                "decryptCache.put(encryptedValue, decryptedValue);",
                "}",
                "decryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);",
                "assertEquals(value.longValue(), decryptedValue.longValue());"
            ],
            [
                "long threshold = 5L;",
                "Long value = 5L;",
                "long startNanos = System.nanoTime();",
                "String encryptedValue = encryptCache.get(value);",
                "if (encryptedValue == null) {",
                "encryptCallCount++;",
                "encryptedValue = CryptoUtils.encrypt(value);",
                "encryptCache.put(value, encryptedValue);",
                "}",
                "encryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;",
                "startNanos = System.nanoTime();",
                "Long decryptedValue = decryptCache.get(encryptedValue);",
                "if (decryptedValue == null) {",
                "decryptCallCount++;",
                "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz);",
                "decryptCache.put(encryptedValue, decryptedValue);",
                "}",
                "decryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);",
                "assertEquals(value.longValue(), decryptedValue.longValue());"
            ]
        ],
        "selected": {
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h1Test0": [
                "long threshold = 5L;",
                "Long value = 0L;",
                "long startNanos = System.nanoTime();",
                "String encryptedValue = encryptCache.get(value);",
                "if (encryptedValue == null) {",
                "encryptCallCount++;",
                "encryptedValue = CryptoUtils.encrypt(value);",
                "encryptCache.put(value, encryptedValue);",
                "}",
                "encryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;",
                "startNanos = System.nanoTime();",
                "Long decryptedValue = decryptCache.get(encryptedValue);",
                "if (decryptedValue == null) {",
                "decryptCallCount++;",
                "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz);",
                "decryptCache.put(encryptedValue, decryptedValue);",
                "}",
                "decryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);",
                "assertEquals(value.longValue(), decryptedValue.longValue());"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h1Test1": [
                "long threshold = 5L;",
                "Long value = 4L;",
                "long startNanos = System.nanoTime();",
                "String encryptedValue = encryptCache.get(value);",
                "if (encryptedValue == null) {",
                "encryptCallCount++;",
                "encryptedValue = CryptoUtils.encrypt(value);",
                "encryptCache.put(value, encryptedValue);",
                "}",
                "encryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;",
                "startNanos = System.nanoTime();",
                "Long decryptedValue = decryptCache.get(encryptedValue);",
                "if (decryptedValue == null) {",
                "decryptCallCount++;",
                "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz);",
                "decryptCache.put(encryptedValue, decryptedValue);",
                "}",
                "decryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);",
                "assertEquals(value.longValue(), decryptedValue.longValue());"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h1Test2": [
                "long threshold = 5L;",
                "Long value = -1L;",
                "long startNanos = System.nanoTime();",
                "String encryptedValue = encryptCache.get(value);",
                "if (encryptedValue == null) {",
                "encryptCallCount++;",
                "encryptedValue = CryptoUtils.encrypt(value);",
                "encryptCache.put(value, encryptedValue);",
                "}",
                "encryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;",
                "startNanos = System.nanoTime();",
                "Long decryptedValue = decryptCache.get(encryptedValue);",
                "if (decryptedValue == null) {",
                "decryptCallCount++;",
                "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz);",
                "decryptCache.put(encryptedValue, decryptedValue);",
                "}",
                "decryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);",
                "assertEquals(value.longValue(), decryptedValue.longValue());"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h1Test3": [
                "long threshold = 5L;",
                "Long value = -5L;",
                "long startNanos = System.nanoTime();",
                "String encryptedValue = encryptCache.get(value);",
                "if (encryptedValue == null) {",
                "encryptCallCount++;",
                "encryptedValue = CryptoUtils.encrypt(value);",
                "encryptCache.put(value, encryptedValue);",
                "}",
                "encryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;",
                "startNanos = System.nanoTime();",
                "Long decryptedValue = decryptCache.get(encryptedValue);",
                "if (decryptedValue == null) {",
                "decryptCallCount++;",
                "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz);",
                "decryptCache.put(encryptedValue, decryptedValue);",
                "}",
                "decryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);",
                "assertEquals(value.longValue(), decryptedValue.longValue());"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h1Test4": [
                "long threshold = 5L;",
                "Long value = 5L;",
                "long startNanos = System.nanoTime();",
                "String encryptedValue = encryptCache.get(value);",
                "if (encryptedValue == null) {",
                "encryptCallCount++;",
                "encryptedValue = CryptoUtils.encrypt(value);",
                "encryptCache.put(value, encryptedValue);",
                "}",
                "encryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;",
                "startNanos = System.nanoTime();",
                "Long decryptedValue = decryptCache.get(encryptedValue);",
                "if (decryptedValue == null) {",
                "decryptCallCount++;",
                "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz);",
                "decryptCache.put(encryptedValue, decryptedValue);",
                "}",
                "decryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);",
                "assertEquals(value.longValue(), decryptedValue.longValue());"
            ]
        },
        "processed_generated": {
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h1Test0": [
                "Long value = 0L;",
                "String encryptedValue = encryptCache.get(value);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h1Test1": [
                "Long value = 4L;",
                "String encryptedValue = encryptCache.get(value);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h1Test2": [
                "Long value = -1L;",
                "String encryptedValue = encryptCache.get(value);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h1Test3": [
                "Long value = -5L;",
                "String encryptedValue = encryptCache.get(value);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;"
            ],
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h1Test4": [
                "Long value = 5L;",
                "String encryptedValue = encryptCache.get(value);",
                "String message = encryptedValue;",
                "Class<?> clazz = Long.class;"
            ]
        },
        "original_h": [
            "long threshold = 5L;",
            "Long value = random.nextLong(threshold);",
            "String encryptedValue = encryptCache.get(value);",
            "String message = encryptedValue;",
            "Class<?> clazz = Long.class;"
        ]
    },
    "com.github.underscore.XmlBuilderTest.parse()": {
        "generated_inputs_class": [
            "com.github.underscore.XmlBuilderTest_parse_h1Test0"
        ],
        "generated_all_blocks": [
            [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";",
                "XmlBuilder xmlBuilder2 = XmlBuilder.parse(XML);"
            ]
        ],
        "selected": {
            "com.github.underscore.XmlBuilderTest_parse_h1Test0": [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";",
                "XmlBuilder xmlBuilder2 = XmlBuilder.parse(XML);"
            ]
        },
        "processed_generated": {
            "com.github.underscore.XmlBuilderTest_parse_h1Test0": [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";",
                "XmlBuilder xmlBuilder2 = XmlBuilder.parse(XML);"
            ]
        },
        "original_h": [
            "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";"
        ]
    },
    "com.networknt.schema.JsonNodePathTest.hashCodeEquals()": {
        "generated_inputs_class": [
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h1Test0",
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h1Test1",
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h1Test2",
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h1Test3",
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\");",
                "JsonNodePath a2 = root.append(\"a\");"
            ],
            [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\");",
                "JsonNodePath a2 = root.append(\"a\");"
            ],
            [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\");",
                "JsonNodePath a2 = root.append(\"b\");"
            ],
            [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\");",
                "JsonNodePath a2 = root.append(\"b\");"
            ],
            [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\");",
                "a1.type = PathType.JSON_PATH;",
                "JsonNodePath a2 = root.append(\"a\");",
                "a2.type = PathType.JSON_PATH;"
            ],
            [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\");",
                "a1.type = PathType.JSON_PATH;",
                "JsonNodePath a2 = root.append(\"a\");",
                "a2.type = PathType.JSON_PATH;"
            ],
            [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\");",
                "a1.pathSegmentIndex = 1;",
                "JsonNodePath a2 = root.append(\"a\");",
                "a2.pathSegmentIndex = 1;"
            ],
            [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\");",
                "a1.pathSegmentIndex = 1;",
                "JsonNodePath a2 = root.append(\"a\");",
                "a2.pathSegmentIndex = 1;"
            ],
            [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\");",
                "a1.parent = null;",
                "JsonNodePath a2 = root.append(\"a\");",
                "a2.parent = null;"
            ],
            [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\");",
                "a1.parent = null;",
                "JsonNodePath a2 = root.append(\"a\");",
                "a2.parent = null;"
            ]
        ],
        "selected": {
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h1Test0": [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\");",
                "JsonNodePath a2 = root.append(\"a\");"
            ],
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h1Test1": [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\");",
                "JsonNodePath a2 = root.append(\"b\");"
            ],
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h1Test2": [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\");",
                "a1.type = PathType.JSON_PATH;",
                "JsonNodePath a2 = root.append(\"a\");",
                "a2.type = PathType.JSON_PATH;"
            ],
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h1Test3": [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\");",
                "a1.pathSegmentIndex = 1;",
                "JsonNodePath a2 = root.append(\"a\");",
                "a2.pathSegmentIndex = 1;"
            ],
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h1Test4": [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\");",
                "a1.parent = null;",
                "JsonNodePath a2 = root.append(\"a\");",
                "a2.parent = null;"
            ]
        },
        "processed_generated": {
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h1Test0": [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\");",
                "JsonNodePath a2 = root.append(\"a\");"
            ],
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h1Test1": [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\");",
                "JsonNodePath a2 = root.append(\"b\");"
            ],
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h1Test2": [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\");",
                "a1.type = PathType.JSON_PATH;",
                "JsonNodePath a2 = root.append(\"a\");",
                "a2.type = PathType.JSON_PATH;"
            ],
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h1Test3": [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\");",
                "a1.pathSegmentIndex = 1;",
                "JsonNodePath a2 = root.append(\"a\");",
                "a2.pathSegmentIndex = 1;"
            ],
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h1Test4": [
                "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
                "JsonNodePath a1 = root.append(\"a\");",
                "a1.parent = null;",
                "JsonNodePath a2 = root.append(\"a\");",
                "a2.parent = null;"
            ]
        },
        "original_h": [
            "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);",
            "JsonNodePath a1 = root.append(\"a\");",
            "JsonNodePath a2 = root.append(\"a\");"
        ]
    },
    "com.github.underscore.XmlBuilderTest.toJson()": {
        "generated_inputs_class": [
            "com.github.underscore.XmlBuilderTest_toJson_h1Test0"
        ],
        "generated_all_blocks": [
            [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";",
                "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);"
            ]
        ],
        "selected": {
            "com.github.underscore.XmlBuilderTest_toJson_h1Test0": [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";",
                "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);"
            ]
        },
        "processed_generated": {
            "com.github.underscore.XmlBuilderTest_toJson_h1Test0": [
                "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";"
            ]
        },
        "original_h": [
            "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"</Projects>\";"
        ]
    },
    "com.thealgorithms.ciphers.PlayfairTest.testEncryptionAndDecryption()": {
        "generated_inputs_class": [
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h1Test0",
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h1Test1",
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h1Test2",
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h1Test3",
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"SECRETKEY\");",
                "String plaintext = \"HELLOWORLD\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"JAVA\");",
                "String plaintext = \"JAVA\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"LONGKEYWORD\");",
                "String plaintext = \"SHORTTEXT\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
                "String plaintext = \"J\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
                "String plaintext = \"JJ\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ]
        ],
        "selected": {
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h1Test0": [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"SECRETKEY\");",
                "String plaintext = \"HELLOWORLD\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h1Test1": [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"JAVA\");",
                "String plaintext = \"JAVA\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h1Test2": [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"LONGKEYWORD\");",
                "String plaintext = \"SHORTTEXT\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h1Test3": [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
                "String plaintext = \"J\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h1Test4": [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
                "String plaintext = \"JJ\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ]
        },
        "processed_generated": {
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h1Test0": [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"SECRETKEY\");",
                "String plaintext = \"HELLOWORLD\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h1Test1": [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"JAVA\");",
                "String plaintext = \"JAVA\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h1Test2": [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"LONGKEYWORD\");",
                "String plaintext = \"SHORTTEXT\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h1Test3": [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
                "String plaintext = \"J\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ],
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h1Test4": [
                "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
                "String plaintext = \"JJ\";",
                "String textTodecrypt = playfairCipher.encrypt(plaintext);"
            ]
        },
        "original_h": [
            "PlayfairCipher playfairCipher = new PlayfairCipher(\"KEYWORD\");",
            "String plaintext = \"PLAYFAIR\";",
            "String textTodecrypt = \"SHHAHRFB\";"
        ]
    },
    "software.amazon.event.ruler.NameStateTest.testNextNameStateWithAdditionalNameStateReuse()": {
        "generated_inputs_class": [
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test0",
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test1",
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test2",
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test3",
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test4",
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test5",
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test6",
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test7",
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test8",
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test9"
        ],
        "generated_all_blocks": [
            [
                "NameState nameState = new NameState();",
                "NameState nextNameState = new NameState();",
                "String key = \"key1\";",
                "String key2 = \"key1\";",
                "NameState nameState2 = nameState;"
            ],
            [
                "NameState nextNameState = new NameState();",
                "String key = \"key1\";"
            ],
            [
                "NameState nameState = new NameState();",
                "NameState nextNameState = new NameState();",
                "String key = \"key2\";",
                "String key2 = \"key2\";",
                "NameState nameState2 = nameState;"
            ],
            [
                "NameState nextNameState = new NameState();",
                "String key = \"key2\";"
            ],
            [
                "NameState nameState = new NameState();",
                "NameState nextNameState = new NameState();",
                "String key = \"key3\";",
                "String key2 = \"key3\";",
                "NameState nameState2 = nameState;"
            ],
            [
                "NameState nextNameState = new NameState();",
                "String key = \"key3\";"
            ],
            [
                "NameState nameState = new NameState();",
                "NameState nextNameState = new NameState();",
                "String key = \"key4\";",
                "String key2 = \"key4\";",
                "NameState nameState2 = nameState;"
            ],
            [
                "NameState nextNameState = new NameState();",
                "String key = \"key4\";"
            ],
            [
                "NameState nameState = new NameState();",
                "NameState nextNameState = new NameState();",
                "String key = \"key5\";",
                "String key2 = \"key5\";",
                "NameState nameState2 = nameState;"
            ],
            [
                "NameState nextNameState = new NameState();",
                "String key = \"key5\";"
            ]
        ],
        "selected": {
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test0": [
                "NameState nameState = new NameState();",
                "NameState nextNameState = new NameState();",
                "String key = \"key1\";",
                "String key2 = \"key1\";",
                "NameState nameState2 = nameState;"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test1": [
                "NameState nextNameState = new NameState();",
                "String key = \"key1\";"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test2": [
                "NameState nameState = new NameState();",
                "NameState nextNameState = new NameState();",
                "String key = \"key2\";",
                "String key2 = \"key2\";",
                "NameState nameState2 = nameState;"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test3": [
                "NameState nextNameState = new NameState();",
                "String key = \"key2\";"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test4": [
                "NameState nameState = new NameState();",
                "NameState nextNameState = new NameState();",
                "String key = \"key3\";",
                "String key2 = \"key3\";",
                "NameState nameState2 = nameState;"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test5": [
                "NameState nextNameState = new NameState();",
                "String key = \"key3\";"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test6": [
                "NameState nameState = new NameState();",
                "NameState nextNameState = new NameState();",
                "String key = \"key4\";",
                "String key2 = \"key4\";",
                "NameState nameState2 = nameState;"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test7": [
                "NameState nextNameState = new NameState();",
                "String key = \"key4\";"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test8": [
                "NameState nameState = new NameState();",
                "NameState nextNameState = new NameState();",
                "String key = \"key5\";",
                "String key2 = \"key5\";",
                "NameState nameState2 = nameState;"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test9": [
                "NameState nextNameState = new NameState();",
                "String key = \"key5\";"
            ]
        },
        "processed_generated": {
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test0": [
                "NameState nameState = new NameState();",
                "NameState nextNameState = new NameState();",
                "String key = \"key1\";",
                "String key2 = \"key1\";",
                "NameState nameState2 = nameState;"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test1": [
                "NameState nextNameState = new NameState();",
                "String key = \"key1\";"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test2": [
                "NameState nameState = new NameState();",
                "NameState nextNameState = new NameState();",
                "String key = \"key2\";",
                "String key2 = \"key2\";",
                "NameState nameState2 = nameState;"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test3": [
                "NameState nextNameState = new NameState();",
                "String key = \"key2\";"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test4": [
                "NameState nameState = new NameState();",
                "NameState nextNameState = new NameState();",
                "String key = \"key3\";",
                "String key2 = \"key3\";",
                "NameState nameState2 = nameState;"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test5": [
                "NameState nextNameState = new NameState();",
                "String key = \"key3\";"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test6": [
                "NameState nameState = new NameState();",
                "NameState nextNameState = new NameState();",
                "String key = \"key4\";",
                "String key2 = \"key4\";",
                "NameState nameState2 = nameState;"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test7": [
                "NameState nextNameState = new NameState();",
                "String key = \"key4\";"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test8": [
                "NameState nameState = new NameState();",
                "NameState nextNameState = new NameState();",
                "String key = \"key5\";",
                "String key2 = \"key5\";",
                "NameState nameState2 = nameState;"
            ],
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test9": [
                "NameState nextNameState = new NameState();",
                "String key = \"key5\";"
            ]
        },
        "original_h": [
            "NameState nameState = new NameState();",
            "NameState nextNameState = new NameState();",
            "String key = \"key\";",
            "String key2 = \"key\";",
            "NameState nameState2 = nameState;"
        ]
    },
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test2()": {
        "generated_inputs_class": [
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h1Test0",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h1Test1",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h1Test2",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h1Test3",
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"456\", 456L);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Long>>() {",
                "}.getType();"
            ],
            [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"123\", 789L);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Long>>() {",
                "}.getType();"
            ],
            [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"123\", 123L);",
                "v01.put(\"456\", 456L);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Long>>() {",
                "}.getType();"
            ],
            [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"123\", 123L);",
                "v01.put(\"456\", 789L);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Long>>() {",
                "}.getType();"
            ],
            [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"123\", 123L);",
                "v01.put(\"456\", 456L);",
                "v01.put(\"789\", 789L);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Long>>() {",
                "}.getType();"
            ]
        ],
        "selected": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h1Test0": [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"456\", 456L);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Long>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h1Test1": [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"123\", 789L);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Long>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h1Test2": [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"123\", 123L);",
                "v01.put(\"456\", 456L);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Long>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h1Test3": [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"123\", 123L);",
                "v01.put(\"456\", 789L);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Long>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h1Test4": [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"123\", 123L);",
                "v01.put(\"456\", 456L);",
                "v01.put(\"789\", 789L);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Long>>() {",
                "}.getType();"
            ]
        },
        "processed_generated": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h1Test0": [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"456\", 456L);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Long>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h1Test1": [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"123\", 789L);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Long>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h1Test2": [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"123\", 123L);",
                "v01.put(\"456\", 456L);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Long>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h1Test3": [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"123\", 123L);",
                "v01.put(\"456\", 789L);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Long>>() {",
                "}.getType();"
            ],
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h1Test4": [
                "Map<String, Long> v01 = new HashMap<>();",
                "v01.put(\"123\", 123L);",
                "v01.put(\"456\", 456L);",
                "v01.put(\"789\", 789L);",
                "String str2 = JSON.toJSONString(v01);",
                "Type mapType = new TypeReference<Map<String, Long>>() {",
                "}.getType();"
            ]
        },
        "original_h": [
            "Map<String, Long> v01 = new HashMap<>();",
            "v01.put(\"123\", 123L);"
        ]
    },
    "org.matsim.core.config.groups.ScoringConfigGroupTest.testAddActivityParams()": {
        "generated_inputs_class": [
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h1Test0",
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h1Test1",
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h1Test2",
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h1Test3",
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "ActivityParams ap = new ActivityParams(\"\");",
                "String type = \"\";"
            ],
            [
                "ActivityParams ap = new ActivityParams(null);",
                "String type = null;"
            ],
            [
                "ActivityParams ap = new ActivityParams(\"type1\");",
                "ap.setMaximumDuration(0);",
                "String type = \"type1\";"
            ],
            [
                "ActivityParams ap = new ActivityParams(\"type1\");",
                "ap.setMaximumDuration(Double.MAX_VALUE);",
                "String type = \"type1\";"
            ],
            [
                "ActivityParams ap = new ActivityParams(\"type1\");",
                "ap.setMaximumDuration(Double.MIN_VALUE);",
                "String type = \"type1\";"
            ]
        ],
        "selected": {
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h1Test0": [
                "ActivityParams ap = new ActivityParams(\"\");",
                "String type = \"\";"
            ],
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h1Test1": [
                "ActivityParams ap = new ActivityParams(null);",
                "String type = null;"
            ],
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h1Test2": [
                "ActivityParams ap = new ActivityParams(\"type1\");",
                "ap.setMaximumDuration(0);",
                "String type = \"type1\";"
            ],
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h1Test3": [
                "ActivityParams ap = new ActivityParams(\"type1\");",
                "ap.setMaximumDuration(Double.MAX_VALUE);",
                "String type = \"type1\";"
            ],
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h1Test4": [
                "ActivityParams ap = new ActivityParams(\"type1\");",
                "ap.setMaximumDuration(Double.MIN_VALUE);",
                "String type = \"type1\";"
            ]
        },
        "processed_generated": {
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h1Test0": [
                "ActivityParams ap = new ActivityParams(\"\");",
                "String type = \"\";"
            ],
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h1Test1": [
                "ActivityParams ap = new ActivityParams(null);",
                "String type = null;"
            ],
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h1Test2": [
                "ActivityParams ap = new ActivityParams(\"type1\");",
                "ap.setMaximumDuration(0);",
                "String type = \"type1\";"
            ],
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h1Test3": [
                "ActivityParams ap = new ActivityParams(\"type1\");",
                "ap.setMaximumDuration(Double.MAX_VALUE);",
                "String type = \"type1\";"
            ],
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h1Test4": [
                "ActivityParams ap = new ActivityParams(\"type1\");",
                "ap.setMaximumDuration(Double.MIN_VALUE);",
                "String type = \"type1\";"
            ]
        },
        "original_h": [
            "ActivityParams ap = new ActivityParams(\"type1\");",
            "String type = \"type1\";"
        ]
    },
    "com.thealgorithms.datastructures.crdt.LWWElementSetTest.testRemove()": {
        "generated_inputs_class": [
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h1Test0",
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h1Test1",
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h1Test2",
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h1Test3",
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "Element element = new Element(\"key1\", 0, bias);",
                "Element element2 = new Element(\"key1\", 0, bias);"
            ],
            [
                "Element element = new Element(\"key1\", Integer.MAX_VALUE, bias);",
                "Element element2 = new Element(\"key1\", Integer.MAX_VALUE, bias);"
            ],
            [
                "Element element = new Element(\"key1\", Integer.MIN_VALUE, bias);",
                "Element element2 = new Element(\"key1\", Integer.MIN_VALUE, bias);"
            ],
            [
                "Element element = new Element(\"\", 1, bias);",
                "Element element2 = new Element(\"\", 1, bias);"
            ],
            [
                "Element element = new Element(\"key1\", 1, null);",
                "Element element2 = new Element(\"key1\", 1, null);"
            ]
        ],
        "selected": {
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h1Test0": [
                "Element element = new Element(\"key1\", 0, bias);",
                "Element element2 = new Element(\"key1\", 0, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h1Test1": [
                "Element element = new Element(\"key1\", Integer.MAX_VALUE, bias);",
                "Element element2 = new Element(\"key1\", Integer.MAX_VALUE, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h1Test2": [
                "Element element = new Element(\"key1\", Integer.MIN_VALUE, bias);",
                "Element element2 = new Element(\"key1\", Integer.MIN_VALUE, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h1Test3": [
                "Element element = new Element(\"\", 1, bias);",
                "Element element2 = new Element(\"\", 1, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h1Test4": [
                "Element element = new Element(\"key1\", 1, null);",
                "Element element2 = new Element(\"key1\", 1, null);"
            ]
        },
        "processed_generated": {
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h1Test0": [
                "Element element = new Element(\"key1\", 0, bias);",
                "Element element2 = new Element(\"key1\", 0, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h1Test1": [
                "Element element = new Element(\"key1\", Integer.MAX_VALUE, bias);",
                "Element element2 = new Element(\"key1\", Integer.MAX_VALUE, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h1Test2": [
                "Element element = new Element(\"key1\", Integer.MIN_VALUE, bias);",
                "Element element2 = new Element(\"key1\", Integer.MIN_VALUE, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h1Test3": [
                "Element element = new Element(\"\", 1, bias);",
                "Element element2 = new Element(\"\", 1, bias);"
            ],
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h1Test4": [
                "Element element = new Element(\"key1\", 1, null);",
                "Element element2 = new Element(\"key1\", 1, null);"
            ]
        },
        "original_h": [
            "Element element = new Element(\"key1\", 1, bias);",
            "Element element2 = new Element(\"key1\", 1, bias);"
        ]
    },
    "software.amazon.event.ruler.SubRuleContextTest.testEquals()": {
        "generated_inputs_class": [
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h1Test0",
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h1Test1",
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h1Test2",
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h1Test3",
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "String NAME = \"name1\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"name1\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            [
                "String NAME = \"name2\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"name2\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            [
                "String NAME = \"name3\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"name3\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            [
                "String NAME = \"name4\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"name4\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            [
                "String NAME = \"name5\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"name5\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ]
        ],
        "selected": {
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h1Test0": [
                "String NAME = \"name1\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"name1\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h1Test1": [
                "String NAME = \"name2\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"name2\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h1Test2": [
                "String NAME = \"name3\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"name3\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h1Test3": [
                "String NAME = \"name4\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"name4\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h1Test4": [
                "String NAME = \"name5\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"name5\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ]
        },
        "processed_generated": {
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h1Test0": [
                "String NAME = \"name1\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"name1\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h1Test1": [
                "String NAME = \"name2\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"name2\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h1Test2": [
                "String NAME = \"name3\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"name3\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h1Test3": [
                "String NAME = \"name4\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"name4\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ],
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h1Test4": [
                "String NAME = \"name5\";",
                "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
                "String NAME2 = \"name5\";",
                "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
            ]
        },
        "original_h": [
            "String NAME = \"name\";",
            "SubRuleContext.Generator generatorA = new SubRuleContext.Generator();",
            "String NAME2 = \"name\";",
            "SubRuleContext.Generator generatorB = new SubRuleContext.Generator();"
        ]
    },
    "org.datagear.util.version.VersionTest.isLowerThanTest()": {
        "generated_inputs_class": [
            "org.datagear.util.version.VersionTest_isLowerThanTest_h1Test0",
            "org.datagear.util.version.VersionTest_isLowerThanTest_h1Test1",
            "org.datagear.util.version.VersionTest_isLowerThanTest_h1Test2",
            "org.datagear.util.version.VersionTest_isLowerThanTest_h1Test3",
            "org.datagear.util.version.VersionTest_isLowerThanTest_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "String v1 = \"0.9\";",
                "String v2 = \"0.91\";"
            ],
            [
                "String v1 = \"1.1\";",
                "String v2 = \"1.2\";"
            ],
            [
                "String v1 = \"1.0-A1\";",
                "String v2 = \"1.0-A2\";"
            ],
            [
                "String v1 = \"1.0.0\";",
                "String v2 = \"1.0.1\";"
            ],
            [
                "String v1 = \"1.0.0-A1\";",
                "String v2 = \"1.0.0-A2\";"
            ]
        ],
        "selected": {
            "org.datagear.util.version.VersionTest_isLowerThanTest_h1Test0": [
                "String v1 = \"0.9\";",
                "String v2 = \"0.91\";"
            ],
            "org.datagear.util.version.VersionTest_isLowerThanTest_h1Test1": [
                "String v1 = \"1.1\";",
                "String v2 = \"1.2\";"
            ],
            "org.datagear.util.version.VersionTest_isLowerThanTest_h1Test2": [
                "String v1 = \"1.0-A1\";",
                "String v2 = \"1.0-A2\";"
            ],
            "org.datagear.util.version.VersionTest_isLowerThanTest_h1Test3": [
                "String v1 = \"1.0.0\";",
                "String v2 = \"1.0.1\";"
            ],
            "org.datagear.util.version.VersionTest_isLowerThanTest_h1Test4": [
                "String v1 = \"1.0.0-A1\";",
                "String v2 = \"1.0.0-A2\";"
            ]
        },
        "processed_generated": {
            "org.datagear.util.version.VersionTest_isLowerThanTest_h1Test0": [
                "String v1 = \"0.9\";",
                "String v2 = \"0.91\";"
            ],
            "org.datagear.util.version.VersionTest_isLowerThanTest_h1Test1": [
                "String v1 = \"1.1\";",
                "String v2 = \"1.2\";"
            ],
            "org.datagear.util.version.VersionTest_isLowerThanTest_h1Test2": [
                "String v1 = \"1.0-A1\";",
                "String v2 = \"1.0-A2\";"
            ],
            "org.datagear.util.version.VersionTest_isLowerThanTest_h1Test3": [
                "String v1 = \"1.0.0\";",
                "String v2 = \"1.0.1\";"
            ],
            "org.datagear.util.version.VersionTest_isLowerThanTest_h1Test4": [
                "String v1 = \"1.0.0-A1\";",
                "String v2 = \"1.0.0-A2\";"
            ]
        },
        "original_h": [
            "String v1 = \"1.0\";",
            "String v2 = \"1.10\";"
        ]
    },
    "io.vertx.core.json.jackson.HybridJacksonPoolTest.testVirtualThreadPoolWithSingleThread()": {
        "generated_inputs_class": [
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h1Test0",
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h1Test1",
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h1Test2",
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h1Test3",
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(0);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(0);"
            ],
            [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(1);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(1);"
            ],
            [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(Integer.MAX_VALUE);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(Integer.MAX_VALUE);"
            ],
            [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(-1);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(-1);"
            ],
            [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(5);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(5);"
            ]
        ],
        "selected": {
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h1Test0": [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(0);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(0);"
            ],
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h1Test1": [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(1);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(1);"
            ],
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h1Test2": [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(Integer.MAX_VALUE);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(Integer.MAX_VALUE);"
            ],
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h1Test3": [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(-1);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(-1);"
            ],
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h1Test4": [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(5);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(5);"
            ]
        },
        "processed_generated": {
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h1Test0": [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(0);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(0);"
            ],
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h1Test1": [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(1);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(1);"
            ],
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h1Test2": [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(Integer.MAX_VALUE);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(Integer.MAX_VALUE);"
            ],
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h1Test3": [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(-1);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(-1);"
            ],
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h1Test4": [
                "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(5);",
                "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(5);"
            ]
        },
        "original_h": [
            "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(4);",
            "HybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(4);"
        ]
    },
    "org.tsugi.util.Base64DoubleUrlEncodeSafeTest.testEncodeAndDecode()": {
        "generated_inputs_class": [
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h1Test0",
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h1Test1",
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h1Test2",
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h1Test3",
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "String input = \"A\";",
                "String encoded2 = \"QQ==\";"
            ],
            [
                "String input = \"AB\";",
                "String encoded2 = \"QUJD\";"
            ],
            [
                "String input = \"ABC\";",
                "String encoded2 = \"QUJDRA==\";"
            ],
            [
                "String input = \"ABCDE\";",
                "String encoded2 = \"QUJDREVG\";"
            ],
            [
                "String input = \"ABCDEFG\";",
                "String encoded2 = \"QUJDREVGQw==\";"
            ]
        ],
        "selected": {
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h1Test0": [
                "String input = \"A\";",
                "String encoded2 = \"QQ==\";"
            ],
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h1Test1": [
                "String input = \"AB\";",
                "String encoded2 = \"QUJD\";"
            ],
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h1Test2": [
                "String input = \"ABC\";",
                "String encoded2 = \"QUJDRA==\";"
            ],
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h1Test3": [
                "String input = \"ABCDE\";",
                "String encoded2 = \"QUJDREVG\";"
            ],
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h1Test4": [
                "String input = \"ABCDEFG\";",
                "String encoded2 = \"QUJDREVGQw==\";"
            ]
        },
        "processed_generated": {
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h1Test0": [
                "String input = \"A\";",
                "String encoded2 = \"QQ==\";"
            ],
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h1Test1": [
                "String input = \"AB\";",
                "String encoded2 = \"QUJD\";"
            ],
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h1Test2": [
                "String input = \"ABC\";",
                "String encoded2 = \"QUJDRA==\";"
            ],
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h1Test3": [
                "String input = \"ABCDE\";",
                "String encoded2 = \"QUJDREVG\";"
            ],
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h1Test4": [
                "String input = \"ABCDEFG\";",
                "String encoded2 = \"QUJDREVGQw==\";"
            ]
        },
        "original_h": [
            "String input = \"Hello, Base64DoubleUrlEncodeSafe!\";",
            "String encoded2 = \"SGVsbG8sIEJhc2U2NERvdWJsZVVybEVuY29kZVNhZmUh\";"
        ]
    },
    "org.threeten.extra.TestYearHalf.test_isLeapYear_int()": {
        "generated_inputs_class": [],
        "generated_all_blocks": [
            [
                "Half half = Half.H1;",
                "int year = 0;"
            ],
            [
                "Half half = Half.H2;",
                "int year = 1000;"
            ],
            [
                "Half half = Half.H1;",
                "int year = 4000;"
            ],
            [
                "Half half = Half.H2;",
                "int year = 5000;"
            ],
            [
                "Half half = Half.H1;",
                "int year = -1;"
            ]
        ],
        "selected": {},
        "processed_generated": {},
        "original_h": [
            "Half half = Half.H1;",
            "int year = 500;"
        ]
    },
    "org.datagear.util.version.VersionTest.isHigherThanTest()": {
        "generated_inputs_class": [],
        "generated_all_blocks": [
            [
                "String v1 = \"1.0-A1\";"
            ],
            [
                "String v1 = \"1.1.0\";"
            ],
            [
                "String v1 = \"1.1.0-A1\";"
            ],
            [
                "String v1 = \"1.0.0\";"
            ],
            [
                "String v1 = \"1.0.0-A1\";"
            ]
        ],
        "selected": {},
        "processed_generated": {},
        "original_h": [
            "String v1 = \"1.0\";",
            "String v2 = \"1.10\";"
        ]
    },
    "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686.test_column_comment()": {
        "generated_inputs_class": [
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h1Test0",
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h1Test1"
        ],
        "generated_all_blocks": [
            [
                "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID,-- qianzhushi\\n\" + \"\\tCUS_NO -- houzhushi\\n,\\n\" + \"\\tCUS_NAME\\n\" + \")\\n\" + \"SELECT A.DATE_ID,\\n\" + \"\\tA.CUS_NO,\\n\" + \"\\tA.CUS_NAME\\n\" + \"FROM TABLE_TEST_2 \\n\" + \"WHERE COL1='1';\";",
                "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "sqlStatement2.getColumns().get(0).addAfterComment(\"-- comment\u6ce8\u91ca0\");",
                "sqlStatement2.getColumns().get(1).addAfterComment(\"-- comment\u6ce8\u91ca1\");",
                "sqlStatement2.getColumns().get(2).addAfterComment(\"-- comment\u6ce8\u91ca2\");"
            ],
            [
                "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID,-- qianzhushi\\n\" + \"\\tCUS_NO -- houzhushi\\n,\\n\" + \"\\tCUS_NAME\\n\" + \")\\n\" + \"SELECT A.DATE_ID,\\n\" + \"\\tA.CUS_NO,\\n\" + \"\\tA.CUS_NAME\\n\" + \"FROM TABLE_TEST_2 \\n\" + \"WHERE COL1='1';\";",
                "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "sqlStatement2.getColumns().get(0).addAfterComment(\"-- comment\u6ce8\u91ca0\");",
                "sqlStatement2.getColumns().get(1).addAfterComment(\"-- comment\u6ce8\u91ca1\");",
                "sqlStatement2.getColumns().get(2).addAfterComment(\"-- comment\u6ce8\u91ca2\");",
                "sqlStatement2.getColumns().get(0).addAfterComment(\"-- comment\u6ce8\u91ca3\");",
                "sqlStatement2.getColumns().get(1).addAfterComment(\"-- comment\u6ce8\u91ca4\");",
                "sqlStatement2.getColumns().get(2).addAfterComment(\"-- comment\u6ce8\u91ca5\");"
            ]
        ],
        "selected": {
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h1Test0": [
                "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID,-- qianzhushi\\n\" + \"\\tCUS_NO -- houzhushi\\n,\\n\" + \"\\tCUS_NAME\\n\" + \")\\n\" + \"SELECT A.DATE_ID,\\n\" + \"\\tA.CUS_NO,\\n\" + \"\\tA.CUS_NAME\\n\" + \"FROM TABLE_TEST_2 \\n\" + \"WHERE COL1='1';\";",
                "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "sqlStatement2.getColumns().get(0).addAfterComment(\"-- comment\u6ce8\u91ca0\");",
                "sqlStatement2.getColumns().get(1).addAfterComment(\"-- comment\u6ce8\u91ca1\");",
                "sqlStatement2.getColumns().get(2).addAfterComment(\"-- comment\u6ce8\u91ca2\");"
            ],
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h1Test1": [
                "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID,-- qianzhushi\\n\" + \"\\tCUS_NO -- houzhushi\\n,\\n\" + \"\\tCUS_NAME\\n\" + \")\\n\" + \"SELECT A.DATE_ID,\\n\" + \"\\tA.CUS_NO,\\n\" + \"\\tA.CUS_NAME\\n\" + \"FROM TABLE_TEST_2 \\n\" + \"WHERE COL1='1';\";",
                "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "sqlStatement2.getColumns().get(0).addAfterComment(\"-- comment\u6ce8\u91ca0\");",
                "sqlStatement2.getColumns().get(1).addAfterComment(\"-- comment\u6ce8\u91ca1\");",
                "sqlStatement2.getColumns().get(2).addAfterComment(\"-- comment\u6ce8\u91ca2\");",
                "sqlStatement2.getColumns().get(0).addAfterComment(\"-- comment\u6ce8\u91ca3\");",
                "sqlStatement2.getColumns().get(1).addAfterComment(\"-- comment\u6ce8\u91ca4\");",
                "sqlStatement2.getColumns().get(2).addAfterComment(\"-- comment\u6ce8\u91ca5\");"
            ]
        },
        "processed_generated": {
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h1Test0": [
                "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID,-- qianzhushi\\n\" + \"\\tCUS_NO -- houzhushi\\n,\\n\" + \"\\tCUS_NAME\\n\" + \")\\n\" + \"SELECT A.DATE_ID,\\n\" + \"\\tA.CUS_NO,\\n\" + \"\\tA.CUS_NAME\\n\" + \"FROM TABLE_TEST_2 \\n\" + \"WHERE COL1='1';\";",
                "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);"
            ],
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h1Test1": [
                "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID,-- qianzhushi\\n\" + \"\\tCUS_NO -- houzhushi\\n,\\n\" + \"\\tCUS_NAME\\n\" + \")\\n\" + \"SELECT A.DATE_ID,\\n\" + \"\\tA.CUS_NO,\\n\" + \"\\tA.CUS_NAME\\n\" + \"FROM TABLE_TEST_2 \\n\" + \"WHERE COL1='1';\";",
                "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
                "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);"
            ]
        },
        "original_h": [
            "String sql = \"INSERT INTO TABLE_TEST_1(\\n\" + \"\\tDATE_ID,-- qianzhushi\\n\" + \"\\tCUS_NO -- houzhushi\\n,\\n\" + \"\\tCUS_NAME\\n\" + \")\\n\" + \"SELECT A.DATE_ID,\\n\" + \"\\tA.CUS_NO,\\n\" + \"\\tA.CUS_NAME\\n\" + \"FROM TABLE_TEST_2 \\n\" + \"WHERE COL1='1';\";",
            "MySqlInsertStatement sqlStatement = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);",
            "MySqlInsertStatement sqlStatement2 = (MySqlInsertStatement) SQLUtils.parseSingleStatement(sql, DbType.mysql, true);"
        ]
    },
    "org.apache.druid.msq.exec.WorkerStorageParametersTest.test_WorkerStorageParameter_createInstance()": {
        "generated_inputs_class": [
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h1Test0",
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h1Test1",
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h1Test2",
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h1Test3",
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "long l = 0;",
                "long l2 = 0;",
                "boolean b = true;"
            ],
            [
                "long l = 0;",
                "long l2 = 0;",
                "boolean b = true;"
            ],
            [
                "long l = -1;",
                "long l2 = -1;",
                "boolean b = false;"
            ],
            [
                "long l = -1;",
                "long l2 = -1;",
                "boolean b = false;"
            ],
            [
                "long l = Long.MAX_VALUE;",
                "long l2 = Long.MAX_VALUE;",
                "boolean b = true;"
            ],
            [
                "long l = Long.MAX_VALUE;",
                "long l2 = Long.MAX_VALUE;",
                "boolean b = true;"
            ],
            [
                "long l = 500000000;",
                "long l2 = 500000000;",
                "boolean b = true;"
            ],
            [
                "long l = 500000000;",
                "long l2 = 500000000;",
                "boolean b = true;"
            ],
            [
                "long l = -500000000;",
                "long l2 = -500000000;",
                "boolean b = false;"
            ],
            [
                "long l = -500000000;",
                "long l2 = -500000000;",
                "boolean b = false;"
            ]
        ],
        "selected": {
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h1Test0": [
                "long l = 0;",
                "long l2 = 0;",
                "boolean b = true;"
            ],
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h1Test1": [
                "long l = -1;",
                "long l2 = -1;",
                "boolean b = false;"
            ],
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h1Test2": [
                "long l = Long.MAX_VALUE;",
                "long l2 = Long.MAX_VALUE;",
                "boolean b = true;"
            ],
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h1Test3": [
                "long l = 500000000;",
                "long l2 = 500000000;",
                "boolean b = true;"
            ],
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h1Test4": [
                "long l = -500000000;",
                "long l2 = -500000000;",
                "boolean b = false;"
            ]
        },
        "processed_generated": {
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h1Test0": [
                "long l = 0;",
                "long l2 = 0;",
                "boolean b = true;"
            ],
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h1Test1": [
                "long l = -1;",
                "long l2 = -1;",
                "boolean b = false;"
            ],
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h1Test2": [
                "long l = Long.MAX_VALUE;",
                "long l2 = Long.MAX_VALUE;",
                "boolean b = true;"
            ],
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h1Test3": [
                "long l = 500000000;",
                "long l2 = 500000000;",
                "boolean b = true;"
            ],
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h1Test4": [
                "long l = -500000000;",
                "long l2 = -500000000;",
                "boolean b = false;"
            ]
        },
        "original_h": [
            "long l = 1000000000;",
            "long l2 = 2_250_000_000L;",
            "boolean b = true;"
        ]
    },
    "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest.testGetPlugin()": {
        "generated_inputs_class": [
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h1Test0",
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h1Test1",
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h1Test2",
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h1Test3",
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin(\"CustomPlugin\");",
                "String pluginId = \"CustomPlugin\";"
            ],
            [
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin(null);",
                "String pluginId = null;"
            ],
            [
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin(new ArrayList<>());",
                "String pluginId = \"ArrayList\";"
            ],
            [
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin(new HashMap<>());",
                "String pluginId = \"HashMap\";"
            ],
            [
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin(new Object());",
                "String pluginId = \"Object\";"
            ]
        ],
        "selected": {
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h1Test0": [
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin(\"CustomPlugin\");",
                "String pluginId = \"CustomPlugin\";"
            ],
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h1Test1": [
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin(null);",
                "String pluginId = null;"
            ],
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h1Test2": [
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin(new ArrayList<>());",
                "String pluginId = \"ArrayList\";"
            ],
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h1Test3": [
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin(new HashMap<>());",
                "String pluginId = \"HashMap\";"
            ],
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h1Test4": [
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin(new Object());",
                "String pluginId = \"Object\";"
            ]
        },
        "processed_generated": {
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h1Test0": [
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin(\"CustomPlugin\");",
                "String pluginId = \"CustomPlugin\";"
            ],
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h1Test1": [
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin(null);",
                "String pluginId = null;"
            ],
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h1Test2": [
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin(new ArrayList<>());",
                "String pluginId = \"ArrayList\";"
            ],
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h1Test3": [
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin(new HashMap<>());",
                "String pluginId = \"HashMap\";"
            ],
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h1Test4": [
                "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin(new Object());",
                "String pluginId = \"Object\";"
            ]
        },
        "original_h": [
            "ThreadPoolPlugin plugin = new TestExecuteAwarePlugin();",
            "String pluginId = \"TestExecuteAwarePlugin\";"
        ]
    },
    "org.ethereum.rpc.FilterTest.testGetNewEvents()": {
        "generated_inputs_class": [
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h1Test0",
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h1Test1",
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h1Test2",
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h1Test3",
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "Filter.FilterEvent mockEvent = new FilterEventMock(\"Event1\", \"Type1\", \"Description1\");",
                "Filter filter = new Filter();",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock(\"Event1\", \"Type1\", \"Description1\");",
                "Filter filter2 = new Filter();"
            ],
            [
                "Filter.FilterEvent mockEvent = new FilterEventMock(\"Event2\", \"\", \"Description2\");",
                "Filter filter = new Filter();",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock(\"Event2\", \"\", \"Description2\");",
                "Filter filter2 = new Filter();"
            ],
            [
                "Filter.FilterEvent mockEvent = new FilterEventMock(\"Event3\", \"Type3\", \"\");",
                "Filter filter = new Filter();",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock(\"Event3\", \"Type3\", \"\");",
                "Filter filter2 = new Filter();"
            ],
            [
                "Filter.FilterEvent mockEvent = new FilterEventMock(\"Event4\", \"Type4\", \"Description4\");",
                "Filter filter = new Filter();",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock(\"Event4\", \"Type4\", \"Description4\");",
                "Filter filter2 = new Filter();"
            ],
            [
                "Filter.FilterEvent mockEvent = new FilterEventMock(\"Event5\", \"Type5\", \"Description5\");",
                "Filter filter = new Filter();",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock(\"Event5\", \"Type5\", \"Description5\");",
                "Filter filter2 = new Filter();"
            ]
        ],
        "selected": {
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h1Test0": [
                "Filter.FilterEvent mockEvent = new FilterEventMock(\"Event1\", \"Type1\", \"Description1\");",
                "Filter filter = new Filter();",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock(\"Event1\", \"Type1\", \"Description1\");",
                "Filter filter2 = new Filter();"
            ],
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h1Test1": [
                "Filter.FilterEvent mockEvent = new FilterEventMock(\"Event2\", \"\", \"Description2\");",
                "Filter filter = new Filter();",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock(\"Event2\", \"\", \"Description2\");",
                "Filter filter2 = new Filter();"
            ],
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h1Test2": [
                "Filter.FilterEvent mockEvent = new FilterEventMock(\"Event3\", \"Type3\", \"\");",
                "Filter filter = new Filter();",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock(\"Event3\", \"Type3\", \"\");",
                "Filter filter2 = new Filter();"
            ],
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h1Test3": [
                "Filter.FilterEvent mockEvent = new FilterEventMock(\"Event4\", \"Type4\", \"Description4\");",
                "Filter filter = new Filter();",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock(\"Event4\", \"Type4\", \"Description4\");",
                "Filter filter2 = new Filter();"
            ],
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h1Test4": [
                "Filter.FilterEvent mockEvent = new FilterEventMock(\"Event5\", \"Type5\", \"Description5\");",
                "Filter filter = new Filter();",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock(\"Event5\", \"Type5\", \"Description5\");",
                "Filter filter2 = new Filter();"
            ]
        },
        "processed_generated": {
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h1Test0": [
                "Filter.FilterEvent mockEvent = new FilterEventMock(\"Event1\", \"Type1\", \"Description1\");",
                "Filter filter = new Filter();",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock(\"Event1\", \"Type1\", \"Description1\");",
                "Filter filter2 = new Filter();"
            ],
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h1Test1": [
                "Filter.FilterEvent mockEvent = new FilterEventMock(\"Event2\", \"\", \"Description2\");",
                "Filter filter = new Filter();",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock(\"Event2\", \"\", \"Description2\");",
                "Filter filter2 = new Filter();"
            ],
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h1Test2": [
                "Filter.FilterEvent mockEvent = new FilterEventMock(\"Event3\", \"Type3\", \"\");",
                "Filter filter = new Filter();",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock(\"Event3\", \"Type3\", \"\");",
                "Filter filter2 = new Filter();"
            ],
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h1Test3": [
                "Filter.FilterEvent mockEvent = new FilterEventMock(\"Event4\", \"Type4\", \"Description4\");",
                "Filter filter = new Filter();",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock(\"Event4\", \"Type4\", \"Description4\");",
                "Filter filter2 = new Filter();"
            ],
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h1Test4": [
                "Filter.FilterEvent mockEvent = new FilterEventMock(\"Event5\", \"Type5\", \"Description5\");",
                "Filter filter = new Filter();",
                "Filter.FilterEvent mockEvent2 = new FilterEventMock(\"Event5\", \"Type5\", \"Description5\");",
                "Filter filter2 = new Filter();"
            ]
        },
        "original_h": [
            "Filter.FilterEvent mockEvent = new FilterEventMock();",
            "Filter filter = new Filter();",
            "Filter.FilterEvent mockEvent2 = new FilterEventMock();",
            "Filter filter2 = new Filter();"
        ]
    },
    "org.threeten.extra.TestYearHalf.test_parse_CharSequenceDateTimeFormatter()": {
        "generated_inputs_class": [
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h1Test0",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h1Test1",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h1Test2",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h1Test3",
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
                "CharSequence text = \"H2 2020\";",
                "int year = 2020;",
                "int half = 2;"
            ],
            [
                "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
                "CharSequence text = \"H1 1999\";",
                "int year = 1999;",
                "int half = 1;"
            ],
            [
                "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
                "CharSequence text = \"H3 2000\";",
                "int year = 2000;",
                "int half = 3;"
            ],
            [
                "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
                "CharSequence text = \"H1 1800\";",
                "int year = 1800;",
                "int half = 1;"
            ],
            [
                "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
                "CharSequence text = \"H1 2100\";",
                "int year = 2100;",
                "int half = 1;"
            ],
            [
                "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
                "CharSequence text = \"H2 2020\";",
                "int year = 2020;",
                "int half = 2;"
            ],
            [
                "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
                "CharSequence text = \"H1 1999\";",
                "int year = 1999;",
                "int half = 1;"
            ],
            [
                "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
                "CharSequence text = \"H3 2000\";",
                "int year = 2000;",
                "int half = 3;"
            ],
            [
                "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
                "CharSequence text = \"H1 1800\";",
                "int year = 1800;",
                "int half = 1;"
            ],
            [
                "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
                "CharSequence text = \"H1 2100\";",
                "int year = 2100;",
                "int half = 1;"
            ]
        ],
        "selected": {
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h1Test0": [
                "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
                "CharSequence text = \"H2 2020\";",
                "int year = 2020;",
                "int half = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h1Test1": [
                "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
                "CharSequence text = \"H1 1999\";",
                "int year = 1999;",
                "int half = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h1Test2": [
                "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
                "CharSequence text = \"H3 2000\";",
                "int year = 2000;",
                "int half = 3;"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h1Test3": [
                "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
                "CharSequence text = \"H1 1800\";",
                "int year = 1800;",
                "int half = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h1Test4": [
                "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
                "CharSequence text = \"H1 2100\";",
                "int year = 2100;",
                "int half = 1;"
            ]
        },
        "processed_generated": {
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h1Test0": [
                "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
                "CharSequence text = \"H2 2020\";",
                "int year = 2020;",
                "int half = 2;"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h1Test1": [
                "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
                "CharSequence text = \"H1 1999\";",
                "int year = 1999;",
                "int half = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h1Test2": [
                "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
                "CharSequence text = \"H3 2000\";",
                "int year = 2000;",
                "int half = 3;"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h1Test3": [
                "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
                "CharSequence text = \"H1 1800\";",
                "int year = 1800;",
                "int half = 1;"
            ],
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h1Test4": [
                "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
                "CharSequence text = \"H1 2100\";",
                "int year = 2100;",
                "int half = 1;"
            ]
        },
        "original_h": [
            "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();",
            "CharSequence text = \"H1 2012\";",
            "int year = 2012;",
            "int half = 1;"
        ]
    },
    "com.dslplatform.json.DateTest.localTimeBoundary()": {
        "generated_inputs_class": [
            "com.dslplatform.json.DateTest_localTimeBoundary_h1Test0",
            "com.dslplatform.json.DateTest_localTimeBoundary_h1Test1",
            "com.dslplatform.json.DateTest_localTimeBoundary_h1Test2",
            "com.dslplatform.json.DateTest_localTimeBoundary_h1Test3",
            "com.dslplatform.json.DateTest_localTimeBoundary_h1Test4"
        ],
        "generated_all_blocks": [
            [
                "LocalTime now = LocalTime.parse(\"00:00:00\");",
                "JsonWriter jw = dslJson.newWriter(20);",
                "LocalTime[] lts = new LocalTime[2];",
                "Arrays.fill(lts, now);",
                "byte[] body = { 91, 34, 48, 48, 58, 48, 48, 58, 48, 48, 34, 44, 34, 48, 48, 58, 48, 48, 58, 48, 48, 34, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0 };",
                "int size = 30;"
            ],
            [
                "LocalTime now = LocalTime.parse(\"23:59:59\");",
                "JsonWriter jw = dslJson.newWriter(20);",
                "LocalTime[] lts = new LocalTime[2];",
                "Arrays.fill(lts, now);",
                "byte[] body = { 91, 34, 50, 51, 58, 53, 57, 58, 53, 57, 34, 44, 34, 50, 51, 58, 53, 57, 58, 53, 57, 34, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0 };",
                "int size = 30;"
            ],
            [
                "LocalTime now = LocalTime.parse(\"12:13:14\");",
                "JsonWriter jw = dslJson.newWriter(20);",
                "LocalTime[] lts = new LocalTime[2];",
                "Arrays.fill(lts, now);",
                "byte[] body = { 91, 34, 49, 50, 58, 49, 51, 58, 49, 52, 34, 44, 34, 49, 50, 58, 49, 51, 58, 49, 52, 34, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0 };",
                "int size = 30;"
            ],
            [
                "LocalTime now = LocalTime.parse(\"00:00:00.000000001\");",
                "JsonWriter jw = dslJson.newWriter(20);",
                "LocalTime[] lts = new LocalTime[2];",
                "Arrays.fill(lts, now);",
                "byte[] body = { 91, 34, 48, 48, 58, 48, 48, 58, 48, 48, 46, 48, 48, 48, 48, 48, 48, 48, 49, 34, 44, 34, 48, 48, 58, 48, 48, 58, 48, 48, 34, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0 };",
                "int size = 31;"
            ],
            [
                "LocalTime now = LocalTime.parse(\"23:59:59.999999999\");",
                "JsonWriter jw = dslJson.newWriter(20);",
                "LocalTime[] lts = new LocalTime[2];",
                "Arrays.fill(lts, now);",
                "byte[] body = { 91, 34, 50, 51, 58, 53, 57, 58, 53, 57, 46, 57, 57, 57, 57, 57, 57, 57, 57, 34, 44, 34, 50, 51, 58, 53, 57, 58, 53, 57, 34, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0 };",
                "int size = 31;"
            ]
        ],
        "selected": {
            "com.dslplatform.json.DateTest_localTimeBoundary_h1Test0": [
                "LocalTime now = LocalTime.parse(\"00:00:00\");",
                "JsonWriter jw = dslJson.newWriter(20);",
                "LocalTime[] lts = new LocalTime[2];",
                "Arrays.fill(lts, now);",
                "byte[] body = { 91, 34, 48, 48, 58, 48, 48, 58, 48, 48, 34, 44, 34, 48, 48, 58, 48, 48, 58, 48, 48, 34, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0 };",
                "int size = 30;"
            ],
            "com.dslplatform.json.DateTest_localTimeBoundary_h1Test1": [
                "LocalTime now = LocalTime.parse(\"23:59:59\");",
                "JsonWriter jw = dslJson.newWriter(20);",
                "LocalTime[] lts = new LocalTime[2];",
                "Arrays.fill(lts, now);",
                "byte[] body = { 91, 34, 50, 51, 58, 53, 57, 58, 53, 57, 34, 44, 34, 50, 51, 58, 53, 57, 58, 53, 57, 34, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0 };",
                "int size = 30;"
            ],
            "com.dslplatform.json.DateTest_localTimeBoundary_h1Test2": [
                "LocalTime now = LocalTime.parse(\"12:13:14\");",
                "JsonWriter jw = dslJson.newWriter(20);",
                "LocalTime[] lts = new LocalTime[2];",
                "Arrays.fill(lts, now);",
                "byte[] body = { 91, 34, 49, 50, 58, 49, 51, 58, 49, 52, 34, 44, 34, 49, 50, 58, 49, 51, 58, 49, 52, 34, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0 };",
                "int size = 30;"
            ],
            "com.dslplatform.json.DateTest_localTimeBoundary_h1Test3": [
                "LocalTime now = LocalTime.parse(\"00:00:00.000000001\");",
                "JsonWriter jw = dslJson.newWriter(20);",
                "LocalTime[] lts = new LocalTime[2];",
                "Arrays.fill(lts, now);",
                "byte[] body = { 91, 34, 48, 48, 58, 48, 48, 58, 48, 48, 46, 48, 48, 48, 48, 48, 48, 48, 49, 34, 44, 34, 48, 48, 58, 48, 48, 58, 48, 48, 34, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0 };",
                "int size = 31;"
            ],
            "com.dslplatform.json.DateTest_localTimeBoundary_h1Test4": [
                "LocalTime now = LocalTime.parse(\"23:59:59.999999999\");",
                "JsonWriter jw = dslJson.newWriter(20);",
                "LocalTime[] lts = new LocalTime[2];",
                "Arrays.fill(lts, now);",
                "byte[] body = { 91, 34, 50, 51, 58, 53, 57, 58, 53, 57, 46, 57, 57, 57, 57, 57, 57, 57, 57, 34, 44, 34, 50, 51, 58, 53, 57, 58, 53, 57, 34, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0 };",
                "int size = 31;"
            ]
        },
        "processed_generated": {
            "com.dslplatform.json.DateTest_localTimeBoundary_h1Test0": [
                "LocalTime now = LocalTime.parse(\"00:00:00\");",
                "JsonWriter jw = dslJson.newWriter(20);",
                "LocalTime[] lts = new LocalTime[2];",
                "Arrays.fill(lts, now);",
                "byte[] body = { 91, 34, 48, 48, 58, 48, 48, 58, 48, 48, 34, 44, 34, 48, 48, 58, 48, 48, 58, 48, 48, 34, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0 };",
                "int size = 30;"
            ],
            "com.dslplatform.json.DateTest_localTimeBoundary_h1Test1": [
                "LocalTime now = LocalTime.parse(\"23:59:59\");",
                "JsonWriter jw = dslJson.newWriter(20);",
                "LocalTime[] lts = new LocalTime[2];",
                "Arrays.fill(lts, now);",
                "byte[] body = { 91, 34, 50, 51, 58, 53, 57, 58, 53, 57, 34, 44, 34, 50, 51, 58, 53, 57, 58, 53, 57, 34, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0 };",
                "int size = 30;"
            ],
            "com.dslplatform.json.DateTest_localTimeBoundary_h1Test2": [
                "LocalTime now = LocalTime.parse(\"12:13:14\");",
                "JsonWriter jw = dslJson.newWriter(20);",
                "LocalTime[] lts = new LocalTime[2];",
                "Arrays.fill(lts, now);",
                "byte[] body = { 91, 34, 49, 50, 58, 49, 51, 58, 49, 52, 34, 44, 34, 49, 50, 58, 49, 51, 58, 49, 52, 34, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0 };",
                "int size = 30;"
            ],
            "com.dslplatform.json.DateTest_localTimeBoundary_h1Test3": [
                "LocalTime now = LocalTime.parse(\"00:00:00.000000001\");",
                "JsonWriter jw = dslJson.newWriter(20);",
                "LocalTime[] lts = new LocalTime[2];",
                "Arrays.fill(lts, now);",
                "byte[] body = { 91, 34, 48, 48, 58, 48, 48, 58, 48, 48, 46, 48, 48, 48, 48, 48, 48, 48, 49, 34, 44, 34, 48, 48, 58, 48, 48, 58, 48, 48, 34, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0 };",
                "int size = 31;"
            ],
            "com.dslplatform.json.DateTest_localTimeBoundary_h1Test4": [
                "LocalTime now = LocalTime.parse(\"23:59:59.999999999\");",
                "JsonWriter jw = dslJson.newWriter(20);",
                "LocalTime[] lts = new LocalTime[2];",
                "Arrays.fill(lts, now);",
                "byte[] body = { 91, 34, 50, 51, 58, 53, 57, 58, 53, 57, 46, 57, 57, 57, 57, 57, 57, 57, 57, 34, 44, 34, 50, 51, 58, 53, 57, 58, 53, 57, 34, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0 };",
                "int size = 31;"
            ]
        },
        "original_h": [
            "LocalTime now = LocalTime.parse(\"12:13:14.123456789\");",
            "JsonWriter jw = dslJson.newWriter(20);",
            "LocalTime[] lts = new LocalTime[2];",
            "Arrays.fill(lts, now);",
            "byte[] body = { 91, 34, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 34, 44, 34, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 34, 93, 0, 0, 0, 0, 0, 0, 0, 0, 0 };",
            "int size = 43;"
        ]
    }
}