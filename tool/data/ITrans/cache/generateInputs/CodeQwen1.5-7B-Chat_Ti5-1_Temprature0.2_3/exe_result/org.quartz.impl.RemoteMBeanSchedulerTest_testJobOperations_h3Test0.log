JUnit version 4.13.2
.SLF4J: No SLF4J providers were found.
SLF4J: Defaulting to no-operation (NOP) logger implementation
SLF4J: See http://www.slf4j.org/codes.html#noProviders for further details.
E
Time: 0.488
There was 1 failure:
1) testJobOperations_h3Test0(org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test0)
org.quartz.SchedulerException: javax.management.RuntimeMBeanException: java.lang.NullPointerException [See nested exception: javax.management.RuntimeMBeanException: java.lang.NullPointerException]
	at org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test0$TestRemoteScheduler.invoke(RemoteMBeanSchedulerTest_testJobOperations_h3Test0.java:150)
	at org.quartz.impl.RemoteMBeanScheduler.getJobDetail(RemoteMBeanScheduler.java:774)
	at org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test0.testJobOperations_h3Test0(RemoteMBeanSchedulerTest_testJobOperations_h3Test0.java:101)
	... 34 trimmed
Caused by: javax.management.RuntimeMBeanException: java.lang.NullPointerException
	at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.rethrow(DefaultMBeanServerInterceptor.java:829)
	at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.rethrowMaybeMBeanException(DefaultMBeanServerInterceptor.java:842)
	at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:811)
	at java.management/com.sun.jmx.mbeanserver.JmxMBeanServer.invoke(JmxMBeanServer.java:801)
	at org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test0$TestRemoteScheduler.invoke(RemoteMBeanSchedulerTest_testJobOperations_h3Test0.java:148)
	... 37 more
Caused by: java.lang.NullPointerException
	at org.quartz.core.jmx.JobDetailSupport.toCompositeData(JobDetailSupport.java:117)
	at org.quartz.core.QuartzSchedulerMBeanImpl.getJobDetail(QuartzSchedulerMBeanImpl.java:370)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at sun.reflect.misc.Trampoline.invoke(MethodUtil.java:71)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
	at java.base/jdk.internal.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
	at java.base/jdk.internal.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
	at java.base/java.lang.reflect.Method.invoke(Method.java:566)
	at java.base/sun.reflect.misc.MethodUtil.invoke(MethodUtil.java:260)
	at java.management/com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:112)
	at java.management/com.sun.jmx.mbeanserver.StandardMBeanIntrospector.invokeM2(StandardMBeanIntrospector.java:46)
	at java.management/com.sun.jmx.mbeanserver.MBeanIntrospector.invokeM(MBeanIntrospector.java:237)
	at java.management/com.sun.jmx.mbeanserver.PerInterface.invoke(PerInterface.java:138)
	at java.management/com.sun.jmx.mbeanserver.MBeanSupport.invoke(MBeanSupport.java:252)
	at java.management/javax.management.StandardMBean.invoke(StandardMBean.java:405)
	at java.management/com.sun.jmx.interceptor.DefaultMBeanServerInterceptor.invoke(DefaultMBeanServerInterceptor.java:809)
	... 39 more

FAILURES!!!
Tests run: 1,  Failures: 1

CMD: cd /ssddata1/cxubl/data/ITrans/projects/quartz-scheduler__castle__quartz/ ; /ssddata1/cxubl/software/zulu_jdks/zulu11.62.17-ca-jdk11.0.18-linux_x64/bin/java -XX:ActiveProcessorCount=10 -classpath ./:./examples/build/classes/java/main/:./quartz-jobs/build/classes/java/test/:./quartz-jobs/build/classes/java/main/:./quartz-stubs/build/classes/java/main/:./quartz/build/classes/java/main/:./quartz/build/classes/java/test/:/ssddata1/cxubl/software/junit/junit-4.13.2.jar:/ssddata1/cxubl/software/junit/junit-jupiter-api-5.8.2.jar:/ssddata1/cxubl/software/junit/hamcrest-core-1.3.jar:/ssddata1/cxubl/.m2/repository/org/slf4j/slf4j-api/2.0.0/slf4j-api-2.0.0.jar:/ssddata1/cxubl/.m2/repository/org/apache/logging/log4j/log4j-api/2.1/log4j-api-2.1.jar:/ssddata1/cxubl/.m2/repository/com/google/guava/guava/33.0.0-jre/guava-33.0.0-jre.jar:/ssddata1/cxubl/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.4.0/jackson-databind-2.4.0.jar:/ssddata1/cxubl/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.12.1/jackson-core-2.12.1.jar:/ssddata1/cxubl/.m2/repository/org/springframework/spring-test/5.3.26/spring-test-5.3.26.jar:/ssddata1/cxubl/data/ITrans/projects/thingsboard__castle__thingsboard/dao/target/dependency/commons-logging-1.2.jar:/ssddata1/cxubl/.m2/repository/org/springframework/spring-core/5.3.2/spring-core-5.3.26.jar:arex-instrumentation-api/target/dependency/jackson-annotations-2.13.1.jar:arex-instrumentation-api/target/dependency/gson-2.10.1.jar:/ssddata1/cxubl/data/ITrans/projects/quartz-scheduler__castle__quartz/ITrans/processed_GT_only/:/ssddata1/cxubl/data/ITrans/projects/quartz-scheduler__castle__quartz/ITrans/processed_MTCITrans_only/:/ssddata1/cxubl/data/ITrans/projects/quartz-scheduler__castle__quartz/ITrans/generated_ITrans/:/ssddata1/cxubl/data/ITrans/projects/quartz-scheduler__castle__quartz/ITrans/generated_inputs/:/ssddata1/cxubl/data/ITrans/projects/quartz-scheduler__castle__quartz/ITrans/generated_inputs/w:/ssddata1/cxubl/data/ITrans/projects/quartz-scheduler__castle__quartz/ITrans/generated_inputs/ org.junit.runner.JUnitCore org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test0 > /ssddata1/cxubl/data/ITrans/projects/quartz-scheduler__castle__quartz/AutoMR/test_exe/org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test0.log 2>&1
file path: 
/ssddata1/cxubl/data/ITrans/projects/quartz-scheduler__castle__quartz/ITrans/generated_inputs/w/org/quartz/impl/RemoteMBeanSchedulerTest_testJobOperations_h3Test0.java
file content: 
/*
 * All content copyright Terracotta, Inc., unless otherwise indicated. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the License);
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an AS IS BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
package org.quartz.impl;

import org.quartz.impl.RemoteMBeanScheduler;
import org.quartz.impl.RemoteMBeanScheduler.*;
import static org.hamcrest.CoreMatchers.equalTo;
import static org.hamcrest.CoreMatchers.is;
import static org.hamcrest.CoreMatchers.notNullValue;
import static org.hamcrest.CoreMatchers.nullValue;
import static org.hamcrest.MatcherAssert.assertThat;
import static org.junit.Assert.assertArrayEquals;
import static org.junit.Assert.fail;
import static org.quartz.JobBuilder.newJob;
import static org.quartz.TriggerBuilder.newTrigger;
import org.junit.After;
import org.junit.Assert;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;
import org.quartz.Job;
import org.quartz.JobDetail;
import org.quartz.JobExecutionContext;
import org.quartz.JobExecutionException;
import org.quartz.JobKey;
import org.quartz.Scheduler;
import org.quartz.SchedulerException;
import org.quartz.SchedulerMetaData;
import org.quartz.Trigger;
import org.quartz.TriggerKey;
import org.quartz.core.QuartzSchedulerResources;
import org.quartz.impl.calendar.BaseCalendar;
import org.quartz.impl.matchers.GroupMatcher;
import java.lang.management.ManagementFactory;
import java.util.Collections;
import java.util.Date;
import java.util.List;
import java.util.Properties;
import javax.management.AttributeList;
import javax.management.MBeanServer;
import javax.management.MalformedObjectNameException;
import javax.management.ObjectName;

/**
 * RemoteMBeanSchedulerTest_testJobOperations_h3Test0
 */
public class RemoteMBeanSchedulerTest_testJobOperations_h3Test0 {

    public static final String TRIGGER_KEY = trigger1;

    public static final String GROUP_KEY = group1;

    public static final String JOB_KEY = job1;

    public static final String CALENDAR_KEY = calendar1;

    private Scheduler scheduler;

    private RemoteMBeanScheduler remoteScheduler;

    @Before
    public void setUp() throws Exception {
        Properties props = new Properties();
        props.put(org.quartz.scheduler.instanceName, TestScheduler);
        props.put(org.quartz.jobStore.class, org.quartz.simpl.RAMJobStore);
        props.put(org.quartz.threadPool.class, org.quartz.simpl.SimpleThreadPool);
        props.put(org.quartz.threadPool.threadCount, 1);
        props.put(org.quartz.scheduler.jmx.export, true);
        scheduler = new StdSchedulerFactory(props).getScheduler();
        JobDetail jobDetail = newJob(HelloJob.class).withIdentity(JOB_KEY, GROUP_KEY).build();
        Trigger trigger = newTrigger().withIdentity(TRIGGER_KEY, GROUP_KEY).startAt(new Date()).build();
        scheduler.addCalendar(CALENDAR_KEY, new BaseCalendar(), false, false);
        scheduler.scheduleJob(jobDetail, trigger);
        String objectName = QuartzSchedulerResources.generateJMXObjectName(scheduler.getSchedulerName(), scheduler.getSchedulerInstanceId());
        remoteScheduler = new TestRemoteScheduler(objectName);
    }

    @After
    public void tearDown() throws SchedulerException {
        scheduler.shutdown();
    }

    @Test
    public void testJobOperations_h3Test0() throws Exception {
    JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(job2, GROUP_KEY)).storeDurably().build();
    JobKey job22 = new JobKey(job2, newGroupKey);
        remoteScheduler.addJob(job2Detail, false);
        assertThat(remoteScheduler.getJobDetail(job22), equalTo(job2Detail));
    }

    public static class HelloJob implements Job {

        public void execute(JobExecutionContext context) throws JobExecutionException {
            System.out.println(hello world!);
        }
    }

    public static class TestRemoteScheduler extends RemoteMBeanScheduler {

        private MBeanServer mBeanServer;

        private ObjectName objectName;

        public TestRemoteScheduler(String objectName) throws SchedulerException, MalformedObjectNameException {
            this.objectName = new ObjectName(objectName);
            initialize();
        }

        @Override
        public void initialize() throws SchedulerException {
            mBeanServer = ManagementFactory.getPlatformMBeanServer();
        }

        @Override
        protected Object getAttribute(String attribute) throws SchedulerException {
            try {
                return mBeanServer.getAttribute(objectName, attribute);
            } catch (Exception e) {
                throw new SchedulerException(e);
            }
        }

        @Override
        protected AttributeList getAttributes(String[] attributes) throws SchedulerException {
            try {
                return mBeanServer.getAttributes(objectName, attributes);
            } catch (Exception e) {
                throw new SchedulerException(e);
            }
        }

        @Override
        protected Object invoke(String operationName, Object[] params, String[] signature) throws SchedulerException {
            try {
                return mBeanServer.invoke(objectName, operationName, params, signature);
            } catch (Exception e) {
                throw new SchedulerException(e);
            }
        }
    }
}


