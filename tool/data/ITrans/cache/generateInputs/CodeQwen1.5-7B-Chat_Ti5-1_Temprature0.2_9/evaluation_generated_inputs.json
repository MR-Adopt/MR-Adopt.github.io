[
    {
        "MTC_item": {
            "poj_name": "ngs-doo__split__dsl-json",
            "test_file_path": "./data/ITrans/projects/ngs-doo__split__dsl-json/library/src/test/java/com/dslplatform/json/DateTest.java",
            "test_simple_name": "zonedDateTimeBoundary",
            "FQS_testMethos": "com.dslplatform.json.DateTest.zonedDateTimeBoundary()",
            "assertionSTMT": "Assert.assertArrayEquals(lts, values)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ngs-doo__split__dsl-json/com.dslplatform.json.DateTest.zonedDateTimeBoundary__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.dslplatform.json.DslJson.serialize(com.dslplatform.json.JsonWriter, T[])",
                "com.dslplatform.json.DslJson.deserialize(java.lang.Class<TResult>, byte[], int)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "JsonWriter",
                    "expression": "jw",
                    "statement": "dslJson.serialize(jw, lts);",
                    "invocation": "dslJson.serialize(jw, lts)"
                },
                {
                    "type": "ZonedDateTime[]",
                    "expression": "lts",
                    "statement": "dslJson.serialize(jw, lts);",
                    "invocation": "dslJson.serialize(jw, lts)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Class<ZonedDateTime[]>",
                    "expression": "manifest",
                    "statement": "ZonedDateTime[] values = dslJson.deserialize(manifest, body, size);",
                    "invocation": "values = dslJson.deserialize(manifest, body, size)"
                },
                {
                    "type": "byte[]",
                    "expression": "body",
                    "statement": "ZonedDateTime[] values = dslJson.deserialize(manifest, body, size);",
                    "invocation": "values = dslJson.deserialize(manifest, body, size)"
                },
                {
                    "type": "int",
                    "expression": "size",
                    "statement": "ZonedDateTime[] values = dslJson.deserialize(manifest, body, size);",
                    "invocation": "values = dslJson.deserialize(manifest, body, size)"
                }
            ],
            "comments": "",
            "dependency": "com.dslplatform.json.DslJson;com.dslplatform.json.DslJson.*"
        },
        "pair_inputs": {
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "zonedDateTimeBoundary_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "zonedDateTimeBoundary_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "zonedDateTimeBoundary_h9Test2"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "zonedDateTimeBoundary_h9Test2": "zonedDateTimeBoundary_h9Test2"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "zonedDateTimeBoundary_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h9Test3": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "zonedDateTimeBoundary_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "zonedDateTimeBoundary_h9Test4": "zonedDateTimeBoundary_h9Test4"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "zonedDateTimeBoundary_h9Test4"
                    ],
                    "failure_info": {}
                }
            },
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h9Test5": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h9Test6": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "zonedDateTimeBoundary_h9Test6"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "zonedDateTimeBoundary_h9Test6": "zonedDateTimeBoundary_h9Test6"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "zonedDateTimeBoundary_h9Test6"
                    ],
                    "failure_info": {}
                }
            },
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h9Test7": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h9Test8": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "zonedDateTimeBoundary_h9Test8"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "zonedDateTimeBoundary_h9Test8": "zonedDateTimeBoundary_h9Test8"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "zonedDateTimeBoundary_h9Test8"
                    ],
                    "failure_info": {}
                }
            },
            "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h9Test9": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "apache__split__rocketmq",
            "test_file_path": "./data/ITrans/projects/apache__split__rocketmq/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/common/InFlightRequestFutureTest.java",
            "test_simple_name": "testInFlightRequestKey",
            "FQS_testMethos": "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest.testInFlightRequestKey()",
            "assertionSTMT": "Assert.assertEquals(requestKey1.hashCode(), requestKey2.hashCode())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__split__rocketmq/org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest.testInFlightRequestKey__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.apache.rocketmq.tieredstore.common.InFlightRequestKey.hashCode()",
                "org.apache.rocketmq.tieredstore.common.InFlightRequestKey.hashCode()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "InFlightRequestKey",
                    "expression": "requestKey1",
                    "statement": "Assert.assertEquals(requestKey1.hashCode(), requestKey2.hashCode())",
                    "invocation": "requestKey1.hashCode()"
                }
            ],
            "followUpInput": [
                {
                    "type": "InFlightRequestKey",
                    "expression": "requestKey2",
                    "statement": "Assert.assertEquals(requestKey1.hashCode(), requestKey2.hashCode())",
                    "invocation": "requestKey2.hashCode()"
                }
            ],
            "comments": "",
            "dependency": "org.apache.rocketmq.tieredstore.common.InFlightRequestKey;org.apache.rocketmq.tieredstore.common.InFlightRequestKey.*;org.apache.rocketmq.tieredstore.common.InFlightRequestFuture;org.apache.rocketmq.tieredstore.common.InFlightRequestFuture.*"
        },
        "pair_inputs": {
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testInFlightRequestKey_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testInFlightRequestKey_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testInFlightRequestKey_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testInFlightRequestKey_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testInFlightRequestKey_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testInFlightRequestKey_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testInFlightRequestKey_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testInFlightRequestKey_h9Test3"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "dromara__split__hutool",
            "test_file_path": "./data/ITrans/projects/dromara__split__hutool/hutool-json/src/test/java/cn/hutool/json/IssueI6SZYBTest.java",
            "test_simple_name": "pairTest",
            "FQS_testMethos": "cn.hutool.json.IssueI6SZYBTest.pairTest()",
            "assertionSTMT": "Assert.assertEquals(pair, bean)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/dromara__split__hutool/cn.hutool.json.IssueI6SZYBTest.pairTest__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "cn.hutool.json.JSONUtil.toJsonStr(java.lang.Object)",
                "cn.hutool.json.JSONUtil.toBean(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Pair<Integer, Integer>",
                    "expression": "pair",
                    "statement": "String json = JSONUtil.toJsonStr(pair);",
                    "invocation": "json = JSONUtil.toJsonStr(pair)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "jsonString",
                    "statement": "final Pair bean = JSONUtil.toBean(jsonString, beanClass);",
                    "invocation": "bean = JSONUtil.toBean(jsonString, beanClass)"
                },
                {
                    "type": "Class<Pair>",
                    "expression": "beanClass",
                    "statement": "final Pair bean = JSONUtil.toBean(jsonString, beanClass);",
                    "invocation": "bean = JSONUtil.toBean(jsonString, beanClass)"
                }
            ],
            "comments": "",
            "dependency": "cn.hutool.json.JSONUtil;cn.hutool.json.JSONUtil.*"
        },
        "pair_inputs": {
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "pairTest_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "pairTest_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "pairTest_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "pairTest_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "pairTest_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "pairTest_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "pairTest_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "pairTest_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "cn.hutool.json.IssueI6SZYBTest_pairTest_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "pairTest_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "pairTest_h9Test4": "pairTest_h9Test4"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "pairTest_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "dromara__split__hutool",
            "test_file_path": "./data/ITrans/projects/dromara__split__hutool/hutool-json/src/test/java/cn/hutool/json/IssueI6SZYBTest.java",
            "test_simple_name": "entryTest",
            "FQS_testMethos": "cn.hutool.json.IssueI6SZYBTest.entryTest()",
            "assertionSTMT": "Assert.assertEquals(pair, bean)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/dromara__split__hutool/cn.hutool.json.IssueI6SZYBTest.entryTest__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "cn.hutool.json.JSONUtil.toJsonStr(java.lang.Object)",
                "cn.hutool.json.JSONUtil.toBean(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map.Entry<String, Integer>",
                    "expression": "pair",
                    "statement": "String json = JSONUtil.toJsonStr(pair);",
                    "invocation": "json = JSONUtil.toJsonStr(pair)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "jsonString",
                    "statement": "final Map.Entry bean = (Entry) JSONUtil.toBean(jsonString, beanClass);",
                    "invocation": "bean = (Entry) JSONUtil.toBean(jsonString, beanClass)"
                },
                {
                    "type": "Class",
                    "expression": "beanClass",
                    "statement": "final Map.Entry bean = (Entry) JSONUtil.toBean(jsonString, beanClass);",
                    "invocation": "bean = (Entry) JSONUtil.toBean(jsonString, beanClass)"
                }
            ],
            "comments": "",
            "dependency": "cn.hutool.json.JSONUtil;cn.hutool.json.JSONUtil.*"
        },
        "pair_inputs": {
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entryTest_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entryTest_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entryTest_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entryTest_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entryTest_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entryTest_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entryTest_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entryTest_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "entryTest_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "entryTest_h9Test4": "entryTest_h9Test4"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entryTest_h9Test4"
                    ],
                    "failure_info": {}
                }
            },
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h9Test5": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "entryTest_h9Test5"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "entryTest_h9Test5": "entryTest_h9Test5"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "entryTest_h9Test5"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "entryTest_h9Test5": "entryTest_h9Test5"
                    }
                }
            },
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h9Test6": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entryTest_h9Test6"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entryTest_h9Test6"
                    ],
                    "failure_info": {}
                }
            },
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h9Test7": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entryTest_h9Test7"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entryTest_h9Test7"
                    ],
                    "failure_info": {}
                }
            },
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h9Test8": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entryTest_h9Test8"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entryTest_h9Test8"
                    ],
                    "failure_info": {}
                }
            },
            "cn.hutool.json.IssueI6SZYBTest_entryTest_h9Test9": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entryTest_h9Test9"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entryTest_h9Test9"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "dromara__split__hutool",
            "test_file_path": "./data/ITrans/projects/dromara__split__hutool/hutool-json/src/test/java/cn/hutool/json/IssueI7GPGXTest.java",
            "test_simple_name": "toBeanTest",
            "FQS_testMethos": "cn.hutool.json.IssueI7GPGXTest.toBeanTest()",
            "assertionSTMT": "Assert.assertEquals(hutoolPair, pair)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/dromara__split__hutool/cn.hutool.json.IssueI7GPGXTest.toBeanTest__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "cn.hutool.json.JSONUtil.toJsonStr(java.lang.Object)",
                "cn.hutool.json.JSONUtil.toBean(java.lang.String, cn.hutool.core.lang.TypeReference<T>, boolean)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Pair<String, Boolean>",
                    "expression": "hutoolPair",
                    "statement": "String json = JSONUtil.toJsonStr(hutoolPair);",
                    "invocation": "json = JSONUtil.toJsonStr(hutoolPair)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "jsonString",
                    "statement": "final Pair<String, Boolean> pair = JSONUtil.toBean(jsonString ,typeReference, ignoreError);",
                    "invocation": "pair = JSONUtil.toBean(jsonString ,typeReference, ignoreError)"
                },
                {
                    "type": "TypeReference<Pair<String, Boolean>>",
                    "expression": "typeReference",
                    "statement": "final Pair<String, Boolean> pair = JSONUtil.toBean(jsonString ,typeReference, ignoreError);",
                    "invocation": "pair = JSONUtil.toBean(jsonString ,typeReference, ignoreError)"
                },
                {
                    "type": "boolean",
                    "expression": "ignoreError",
                    "statement": "final Pair<String, Boolean> pair = JSONUtil.toBean(jsonString ,typeReference, ignoreError);",
                    "invocation": "pair = JSONUtil.toBean(jsonString ,typeReference, ignoreError)"
                }
            ],
            "comments": "",
            "dependency": "cn.hutool.json.JSONUtil;cn.hutool.json.JSONUtil.*"
        },
        "pair_inputs": {
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "toBeanTest_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "toBeanTest_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "toBeanTest_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "toBeanTest_h9Test2"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toBeanTest_h9Test2": "toBeanTest_h9Test2"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "toBeanTest_h9Test2"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toBeanTest_h9Test2": "toBeanTest_h9Test2"
                    }
                }
            },
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h9Test3": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "toBeanTest_h9Test3"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toBeanTest_h9Test3": "toBeanTest_h9Test3"
                    }
                }
            },
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "toBeanTest_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "toBeanTest_h9Test4"
                    ],
                    "failure_info": {}
                }
            },
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h9Test5": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "toBeanTest_h9Test5"
                    ],
                    "failure_info": {}
                }
            },
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h9Test6": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "toBeanTest_h9Test6"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "toBeanTest_h9Test6"
                    ],
                    "failure_info": {}
                }
            },
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h9Test7": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "toBeanTest_h9Test7"
                    ],
                    "failure_info": {}
                }
            },
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h9Test8": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "toBeanTest_h9Test8"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toBeanTest_h9Test8": "toBeanTest_h9Test8"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "toBeanTest_h9Test8"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toBeanTest_h9Test8": "toBeanTest_h9Test8"
                    }
                }
            },
            "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h9Test9": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "toBeanTest_h9Test9"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toBeanTest_h9Test9": "toBeanTest_h9Test9"
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "bootique__split__bootique",
            "test_file_path": "./data/ITrans/projects/bootique__split__bootique/bootique/src/test/java/io/bootique/di/KeyTest.java",
            "test_simple_name": "equals",
            "FQS_testMethos": "io.bootique.di.KeyTest.equals()",
            "assertionSTMT": "assertTrue(key1.equals(key2))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/bootique__split__bootique/io.bootique.di.KeyTest.equals__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "io.bootique.di.Key.get(java.lang.Class<T>)",
                "io.bootique.di.Key.get(java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Class<?>",
                    "expression": "type1",
                    "statement": "Key<?> key1 = Key.get(type1);",
                    "invocation": "key1 = Key.get(type1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Class<?>",
                    "expression": "type2",
                    "statement": "Key<?> key2 = Key.get(type2);",
                    "invocation": "key2 = Key.get(type2)"
                }
            ],
            "comments": "",
            "dependency": "io.bootique.di.Key;io.bootique.di.Key.*"
        },
        "pair_inputs": {
            "io.bootique.di.KeyTest_equals_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equals_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equals_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "io.bootique.di.KeyTest_equals_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equals_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equals_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "io.bootique.di.KeyTest_equals_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equals_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equals_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "io.bootique.di.KeyTest_equals_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equals_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equals_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "io.bootique.di.KeyTest_equals_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equals_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equals_h9Test4"
                    ],
                    "failure_info": {}
                }
            },
            "io.bootique.di.KeyTest_equals_h9Test5": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equals_h9Test5"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equals_h9Test5"
                    ],
                    "failure_info": {}
                }
            },
            "io.bootique.di.KeyTest_equals_h9Test6": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equals_h9Test6"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equals_h9Test6"
                    ],
                    "failure_info": {}
                }
            },
            "io.bootique.di.KeyTest_equals_h9Test7": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equals_h9Test7"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equals_h9Test7"
                    ],
                    "failure_info": {}
                }
            },
            "io.bootique.di.KeyTest_equals_h9Test8": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equals_h9Test8"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equals_h9Test8"
                    ],
                    "failure_info": {}
                }
            },
            "io.bootique.di.KeyTest_equals_h9Test9": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equals_h9Test9"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equals_h9Test9"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "quartz-scheduler__split__quartz",
            "test_file_path": "./data/ITrans/projects/quartz-scheduler__split__quartz/quartz/src/test/java/org/quartz/impl/RemoteMBeanSchedulerTest.java",
            "test_simple_name": "testJobOperations",
            "FQS_testMethos": "org.quartz.impl.RemoteMBeanSchedulerTest.testJobOperations()",
            "assertionSTMT": "assertThat(remoteScheduler.getJobDetail(job22), equalTo(job2Detail))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/quartz-scheduler__split__quartz/org.quartz.impl.RemoteMBeanSchedulerTest.testJobOperations__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.quartz.impl.RemoteMBeanScheduler.addJob(org.quartz.JobDetail, boolean)",
                "org.quartz.impl.RemoteMBeanScheduler.getJobDetail(org.quartz.JobKey)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "JobDetail",
                    "expression": "job2Detail",
                    "statement": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().build();",
                    "invocation": "job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().build()"
                }
            ],
            "followUpInput": [
                {
                    "type": "JobKey",
                    "expression": "job22",
                    "statement": "assertThat(remoteScheduler.getJobDetail(job22), equalTo(job2Detail));",
                    "invocation": "remoteScheduler.getJobDetail(job22)"
                }
            ],
            "comments": "",
            "dependency": "org.quartz.impl.RemoteMBeanScheduler;org.quartz.impl.RemoteMBeanScheduler.*"
        },
        "pair_inputs": {
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testJobOperations_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testJobOperations_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testJobOperations_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testJobOperations_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testJobOperations_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testJobOperations_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testJobOperations_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testJobOperations_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testJobOperations_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testJobOperations_h9Test4"
                    ],
                    "failure_info": {}
                }
            },
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h9Test5": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testJobOperations_h9Test5"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testJobOperations_h9Test5"
                    ],
                    "failure_info": {}
                }
            },
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h9Test6": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h9Test7": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h9Test8": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h9Test9": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "jhy__split__jsoup",
            "test_file_path": "./data/ITrans/projects/jhy__split__jsoup/src/test/java/org/jsoup/parser/StreamParserTest.java",
            "test_simple_name": "select",
            "FQS_testMethos": "org.jsoup.parser.StreamParserTest.select()",
            "assertionSTMT": "assertSame(title2, title)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/jhy__split__jsoup/org.jsoup.parser.StreamParserTest.select__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.jsoup.parser.StreamParser.expectFirst(java.lang.String)",
                "org.jsoup.parser.StreamParser.selectFirst(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "StreamParser",
                    "expression": "parser",
                    "statement": "Element title = parser.expectFirst(queryTitle);",
                    "invocation": "title = parser.selectFirst(queryTitle)"
                },
                {
                    "type": "String",
                    "expression": "queryTitle",
                    "statement": "Element title = parser.expectFirst(queryTitle);",
                    "invocation": "title = parser.selectFirst(queryTitle)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "queryTitle2",
                    "statement": "Element title2 = parser.selectFirst(queryTitle2);",
                    "invocation": "title2 = parser.selectFirst(queryTitle2)"
                }
            ],
            "comments": "",
            "dependency": "org.jsoup.parser.StreamParser;org.jsoup.parser.StreamParser.*"
        },
        "pair_inputs": {
            "org.jsoup.parser.StreamParserTest_select_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "select_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "select_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.jsoup.parser.StreamParserTest_select_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.jsoup.parser.StreamParserTest_select_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "select_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "select_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.jsoup.parser.StreamParserTest_select_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "select_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "select_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.jsoup.parser.StreamParserTest_select_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "select_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "select_h9Test4"
                    ],
                    "failure_info": {}
                }
            },
            "org.jsoup.parser.StreamParserTest_select_h9Test5": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "select_h9Test5"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "select_h9Test5": "org.jsoup.helper.ValidationException: No elements matched the query 'nonexistent' in the document."
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "select_h9Test5"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "select_h9Test5": "org.jsoup.helper.ValidationException: No elements matched the query 'nonexistent' in the document."
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "vladmihalcea__split__high-performance-java-persistence",
            "test_file_path": "./data/ITrans/projects/vladmihalcea__split__high-performance-java-persistence/core/src/test/java/com/vladmihalcea/hpjp/util/CryptoUtilsTest.java",
            "test_simple_name": "testPerformance",
            "FQS_testMethos": "com.vladmihalcea.hpjp.util.CryptoUtilsTest.testPerformance()",
            "assertionSTMT": "assertEquals(value.longValue(), decryptedValue.longValue())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/vladmihalcea__split__high-performance-java-persistence/com.vladmihalcea.hpjp.util.CryptoUtilsTest.testPerformance__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.vladmihalcea.hpjp.util.CryptoUtils.encrypt(java.lang.Object)",
                "com.vladmihalcea.hpjp.util.CryptoUtils.decrypt(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Long",
                    "expression": "value",
                    "statement": "String encryptedValue = CryptoUtils.encrypt(value);",
                    "invocation": "encryptedValue = CryptoUtils.encrypt(value)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "message",
                    "statement": "Long decryptedValue = (Long) CryptoUtils.decrypt(message, clazz);",
                    "invocation": "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz)"
                },
                {
                    "type": "Class<?>",
                    "expression": "clazz",
                    "statement": "Long decryptedValue = (Long) CryptoUtils.decrypt(message, clazz);",
                    "invocation": "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz)"
                }
            ],
            "comments": "",
            "dependency": "com.vladmihalcea.hpjp.util.CryptoUtils;com.vladmihalcea.hpjp.util.CryptoUtils.*"
        },
        "pair_inputs": {
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h9Test0": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testPerformance_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h9Test2": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testPerformance_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h9Test3": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h9Test4": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testPerformance_h9Test4"
                    ],
                    "failure_info": {}
                }
            },
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h9Test5": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h9Test6": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testPerformance_h9Test6"
                    ],
                    "failure_info": {}
                }
            },
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h9Test7": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h9Test8": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testPerformance_h9Test8"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testPerformance_h9Test8": "java.lang.IllegalArgumentException, line:None"
                    }
                }
            },
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h9Test9": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "datageartech__split__datagear",
            "test_file_path": "./data/ITrans/projects/datageartech__split__datagear/datagear-util/src/test/java/org/datagear/util/version/VersionTest.java",
            "test_simple_name": "isLowerThanTest",
            "FQS_testMethos": "org.datagear.util.version.VersionTest.isLowerThanTest()",
            "assertionSTMT": "assertTrue(a.isLowerThan(b))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/datageartech__split__datagear/org.datagear.util.version.VersionTest.isLowerThanTest__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.datagear.util.version.Version.valueOf(java.lang.String)",
                "org.datagear.util.version.Version.valueOf(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "v1",
                    "statement": "Version a = Version.valueOf(v1);",
                    "invocation": "a = Version.valueOf(v1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "v2",
                    "statement": "Version b = Version.valueOf(v2);",
                    "invocation": "b = Version.valueOf(v2)"
                }
            ],
            "comments": "",
            "dependency": "org.datagear.util.version.Version;org.datagear.util.version.Version.*"
        },
        "pair_inputs": {
            "org.datagear.util.version.VersionTest_isLowerThanTest_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isLowerThanTest_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isLowerThanTest_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.datagear.util.version.VersionTest_isLowerThanTest_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isLowerThanTest_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isLowerThanTest_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.datagear.util.version.VersionTest_isLowerThanTest_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isLowerThanTest_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isLowerThanTest_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.datagear.util.version.VersionTest_isLowerThanTest_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isLowerThanTest_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isLowerThanTest_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.datagear.util.version.VersionTest_isLowerThanTest_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "isLowerThanTest_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "isLowerThanTest_h9Test4": "isLowerThanTest_h9Test4"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "isLowerThanTest_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "isLowerThanTest_h9Test4": "isLowerThanTest_h9Test4"
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__split__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__split__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/Map1Test.java",
            "test_simple_name": "test1",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test1()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__fastjson2/com.alibaba.fastjson2.internal.processor.maps.Map1Test.test1__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<String, Integer>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Map<String, Integer> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                },
                {
                    "type": "Type",
                    "expression": "mapType",
                    "statement": "Map<String, Integer> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference;java.lang.reflect.Type"
        },
        "pair_inputs": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "datageartech__split__datagear",
            "test_file_path": "./data/ITrans/projects/datageartech__split__datagear/datagear-util/src/test/java/org/datagear/util/version/VersionTest.java",
            "test_simple_name": "isHigherThanTest",
            "FQS_testMethos": "org.datagear.util.version.VersionTest.isHigherThanTest()",
            "assertionSTMT": "assertFalse(a.isHigherThan(b))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/datageartech__split__datagear/org.datagear.util.version.VersionTest.isHigherThanTest__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.datagear.util.version.Version.valueOf(java.lang.String)",
                "org.datagear.util.version.Version.valueOf(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "v1",
                    "statement": "Version a = Version.valueOf(v1);",
                    "invocation": "a = Version.valueOf(v1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "v2",
                    "statement": "Version b = Version.valueOf(v2);",
                    "invocation": "b = Version.valueOf(v2)"
                }
            ],
            "comments": "",
            "dependency": "org.datagear.util.version.Version;org.datagear.util.version.Version.*"
        },
        "pair_inputs": {
            "org.datagear.util.version.VersionTest_isHigherThanTest_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isHigherThanTest_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isHigherThanTest_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.datagear.util.version.VersionTest_isHigherThanTest_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isHigherThanTest_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isHigherThanTest_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.datagear.util.version.VersionTest_isHigherThanTest_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isHigherThanTest_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isHigherThanTest_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.datagear.util.version.VersionTest_isHigherThanTest_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isHigherThanTest_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isHigherThanTest_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.datagear.util.version.VersionTest_isHigherThanTest_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isHigherThanTest_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isHigherThanTest_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "datageartech__split__datagear",
            "test_file_path": "./data/ITrans/projects/datageartech__split__datagear/datagear-util/src/test/java/org/datagear/util/version/VersionTest.java",
            "test_simple_name": "isEqualTest",
            "FQS_testMethos": "org.datagear.util.version.VersionTest.isEqualTest()",
            "assertionSTMT": "assertFalse(a.isEqual(b))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/datageartech__split__datagear/org.datagear.util.version.VersionTest.isEqualTest__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.datagear.util.version.Version.valueOf(java.lang.String)",
                "org.datagear.util.version.Version.valueOf(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "v1",
                    "statement": "Version a = Version.valueOf(v1);",
                    "invocation": "a = Version.valueOf(v1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "v2",
                    "statement": "Version b = Version.valueOf(v2);",
                    "invocation": "b = Version.valueOf(v2)"
                }
            ],
            "comments": "",
            "dependency": "org.datagear.util.version.Version;org.datagear.util.version.Version.*"
        },
        "pair_inputs": {
            "org.datagear.util.version.VersionTest_isEqualTest_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "isEqualTest_h9Test0"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "isEqualTest_h9Test0": "isEqualTest_h9Test0"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isEqualTest_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.datagear.util.version.VersionTest_isEqualTest_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "isEqualTest_h9Test1"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "isEqualTest_h9Test1": "isEqualTest_h9Test1"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isEqualTest_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.datagear.util.version.VersionTest_isEqualTest_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "isEqualTest_h9Test2"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "isEqualTest_h9Test2": "isEqualTest_h9Test2"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isEqualTest_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.datagear.util.version.VersionTest_isEqualTest_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "isEqualTest_h9Test3"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "isEqualTest_h9Test3": "isEqualTest_h9Test3"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "isEqualTest_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.datagear.util.version.VersionTest_isEqualTest_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "isEqualTest_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "isEqualTest_h9Test4": "isEqualTest_h9Test4"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "isEqualTest_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "isEqualTest_h9Test4": "isEqualTest_h9Test4"
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__split__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__split__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/Map1Test.java",
            "test_simple_name": "test2",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test2()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__fastjson2/com.alibaba.fastjson2.internal.processor.maps.Map1Test.test2__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<String, Long>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Map<String, Long> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                },
                {
                    "type": "Type",
                    "expression": "mapType",
                    "statement": "Map<String, Long> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference;java.lang.reflect.Type"
        },
        "pair_inputs": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test2_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test2_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test2_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test2_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test2_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test2_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test2_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test2_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test2_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test2_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "matsim-org__split__matsim-libs",
            "test_file_path": "./data/ITrans/projects/matsim-org__split__matsim-libs/matsim/src/test/java/org/matsim/core/config/groups/ScoringConfigGroupTest.java",
            "test_simple_name": "testAddActivityParams",
            "FQS_testMethos": "org.matsim.core.config.groups.ScoringConfigGroupTest.testAddActivityParams()",
            "assertionSTMT": "Assertions.assertEquals(ap, c.getActivityParams(type))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/matsim-org__split__matsim-libs/org.matsim.core.config.groups.ScoringConfigGroupTest.testAddActivityParams__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.matsim.core.config.groups.ScoringConfigGroup.addActivityParams(org.matsim.core.config.groups.ScoringConfigGroup.ActivityParams)",
                "org.matsim.core.config.groups.ScoringConfigGroup.getActivityParams(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "ActivityParams",
                    "expression": "ap",
                    "statement": "c.addActivityParams(ap);",
                    "invocation": "c.addActivityParams(ap)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "type",
                    "statement": "Assertions.assertEquals(ap, c.getActivityParams(type));",
                    "invocation": "c.getActivityParams(type)"
                }
            ],
            "comments": "",
            "dependency": "org.matsim.core.config.groups.ScoringConfigGroup;org.matsim.core.config.groups.ScoringConfigGroup.*"
        },
        "pair_inputs": {
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testAddActivityParams_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testAddActivityParams_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testAddActivityParams_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testAddActivityParams_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testAddActivityParams_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testAddActivityParams_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h9Test4": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h9Test5": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "opentripplanner__split__OpenTripPlanner",
            "test_file_path": "./data/ITrans/projects/opentripplanner__split__OpenTripPlanner/src/test/java/org/opentripplanner/framework/token/FieldDefinitionTest.java",
            "test_simple_name": "testEqualsAndHashCode",
            "FQS_testMethos": "org.opentripplanner.framework.token.FieldDefinitionTest.testEqualsAndHashCode()",
            "assertionSTMT": "assertNotEquals(other3.hashCode(), subject.hashCode())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/opentripplanner__split__OpenTripPlanner/org.opentripplanner.framework.token.FieldDefinitionTest.testEqualsAndHashCode__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.opentripplanner.framework.token.FieldDefinition.hashCode()",
                "org.opentripplanner.framework.token.FieldDefinition.hashCode()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "FieldDefinition",
                    "expression": "subject",
                    "statement": "assertNotEquals(other3.hashCode(), subject.hashCode());",
                    "invocation": "subject.hashCode()"
                }
            ],
            "followUpInput": [
                {
                    "type": "FieldDefinition",
                    "expression": "other3",
                    "statement": "assertNotEquals(other3.hashCode(), subject.hashCode());",
                    "invocation": "other3.hashCode()"
                }
            ],
            "comments": "",
            "dependency": "org.opentripplanner.framework.token.FieldDefinition;org.opentripplanner.framework.token.FieldDefinition.*"
        },
        "pair_inputs": {
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEqualsAndHashCode_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEqualsAndHashCode_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEqualsAndHashCode_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEqualsAndHashCode_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testEqualsAndHashCode_h9Test2"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testEqualsAndHashCode_h9Test2": "org.opentest4j.AssertionFailedError: expected: not equal but was: <-1484741952>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testEqualsAndHashCode_h9Test2"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testEqualsAndHashCode_h9Test2": "org.opentest4j.AssertionFailedError: expected: not equal but was: <685866151>"
                    }
                }
            },
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h9Test3": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h9Test4": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "networknt__split__json-schema-validator",
            "test_file_path": "./data/ITrans/projects/networknt__split__json-schema-validator/src/test/java/com/networknt/schema/JsonNodePathTest.java",
            "test_simple_name": "equalsEquals",
            "FQS_testMethos": "com.networknt.schema.JsonNodePathTest.equalsEquals()",
            "assertionSTMT": "assertEquals(a1, a2)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/networknt__split__json-schema-validator/com.networknt.schema.JsonNodePathTest.equalsEquals__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.networknt.schema.JsonNodePath.append(java.lang.String)",
                "com.networknt.schema.JsonNodePath.append(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "token1",
                    "statement": "a1.append(token1);",
                    "invocation": "a1.append(token1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "token2",
                    "statement": "a2.append(token2);",
                    "invocation": "a2.append(token2)"
                }
            ],
            "comments": "",
            "dependency": "com.networknt.schema.JsonNodePath;com.networknt.schema.JsonNodePath.*"
        },
        "pair_inputs": {
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equalsEquals_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equalsEquals_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equalsEquals_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equalsEquals_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equalsEquals_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equalsEquals_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equalsEquals_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equalsEquals_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equalsEquals_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equalsEquals_h9Test4"
                    ],
                    "failure_info": {}
                }
            },
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h9Test5": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equalsEquals_h9Test5"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equalsEquals_h9Test5"
                    ],
                    "failure_info": {}
                }
            },
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h9Test6": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equalsEquals_h9Test6"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equalsEquals_h9Test6"
                    ],
                    "failure_info": {}
                }
            },
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h9Test7": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equalsEquals_h9Test7"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equalsEquals_h9Test7"
                    ],
                    "failure_info": {}
                }
            },
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h9Test8": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equalsEquals_h9Test8"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equalsEquals_h9Test8"
                    ],
                    "failure_info": {}
                }
            },
            "com.networknt.schema.JsonNodePathTest_equalsEquals_h9Test9": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equalsEquals_h9Test9"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "equalsEquals_h9Test9"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "javadev__split__underscore-java",
            "test_file_path": "./data/ITrans/projects/javadev__split__underscore-java/src/test/java/com/github/underscore/XmlBuilderTest.java",
            "test_simple_name": "toXml",
            "FQS_testMethos": "com.github.underscore.XmlBuilderTest.toXml()",
            "assertionSTMT": "assertEquals(XML, xmlBuilder.toXml())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/javadev__split__underscore-java/com.github.underscore.XmlBuilderTest.toXml__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "com.github.underscore.XmlBuilder.parse(java.lang.String)",
                "com.github.underscore.XmlBuilder.toXml()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "XML",
                    "statement": "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                    "invocation": "xmlBuilder = XmlBuilder.parse(XML)"
                }
            ],
            "followUpInput": [
                {
                    "type": "XmlBuilder",
                    "expression": "xmlBuilder2",
                    "statement": "assertEquals(XML, xmlBuilder2.toXml());",
                    "invocation": "xmlBuilder2.toXml()"
                }
            ],
            "comments": "",
            "dependency": "com.github.underscore.XmlBuilder;com.github.underscore.XmlBuilder.*"
        },
        "pair_inputs": {
            "com.github.underscore.XmlBuilderTest_toXml_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "toXml_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toXml_h9Test0": "org.opentest4j.AssertionFailedError: expected: <<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "toXml_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.github.underscore.XmlBuilderTest_toXml_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "toXml_h9Test1"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toXml_h9Test1": "org.opentest4j.AssertionFailedError: expected: <<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "toXml_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "com.github.underscore.XmlBuilderTest_toXml_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "toXml_h9Test2"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toXml_h9Test2": "org.opentest4j.AssertionFailedError: expected: <<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "toXml_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.github.underscore.XmlBuilderTest_toXml_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "toXml_h9Test3"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toXml_h9Test3": "org.opentest4j.AssertionFailedError: expected: <<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "toXml_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "com.github.underscore.XmlBuilderTest_toXml_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "toXml_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toXml_h9Test4": "org.opentest4j.AssertionFailedError: expected: <<?xml version=\"1.0\" encoding=\"UTF-8\"?>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "toXml_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "networknt__split__json-schema-validator",
            "test_file_path": "./data/ITrans/projects/networknt__split__json-schema-validator/src/test/java/com/networknt/schema/JsonNodePathTest.java",
            "test_simple_name": "hashCodeEquals",
            "FQS_testMethos": "com.networknt.schema.JsonNodePathTest.hashCodeEquals()",
            "assertionSTMT": "assertEquals(a1.hashCode(), a2.hashCode())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/networknt__split__json-schema-validator/com.networknt.schema.JsonNodePathTest.equalsEquals__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.networknt.schema.JsonNodePath.hashCode()",
                "com.networknt.schema.JsonNodePath.hashCode()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "JsonNodePath",
                    "expression": "a1",
                    "statement": "assertEquals(a1.hashCode(), a2.hashCode());",
                    "invocation": "a1.hashCode()"
                }
            ],
            "followUpInput": [
                {
                    "type": "JsonNodePath",
                    "expression": "a2",
                    "statement": "assertEquals(a1.hashCode(), a2.hashCode());",
                    "invocation": "a1.hashCode()"
                }
            ],
            "comments": "manual light crafted",
            "dependency": "com.networknt.schema.JsonNodePath;com.networknt.schema.JsonNodePath.*"
        },
        "pair_inputs": {
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "hashCodeEquals_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "hashCodeEquals_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "hashCodeEquals_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "hashCodeEquals_h9Test1"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "javadev__split__underscore-java",
            "test_file_path": "./data/ITrans/projects/javadev__split__underscore-java/src/test/java/com/github/underscore/XmlBuilderTest.java",
            "test_simple_name": "parse",
            "FQS_testMethos": "com.github.underscore.XmlBuilderTest.parse()",
            "assertionSTMT": "assertEquals(XML, xmlBuilder.asString())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/javadev__split__underscore-java/com.github.underscore.XmlBuilderTest.parse__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "com.github.underscore.XmlBuilder.parse(java.lang.String)",
                "com.github.underscore.XmlBuilder.asString()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "XML",
                    "statement": "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                    "invocation": "xmlBuilder = XmlBuilder.parse(XML)"
                }
            ],
            "followUpInput": [
                {
                    "type": "XmlBuilder",
                    "expression": "xmlBuilder2",
                    "statement": "assertEquals(XML, xmlBuilder2.asString());",
                    "invocation": "xmlBuilder2.asString()"
                }
            ],
            "comments": "",
            "dependency": "com.github.underscore.XmlBuilder;com.github.underscore.XmlBuilder.*"
        },
        "pair_inputs": {
            "com.github.underscore.XmlBuilderTest_parse_h9Test0": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.github.underscore.XmlBuilderTest_parse_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.github.underscore.XmlBuilderTest_parse_h9Test2": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.github.underscore.XmlBuilderTest_parse_h9Test3": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__split__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__split__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/Map1Test.java",
            "test_simple_name": "test3",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test3()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__fastjson2/com.alibaba.fastjson2.internal.processor.maps.Map1Test.test3__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<String, Boolean>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Map<String, Boolean> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                },
                {
                    "type": "Type",
                    "expression": "mapType",
                    "statement": "Map<String, Boolean> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference;java.lang.reflect.Type"
        },
        "pair_inputs": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test3_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test3_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test3_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test3_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test3_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test3_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test3_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test3_h9Test4"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h9Test5": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test3_h9Test5"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test3_h9Test5"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "aws__split__event-ruler",
            "test_file_path": "./data/ITrans/projects/aws__split__event-ruler/src/test/software/amazon/event/ruler/NameStateTest.java",
            "test_simple_name": "testNextNameStateWithAdditionalNameStateReuse",
            "FQS_testMethos": "software.amazon.event.ruler.NameStateTest.testNextNameStateWithAdditionalNameStateReuse()",
            "assertionSTMT": "assertEquals(nextNameState, nameState2.getNextNameState(key2))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/aws__split__event-ruler/software.amazon.event.ruler.NameStateTest.testNextNameStateWithAdditionalNameStateReuse__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "software.amazon.event.ruler.NameState.addNextNameState(java.lang.String, software.amazon.event.ruler.NameState)",
                "software.amazon.event.ruler.NameState.getNextNameState(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "key",
                    "statement": "nameState.addNextNameState(key, nextNameState);;",
                    "invocation": "nameState.addNextNameState(key, nextNameState)"
                },
                {
                    "type": "NameState",
                    "expression": "nextNameState",
                    "statement": "nameState.addNextNameState(key, nextNameState);;",
                    "invocation": "nameState.addNextNameState(key, nextNameState)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "key2",
                    "statement": "assertEquals(nextNameState, nameState2.getNextNameState(key2))",
                    "invocation": "nameState2.getNextNameState(key2)"
                },
                {
                    "type": "NameState",
                    "expression": "nameState2",
                    "statement": "assertEquals(nextNameState, nameState2.getNextNameState(key2))",
                    "invocation": "nameState2.getNextNameState(key2)"
                }
            ],
            "comments": "",
            "dependency": "software.amazon.event.ruler.NameState;software.amazon.event.ruler.NameState.*"
        },
        "pair_inputs": {
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testNextNameStateWithAdditionalNameStateReuse_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testNextNameStateWithAdditionalNameStateReuse_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testNextNameStateWithAdditionalNameStateReuse_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testNextNameStateWithAdditionalNameStateReuse_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testNextNameStateWithAdditionalNameStateReuse_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testNextNameStateWithAdditionalNameStateReuse_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testNextNameStateWithAdditionalNameStateReuse_h9Test3"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testNextNameStateWithAdditionalNameStateReuse_h9Test3": "java.lang.NullPointerException, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testNextNameStateWithAdditionalNameStateReuse_h9Test3"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testNextNameStateWithAdditionalNameStateReuse_h9Test3": "java.lang.NullPointerException, line:None"
                    }
                }
            },
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testNextNameStateWithAdditionalNameStateReuse_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testNextNameStateWithAdditionalNameStateReuse_h9Test4": "java.lang.NullPointerException, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testNextNameStateWithAdditionalNameStateReuse_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testNextNameStateWithAdditionalNameStateReuse_h9Test4": "java.lang.NullPointerException, line:None"
                    }
                }
            },
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h9Test5": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h9Test6": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h9Test7": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h9Test8": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h9Test9": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "javadev__split__underscore-java",
            "test_file_path": "./data/ITrans/projects/javadev__split__underscore-java/src/test/java/com/github/underscore/XmlBuilderTest.java",
            "test_simple_name": "toJson",
            "FQS_testMethos": "com.github.underscore.XmlBuilderTest.toJson()",
            "assertionSTMT": "assertEquals(U.xmlToJson(XML), xmlBuilder.toJson())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/javadev__split__underscore-java/com.github.underscore.XmlBuilderTest.toJson__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "com.github.underscore.XmlBuilder.parse(java.lang.String)",
                "com.github.underscore.XmlBuilder.toJson()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "XML",
                    "statement": "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                    "invocation": "xmlBuilder = XmlBuilder.parse(XML)"
                }
            ],
            "followUpInput": [
                {
                    "type": "XmlBuilder",
                    "expression": "xmlBuilder2",
                    "statement": "assertEquals(U.xmlToJson(XML), xmlBuilder2.toJson());",
                    "invocation": "xmlBuilder2.toJson()"
                }
            ],
            "comments": "",
            "dependency": "com.github.underscore.XmlBuilder;com.github.underscore.XmlBuilder.*"
        },
        "pair_inputs": {
            "com.github.underscore.XmlBuilderTest_toJson_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "toJson_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toJson_h9Test0": "org.opentest4j.AssertionFailedError: expected: <{"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "toJson_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.github.underscore.XmlBuilderTest_toJson_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "toJson_h9Test1"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toJson_h9Test1": "org.opentest4j.AssertionFailedError: expected: <{"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "toJson_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "com.github.underscore.XmlBuilderTest_toJson_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "toJson_h9Test2"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toJson_h9Test2": "org.opentest4j.AssertionFailedError: expected: <{"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "toJson_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.github.underscore.XmlBuilderTest_toJson_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "toJson_h9Test3"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toJson_h9Test3": "org.opentest4j.AssertionFailedError: expected: <{"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "toJson_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "com.github.underscore.XmlBuilderTest_toJson_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "toJson_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toJson_h9Test4": "org.opentest4j.AssertionFailedError: expected: <{"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "toJson_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "apache__split__druid",
            "test_file_path": "./data/ITrans/projects/apache__split__druid/processing/src/test/java/org/apache/druid/audit/AuditInfoTest.java",
            "test_simple_name": "testAuditInfoEquality",
            "FQS_testMethos": "org.apache.druid.audit.AuditInfoTest.testAuditInfoEquality()",
            "assertionSTMT": "Assert.assertEquals(auditInfo1.hashCode(), auditInfo2.hashCode())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__split__druid/org.apache.druid.audit.AuditInfoTest.testAuditInfoEquality__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.apache.druid.audit.AuditInfo.hashCode()",
                "org.apache.druid.audit.AuditInfo.hashCode()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "AuditInfo",
                    "expression": "auditInfo1",
                    "statement": "AuditInfo auditInfo2 = new AuditInfo();",
                    "invocation": "auditInfo2 = new AuditInfo()"
                }
            ],
            "followUpInput": [
                {
                    "type": "AuditInfo",
                    "expression": "auditInfo2",
                    "statement": "Assert.assertEquals(auditInfo1.hashCode(), auditInfo2.hashCode())",
                    "invocation": "Assert.assertEquals(auditInfo1.hashCode(), auditInfo2.hashCode())"
                }
            ],
            "comments": "",
            "dependency": "org.apache.druid.audit.AuditInfo;org.apache.druid.audit.AuditInfo.*"
        },
        "pair_inputs": {
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testAuditInfoEquality_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testAuditInfoEquality_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testAuditInfoEquality_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testAuditInfoEquality_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testAuditInfoEquality_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testAuditInfoEquality_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testAuditInfoEquality_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testAuditInfoEquality_h9Test3"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "aws__split__event-ruler",
            "test_file_path": "./data/ITrans/projects/aws__split__event-ruler/src/test/software/amazon/event/ruler/SubRuleContextTest.java",
            "test_simple_name": "testEquals",
            "FQS_testMethos": "software.amazon.event.ruler.SubRuleContextTest.testEquals()",
            "assertionSTMT": "assertTrue(contextA1.equals(contextB1))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/aws__split__event-ruler/software.amazon.event.ruler.SubRuleContextTest.testEquals__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "software.amazon.event.ruler.SubRuleContext.Generator.generate(java.lang.Object)",
                "software.amazon.event.ruler.SubRuleContext.Generator.generate(java.lang.Object)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "SubRuleContext.Generator",
                    "expression": "generatorA",
                    "statement": "SubRuleContext contextA1 = generatorA.generate(NAME);",
                    "invocation": "contextA1 = generatorA.generate(NAME)"
                },
                {
                    "type": "String",
                    "expression": "NAME",
                    "statement": "SubRuleContext contextB1 = generatorA.generate(NAME);",
                    "invocation": "contextB1 = generatorA.generate(NAME)"
                }
            ],
            "followUpInput": [
                {
                    "type": "SubRuleContext.Generator",
                    "expression": "generatorB",
                    "statement": "SubRuleContext contextB1 = generatorB.generate(NAME2);",
                    "invocation": "contextB1 = generatorB.generate(NAME2)"
                },
                {
                    "type": "String",
                    "expression": "NAME2",
                    "statement": "SubRuleContext contextB1 = generatorB.generate(NAME2);",
                    "invocation": "contextB1 = generatorB.generate(NAME2)"
                }
            ],
            "comments": "",
            "dependency": "software.amazon.event.ruler.SubRuleContext;software.amazon.event.ruler.SubRuleContext.*"
        },
        "pair_inputs": {
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEquals_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEquals_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEquals_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEquals_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEquals_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEquals_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEquals_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEquals_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "software.amazon.event.ruler.SubRuleContextTest_testEquals_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testEquals_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testEquals_h9Test4": "java.lang.NullPointerException, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testEquals_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testEquals_h9Test4": "java.lang.NullPointerException, line:None"
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "TheAlgorithms__split__Java",
            "test_file_path": "./data/ITrans/projects/TheAlgorithms__split__Java/src/test/java/com/thealgorithms/ciphers/PlayfairTest.java",
            "test_simple_name": "testEncryptionAndDecryption",
            "FQS_testMethos": "com.thealgorithms.ciphers.PlayfairTest.testEncryptionAndDecryption()",
            "assertionSTMT": "assertEquals(plaintext, decryptedText)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/TheAlgorithms__split__Java/com.thealgorithms.ciphers.PlayfairTest.testEncryptionAndDecryption__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "com.thealgorithms.ciphers.PlayfairCipher.encrypt(java.lang.String)",
                "com.thealgorithms.ciphers.PlayfairCipher.decrypt(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "PlayfairCipher",
                    "expression": "playfairCipher",
                    "statement": "String encryptedText = playfairCipher.encrypt(plaintext);",
                    "invocation": "encryptedText = playfairCipher.encrypt(plaintext)"
                },
                {
                    "type": "String",
                    "expression": "plaintext",
                    "statement": "String encryptedText = playfairCipher.encrypt(plaintext);",
                    "invocation": "encryptedText = playfairCipher.encrypt(plaintext)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "textTodecrypt",
                    "statement": "String decryptedText = playfairCipher.decrypt(textTodecrypt);",
                    "invocation": "decryptedText = playfairCipher.decrypt(textTodecrypt)"
                }
            ],
            "comments": "",
            "dependency": "com.thealgorithms.ciphers.PlayfairCipher;com.thealgorithms.ciphers.PlayfairCipher.*"
        },
        "pair_inputs": {
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testEncryptionAndDecryption_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testEncryptionAndDecryption_h9Test0": "org.opentest4j.AssertionFailedError: expected: <HELLO> but was: <HELXLO>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testEncryptionAndDecryption_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testEncryptionAndDecryption_h9Test0": "org.opentest4j.AssertionFailedError: expected: <HELLO> but was: <HELXLO>"
                    }
                }
            },
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testEncryptionAndDecryption_h9Test2"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testEncryptionAndDecryption_h9Test2": "org.opentest4j.AssertionFailedError: expected: <JAVA> but was: <IAVA>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testEncryptionAndDecryption_h9Test2"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testEncryptionAndDecryption_h9Test2": "org.opentest4j.AssertionFailedError: expected: <JAVA> but was: <IAVA>"
                    }
                }
            },
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testEncryptionAndDecryption_h9Test3"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testEncryptionAndDecryption_h9Test3": "org.opentest4j.AssertionFailedError: expected: <FGHIJ> but was: <FGHIXI>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testEncryptionAndDecryption_h9Test3"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testEncryptionAndDecryption_h9Test3": "org.opentest4j.AssertionFailedError: expected: <FGHIJ> but was: <FGHIXI>"
                    }
                }
            },
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testEncryptionAndDecryption_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testEncryptionAndDecryption_h9Test4": "org.opentest4j.AssertionFailedError: expected: <12345> but was: <>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testEncryptionAndDecryption_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testEncryptionAndDecryption_h9Test4": "org.opentest4j.AssertionFailedError: expected: <12345> but was: <>"
                    }
                }
            },
            "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h9Test5": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testEncryptionAndDecryption_h9Test5"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testEncryptionAndDecryption_h9Test5": "org.opentest4j.AssertionFailedError: expected: <SPACE> but was: <SPACEX>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testEncryptionAndDecryption_h9Test5"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testEncryptionAndDecryption_h9Test5": "org.opentest4j.AssertionFailedError: expected: <SPACE> but was: <SPACEX>"
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "TheAlgorithms__split__Java",
            "test_file_path": "./data/ITrans/projects/TheAlgorithms__split__Java/src/test/java/com/thealgorithms/datastructures/crdt/LWWElementSetTest.java",
            "test_simple_name": "testRemove",
            "FQS_testMethos": "com.thealgorithms.datastructures.crdt.LWWElementSetTest.testRemove()",
            "assertionSTMT": "assertFalse(set.lookup(element))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/TheAlgorithms__split__Java/com.thealgorithms.datastructures.crdt.LWWElementSetTest.testRemove__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "com.thealgorithms.datastructures.crdt.LWWElementSet.add(com.thealgorithms.datastructures.crdt.Element)",
                "com.thealgorithms.datastructures.crdt.LWWElementSet.remove(com.thealgorithms.datastructures.crdt.Element)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Element",
                    "expression": "element",
                    "statement": "set.add(element);",
                    "invocation": "set.add(element)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Element",
                    "expression": "element2",
                    "statement": "set.remove(element2);",
                    "invocation": "set.remove(element2)"
                }
            ],
            "comments": "",
            "dependency": "com.thealgorithms.datastructures.crdt.LWWElementSet;com.thealgorithms.datastructures.crdt.LWWElementSet.*"
        },
        "pair_inputs": {
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testRemove_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testRemove_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testRemove_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testRemove_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h9Test2": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h9Test3": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testRemove_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testRemove_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__split__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__split__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/Map1Test.java",
            "test_simple_name": "test4",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test4()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__fastjson2/com.alibaba.fastjson2.internal.processor.maps.Map1Test.test4__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<String, Float>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Map<String, Float> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                },
                {
                    "type": "Type",
                    "expression": "mapType",
                    "statement": "Map<String, Float> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference;java.lang.reflect.Type"
        },
        "pair_inputs": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test4_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test4_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test4_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test4_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test4_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test4_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test4_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test4_h9Test4"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h9Test5": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test4_h9Test5"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test4_h9Test5": "org.opentest4j.AssertionFailedError: expected: <{101=null, 102=null}> but was: <{}>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test4_h9Test5"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test4_h9Test5": "org.opentest4j.AssertionFailedError: expected: <{101=null, 102=null}> but was: <{}>"
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "eclipse-vertx__split__vert.x",
            "test_file_path": "./data/ITrans/projects/eclipse-vertx__split__vert.x/src/test/java/io/vertx/core/json/jackson/HybridJacksonPoolTest.java",
            "test_simple_name": "testVirtualThreadPoolWithSingleThread",
            "FQS_testMethos": "io.vertx.core.json.jackson.HybridJacksonPoolTest.testVirtualThreadPoolWithSingleThread()",
            "assertionSTMT": "assertSame(pooledResource, virtualPool.acquirePooled())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/eclipse-vertx__split__vert.x/io.vertx.core.json.jackson.HybridJacksonPoolTest.testVirtualThreadPoolWithSingleThread__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "io.vertx.core.json.jackson.HybridJacksonPool.StripedLockFreePool.acquirePooled()",
                "io.vertx.core.json.jackson.HybridJacksonPool.StripedLockFreePool.acquirePooled()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "HybridJacksonPool.StripedLockFreePool",
                    "expression": "virtualPool",
                    "statement": "PooledResource pooledResource = virtualPool.acquirePooled();",
                    "invocation": "pooledResource = virtualPool.acquirePooled()"
                }
            ],
            "followUpInput": [
                {
                    "type": "HybridJacksonPool.StripedLockFreePool",
                    "expression": "virtualPool2",
                    "statement": "assertSame(pooledResource, virtualPool2.acquirePooled());",
                    "invocation": "virtualPool2.acquirePooled()"
                }
            ],
            "comments": "",
            "dependency": "io.vertx.core.json.jackson.HybridJacksonPool;io.vertx.core.json.jackson.HybridJacksonPool.*"
        },
        "pair_inputs": {
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testVirtualThreadPoolWithSingleThread_h9Test0"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testVirtualThreadPoolWithSingleThread_h9Test0": "java.lang.IllegalArgumentException, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testVirtualThreadPoolWithSingleThread_h9Test0"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testVirtualThreadPoolWithSingleThread_h9Test0": "java.lang.IllegalArgumentException, line:None"
                    }
                }
            },
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testVirtualThreadPoolWithSingleThread_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testVirtualThreadPoolWithSingleThread_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testVirtualThreadPoolWithSingleThread_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testVirtualThreadPoolWithSingleThread_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testVirtualThreadPoolWithSingleThread_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testVirtualThreadPoolWithSingleThread_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testVirtualThreadPoolWithSingleThread_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testVirtualThreadPoolWithSingleThread_h9Test4": "java.lang.IllegalArgumentException, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testVirtualThreadPoolWithSingleThread_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testVirtualThreadPoolWithSingleThread_h9Test4": "java.lang.IllegalArgumentException, line:None"
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "apache__split__incubator-paimon",
            "test_file_path": "./data/ITrans/projects/apache__split__incubator-paimon/paimon-spark/paimon-spark-common/src/test/java/org/apache/paimon/spark/ConvertBinaryUtilTest.java",
            "test_simple_name": "testConvertToLong",
            "FQS_testMethos": "org.apache.paimon.spark.ConvertBinaryUtilTest.testConvertToLong()",
            "assertionSTMT": "Assert.assertEquals(convertStringValue, convertBytesValue)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__split__incubator-paimon/org.apache.paimon.spark.ConvertBinaryUtilTest.testConvertToLong__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.apache.paimon.spark.utils.ConvertBinaryUtil.convertStringToLong(java.lang.String)",
                "org.apache.paimon.spark.utils.ConvertBinaryUtil.convertBytesToLong(byte[])"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "randomString",
                    "statement": "long convertStringValue = ConvertBinaryUtil.convertStringToLong(randomString);",
                    "invocation": "convertStringValue = ConvertBinaryUtil.convertStringToLong(randomString)"
                }
            ],
            "followUpInput": [
                {
                    "type": "byte[]",
                    "expression": "randomStringBytes",
                    "statement": "long convertBytesValue = ConvertBinaryUtil.convertBytesToLong(randomStringBytes);",
                    "invocation": "convertBytesValue = ConvertBinaryUtil.convertBytesToLong(randomStringBytes)"
                }
            ],
            "comments": "",
            "dependency": "org.apache.paimon.spark.utils.ConvertBinaryUtil;org.apache.paimon.spark.utils.ConvertBinaryUtil.*"
        },
        "pair_inputs": {
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testConvertToLong_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testConvertToLong_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testConvertToLong_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testConvertToLong_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testConvertToLong_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testConvertToLong_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testConvertToLong_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testConvertToLong_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testConvertToLong_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testConvertToLong_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__split__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__split__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_isLeapYear_int",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_isLeapYear_int()",
            "assertionSTMT": "assertEquals(Year.isLeap(year), test2.isLeapYear())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__split__threeten-extra/org.threeten.extra.TestYearHalf.test_isLeapYear_int__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)",
                "org.threeten.extra.YearHalf.isLeapYear()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "int",
                    "expression": "year",
                    "statement": "YearHalf test = YearHalf.of(year, half);",
                    "invocation": "test = YearHalf.of(year, half)"
                },
                {
                    "type": "Half",
                    "expression": "half",
                    "statement": "YearHalf test = YearHalf.of(year, half);",
                    "invocation": "test = YearHalf.of(year, half)"
                }
            ],
            "followUpInput": [
                {
                    "type": "YearHalf",
                    "expression": "test2",
                    "statement": "assertEquals(Year.isLeap(year), test2.isLeapYear());",
                    "invocation": "test2.isLeapYear()"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*"
        },
        "pair_inputs": {
            "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_isLeapYear_int_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_isLeapYear_int_h9Test0": "org.opentest4j.AssertionFailedError: expected: <true> but was: <false>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_isLeapYear_int_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_isLeapYear_int_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_isLeapYear_int_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_isLeapYear_int_h9Test2"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_isLeapYear_int_h9Test2": "org.opentest4j.AssertionFailedError: expected: <true> but was: <false>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_isLeapYear_int_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_isLeapYear_int_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_isLeapYear_int_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_isLeapYear_int_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_isLeapYear_int_h9Test4": "org.opentest4j.AssertionFailedError: expected: <true> but was: <false>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_isLeapYear_int_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "arextest__split__arex-agent-java",
            "test_file_path": "./data/ITrans/projects/arextest__split__arex-agent-java/arex-instrumentation-api/src/test/java/io/arex/inst/runtime/serializer/SerializerTest.java",
            "test_simple_name": "testNestedSet",
            "FQS_testMethos": "io.arex.inst.runtime.serializer.SerializerTest.testNestedSet()",
            "assertionSTMT": "assertEquals(set, actualResult)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/arextest__split__arex-agent-java/io.arex.inst.runtime.serializer.SerializerTest.testNestedSet__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "io.arex.inst.runtime.serializer.Serializer.serialize(java.lang.Object, java.lang.String)",
                "io.arex.inst.runtime.serializer.Serializer.deserialize(java.lang.String, java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Set<Set<Object>>",
                    "expression": "set",
                    "statement": "String json = Serializer.serialize(set, serializer);",
                    "invocation": "json = Serializer.serialize(set, serializer)"
                },
                {
                    "type": "String",
                    "expression": "serializer",
                    "statement": "String json = Serializer.serialize(set, serializer);",
                    "invocation": "json = Serializer.serialize(set, serializer)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "json2",
                    "statement": "Set<Set<Object>> actualResult = Serializer.deserialize(json2, typeName2);",
                    "invocation": "actualResult = Serializer.deserialize(json2, typeName2)"
                },
                {
                    "type": "String",
                    "expression": "typeName2",
                    "statement": "Set<Set<Object>> actualResult = Serializer.deserialize(json2, typeName2);",
                    "invocation": "actualResult = Serializer.deserialize(json2, typeName2)"
                }
            ],
            "comments": "",
            "dependency": "io.arex.inst.runtime.serializer.Serializer;io.arex.inst.runtime.serializer.Serializer.*"
        },
        "pair_inputs": {
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h9Test0": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h9Test2": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h9Test3": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h9Test4": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h9Test5": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h9Test6": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h9Test7": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h9Test8": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h9Test9": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "cucumber__split__cucumber-jvm",
            "test_file_path": "./data/ITrans/projects/cucumber__split__cucumber-jvm/cucumber-core/src/test/java/io/cucumber/core/eventbus/RandomUuidGeneratorTest.java",
            "test_simple_name": "generates_different_non_null_uuids",
            "FQS_testMethos": "io.cucumber.core.eventbus.RandomUuidGeneratorTest.generates_different_non_null_uuids()",
            "assertionSTMT": "assertNotEquals(uuid1, uuid2)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/cucumber__split__cucumber-jvm/io.cucumber.core.eventbus.RandomUuidGeneratorTest.generates_different_non_null_uuids__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "io.cucumber.core.eventbus.UuidGenerator.generateId()",
                "io.cucumber.core.eventbus.UuidGenerator.generateId()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "UuidGenerator",
                    "expression": "generator",
                    "statement": "String uuid1 = generator.generateId();",
                    "invocation": "uuid1 = generator.generateId()"
                }
            ],
            "followUpInput": [
                {
                    "type": "UuidGenerator",
                    "expression": "generator2",
                    "statement": "String uuid2 = generator2.generateId();",
                    "invocation": "uuid2 = generator2.generateId()"
                }
            ],
            "comments": "",
            "dependency": "io.cucumber.core.eventbus.UuidGenerator;io.cucumber.core.eventbus.UuidGenerator.*"
        },
        "pair_inputs": {
            "io.cucumber.core.eventbus.RandomUuidGeneratorTest_generates_different_non_null_uuids_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "generates_different_non_null_uuids_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "generates_different_non_null_uuids_h9Test0"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__split__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__split__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/Map1Test.java",
            "test_simple_name": "test5",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test5()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__fastjson2/com.alibaba.fastjson2.internal.processor.maps.Map1Test.test5__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<String, Double>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Map<String, Double> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                },
                {
                    "type": "Type",
                    "expression": "mapType",
                    "statement": "Map<String, Double> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference;java.lang.reflect.Type"
        },
        "pair_inputs": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test5_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test5_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test5_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test5_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test5_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test5_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test5_h9Test3"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test5_h9Test3": "org.opentest4j.AssertionFailedError: expected: <{null=3.0, 101=1.0, 102=2.0}> but was: <{101=1.0, 102=2.0, null=3.0}>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test5_h9Test3"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test5_h9Test3": "org.opentest4j.AssertionFailedError: expected: <{null=3.0, 101=1.0, 102=2.0}> but was: <{101=1.0, 102=2.0, null=3.0}>"
                    }
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test5_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test5_h9Test4": "org.opentest4j.AssertionFailedError: expected: <{101=null, 102=2.0}> but was: <{102=2.0}>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test5_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test5_h9Test4": "org.opentest4j.AssertionFailedError: expected: <{101=null, 102=2.0}> but was: <{102=2.0}>"
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "synthetichealth__split__synthea",
            "test_file_path": "./data/ITrans/projects/synthetichealth__split__synthea/src/test/java/org/mitre/synthea/engine/ExpressedSymptomTest.java",
            "test_simple_name": "testExpressedSymtpom",
            "FQS_testMethos": "org.mitre.synthea.engine.ExpressedSymptomTest.testExpressedSymtpom()",
            "assertionSTMT": "assertEquals(Long.valueOf(l), symptom2.getSymptomLastUpdatedTime(module2));",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/synthetichealth__split__synthea/org.mitre.synthea.engine.ExpressedSymptomTest.testExpressedSymtpom__split__3.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.mitre.synthea.engine.ExpressedSymptom.onSet(java.lang.String, java.lang.String, long, int, java.lang.Boolean)",
                "org.mitre.synthea.engine.ExpressedSymptom.getSymptomLastUpdatedTime(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 8,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "ExpressedSymptom",
                    "expression": "symptom",
                    "statement": "symptom.onSet(module, cause, l, (int) (100 * l), false);",
                    "invocation": "symptom.onSet(module, cause, l, (int) (100 * l), false)"
                },
                {
                    "type": "String",
                    "expression": "module",
                    "statement": "symptom.onSet(module, cause, l, (int) (100 * l), false);",
                    "invocation": "symptom.onSet(module, cause, l, (int) (100 * l), false)"
                }
            ],
            "followUpInput": [
                {
                    "type": "ExpressedSymptom",
                    "expression": "symptom2",
                    "statement": "assertEquals(Long.valueOf(l), symptom.getSymptomLastUpdatedTime(module2));",
                    "invocation": "symptom.getSymptomLastUpdatedTime(module2)"
                },
                {
                    "type": "String",
                    "expression": "module2",
                    "statement": "assertEquals(Long.valueOf(l), symptom2.getSymptomLastUpdatedTime(module2));",
                    "invocation": "symptom2.getSymptomLastUpdatedTime(module2)"
                }
            ],
            "comments": "",
            "dependency": "org.mitre.synthea.engine.ExpressedSymptom;org.mitre.synthea.engine.ExpressedSymptom.*"
        },
        "pair_inputs": {
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testExpressedSymtpom_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testExpressedSymtpom_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testExpressedSymtpom_h9Test0": "java.lang.AssertionError, line:None"
                    }
                }
            },
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testExpressedSymtpom_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testExpressedSymtpom_h9Test2"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testExpressedSymtpom_h9Test2": "java.lang.AssertionError, line:None"
                    }
                }
            },
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h9Test3": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testExpressedSymtpom_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testExpressedSymtpom_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testExpressedSymtpom_h9Test4": "java.lang.AssertionError, line:None"
                    }
                }
            },
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h9Test5": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h9Test6": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testExpressedSymtpom_h9Test6"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testExpressedSymtpom_h9Test6"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testExpressedSymtpom_h9Test6": "java.lang.AssertionError, line:None"
                    }
                }
            },
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h9Test7": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h9Test8": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testExpressedSymtpom_h9Test8"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testExpressedSymtpom_h9Test8"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testExpressedSymtpom_h9Test8": "java.lang.AssertionError, line:None"
                    }
                }
            },
            "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h9Test9": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "apache__split__systemds",
            "test_file_path": "./data/ITrans/projects/apache__split__systemds/src/test/java/org/apache/sysds/test/component/compress/util/ArrayListTest.java",
            "test_simple_name": "extract",
            "FQS_testMethos": "org.apache.sysds.test.component.compress.util.ArrayListTest.extract()",
            "assertionSTMT": "assertTrue(ex.length >= et.length)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__split__systemds/org.apache.sysds.test.component.compress.util.ArrayListTest.extract__split__1.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.apache.sysds.runtime.compress.utils.IntArrayList.extractValues(boolean)",
                "org.apache.sysds.runtime.compress.utils.IntArrayList.extractValues(boolean)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 2,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "IntArrayList",
                    "expression": "a",
                    "statement": "int[] ex = a.extractValues(trimFlag);",
                    "invocation": "ex = a.extractValues(trimFlag)"
                },
                {
                    "type": "boolean",
                    "expression": "trimFlag",
                    "statement": "int[] ex = a.extractValues(trimFlag);",
                    "invocation": "ex = a.extractValues(trimFlag)"
                }
            ],
            "followUpInput": [
                {
                    "type": "IntArrayList",
                    "expression": "a2",
                    "statement": "int[] ex2 = a2.extractValues(trimFlag2);",
                    "invocation": "ex2 = a2.extractValues(trimFlag2)"
                },
                {
                    "type": "boolean",
                    "expression": "trimFlag2",
                    "statement": "int[] ex2 = a2.extractValues(trimFlag2);",
                    "invocation": "ex2 = a2.extractValues(trimFlag2)"
                }
            ],
            "comments": "",
            "dependency": "org.apache.sysds.runtime.compress.utils.IntArrayList;org.apache.sysds.runtime.compress.utils.IntArrayList.*"
        },
        "pair_inputs": {
            "org.apache.sysds.test.component.compress.util.ArrayListTest_extract_h9Test0": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.apache.sysds.test.component.compress.util.ArrayListTest_extract_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "jdereg__split__java-util",
            "test_file_path": "./data/ITrans/projects/jdereg__split__java-util/src/test/java/com/cedarsoftware/util/convert/ConverterTest.java",
            "test_simple_name": "testSqlDateToString",
            "FQS_testMethos": "com.cedarsoftware.util.convert.ConverterTest.testSqlDateToString()",
            "assertionSTMT": "assertEquals(l1, l2)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/jdereg__split__java-util/com.cedarsoftware.util.convert.ConverterTest.testSqlDateToString__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.cedarsoftware.util.convert.Converter.convert(java.lang.Object, java.lang.Class<T>)",
                "com.cedarsoftware.util.convert.Converter.convert(java.lang.Object, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Date",
                    "expression": "date",
                    "statement": "LocalDate l1 = (LocalDate) this.converter.convert(date, clazz1);",
                    "invocation": "l1 = (LocalDate) this.converter.convert(date, clazz1))"
                },
                {
                    "type": "Class<?>",
                    "expression": "clazz1",
                    "statement": "LocalDate l1 = (LocalDate) this.converter.convert(date, clazz1);",
                    "invocation": "l1 = (LocalDate) this.converter.convert(date, clazz1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Date",
                    "expression": "x",
                    "statement": "LocalDate l2 = (LocalDate) this.converter.convert(x, clazz2);",
                    "invocation": "l2 = (LocalDate) this.converter.convert(x, clazz2)"
                },
                {
                    "type": "Class<?>",
                    "expression": "clazz2",
                    "statement": "LocalDate l2 = (LocalDate) this.converter.convert(x, clazz2);",
                    "invocation": "l2 = (LocalDate) this.converter.convert(x, clazz2)"
                }
            ],
            "comments": "",
            "dependency": "com.cedarsoftware.util.convert.Converter;com.cedarsoftware.util.convert.Converter.*"
        },
        "pair_inputs": {
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1602,
                    "num_of_passed_test_cases": 16,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1586,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "toByte_whenEmpty_andNotPrimitive_returnsZero",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testLocalDateTimestampAndBack",
                        "testLocalDateTimestampAndBack",
                        "testLocalDateTimestampAndBack",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "testConvertString_withIllegalArguments",
                        "testConvertString_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testStringNullAndEmpty",
                        "testStringNullAndEmpty",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "testConvertToAtomicLong_whenNullString",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "toLong_whenNotPrimitive_andNull_returnsNull",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testLocalDateTimeToBigDecimal",
                        "testLocalDateTimeToBigDecimal",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testConvertToFloat_withIllegalArguments",
                        "testConvertToFloat_withIllegalArguments",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "testLocalDateToBigDecimalAndBack",
                        "testLocalDateToBigDecimalAndBack",
                        "testLocalDateToBigDecimalAndBack",
                        "stringToClass",
                        "stringToClass",
                        "testLocalDateToBigIntegerAndBack",
                        "testLocalDateToBigIntegerAndBack",
                        "testLocalDateToBigIntegerAndBack",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testConvertTCharacter_withIllegalArguments",
                        "testConvertTCharacter_withIllegalArguments",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "toInt_whenNotPrimitive_andNullString_returnsNull",
                        "toShort_whenNotPrimitive_whenEmptyString_returnsNull",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testLocalDateToLocalTime",
                        "testLocalDateToLocalTime",
                        "testLocalDateToLocalTime",
                        "testLocalDateTimeToBigInteger",
                        "testLocalDateTimeToBigInteger",
                        "testCalendar_roundTrip_withLocalDate",
                        "testCalendar_roundTrip_withLocalDate",
                        "testCalendar_roundTrip_withLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "testConvertToAtomicLong_whenEmptyString",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testLocalDateTimeToAtomicLong",
                        "testLocalDateTimeToAtomicLong",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "conversionsWithPrecisionLoss_toAtomicLong",
                        "conversionsWithPrecisionLoss_toAtomicLong",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testLocalDateTimeToZonedDateTime",
                        "testLocalDateTimeToZonedDateTime",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "toInt_whenNotPrimitive_andEmptyString_returnsZero",
                        "testAtomicInteger_withIllegalArguments",
                        "testAtomicInteger_withIllegalArguments",
                        "testAtomicInteger_withIllegalArguments",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testLocalDateToDoubleAndBack",
                        "testLocalDateToDoubleAndBack",
                        "testLocalDateToDoubleAndBack",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "testLocalDateTimeToInstant",
                        "testLocalDateTimeToInstant",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toLong_whenNotPrimitive_andEmptyString_returnsZero",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testConvertToBigInteger_withIllegalArguments",
                        "testConvertToBigInteger_withIllegalArguments",
                        "testConvertToBigInteger_withIllegalArguments",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testConvertTCharacter_withNumberFormatExceptions",
                        "testConvertTCharacter_withNumberFormatExceptions",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testLocalDateTimeToLocalTime",
                        "testLocalDateTimeToLocalTime",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "toShort_whenNotPrimitive_whenNull_returnsNull",
                        "testLocalDateToLong",
                        "testLocalDateToLong",
                        "testLocalDateToAtomicLongAndBack",
                        "testLocalDateToAtomicLongAndBack",
                        "testLocalDateToAtomicLongAndBack",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLocalDateTimeToLong",
                        "testLocalDateTimeToLong",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testLocalDateToDateAndBack",
                        "testLocalDateToDateAndBack",
                        "testLocalDateToDateAndBack",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testLocalDateToInstantAndBack",
                        "testLocalDateToInstantAndBack",
                        "testLocalDateToInstantAndBack",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "toByte_whenNull_andNotPrimitive_returnsNull",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime"
                    ],
                    "passed_test_cases_list": [
                        "testSqlDateToString_h9Test0"
                    ],
                    "failure_info": {
                        "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1602,
                    "num_of_passed_test_cases": 16,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1586,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "toByte_whenEmpty_andNotPrimitive_returnsZero",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testLocalDateTimestampAndBack",
                        "testLocalDateTimestampAndBack",
                        "testLocalDateTimestampAndBack",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "testConvertString_withIllegalArguments",
                        "testConvertString_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testStringNullAndEmpty",
                        "testStringNullAndEmpty",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "testConvertToAtomicLong_whenNullString",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "toLong_whenNotPrimitive_andNull_returnsNull",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testLocalDateTimeToBigDecimal",
                        "testLocalDateTimeToBigDecimal",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testConvertToFloat_withIllegalArguments",
                        "testConvertToFloat_withIllegalArguments",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "testLocalDateToBigDecimalAndBack",
                        "testLocalDateToBigDecimalAndBack",
                        "testLocalDateToBigDecimalAndBack",
                        "stringToClass",
                        "stringToClass",
                        "testLocalDateToBigIntegerAndBack",
                        "testLocalDateToBigIntegerAndBack",
                        "testLocalDateToBigIntegerAndBack",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testConvertTCharacter_withIllegalArguments",
                        "testConvertTCharacter_withIllegalArguments",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "toInt_whenNotPrimitive_andNullString_returnsNull",
                        "toShort_whenNotPrimitive_whenEmptyString_returnsNull",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testLocalDateToLocalTime",
                        "testLocalDateToLocalTime",
                        "testLocalDateToLocalTime",
                        "testLocalDateTimeToBigInteger",
                        "testLocalDateTimeToBigInteger",
                        "testCalendar_roundTrip_withLocalDate",
                        "testCalendar_roundTrip_withLocalDate",
                        "testCalendar_roundTrip_withLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "testConvertToAtomicLong_whenEmptyString",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testLocalDateTimeToAtomicLong",
                        "testLocalDateTimeToAtomicLong",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "conversionsWithPrecisionLoss_toAtomicLong",
                        "conversionsWithPrecisionLoss_toAtomicLong",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testLocalDateTimeToZonedDateTime",
                        "testLocalDateTimeToZonedDateTime",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "toInt_whenNotPrimitive_andEmptyString_returnsZero",
                        "testAtomicInteger_withIllegalArguments",
                        "testAtomicInteger_withIllegalArguments",
                        "testAtomicInteger_withIllegalArguments",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testLocalDateToDoubleAndBack",
                        "testLocalDateToDoubleAndBack",
                        "testLocalDateToDoubleAndBack",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "testLocalDateTimeToInstant",
                        "testLocalDateTimeToInstant",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toLong_whenNotPrimitive_andEmptyString_returnsZero",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testConvertToBigInteger_withIllegalArguments",
                        "testConvertToBigInteger_withIllegalArguments",
                        "testConvertToBigInteger_withIllegalArguments",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testConvertTCharacter_withNumberFormatExceptions",
                        "testConvertTCharacter_withNumberFormatExceptions",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testLocalDateTimeToLocalTime",
                        "testLocalDateTimeToLocalTime",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "toShort_whenNotPrimitive_whenNull_returnsNull",
                        "testLocalDateToLong",
                        "testLocalDateToLong",
                        "testLocalDateToAtomicLongAndBack",
                        "testLocalDateToAtomicLongAndBack",
                        "testLocalDateToAtomicLongAndBack",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLocalDateTimeToLong",
                        "testLocalDateTimeToLong",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testLocalDateToDateAndBack",
                        "testLocalDateToDateAndBack",
                        "testLocalDateToDateAndBack",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testLocalDateToInstantAndBack",
                        "testLocalDateToInstantAndBack",
                        "testLocalDateToInstantAndBack",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "toByte_whenNull_andNotPrimitive_returnsNull",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime"
                    ],
                    "passed_test_cases_list": [
                        "testSqlDateToString_h9Test0"
                    ],
                    "failure_info": {
                        "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
                    }
                }
            },
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1602,
                    "num_of_passed_test_cases": 15,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1587,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "toByte_whenEmpty_andNotPrimitive_returnsZero",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testLocalDateTimestampAndBack",
                        "testLocalDateTimestampAndBack",
                        "testLocalDateTimestampAndBack",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "testConvertString_withIllegalArguments",
                        "testConvertString_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testStringNullAndEmpty",
                        "testStringNullAndEmpty",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "testConvertToAtomicLong_whenNullString",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "toLong_whenNotPrimitive_andNull_returnsNull",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testLocalDateTimeToBigDecimal",
                        "testLocalDateTimeToBigDecimal",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testConvertToFloat_withIllegalArguments",
                        "testConvertToFloat_withIllegalArguments",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "testLocalDateToBigDecimalAndBack",
                        "testLocalDateToBigDecimalAndBack",
                        "testLocalDateToBigDecimalAndBack",
                        "stringToClass",
                        "stringToClass",
                        "testLocalDateToBigIntegerAndBack",
                        "testLocalDateToBigIntegerAndBack",
                        "testLocalDateToBigIntegerAndBack",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testConvertTCharacter_withIllegalArguments",
                        "testConvertTCharacter_withIllegalArguments",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "toInt_whenNotPrimitive_andNullString_returnsNull",
                        "toShort_whenNotPrimitive_whenEmptyString_returnsNull",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testLocalDateToLocalTime",
                        "testLocalDateToLocalTime",
                        "testLocalDateToLocalTime",
                        "testLocalDateTimeToBigInteger",
                        "testLocalDateTimeToBigInteger",
                        "testCalendar_roundTrip_withLocalDate",
                        "testCalendar_roundTrip_withLocalDate",
                        "testCalendar_roundTrip_withLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "testConvertToAtomicLong_whenEmptyString",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testLocalDateTimeToAtomicLong",
                        "testLocalDateTimeToAtomicLong",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "conversionsWithPrecisionLoss_toAtomicLong",
                        "conversionsWithPrecisionLoss_toAtomicLong",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testLocalDateTimeToZonedDateTime",
                        "testLocalDateTimeToZonedDateTime",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "toInt_whenNotPrimitive_andEmptyString_returnsZero",
                        "testAtomicInteger_withIllegalArguments",
                        "testAtomicInteger_withIllegalArguments",
                        "testAtomicInteger_withIllegalArguments",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testLocalDateToDoubleAndBack",
                        "testLocalDateToDoubleAndBack",
                        "testLocalDateToDoubleAndBack",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "testLocalDateTimeToInstant",
                        "testLocalDateTimeToInstant",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toLong_whenNotPrimitive_andEmptyString_returnsZero",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testSqlDateToString_h9Test1",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testConvertToBigInteger_withIllegalArguments",
                        "testConvertToBigInteger_withIllegalArguments",
                        "testConvertToBigInteger_withIllegalArguments",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testConvertTCharacter_withNumberFormatExceptions",
                        "testConvertTCharacter_withNumberFormatExceptions",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testLocalDateTimeToLocalTime",
                        "testLocalDateTimeToLocalTime",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "toShort_whenNotPrimitive_whenNull_returnsNull",
                        "testLocalDateToLong",
                        "testLocalDateToLong",
                        "testLocalDateToAtomicLongAndBack",
                        "testLocalDateToAtomicLongAndBack",
                        "testLocalDateToAtomicLongAndBack",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLocalDateTimeToLong",
                        "testLocalDateTimeToLong",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testLocalDateToDateAndBack",
                        "testLocalDateToDateAndBack",
                        "testLocalDateToDateAndBack",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testLocalDateToInstantAndBack",
                        "testLocalDateToInstantAndBack",
                        "testLocalDateToInstantAndBack",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "toByte_whenNull_andNotPrimitive_returnsNull",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToString_h9Test1": "java.lang.ClassCastException: class java.time.LocalDateTime cannot be cast to class java.time.LocalDate (java.time.LocalDateTime and java.time.LocalDate are in module java.base of loader 'bootstrap')",
                        "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1602,
                    "num_of_passed_test_cases": 15,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1587,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "toByte_whenEmpty_andNotPrimitive_returnsZero",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testLocalDateTimestampAndBack",
                        "testLocalDateTimestampAndBack",
                        "testLocalDateTimestampAndBack",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "testConvertString_withIllegalArguments",
                        "testConvertString_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testStringNullAndEmpty",
                        "testStringNullAndEmpty",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "testConvertToAtomicLong_whenNullString",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "toLong_whenNotPrimitive_andNull_returnsNull",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testLocalDateTimeToBigDecimal",
                        "testLocalDateTimeToBigDecimal",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testConvertToFloat_withIllegalArguments",
                        "testConvertToFloat_withIllegalArguments",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "testLocalDateToBigDecimalAndBack",
                        "testLocalDateToBigDecimalAndBack",
                        "testLocalDateToBigDecimalAndBack",
                        "stringToClass",
                        "stringToClass",
                        "testLocalDateToBigIntegerAndBack",
                        "testLocalDateToBigIntegerAndBack",
                        "testLocalDateToBigIntegerAndBack",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testConvertTCharacter_withIllegalArguments",
                        "testConvertTCharacter_withIllegalArguments",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "toInt_whenNotPrimitive_andNullString_returnsNull",
                        "toShort_whenNotPrimitive_whenEmptyString_returnsNull",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testLocalDateToLocalTime",
                        "testLocalDateToLocalTime",
                        "testLocalDateToLocalTime",
                        "testLocalDateTimeToBigInteger",
                        "testLocalDateTimeToBigInteger",
                        "testCalendar_roundTrip_withLocalDate",
                        "testCalendar_roundTrip_withLocalDate",
                        "testCalendar_roundTrip_withLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "testConvertToAtomicLong_whenEmptyString",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testLocalDateTimeToAtomicLong",
                        "testLocalDateTimeToAtomicLong",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "conversionsWithPrecisionLoss_toAtomicLong",
                        "conversionsWithPrecisionLoss_toAtomicLong",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testLocalDateTimeToZonedDateTime",
                        "testLocalDateTimeToZonedDateTime",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "toInt_whenNotPrimitive_andEmptyString_returnsZero",
                        "testAtomicInteger_withIllegalArguments",
                        "testAtomicInteger_withIllegalArguments",
                        "testAtomicInteger_withIllegalArguments",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testLocalDateToDoubleAndBack",
                        "testLocalDateToDoubleAndBack",
                        "testLocalDateToDoubleAndBack",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "testLocalDateTimeToInstant",
                        "testLocalDateTimeToInstant",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toLong_whenNotPrimitive_andEmptyString_returnsZero",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testSqlDateToString_h9Test1",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testConvertToBigInteger_withIllegalArguments",
                        "testConvertToBigInteger_withIllegalArguments",
                        "testConvertToBigInteger_withIllegalArguments",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testConvertTCharacter_withNumberFormatExceptions",
                        "testConvertTCharacter_withNumberFormatExceptions",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testLocalDateTimeToLocalTime",
                        "testLocalDateTimeToLocalTime",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "toShort_whenNotPrimitive_whenNull_returnsNull",
                        "testLocalDateToLong",
                        "testLocalDateToLong",
                        "testLocalDateToAtomicLongAndBack",
                        "testLocalDateToAtomicLongAndBack",
                        "testLocalDateToAtomicLongAndBack",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLocalDateTimeToLong",
                        "testLocalDateTimeToLong",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testLocalDateToDateAndBack",
                        "testLocalDateToDateAndBack",
                        "testLocalDateToDateAndBack",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testLocalDateToInstantAndBack",
                        "testLocalDateToInstantAndBack",
                        "testLocalDateToInstantAndBack",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "toByte_whenNull_andNotPrimitive_returnsNull",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToString_h9Test1": "java.lang.ClassCastException: class java.time.LocalDateTime cannot be cast to class java.time.LocalDate (java.time.LocalDateTime and java.time.LocalDate are in module java.base of loader 'bootstrap')",
                        "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
                    }
                }
            },
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1602,
                    "num_of_passed_test_cases": 15,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1587,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "toByte_whenEmpty_andNotPrimitive_returnsZero",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testLocalDateTimestampAndBack",
                        "testLocalDateTimestampAndBack",
                        "testLocalDateTimestampAndBack",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "testConvertString_withIllegalArguments",
                        "testConvertString_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testStringNullAndEmpty",
                        "testStringNullAndEmpty",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "testConvertToAtomicLong_whenNullString",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "toLong_whenNotPrimitive_andNull_returnsNull",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testLocalDateTimeToBigDecimal",
                        "testLocalDateTimeToBigDecimal",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testConvertToFloat_withIllegalArguments",
                        "testConvertToFloat_withIllegalArguments",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "testLocalDateToBigDecimalAndBack",
                        "testLocalDateToBigDecimalAndBack",
                        "testLocalDateToBigDecimalAndBack",
                        "stringToClass",
                        "stringToClass",
                        "testLocalDateToBigIntegerAndBack",
                        "testLocalDateToBigIntegerAndBack",
                        "testLocalDateToBigIntegerAndBack",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testConvertTCharacter_withIllegalArguments",
                        "testConvertTCharacter_withIllegalArguments",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "toInt_whenNotPrimitive_andNullString_returnsNull",
                        "toShort_whenNotPrimitive_whenEmptyString_returnsNull",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testLocalDateToLocalTime",
                        "testLocalDateToLocalTime",
                        "testLocalDateToLocalTime",
                        "testLocalDateTimeToBigInteger",
                        "testLocalDateTimeToBigInteger",
                        "testCalendar_roundTrip_withLocalDate",
                        "testCalendar_roundTrip_withLocalDate",
                        "testCalendar_roundTrip_withLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "testConvertToAtomicLong_whenEmptyString",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testLocalDateTimeToAtomicLong",
                        "testLocalDateTimeToAtomicLong",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "conversionsWithPrecisionLoss_toAtomicLong",
                        "conversionsWithPrecisionLoss_toAtomicLong",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testLocalDateTimeToZonedDateTime",
                        "testLocalDateTimeToZonedDateTime",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "toInt_whenNotPrimitive_andEmptyString_returnsZero",
                        "testAtomicInteger_withIllegalArguments",
                        "testAtomicInteger_withIllegalArguments",
                        "testAtomicInteger_withIllegalArguments",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testLocalDateToDoubleAndBack",
                        "testLocalDateToDoubleAndBack",
                        "testLocalDateToDoubleAndBack",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "testLocalDateTimeToInstant",
                        "testLocalDateTimeToInstant",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toLong_whenNotPrimitive_andEmptyString_returnsZero",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testSqlDateToString_h9Test2",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testConvertToBigInteger_withIllegalArguments",
                        "testConvertToBigInteger_withIllegalArguments",
                        "testConvertToBigInteger_withIllegalArguments",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testConvertTCharacter_withNumberFormatExceptions",
                        "testConvertTCharacter_withNumberFormatExceptions",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testLocalDateTimeToLocalTime",
                        "testLocalDateTimeToLocalTime",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "toShort_whenNotPrimitive_whenNull_returnsNull",
                        "testLocalDateToLong",
                        "testLocalDateToLong",
                        "testLocalDateToAtomicLongAndBack",
                        "testLocalDateToAtomicLongAndBack",
                        "testLocalDateToAtomicLongAndBack",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLocalDateTimeToLong",
                        "testLocalDateTimeToLong",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testLocalDateToDateAndBack",
                        "testLocalDateToDateAndBack",
                        "testLocalDateToDateAndBack",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testLocalDateToInstantAndBack",
                        "testLocalDateToInstantAndBack",
                        "testLocalDateToInstantAndBack",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "toByte_whenNull_andNotPrimitive_returnsNull",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToString_h9Test2": "java.lang.ClassCastException: class java.time.LocalTime cannot be cast to class java.time.LocalDate (java.time.LocalTime and java.time.LocalDate are in module java.base of loader 'bootstrap')",
                        "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1602,
                    "num_of_passed_test_cases": 15,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1587,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "toByte_whenEmpty_andNotPrimitive_returnsZero",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testLocalDateTimestampAndBack",
                        "testLocalDateTimestampAndBack",
                        "testLocalDateTimestampAndBack",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "testConvertString_withIllegalArguments",
                        "testConvertString_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testStringNullAndEmpty",
                        "testStringNullAndEmpty",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "testConvertToAtomicLong_whenNullString",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "toLong_whenNotPrimitive_andNull_returnsNull",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testLocalDateTimeToBigDecimal",
                        "testLocalDateTimeToBigDecimal",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testConvertToFloat_withIllegalArguments",
                        "testConvertToFloat_withIllegalArguments",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "testLocalDateToBigDecimalAndBack",
                        "testLocalDateToBigDecimalAndBack",
                        "testLocalDateToBigDecimalAndBack",
                        "stringToClass",
                        "stringToClass",
                        "testLocalDateToBigIntegerAndBack",
                        "testLocalDateToBigIntegerAndBack",
                        "testLocalDateToBigIntegerAndBack",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testConvertTCharacter_withIllegalArguments",
                        "testConvertTCharacter_withIllegalArguments",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "toInt_whenNotPrimitive_andNullString_returnsNull",
                        "toShort_whenNotPrimitive_whenEmptyString_returnsNull",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testLocalDateToLocalTime",
                        "testLocalDateToLocalTime",
                        "testLocalDateToLocalTime",
                        "testLocalDateTimeToBigInteger",
                        "testLocalDateTimeToBigInteger",
                        "testCalendar_roundTrip_withLocalDate",
                        "testCalendar_roundTrip_withLocalDate",
                        "testCalendar_roundTrip_withLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "testConvertToAtomicLong_whenEmptyString",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testLocalDateTimeToAtomicLong",
                        "testLocalDateTimeToAtomicLong",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "conversionsWithPrecisionLoss_toAtomicLong",
                        "conversionsWithPrecisionLoss_toAtomicLong",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testLocalDateTimeToZonedDateTime",
                        "testLocalDateTimeToZonedDateTime",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "toInt_whenNotPrimitive_andEmptyString_returnsZero",
                        "testAtomicInteger_withIllegalArguments",
                        "testAtomicInteger_withIllegalArguments",
                        "testAtomicInteger_withIllegalArguments",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testLocalDateToDoubleAndBack",
                        "testLocalDateToDoubleAndBack",
                        "testLocalDateToDoubleAndBack",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "testLocalDateTimeToInstant",
                        "testLocalDateTimeToInstant",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toLong_whenNotPrimitive_andEmptyString_returnsZero",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testSqlDateToString_h9Test2",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testConvertToBigInteger_withIllegalArguments",
                        "testConvertToBigInteger_withIllegalArguments",
                        "testConvertToBigInteger_withIllegalArguments",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testConvertTCharacter_withNumberFormatExceptions",
                        "testConvertTCharacter_withNumberFormatExceptions",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testLocalDateTimeToLocalTime",
                        "testLocalDateTimeToLocalTime",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "toShort_whenNotPrimitive_whenNull_returnsNull",
                        "testLocalDateToLong",
                        "testLocalDateToLong",
                        "testLocalDateToAtomicLongAndBack",
                        "testLocalDateToAtomicLongAndBack",
                        "testLocalDateToAtomicLongAndBack",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLocalDateTimeToLong",
                        "testLocalDateTimeToLong",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testLocalDateToDateAndBack",
                        "testLocalDateToDateAndBack",
                        "testLocalDateToDateAndBack",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testLocalDateToInstantAndBack",
                        "testLocalDateToInstantAndBack",
                        "testLocalDateToInstantAndBack",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "toByte_whenNull_andNotPrimitive_returnsNull",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToString_h9Test2": "java.lang.ClassCastException: class java.time.LocalTime cannot be cast to class java.time.LocalDate (java.time.LocalTime and java.time.LocalDate are in module java.base of loader 'bootstrap')",
                        "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
                    }
                }
            },
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1602,
                    "num_of_passed_test_cases": 15,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1587,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "toByte_whenEmpty_andNotPrimitive_returnsZero",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testLocalDateTimestampAndBack",
                        "testLocalDateTimestampAndBack",
                        "testLocalDateTimestampAndBack",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "testConvertString_withIllegalArguments",
                        "testConvertString_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testStringNullAndEmpty",
                        "testStringNullAndEmpty",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "testConvertToAtomicLong_whenNullString",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "toLong_whenNotPrimitive_andNull_returnsNull",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testLocalDateTimeToBigDecimal",
                        "testLocalDateTimeToBigDecimal",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testConvertToFloat_withIllegalArguments",
                        "testConvertToFloat_withIllegalArguments",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "testLocalDateToBigDecimalAndBack",
                        "testLocalDateToBigDecimalAndBack",
                        "testLocalDateToBigDecimalAndBack",
                        "stringToClass",
                        "stringToClass",
                        "testLocalDateToBigIntegerAndBack",
                        "testLocalDateToBigIntegerAndBack",
                        "testLocalDateToBigIntegerAndBack",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testConvertTCharacter_withIllegalArguments",
                        "testConvertTCharacter_withIllegalArguments",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "toInt_whenNotPrimitive_andNullString_returnsNull",
                        "toShort_whenNotPrimitive_whenEmptyString_returnsNull",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testLocalDateToLocalTime",
                        "testLocalDateToLocalTime",
                        "testLocalDateToLocalTime",
                        "testLocalDateTimeToBigInteger",
                        "testLocalDateTimeToBigInteger",
                        "testCalendar_roundTrip_withLocalDate",
                        "testCalendar_roundTrip_withLocalDate",
                        "testCalendar_roundTrip_withLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "testConvertToAtomicLong_whenEmptyString",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testLocalDateTimeToAtomicLong",
                        "testLocalDateTimeToAtomicLong",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "conversionsWithPrecisionLoss_toAtomicLong",
                        "conversionsWithPrecisionLoss_toAtomicLong",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testLocalDateTimeToZonedDateTime",
                        "testLocalDateTimeToZonedDateTime",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "toInt_whenNotPrimitive_andEmptyString_returnsZero",
                        "testAtomicInteger_withIllegalArguments",
                        "testAtomicInteger_withIllegalArguments",
                        "testAtomicInteger_withIllegalArguments",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testLocalDateToDoubleAndBack",
                        "testLocalDateToDoubleAndBack",
                        "testLocalDateToDoubleAndBack",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "testLocalDateTimeToInstant",
                        "testLocalDateTimeToInstant",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toLong_whenNotPrimitive_andEmptyString_returnsZero",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testSqlDateToString_h9Test3",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testConvertToBigInteger_withIllegalArguments",
                        "testConvertToBigInteger_withIllegalArguments",
                        "testConvertToBigInteger_withIllegalArguments",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testConvertTCharacter_withNumberFormatExceptions",
                        "testConvertTCharacter_withNumberFormatExceptions",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testLocalDateTimeToLocalTime",
                        "testLocalDateTimeToLocalTime",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "toShort_whenNotPrimitive_whenNull_returnsNull",
                        "testLocalDateToLong",
                        "testLocalDateToLong",
                        "testLocalDateToAtomicLongAndBack",
                        "testLocalDateToAtomicLongAndBack",
                        "testLocalDateToAtomicLongAndBack",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLocalDateTimeToLong",
                        "testLocalDateTimeToLong",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testLocalDateToDateAndBack",
                        "testLocalDateToDateAndBack",
                        "testLocalDateToDateAndBack",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testLocalDateToInstantAndBack",
                        "testLocalDateToInstantAndBack",
                        "testLocalDateToInstantAndBack",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "toByte_whenNull_andNotPrimitive_returnsNull",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToString_h9Test3": "java.lang.ClassCastException: class java.time.Instant cannot be cast to class java.time.LocalDate (java.time.Instant and java.time.LocalDate are in module java.base of loader 'bootstrap')",
                        "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1602,
                    "num_of_passed_test_cases": 15,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1587,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "toByte_whenEmpty_andNotPrimitive_returnsZero",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testLocalDateTimestampAndBack",
                        "testLocalDateTimestampAndBack",
                        "testLocalDateTimestampAndBack",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "testConvertString_withIllegalArguments",
                        "testConvertString_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testStringNullAndEmpty",
                        "testStringNullAndEmpty",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "testConvertToAtomicLong_whenNullString",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "toLong_whenNotPrimitive_andNull_returnsNull",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testLocalDateTimeToBigDecimal",
                        "testLocalDateTimeToBigDecimal",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testConvertToFloat_withIllegalArguments",
                        "testConvertToFloat_withIllegalArguments",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "testLocalDateToBigDecimalAndBack",
                        "testLocalDateToBigDecimalAndBack",
                        "testLocalDateToBigDecimalAndBack",
                        "stringToClass",
                        "stringToClass",
                        "testLocalDateToBigIntegerAndBack",
                        "testLocalDateToBigIntegerAndBack",
                        "testLocalDateToBigIntegerAndBack",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testConvertTCharacter_withIllegalArguments",
                        "testConvertTCharacter_withIllegalArguments",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "toInt_whenNotPrimitive_andNullString_returnsNull",
                        "toShort_whenNotPrimitive_whenEmptyString_returnsNull",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testLocalDateToLocalTime",
                        "testLocalDateToLocalTime",
                        "testLocalDateToLocalTime",
                        "testLocalDateTimeToBigInteger",
                        "testLocalDateTimeToBigInteger",
                        "testCalendar_roundTrip_withLocalDate",
                        "testCalendar_roundTrip_withLocalDate",
                        "testCalendar_roundTrip_withLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "testConvertToAtomicLong_whenEmptyString",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testLocalDateTimeToAtomicLong",
                        "testLocalDateTimeToAtomicLong",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "conversionsWithPrecisionLoss_toAtomicLong",
                        "conversionsWithPrecisionLoss_toAtomicLong",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testLocalDateTimeToZonedDateTime",
                        "testLocalDateTimeToZonedDateTime",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "toInt_whenNotPrimitive_andEmptyString_returnsZero",
                        "testAtomicInteger_withIllegalArguments",
                        "testAtomicInteger_withIllegalArguments",
                        "testAtomicInteger_withIllegalArguments",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testLocalDateToDoubleAndBack",
                        "testLocalDateToDoubleAndBack",
                        "testLocalDateToDoubleAndBack",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "testLocalDateTimeToInstant",
                        "testLocalDateTimeToInstant",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toLong_whenNotPrimitive_andEmptyString_returnsZero",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testSqlDateToString_h9Test3",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testConvertToBigInteger_withIllegalArguments",
                        "testConvertToBigInteger_withIllegalArguments",
                        "testConvertToBigInteger_withIllegalArguments",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testConvertTCharacter_withNumberFormatExceptions",
                        "testConvertTCharacter_withNumberFormatExceptions",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testLocalDateTimeToLocalTime",
                        "testLocalDateTimeToLocalTime",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "toShort_whenNotPrimitive_whenNull_returnsNull",
                        "testLocalDateToLong",
                        "testLocalDateToLong",
                        "testLocalDateToAtomicLongAndBack",
                        "testLocalDateToAtomicLongAndBack",
                        "testLocalDateToAtomicLongAndBack",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLocalDateTimeToLong",
                        "testLocalDateTimeToLong",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testLocalDateToDateAndBack",
                        "testLocalDateToDateAndBack",
                        "testLocalDateToDateAndBack",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testLocalDateToInstantAndBack",
                        "testLocalDateToInstantAndBack",
                        "testLocalDateToInstantAndBack",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "toByte_whenNull_andNotPrimitive_returnsNull",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToString_h9Test3": "java.lang.ClassCastException: class java.time.Instant cannot be cast to class java.time.LocalDate (java.time.Instant and java.time.LocalDate are in module java.base of loader 'bootstrap')",
                        "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
                    }
                }
            },
            "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1602,
                    "num_of_passed_test_cases": 15,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1587,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "toByte_whenEmpty_andNotPrimitive_returnsZero",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testLocalDateTimestampAndBack",
                        "testLocalDateTimestampAndBack",
                        "testLocalDateTimestampAndBack",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "testConvertString_withIllegalArguments",
                        "testConvertString_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testStringNullAndEmpty",
                        "testStringNullAndEmpty",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "testConvertToAtomicLong_whenNullString",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "toLong_whenNotPrimitive_andNull_returnsNull",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testLocalDateTimeToBigDecimal",
                        "testLocalDateTimeToBigDecimal",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testConvertToFloat_withIllegalArguments",
                        "testConvertToFloat_withIllegalArguments",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "testLocalDateToBigDecimalAndBack",
                        "testLocalDateToBigDecimalAndBack",
                        "testLocalDateToBigDecimalAndBack",
                        "stringToClass",
                        "stringToClass",
                        "testLocalDateToBigIntegerAndBack",
                        "testLocalDateToBigIntegerAndBack",
                        "testLocalDateToBigIntegerAndBack",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testConvertTCharacter_withIllegalArguments",
                        "testConvertTCharacter_withIllegalArguments",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "toInt_whenNotPrimitive_andNullString_returnsNull",
                        "toShort_whenNotPrimitive_whenEmptyString_returnsNull",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testLocalDateToLocalTime",
                        "testLocalDateToLocalTime",
                        "testLocalDateToLocalTime",
                        "testLocalDateTimeToBigInteger",
                        "testLocalDateTimeToBigInteger",
                        "testCalendar_roundTrip_withLocalDate",
                        "testCalendar_roundTrip_withLocalDate",
                        "testCalendar_roundTrip_withLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "testConvertToAtomicLong_whenEmptyString",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testLocalDateTimeToAtomicLong",
                        "testLocalDateTimeToAtomicLong",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "conversionsWithPrecisionLoss_toAtomicLong",
                        "conversionsWithPrecisionLoss_toAtomicLong",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testLocalDateTimeToZonedDateTime",
                        "testLocalDateTimeToZonedDateTime",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "toInt_whenNotPrimitive_andEmptyString_returnsZero",
                        "testAtomicInteger_withIllegalArguments",
                        "testAtomicInteger_withIllegalArguments",
                        "testAtomicInteger_withIllegalArguments",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testLocalDateToDoubleAndBack",
                        "testLocalDateToDoubleAndBack",
                        "testLocalDateToDoubleAndBack",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "testLocalDateTimeToInstant",
                        "testLocalDateTimeToInstant",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toLong_whenNotPrimitive_andEmptyString_returnsZero",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testSqlDateToString_h9Test4",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testConvertToBigInteger_withIllegalArguments",
                        "testConvertToBigInteger_withIllegalArguments",
                        "testConvertToBigInteger_withIllegalArguments",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testConvertTCharacter_withNumberFormatExceptions",
                        "testConvertTCharacter_withNumberFormatExceptions",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testLocalDateTimeToLocalTime",
                        "testLocalDateTimeToLocalTime",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "toShort_whenNotPrimitive_whenNull_returnsNull",
                        "testLocalDateToLong",
                        "testLocalDateToLong",
                        "testLocalDateToAtomicLongAndBack",
                        "testLocalDateToAtomicLongAndBack",
                        "testLocalDateToAtomicLongAndBack",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLocalDateTimeToLong",
                        "testLocalDateTimeToLong",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testLocalDateToDateAndBack",
                        "testLocalDateToDateAndBack",
                        "testLocalDateToDateAndBack",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testLocalDateToInstantAndBack",
                        "testLocalDateToInstantAndBack",
                        "testLocalDateToInstantAndBack",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "toByte_whenNull_andNotPrimitive_returnsNull",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToString_h9Test4": "java.lang.ClassCastException: class java.time.ZonedDateTime cannot be cast to class java.time.LocalDate (java.time.ZonedDateTime and java.time.LocalDate are in module java.base of loader 'bootstrap')",
                        "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1602,
                    "num_of_passed_test_cases": 15,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1587,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "toByte_whenEmpty_andNotPrimitive_returnsZero",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToDate",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testInstantToLong",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testBigIntegerToLocalDateTime",
                        "testLocalDateTimestampAndBack",
                        "testLocalDateTimestampAndBack",
                        "testLocalDateTimestampAndBack",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "toLong_withBooleanParams_returnsCommonValues",
                        "testConvertString_withIllegalArguments",
                        "testConvertString_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testLong_withIllegalArguments",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testInstantToBigInteger",
                        "testStringNullAndEmpty",
                        "testStringNullAndEmpty",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "testInstantToDouble",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toFloat_withBooleanArguments_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                        "testConvertToAtomicLong_whenNullString",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "toShort_usingPrimitiveClass",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToAtomicLong",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "testInstantToSqlDate",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toInt_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "toShort_withIllegalArguments_throwsException",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "testZonedDateTimeToCalendar",
                        "toLong_whenNotPrimitive_andNull_returnsNull",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testAtomicLongToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testDateToLocalDateTime",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateZonedDateTimeAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testLocalDateSqlDateAndBack",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testEpochMilliWithZoneId",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testLongToLocalDateTime",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testAtomicInteger",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testBigDecimal",
                        "testLocalDateTimeToBigDecimal",
                        "testLocalDateTimeToBigDecimal",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalDate",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testDateToLocalTime",
                        "testConvertToFloat_withIllegalArguments",
                        "testConvertToFloat_withIllegalArguments",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toFloat",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "toShort",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "testDate",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "toByte_fromBoolean_isSameAsCommonValueObject",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "testInstantToTimestamp",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "toShort_withBooleanPrams_returnsCommonValue",
                        "testLocalDateToBigDecimalAndBack",
                        "testLocalDateToBigDecimalAndBack",
                        "testLocalDateToBigDecimalAndBack",
                        "stringToClass",
                        "stringToClass",
                        "testLocalDateToBigIntegerAndBack",
                        "testLocalDateToBigIntegerAndBack",
                        "testLocalDateToBigIntegerAndBack",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testStringToCharArray",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testInstantToCalendar",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testClassesThatReturnZero_whenConvertingFromNull",
                        "testConvertTCharacter_withIllegalArguments",
                        "testConvertTCharacter_withIllegalArguments",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "toLong_usingPrimitives",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "testZonedDateTimeToLocalDateTime",
                        "toInt_whenNotPrimitive_andNullString_returnsNull",
                        "toShort_whenNotPrimitive_whenEmptyString_returnsNull",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toByte",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "toLong",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testBigInteger",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testAtomicInteger_withBooleanTypes",
                        "testLocalDateToLocalTime",
                        "testLocalDateToLocalTime",
                        "testLocalDateToLocalTime",
                        "testLocalDateTimeToBigInteger",
                        "testLocalDateTimeToBigInteger",
                        "testCalendar_roundTrip_withLocalDate",
                        "testCalendar_roundTrip_withLocalDate",
                        "testCalendar_roundTrip_withLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalDate",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "testZonedDateTimeToLocalTime",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "conversionsWithPrecisionLoss_primitives",
                        "testConvertToAtomicLong_whenEmptyString",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testToBoolean_trueCases",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testCalendarToZonedDateTime",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testZonedDateTimeToLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testAtomicLong",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testInstantToLocalDateTime",
                        "testLocalDateTimeToAtomicLong",
                        "testLocalDateTimeToAtomicLong",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "toInt_fromBoolean_returnsCommonValue",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "testCalendar_roundTrip",
                        "conversionsWithPrecisionLoss_toAtomicLong",
                        "conversionsWithPrecisionLoss_toAtomicLong",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testDateToInstant",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "testStringToByteArray",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "toFloat_objectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testDouble_ObjectType",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testBigInteger_withObjectsShouldBeSameAs",
                        "testLocalDateTimeToZonedDateTime",
                        "testLocalDateTimeToZonedDateTime",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testCalendarToDouble",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testToBoolean_falseCases",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "testTimestampToLocalDate",
                        "toInt_whenNotPrimitive_andEmptyString_returnsZero",
                        "testAtomicInteger_withIllegalArguments",
                        "testAtomicInteger_withIllegalArguments",
                        "testAtomicInteger_withIllegalArguments",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testExtremeDateParams",
                        "testLocalDateToDoubleAndBack",
                        "testLocalDateToDoubleAndBack",
                        "testLocalDateToDoubleAndBack",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "toInt",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "testConvertToBigDecimal_withIllegalArguments",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "toCharacter_ObjectType",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "testSqlDateToLocalDateTime",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                        "testLocalDateTimeToInstant",
                        "testLocalDateTimeToInstant",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testLocalDateToLocalDateTimeAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testConvertLocalDateToLongAndBack",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "testCalendarToBigDecimal",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                        "toLong_whenNotPrimitive_andEmptyString_returnsZero",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "testSqlDateToLocalDate",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "toByteUsingPrimitive",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "testLongToInstant",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testBigDecimal_withObjectsThatShouldBeSameAs",
                        "testSqlDateToString_h9Test4",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "testInstantToFloat",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "toCharacter",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testCalendarToLocalDateTime",
                        "testConvertToBigInteger_withIllegalArguments",
                        "testConvertToBigInteger_withIllegalArguments",
                        "testConvertToBigInteger_withIllegalArguments",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "conversionsWithPrecisionLoss_toAtomicInteger",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testStringParams",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToBigInteger",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalDate",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testCalendarToLocalTime",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testStringDateWithNoTimeZoneInformation",
                        "testConvertTCharacter_withNumberFormatExceptions",
                        "testConvertTCharacter_withNumberFormatExceptions",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testTimestampToLocalDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testDateToZonedDateTime",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                        "testLocalDateTimeToLocalTime",
                        "testLocalDateTimeToLocalTime",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "testDouble",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "toInt_usingPrimitives",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testStringToByteBuffer",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testByteArrayToString",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testAtomicLong_fromBoolean",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalDate",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "testLongToLocalTime",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testBigDecimalToLocalDateTime",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                        "toShort_whenNotPrimitive_whenNull_returnsNull",
                        "testLocalDateToLong",
                        "testLocalDateToLong",
                        "testLocalDateToAtomicLongAndBack",
                        "testLocalDateToAtomicLongAndBack",
                        "testLocalDateToAtomicLongAndBack",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "testCalendarToInstant",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toByte_withIllegalArguments",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLongToBigInteger",
                        "testLocalDateTimeToLong",
                        "testLocalDateTimeToLong",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject",
                        "testLocalDateToDateAndBack",
                        "testLocalDateToDateAndBack",
                        "testLocalDateToDateAndBack",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalDate",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testInstantToLocalTime",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testInstantToBigDecimal",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testCharArrayToString",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testStringDateWithTimeZoneToLocalDateTime",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testMapToCalendar",
                        "testLocalDateToInstantAndBack",
                        "testLocalDateToInstantAndBack",
                        "testLocalDateToInstantAndBack",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "testZonedDateTimeToInstant",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "testAtomicLong_withIllegalArguments",
                        "toByte_whenNull_andNotPrimitive_returnsNull",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime",
                        "testInstantToZonedDateTime"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testSqlDateToString_h9Test4": "java.lang.ClassCastException: class java.time.ZonedDateTime cannot be cast to class java.time.LocalDate (java.time.ZonedDateTime and java.time.LocalDate are in module java.base of loader 'bootstrap')",
                        "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                        "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__split__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__split__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/Map1Test.java",
            "test_simple_name": "test6",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test6()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__fastjson2/com.alibaba.fastjson2.internal.processor.maps.Map1Test.test6__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<String, BigDecimal>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Map<String, BigDecimal> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                },
                {
                    "type": "Type",
                    "expression": "mapType",
                    "statement": "Map<String, BigDecimal> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                }
            ],
            "comments": "",
            "dependency": "ccom.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference;java.lang.reflect.Type"
        },
        "pair_inputs": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test6_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test6_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test6_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test6_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test6_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test6_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test6_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test6_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test6_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test6_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "apache__split__druid",
            "test_file_path": "./data/ITrans/projects/apache__split__druid/processing/src/test/java/org/apache/druid/collections/CloseableResourceHolderTest.java",
            "test_simple_name": "testCloseableResourceHolder",
            "FQS_testMethos": "org.apache.druid.collections.CloseableResourceHolderTest.testCloseableResourceHolder()",
            "assertionSTMT": "Assert.assertSame(closeable, holder.get())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__split__druid/org.apache.druid.collections.CloseableResourceHolderTest.testCloseableResourceHolder__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.apache.druid.collections.ResourceHolder.fromCloseable(T)",
                "org.apache.druid.collections.ResourceHolder.get()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Closeable",
                    "expression": "closeable",
                    "statement": "ResourceHolder<Closeable> holder = ResourceHolder.fromCloseable(closeable);",
                    "invocation": "holder = ResourceHolder.fromCloseable(closeable)"
                }
            ],
            "followUpInput": [
                {
                    "type": "ResourceHolder<Closeable>",
                    "expression": "holder2",
                    "statement": "Assert.assertSame(closeable, holder2.get());",
                    "invocation": "holder2.get()"
                }
            ],
            "comments": "",
            "dependency": "org.apache.druid.collections.ResourceHolder;org.apache.druid.collections.ResourceHolder.*"
        },
        "pair_inputs": {
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCloseableResourceHolder_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCloseableResourceHolder_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h9Test2": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__split__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__split__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_lengthOfYear",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_lengthOfYear()",
            "assertionSTMT": "assertEquals(Year.isLeap(year) ? 366 : 365, test2.lengthOfYear())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__split__threeten-extra/org.threeten.extra.TestYearHalf.test_lengthOfYear__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)",
                "org.threeten.extra.YearHalf.lengthOfYear()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "int",
                    "expression": "year",
                    "statement": "YearHalf test = YearHalf.of(year, half);",
                    "invocation": "test = YearHalf.of(year, half)"
                },
                {
                    "type": "Half",
                    "expression": "half",
                    "statement": "YearHalf test = YearHalf.of(year, half);",
                    "invocation": "test = YearHalf.of(year, half)"
                }
            ],
            "followUpInput": [
                {
                    "type": "YearHalf",
                    "expression": "test2",
                    "statement": "assertEquals(Year.isLeap(year) ? 366 : 365, test2.lengthOfYear());",
                    "invocation": "test2.lengthOfYear()"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*"
        },
        "pair_inputs": {
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h9Test0": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h9Test2": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h9Test3": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.threeten.extra.TestYearHalf_test_lengthOfYear_h9Test4": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "apache__split__druid",
            "test_file_path": "./data/ITrans/projects/apache__split__druid/processing/src/test/java/org/apache/druid/query/filter/IsBooleanDimFilterTest.java",
            "test_simple_name": "testGetCacheKey",
            "FQS_testMethos": "org.apache.druid.query.filter.IsBooleanDimFilterTest.testGetCacheKey()",
            "assertionSTMT": "Assert.assertArrayEquals(f1_3.getCacheKey(), f1_4.getCacheKey())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__split__druid/org.apache.druid.query.filter.IsBooleanDimFilterTest.testGetCacheKey__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.apache.druid.query.filter.IsFalseDimFilter.of(org.apache.druid.query.filter.DimFilter)",
                "org.apache.druid.query.filter.IsFalseDimFilter.of(org.apache.druid.query.filter.DimFilter)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "EqualityFilter",
                    "expression": "f3",
                    "statement": "IsFalseDimFilter f1_3 = IsFalseDimFilter.of(f3);",
                    "invocation": "f1_3 = IsFalseDimFilter.of(f3)"
                }
            ],
            "followUpInput": [
                {
                    "type": "EqualityFilter",
                    "expression": "f4",
                    "statement": "IsFalseDimFilter f1_4 = IsFalseDimFilter.of(f4);",
                    "invocation": "f1_4 = IsFalseDimFilter.of(f4)"
                }
            ],
            "comments": "",
            "dependency": "org.apache.druid.query.filter.IsFalseDimFilter;org.apache.druid.query.filter.IsFalseDimFilter.*"
        },
        "pair_inputs": {
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetCacheKey_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetCacheKey_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetCacheKey_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetCacheKey_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h9Test3": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "rsksmart__split__rskj",
            "test_file_path": "./data/ITrans/projects/rsksmart__split__rskj/rskj-core/src/test/java/org/ethereum/rpc/FilterTest.java",
            "test_simple_name": "testGetEventsInternal",
            "FQS_testMethos": "org.ethereum.rpc.FilterTest.testGetEventsInternal()",
            "assertionSTMT": "assertNotSame(events, filter2.getEventsInternal())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/rsksmart__split__rskj/org.ethereum.rpc.FilterTest.testGetEventsInternal__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.ethereum.rpc.Filter.getEventsInternal()",
                "org.ethereum.rpc.Filter.getEventsInternal()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 2,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Filter",
                    "expression": "filter",
                    "statement": "Object[] events = filter.getEventsInternal();",
                    "invocation": "events = filter.getEventsInternal()"
                }
            ],
            "followUpInput": [
                {
                    "type": "Filter",
                    "expression": "filter2",
                    "statement": "assertNotSame(events, filter2.getEventsInternal());",
                    "invocation": "filter2.getEventsInternal()"
                }
            ],
            "comments": "",
            "dependency": "org.ethereum.rpc.Filter;org.ethereum.rpc.Filter.*"
        },
        "pair_inputs": {
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetEventsInternal_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetEventsInternal_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetEventsInternal_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetEventsInternal_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetEventsInternal_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetEventsInternal_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetEventsInternal_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetEventsInternal_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.ethereum.rpc.FilterTest_testGetEventsInternal_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetEventsInternal_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetEventsInternal_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "zfoo-project__split__zfoo",
            "test_file_path": "./data/ITrans/projects/zfoo-project__split__zfoo/net/src/test/java/com/zfoo/net/util/NetUtilsTest.java",
            "test_simple_name": "ipv4Test",
            "FQS_testMethos": "com.zfoo.net.util.NetUtilsTest.ipv4Test()",
            "assertionSTMT": "Assert.assertEquals(ipStr2, ipStr1)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/zfoo-project__split__zfoo/com.zfoo.net.util.NetUtilsTest.localhostTest__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "com.zfoo.net.util.NetUtils.ipv4ToLong()",
                "com.zfoo.net.util.NetUtils.longToIpv4()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "ipStr1",
                    "statement": "long ipLong = NetUtils.ipv4ToLong(ipStr1);",
                    "invocation": "ipLong = NetUtils.ipv4ToLong(ipStr1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "long",
                    "expression": "ipLong2",
                    "statement": "String ipStr2 = NetUtils.longToIpv4(ipLong2);",
                    "invocation": "ipStr2 = NetUtils.longToIpv4(ipLong2)"
                }
            ],
            "comments": "manully light craft case",
            "dependency": "com.zfoo.net.util.NetUtils;com.zfoo.net.util.NetUtils.*"
        },
        "pair_inputs": {
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "ipv4Test_h9Test0"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "ipv4Test_h9Test0": "ipv4Test_h9Test0"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "ipv4Test_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "ipv4Test_h9Test2"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "ipv4Test_h9Test2": "ipv4Test_h9Test2"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "ipv4Test_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "ipv4Test_h9Test3"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "ipv4Test_h9Test3": "ipv4Test_h9Test3"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "ipv4Test_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "ipv4Test_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "ipv4Test_h9Test4": "ipv4Test_h9Test4"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "ipv4Test_h9Test4"
                    ],
                    "failure_info": {}
                }
            },
            "com.zfoo.net.util.NetUtilsTest_ipv4Test_h9Test5": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "ipv4Test_h9Test5"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "ipv4Test_h9Test5": "ipv4Test_h9Test5"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "ipv4Test_h9Test5"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__split__druid",
            "test_file_path": "./data/ITrans/projects/alibaba__split__druid/core/src/test/java/com/alibaba/druid/bvt/sql/hive/issues/Issue5430.java",
            "test_simple_name": "test_createTable",
            "FQS_testMethos": "com.alibaba.druid.bvt.sql.hive.issues.Issue5430.test_createTable()",
            "assertionSTMT": "assertEquals(normalizeSql.toLowerCase(), normalizeNewSql.toLowerCase())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__druid/com.alibaba.druid.bvt.sql.hive.issues.Issue5430.test_createTable__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "com.alibaba.druid.bvt.sql.hive.issues.Issue5430.normalizeSql(java.lang.String)",
                "com.alibaba.druid.bvt.sql.hive.issues.Issue5430.normalizeSql(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "sql",
                    "statement": "String normalizeSql = normalizeSql(sql1);",
                    "invocation": "normalizeSql = normalizeSql(sql1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "newSql",
                    "statement": "String normalizeNewSql = normalizeSql(newSql1);",
                    "invocation": "normalizeNewSql = normalizeSql(newSql1)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.druid.bvt.sql.hive.issues.Issue5430;com.alibaba.druid.bvt.sql.hive.issues.Issue5430.*"
        },
        "pair_inputs": {
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_createTable_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_createTable_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_createTable_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_createTable_h9Test1"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__split__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__split__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/Map1Test.java",
            "test_simple_name": "test7",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test7()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__fastjson2/com.alibaba.fastjson2.internal.processor.maps.Map1Test.test7__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<String, BigInteger>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Map<String, BigInteger> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                },
                {
                    "type": "Type",
                    "expression": "mapType",
                    "statement": "Map<String, BigInteger> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference;java.lang.reflect.Type"
        },
        "pair_inputs": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test7_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test7_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test7_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test7_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test7_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test7_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test7_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test7_h9Test4"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h9Test5": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test7_h9Test5"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test7_h9Test5"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "arextest__split__arex-agent-java",
            "test_file_path": "./data/ITrans/projects/arextest__split__arex-agent-java/arex-instrumentation-api/src/test/java/io/arex/inst/runtime/model/SerializeSkipInfoTest.java",
            "test_simple_name": "testHashCode",
            "FQS_testMethos": "io.arex.inst.runtime.model.SerializeSkipInfoTest.testHashCode()",
            "assertionSTMT": "assertEquals(serializeSkipInfo2.hashCode(), serializeSkipInfo.hashCode())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/arextest__split__arex-agent-java/io.arex.inst.runtime.model.SerializeSkipInfoTest.testHashCode__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "io.arex.inst.runtime.model.SerializeSkipInfo.hashCode()",
                "io.arex.inst.runtime.model.SerializeSkipInfo.hashCode()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "SerializeSkipInfo",
                    "expression": "serializeSkipInfo",
                    "statement": "assertEquals(serializeSkipInfo2.hashCode(), serializeSkipInfo.hashCode());",
                    "invocation": "serializeSkipInfo.hashCode()"
                }
            ],
            "followUpInput": [
                {
                    "type": "SerializeSkipInfo",
                    "expression": "serializeSkipInfo2",
                    "statement": "assertEquals(serializeSkipInfo2.hashCode(), serializeSkipInfo.hashCode());",
                    "invocation": "serializeSkipInfo2.hashCode()"
                }
            ],
            "comments": "",
            "dependency": "io.arex.inst.runtime.model.SerializeSkipInfo;io.arex.inst.runtime.model.SerializeSkipInfo.*"
        },
        "pair_inputs": {
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testHashCode_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testHashCode_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testHashCode_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testHashCode_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testHashCode_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testHashCode_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testHashCode_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testHashCode_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testHashCode_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testHashCode_h9Test4"
                    ],
                    "failure_info": {}
                }
            },
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h9Test5": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testHashCode_h9Test5"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testHashCode_h9Test5"
                    ],
                    "failure_info": {}
                }
            },
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h9Test6": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testHashCode_h9Test6"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testHashCode_h9Test6"
                    ],
                    "failure_info": {}
                }
            },
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h9Test7": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testHashCode_h9Test7"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testHashCode_h9Test7"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "MyRobotLab__split__myrobotlab",
            "test_file_path": "./data/ITrans/projects/MyRobotLab__split__myrobotlab/src/test/java/org/myrobotlab/service/I2cMuxTest.java",
            "test_simple_name": "testSetDeviceBus",
            "FQS_testMethos": "org.myrobotlab.service.I2cMuxTest.testSetDeviceBus()",
            "assertionSTMT": "assertEquals(deviceBus, i2cMux.getDeviceBus())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/MyRobotLab__split__myrobotlab/org.myrobotlab.service.I2cMuxTest.testSetDeviceBus__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.myrobotlab.service.I2cMux.setDeviceBus(java.lang.String)",
                "org.myrobotlab.service.I2cMux.getDeviceBus()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "I2cMux",
                    "expression": "i2cMux",
                    "statement": "i2cMux.setDeviceBus(deviceBus);",
                    "invocation": "i2cMux.setDeviceBus(deviceBus)"
                },
                {
                    "type": "String",
                    "expression": "deviceBus",
                    "statement": "i2cMux.setDeviceBus(deviceBus);",
                    "invocation": "i2cMux.setDeviceBus(deviceBus)"
                }
            ],
            "followUpInput": [
                {
                    "type": "I2cMux",
                    "expression": "i2cMux2",
                    "statement": "assertEquals(deviceBus, i2cMux2.getDeviceBus());",
                    "invocation": "i2cMux2.getDeviceBus()"
                }
            ],
            "comments": "",
            "dependency": "org.myrobotlab.service.I2cMux;org.myrobotlab.service.I2cMux.*"
        },
        "pair_inputs": {
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testSetDeviceBus_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testSetDeviceBus_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testSetDeviceBus_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testSetDeviceBus_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testSetDeviceBus_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testSetDeviceBus_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testSetDeviceBus_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testSetDeviceBus_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testSetDeviceBus_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testSetDeviceBus_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "arextest__split__arex-agent-java",
            "test_file_path": "./data/ITrans/projects/arextest__split__arex-agent-java/arex-instrumentation-api/src/test/java/io/arex/inst/runtime/model/SerializeSkipInfoTest.java",
            "test_simple_name": "testToString",
            "FQS_testMethos": "io.arex.inst.runtime.model.SerializeSkipInfoTest.testToString()",
            "assertionSTMT": "assertEquals(serializeSkipInfo.toString(), serializeSkipInfo2.toString())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/arextest__split__arex-agent-java/io.arex.inst.runtime.model.SerializeSkipInfoTest.testToString__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "io.arex.inst.runtime.model.SerializeSkipInfo.toString()",
                "io.arex.inst.runtime.model.SerializeSkipInfo.toString()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "SerializeSkipInfo",
                    "expression": "serializeSkipInfo",
                    "statement": "assertEquals(serializeSkipInfo.toString(), serializeSkipInfo2.toString());",
                    "invocation": "serializeSkipInfo.toString()"
                }
            ],
            "followUpInput": [
                {
                    "type": "SerializeSkipInfo",
                    "expression": "serializeSkipInfo2",
                    "statement": "assertEquals(serializeSkipInfo.toString(), serializeSkipInfo2.toString());",
                    "invocation": "serializeSkipInfo2.toString()"
                }
            ],
            "comments": "",
            "dependency": "io.arex.inst.runtime.model.SerializeSkipInfo;io.arex.inst.runtime.model.SerializeSkipInfo.*"
        },
        "pair_inputs": {
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testToString_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testToString_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testToString_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testToString_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testToString_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testToString_h9Test2"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__split__druid",
            "test_file_path": "./data/ITrans/projects/alibaba__split__druid/core/src/test/java/com/alibaba/druid/bvt/sql/postgresql/issues/Issue5366.java",
            "test_simple_name": "test_create_table",
            "FQS_testMethos": "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366.test_create_table()",
            "assertionSTMT": "assertEquals(normalizeSql.toLowerCase(), normalizeNewSql.toLowerCase())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__druid/com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366.test_create_table__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366.normalizeSql(java.lang.String)",
                "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366.normalizeSql(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "sql",
                    "statement": "String normalizeSql = normalizeSql(sql1);",
                    "invocation": "normalizeSql = normalizeSql(sql1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "newSql",
                    "statement": "String normalizeNewSql = normalizeSql(newSql1);",
                    "invocation": "normalizeNewSql = normalizeSql(newSql1)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366;com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366.*"
        },
        "pair_inputs": {
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_create_table_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_create_table_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_create_table_h9Test2"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_create_table_h9Test2": "org.junit.ComparisonFailure, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_create_table_h9Test2"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_create_table_h9Test2": "org.junit.ComparisonFailure, line:None"
                    }
                }
            },
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h9Test3": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_create_table_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_create_table_h9Test4": "org.junit.ComparisonFailure, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_create_table_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_create_table_h9Test4": "org.junit.ComparisonFailure, line:None"
                    }
                }
            },
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h9Test5": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h9Test6": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_create_table_h9Test6"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_create_table_h9Test6": "org.junit.ComparisonFailure, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_create_table_h9Test6"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_create_table_h9Test6": "org.junit.ComparisonFailure, line:None"
                    }
                }
            },
            "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h9Test7": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_create_table_h9Test7"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_create_table_h9Test7": "org.junit.ComparisonFailure, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_create_table_h9Test7"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_create_table_h9Test7": "org.junit.ComparisonFailure, line:None"
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__split__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__split__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/Map1Test.java",
            "test_simple_name": "test8",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test8()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__fastjson2/com.alibaba.fastjson2.internal.processor.maps.Map1Test.test8__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<String, UUID>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Map<String, UUID> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                },
                {
                    "type": "Type",
                    "expression": "mapType",
                    "statement": "Map<String, UUID> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference;java.lang.reflect.Type"
        },
        "pair_inputs": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test8_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test8_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test8_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test8_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test8_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test8_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test8_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test8_h9Test4": "org.opentest4j.AssertionFailedError: expected: <{null=f3f313b0-5d20-4c4c-a910-e1def0b07144, 101=f7b26b02-32c0-454d-8374-4aff50805acd, 102=ba905d54-e8ee-45fd-a2e9-5f730646bbb0}> but was: <{101=f7b26b02-32c0-454d-8374-4aff50805acd, 102=ba905d54-e8ee-45fd-a2e9-5f730646bbb0, null=f3f313b0-5d20-4c4c-a910-e1def0b07144}>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test8_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test8_h9Test4": "org.opentest4j.AssertionFailedError: expected: <{null=3947f457-2b0a-46f3-85bc-d891506e1de2, 101=92d5fd37-3018-4ce6-bb4e-8be1730f4918, 102=601359c1-5b90-4b78-af9c-0543b63013ff}> but was: <{101=92d5fd37-3018-4ce6-bb4e-8be1730f4918, 102=601359c1-5b90-4b78-af9c-0543b63013ff, null=3947f457-2b0a-46f3-85bc-d891506e1de2}>"
                    }
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h9Test5": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test8_h9Test5"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test8_h9Test5": "org.opentest4j.AssertionFailedError: expected: <{101=null, 102=1280ec36-b451-480a-97b9-5adfc785bb9d}> but was: <{102=1280ec36-b451-480a-97b9-5adfc785bb9d}>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test8_h9Test5"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test8_h9Test5": "org.opentest4j.AssertionFailedError: expected: <{101=null, 102=14fd904e-b48f-401b-8c46-790f18f5ccd5}> but was: <{102=14fd904e-b48f-401b-8c46-790f18f5ccd5}>"
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "MyRobotLab__split__myrobotlab",
            "test_file_path": "./data/ITrans/projects/MyRobotLab__split__myrobotlab/src/test/java/org/myrobotlab/service/I2cMuxTest.java",
            "test_simple_name": "testSetDeviceAddress",
            "FQS_testMethos": "org.myrobotlab.service.I2cMuxTest.testSetDeviceAddress()",
            "assertionSTMT": "assertEquals(deviceAddress, i2cMux.getDeviceAddress())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/MyRobotLab__split__myrobotlab/org.myrobotlab.service.I2cMuxTest.testSetDeviceAddress__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.myrobotlab.service.I2cMux.setDeviceAddress(java.lang.String)",
                "org.myrobotlab.service.I2cMux.getDeviceAddress()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "I2cMux",
                    "expression": "i2cMux",
                    "statement": "i2cMux.setDeviceAddress(deviceAddress);",
                    "invocation": "i2cMux.setDeviceAddress(deviceAddress)"
                },
                {
                    "type": "String",
                    "expression": "deviceAddress",
                    "statement": "i2cMux.setDeviceAddress(deviceAddress);",
                    "invocation": "i2cMux.setDeviceAddress(deviceAddress)"
                }
            ],
            "followUpInput": [
                {
                    "type": "I2cMux",
                    "expression": "i2cMux2",
                    "statement": "assertEquals(deviceAddress, i2cMux2.getDeviceAddress());",
                    "invocation": "i2cMux2.getDeviceAddress()"
                }
            ],
            "comments": "",
            "dependency": "org.myrobotlab.service.I2cMux;org.myrobotlab.service.I2cMux.*"
        },
        "pair_inputs": {
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testSetDeviceAddress_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testSetDeviceAddress_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testSetDeviceAddress_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testSetDeviceAddress_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testSetDeviceAddress_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testSetDeviceAddress_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testSetDeviceAddress_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testSetDeviceAddress_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testSetDeviceAddress_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testSetDeviceAddress_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__split__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__split__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/MapTest.java",
            "test_simple_name": "test1",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.MapTest.test1()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__fastjson2/com.alibaba.fastjson2.internal.processor.maps.MapTest.test1__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<String, User>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Map<String, User> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                },
                {
                    "type": "Type",
                    "expression": "mapType",
                    "statement": "Map<String, User> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference;java.lang.reflect.Type"
        },
        "pair_inputs": {
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h9Test2": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h9Test4": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__split__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__split__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/primitives/IntTest.java",
            "test_simple_name": "test1",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.primitives.IntTest.test1()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__fastjson2/com.alibaba.fastjson2.internal.processor.primitives.IntTest.test1__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Integer",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Integer v02 = JSON.parseObject(str2, clazz);",
                    "invocation": "v02 = JSON.parseObject(str2, clazz)"
                },
                {
                    "type": "Class<Integer>",
                    "expression": "clazz",
                    "statement": "Integer v02 = JSON.parseObject(str2, clazz);",
                    "invocation": "v02 = JSON.parseObject(str2, clazz)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*"
        },
        "pair_inputs": {
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test4"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h9Test5": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test5"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test5"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "mulesoft__split__mule",
            "test_file_path": "./data/ITrans/projects/mulesoft__split__mule/modules/deployment/src/test/java/org/mule/runtime/module/deployment/test/internal/singleapp/SingleAppDeploymentServiceTestCase.java",
            "test_simple_name": "startupListeners",
            "FQS_testMethos": "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase.startupListeners()",
            "assertionSTMT": "assertThat(singleAppDeploymentService.getStartupListeners(), hasItems(startUpListener1, startUpListener2))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/mulesoft__split__mule/org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase.startupListeners__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.mule.runtime.module.deployment.internal.singleapp.SingleAppDeploymentService.addStartupListener(org.mule.runtime.module.deployment.api.StartupListener)",
                "org.mule.runtime.module.deployment.internal.singleapp.SingleAppDeploymentService.addStartupListener(org.mule.runtime.module.deployment.api.StartupListener)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "StartupListener",
                    "expression": "startUpListener1",
                    "statement": "singleAppDeploymentService.addStartupListener(startUpListener1);",
                    "invocation": "singleAppDeploymentService.addStartupListener(startUpListener1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "StartupListener",
                    "expression": "startUpListener2",
                    "statement": "assertThat(singleAppDeploymentService.getStartupListeners(), hasItems(startUpListener1, startUpListener2));",
                    "invocation": "singleAppDeploymentService.getStartupListeners()"
                }
            ],
            "comments": "",
            "dependency": "org.mule.runtime.module.deployment.internal.singleapp.SingleAppDeploymentService;org.mule.runtime.module.deployment.internal.singleapp.SingleAppDeploymentService.*"
        },
        "pair_inputs": {
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "startupListeners_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "startupListeners_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h9Test2": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h9Test3": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h9Test4": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h9Test5": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h9Test6": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "apache__split__druid",
            "test_file_path": "./data/ITrans/projects/apache__split__druid/server/src/test/java/org/apache/druid/server/coordinator/balancer/SegmentToMoveCalculatorTest.java",
            "test_simple_name": "testMinSegmentsArePickedForMoveWhenNoSkew",
            "FQS_testMethos": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest.testMinSegmentsArePickedForMoveWhenNoSkew()",
            "assertionSTMT": "Assert.assertEquals(minSegmentsToMove, segmentsToMove)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__split__druid/org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest.testMinSegmentsArePickedForMoveWhenNoSkew__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculator.computeMinSegmentsToMoveInTier(int)",
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculator.computeNumSegmentsToMoveInTier(java.lang.String, java.util.List<org.apache.druid.server.coordinator.ServerHolder>, int)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "int",
                    "expression": "totalSegmentsInTier",
                    "statement": "int minSegmentsToMove = calculator.computeMinSegmentsToMoveInTier(totalSegmentsInTier);",
                    "invocation": "minSegmentsToMove = calculator.computeMinSegmentsToMoveInTier(totalSegmentsInTier)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "tier",
                    "statement": "int segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier, historicals, minSegmentsToMove);",
                    "invocation": "segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier, historicals, minSegmentsToMove)"
                },
                {
                    "type": "List<ServerHolder>",
                    "expression": "historicals",
                    "statement": "int segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier, historicals, minSegmentsToMove);",
                    "invocation": "segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier, historicals, minSegmentsToMove)"
                },
                {
                    "type": "int",
                    "expression": "maxSegmentsToMoveInTier",
                    "statement": "int segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier, historicals, maxSegmentsToMoveInTier);",
                    "invocation": "segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier, historicals, maxSegmentsToMoveInTier)"
                }
            ],
            "comments": "not sure",
            "dependency": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculator;org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculator.*;org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest;org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest.*"
        },
        "pair_inputs": {
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testMinSegmentsArePickedForMoveWhenNoSkew_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testMinSegmentsArePickedForMoveWhenNoSkew_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testMinSegmentsArePickedForMoveWhenNoSkew_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testMinSegmentsArePickedForMoveWhenNoSkew_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testMinSegmentsArePickedForMoveWhenNoSkew_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testMinSegmentsArePickedForMoveWhenNoSkew_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testMinSegmentsArePickedForMoveWhenNoSkew_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testMinSegmentsArePickedForMoveWhenNoSkew_h9Test4"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h9Test5": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testMinSegmentsArePickedForMoveWhenNoSkew_h9Test5"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testMinSegmentsArePickedForMoveWhenNoSkew_h9Test5"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "apache__split__druid",
            "test_file_path": "./data/ITrans/projects/apache__split__druid/server/src/test/java/org/apache/druid/server/coordinator/balancer/SegmentToMoveCalculatorTest.java",
            "test_simple_name": "testHalfSegmentsArePickedForMoveWhenFullSkew",
            "FQS_testMethos": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest.testHalfSegmentsArePickedForMoveWhenFullSkew()",
            "assertionSTMT": "Assert.assertEquals(segmentsToMoveToFixSkew, segmentsToMove)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__split__druid/org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest.testHalfSegmentsArePickedForMoveWhenFullSkew__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculator.computeNumSegmentsToMoveToBalanceTier(java.lang.String, java.util.List<org.apache.druid.server.coordinator.ServerHolder>)",
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculator.computeNumSegmentsToMoveInTier(java.lang.String, java.util.List<org.apache.druid.server.coordinator.ServerHolder>, int)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "tier",
                    "statement": "int segmentsToMoveToFixSkew = calculator.computeNumSegmentsToMoveToBalanceTier(tier, historicals);",
                    "invocation": "segmentsToMoveToFixSkew = calculator.computeNumSegmentsToMoveToBalanceTier(tier, historicals)"
                },
                {
                    "type": "List<ServerHolder>",
                    "expression": "historicals",
                    "statement": "int segmentsToMoveToFixSkew = calculator.computeNumSegmentsToMoveToBalanceTier(tier, historicals);",
                    "invocation": "segmentsToMoveToFixSkew = calculator.computeNumSegmentsToMoveToBalanceTier(tier, historicals)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "tier2",
                    "statement": "int segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier2, historicals2, segmentsToMoveToFixSkew);",
                    "invocation": "segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier2, historicals2, segmentsToMoveToFixSkew)"
                },
                {
                    "type": "List<ServerHolder>",
                    "expression": "historicals2",
                    "statement": "int segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier2, historicals2, segmentsToMoveToFixSkew);",
                    "invocation": "segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier2, historicals2, segmentsToMoveToFixSkew)"
                },
                {
                    "type": "int",
                    "expression": "maxSegmentsToMoveInTier",
                    "statement": "int segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier2, historicals2, maxSegmentsToMoveInTier);",
                    "invocation": "segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier2, historicals2, maxSegmentsToMoveInTier)"
                }
            ],
            "comments": "not sure",
            "dependency": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculator;org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculator.*"
        },
        "pair_inputs": {
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test0": "java.lang.AssertionError, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test0": "java.lang.AssertionError, line:None"
                    }
                }
            },
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test2"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test2": "java.lang.AssertionError, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test2"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test2": "java.lang.AssertionError, line:None"
                    }
                }
            },
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test4": "java.lang.AssertionError, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test4": "java.lang.AssertionError, line:None"
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__split__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__split__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/collections/ListTest1.java",
            "test_simple_name": "test",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.collections.ListTest1.test()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__fastjson2/com.alibaba.fastjson2.internal.processor.collections.ListTest1.test__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "List<Integer>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "List<Integer> v02 = JSON.parseObject(str2, listType);",
                    "invocation": "v02 = JSON.parseObject(str2, listType)"
                },
                {
                    "type": "java.lang.reflect.Type",
                    "expression": "listType",
                    "statement": "List<Integer> v02 = JSON.parseObject(str2, listType);",
                    "invocation": "v02 = JSON.parseObject(str2, listType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference"
        },
        "pair_inputs": {
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__split__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__split__threeten-extra/src/test/java/org/threeten/extra/TestTemporalFields.java",
            "test_simple_name": "test_HALF_YEARS",
            "FQS_testMethos": "org.threeten.extra.TestTemporalFields.test_HALF_YEARS()",
            "assertionSTMT": "assertEquals(YearQuarter.of(year1, quarter1), HALF_YEARS.addTo(YearQuarter.of(year2, quarter2), amount))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__split__threeten-extra/org.threeten.extra.TestTemporalFields.test_HALF_YEARS__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearQuarter.of(int, int)",
                "org.threeten.extra.YearQuarter.of(int, int)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "int",
                    "expression": "year1",
                    "statement": "assertEquals(YearQuarter.of(year1, quarter1), HALF_YEARS.addTo(YearQuarter.of(year2, quarter2), amount));",
                    "invocation": "YearQuarter.of(year1, quarter1)"
                },
                {
                    "type": "int",
                    "expression": "quarter1",
                    "statement": "assertEquals(YearQuarter.of(year1, quarter1), HALF_YEARS.addTo(YearQuarter.of(year2, quarter2), amount));",
                    "invocation": "YearQuarter.of(year1, quarter1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "int",
                    "expression": "year2",
                    "statement": "assertEquals(YearQuarter.of(year1, quarter1), HALF_YEARS.addTo(YearQuarter.of(year2, quarter2), amount));",
                    "invocation": "YearQuarter.of(year2, quarter2)"
                },
                {
                    "type": "int",
                    "expression": "quarter2",
                    "statement": "assertEquals(YearQuarter.of(year1, quarter1), HALF_YEARS.addTo(YearQuarter.of(year2, quarter2), amount));",
                    "invocation": "YearQuarter.of(year2, quarter2)"
                },
                {
                    "type": "int",
                    "expression": "amount",
                    "statement": "assertEquals(YearQuarter.of(year1, quarter1), HALF_YEARS.addTo(YearQuarter.of(year2, quarter2), amount));",
                    "invocation": "HALF_YEARS.addTo(YearQuarter.of(year2, quarter2), amount)"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearQuarter;org.threeten.extra.YearQuarter.*"
        },
        "pair_inputs": {
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_HALF_YEARS_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_HALF_YEARS_h9Test0": "org.opentest4j.AssertionFailedError: expected: <2023-Q1> but was: <2023-Q4>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_HALF_YEARS_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_HALF_YEARS_h9Test0": "org.opentest4j.AssertionFailedError: expected: <2023-Q1> but was: <2023-Q2>"
                    }
                }
            },
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_HALF_YEARS_h9Test1"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_HALF_YEARS_h9Test1": "org.opentest4j.AssertionFailedError: expected: <2023-Q2> but was: <2024-Q1>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_HALF_YEARS_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_HALF_YEARS_h9Test2"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_HALF_YEARS_h9Test2": "org.opentest4j.AssertionFailedError: expected: <2023-Q3> but was: <2024-Q2>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_HALF_YEARS_h9Test2"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_HALF_YEARS_h9Test2": "org.opentest4j.AssertionFailedError: expected: <2023-Q3> but was: <2023-Q4>"
                    }
                }
            },
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_HALF_YEARS_h9Test3"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_HALF_YEARS_h9Test3": "org.opentest4j.AssertionFailedError: expected: <2023-Q4> but was: <2023-Q3>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_HALF_YEARS_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "test_HALF_YEARS_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_HALF_YEARS_h9Test4": "java.time.DateTimeException: Invalid value for Quarter: 5"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "test_HALF_YEARS_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_HALF_YEARS_h9Test4": "java.time.DateTimeException: Invalid value for Quarter: 5"
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__split__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__split__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_from_TemporalAccessor_notLeapYear",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_from_TemporalAccessor_notLeapYear()",
            "assertionSTMT": "assertEquals(YearHalf.of(year, expected), test)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__split__threeten-extra/org.threeten.extra.TestYearHalf.test_from_TemporalAccessor_notLeapYear__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.from(java.time.temporal.TemporalAccessor)",
                "org.threeten.extra.YearHalf.of(int, int)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "LocalDate",
                    "expression": "date",
                    "statement": "YearHalf test = YearHalf.from(date);",
                    "invocation": "test = YearHalf.from(date)"
                }
            ],
            "followUpInput": [
                {
                    "type": "int",
                    "expression": "year",
                    "statement": "assertEquals(YearHalf.of(year, expected), test);",
                    "invocation": "YearHalf.of(year, expected)"
                },
                {
                    "type": "int",
                    "expression": "expected",
                    "statement": "assertEquals(YearHalf.of(year, expected), test);",
                    "invocation": "YearHalf.of(year, expected)"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*"
        },
        "pair_inputs": {
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_notLeapYear_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_from_TemporalAccessor_notLeapYear_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_from_TemporalAccessor_notLeapYear_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_notLeapYear_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_from_TemporalAccessor_notLeapYear_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_from_TemporalAccessor_notLeapYear_h9Test1"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__split__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__split__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_from_TemporalAccessor_leapYear",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_from_TemporalAccessor_leapYear()",
            "assertionSTMT": "assertEquals(YearHalf.of(year, expected), test)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__split__threeten-extra/org.threeten.extra.TestYearHalf.test_from_TemporalAccessor_leapYear__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.from(java.time.temporal.TemporalAccessor)",
                "org.threeten.extra.YearHalf.of(int, int)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "LocalDate",
                    "expression": "date",
                    "statement": "YearHalf test = YearHalf.from(date);",
                    "invocation": "test = YearHalf.from(date)"
                }
            ],
            "followUpInput": [
                {
                    "type": "int",
                    "expression": "year",
                    "statement": "assertEquals(YearHalf.of(year, expected), test);",
                    "invocation": "YearHalf.of(year, expected)"
                },
                {
                    "type": "int",
                    "expression": "expected",
                    "statement": "assertEquals(YearHalf.of(year, expected), test);",
                    "invocation": "YearHalf.of(year, expected)"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*"
        },
        "pair_inputs": {
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_from_TemporalAccessor_leapYear_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_from_TemporalAccessor_leapYear_h9Test0": "org.opentest4j.AssertionFailedError: expected: <2009-H1> but was: <2008-H1>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_from_TemporalAccessor_leapYear_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_from_TemporalAccessor_leapYear_h9Test1"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_from_TemporalAccessor_leapYear_h9Test1": "org.opentest4j.AssertionFailedError: expected: <2010-H1> but was: <2008-H1>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_from_TemporalAccessor_leapYear_h9Test1"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__split__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__split__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/collections/ListTest1.java",
            "test_simple_name": "test1",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.collections.ListTest1.test1()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__fastjson2/com.alibaba.fastjson2.internal.processor.collections.ListTest1.test1__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "List<String>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "List<String> v02 = JSON.parseObject(str2, listType);",
                    "invocation": "v02 = JSON.parseObject(str2, listType)"
                },
                {
                    "type": "java.lang.reflect.Type",
                    "expression": "listType",
                    "statement": "List<String> v02 = JSON.parseObject(str2, listType);",
                    "invocation": "v02 = JSON.parseObject(str2, listType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference"
        },
        "pair_inputs": {
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "opengoofy__split__hippo4j",
            "test_file_path": "./data/ITrans/projects/opengoofy__split__hippo4j/threadpool/core/src/test/java/cn/hippo4j/core/executor/plugin/manager/ThreadPoolPluginSupportTest.java",
            "test_simple_name": "testGetThreadPoolId",
            "FQS_testMethos": "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest.testGetThreadPoolId()",
            "assertionSTMT": "Assert.assertEquals(executor.getThreadPoolId(), support.getThreadPoolId())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/opengoofy__split__hippo4j/cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest.testGetThreadPoolId__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupport.getThreadPoolId()",
                "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupport.getThreadPoolId()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "ThreadPoolExecutor",
                    "expression": "executor",
                    "statement": "ThreadPoolPluginSupport support = new ThreadPoolPluginSupport(executor);",
                    "invocation": "support = new ThreadPoolPluginSupport(executor)"
                }
            ],
            "followUpInput": [
                {
                    "type": "ThreadPoolPluginSupport",
                    "expression": "support",
                    "statement": "Assert.assertEquals(executor.getThreadPoolId(), support.getThreadPoolId())",
                    "invocation": "Assert.assertEquals(executor.getThreadPoolId(), support.getThreadPoolId())"
                }
            ],
            "comments": "",
            "dependency": "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupport;cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupport.*"
        },
        "pair_inputs": {
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetThreadPoolId_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetThreadPoolId_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetThreadPoolId_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetThreadPoolId_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetThreadPoolId_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetThreadPoolId_h9Test1"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__split__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__split__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/JSONObjectTest.java",
            "test_simple_name": "test",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest.test()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__fastjson2/com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest.test__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "JSONObject",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "JSONObject v02 = JSON.parseObject(str2, clazz);",
                    "invocation": "v02 = JSON.parseObject(str2, clazz)"
                },
                {
                    "type": "Class<JSONObject>",
                    "expression": "clazz",
                    "statement": "JSONObject v02 = JSON.parseObject(str2, clazz);",
                    "invocation": "v02 = JSON.parseObject(str2, clazz)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*"
        },
        "pair_inputs": {
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test0"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__split__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__split__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/JSONObjectTest.java",
            "test_simple_name": "test1",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest.test1()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__fastjson2/com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest.test1__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "JSONObject",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "JSONObject v02 = JSON.parseObject(str2, clazz);",
                    "invocation": "v02 = JSON.parseObject(str2, clazz)"
                },
                {
                    "type": "Class<JSONObject>",
                    "expression": "clazz",
                    "statement": "JSONObject v02 = JSON.parseObject(str2, clazz);",
                    "invocation": "v02 = JSON.parseObject(str2, clazz)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*"
        },
        "pair_inputs": {
            "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test0"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "sakaiproject__split__sakai",
            "test_file_path": "./data/ITrans/projects/sakaiproject__split__sakai/basiclti/tsugi-util/src/test/org/tsugi/util/Base64DoubleUrlEncodeSafeTest.java",
            "test_simple_name": "testEncodeAndDecode",
            "FQS_testMethos": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest.testEncodeAndDecode()",
            "assertionSTMT": "assertEquals(input, decoded)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/sakaiproject__split__sakai/org.tsugi.util.Base64DoubleUrlEncodeSafeTest.testEncodeAndDecode__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.tsugi.util.Base64DoubleUrlEncodeSafe.encode(java.lang.String)",
                "org.tsugi.util.Base64DoubleUrlEncodeSafe.decode(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "input",
                    "statement": "String encoded = Base64DoubleUrlEncodeSafe.encode(input);",
                    "invocation": "encoded = Base64DoubleUrlEncodeSafe.encode(input)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "encoded2",
                    "statement": "String decoded = Base64DoubleUrlEncodeSafe.decode(encoded2);",
                    "invocation": "decoded = Base64DoubleUrlEncodeSafe.decode(encoded2)"
                }
            ],
            "comments": "",
            "dependency": "org.tsugi.util.Base64DoubleUrlEncodeSafe.*"
        },
        "pair_inputs": {
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testEncodeAndDecode_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testEncodeAndDecode_h9Test0": "org.junit.ComparisonFailure, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEncodeAndDecode_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEncodeAndDecode_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEncodeAndDecode_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testEncodeAndDecode_h9Test2"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testEncodeAndDecode_h9Test2": "org.junit.ComparisonFailure, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEncodeAndDecode_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testEncodeAndDecode_h9Test3"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testEncodeAndDecode_h9Test3": "org.junit.ComparisonFailure, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEncodeAndDecode_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testEncodeAndDecode_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testEncodeAndDecode_h9Test4": "org.junit.ComparisonFailure, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEncodeAndDecode_h9Test4"
                    ],
                    "failure_info": {}
                }
            },
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test5": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEncodeAndDecode_h9Test5"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEncodeAndDecode_h9Test5"
                    ],
                    "failure_info": {}
                }
            },
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test6": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEncodeAndDecode_h9Test6"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEncodeAndDecode_h9Test6"
                    ],
                    "failure_info": {}
                }
            },
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test7": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEncodeAndDecode_h9Test7"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEncodeAndDecode_h9Test7"
                    ],
                    "failure_info": {}
                }
            },
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test8": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEncodeAndDecode_h9Test8"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEncodeAndDecode_h9Test8"
                    ],
                    "failure_info": {}
                }
            },
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test9": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEncodeAndDecode_h9Test9"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testEncodeAndDecode_h9Test9"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__split__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__split__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_parse_CharSequence",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_parse_CharSequence()",
            "assertionSTMT": "assertEquals(YearHalf.of(year, half), YearHalf.parse(text))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__split__threeten-extra/org.threeten.extra.TestYearHalf.test_parse_CharSequence__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)",
                "org.threeten.extra.YearHalf.parse(java.lang.CharSequence)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "int",
                    "expression": "year",
                    "statement": "assertEquals(YearHalf.of(year, half), YearHalf.parse(text));",
                    "invocation": "YearHalf.of(year, half)"
                },
                {
                    "type": "int",
                    "expression": "half",
                    "statement": "assertEquals(YearHalf.of(year, half), YearHalf.parse(text));",
                    "invocation": "YearHalf.of(year, half)"
                }
            ],
            "followUpInput": [
                {
                    "type": "CharSequence",
                    "expression": "text",
                    "statement": "assertEquals(YearHalf.of(year, half), YearHalf.parse(text));",
                    "invocation": "YearHalf.parse(text)"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*"
        },
        "pair_inputs": {
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_h9Test4"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h9Test5": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_h9Test5"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_h9Test5"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h9Test6": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_h9Test6"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_h9Test6"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h9Test7": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_h9Test7"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_h9Test7"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h9Test8": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_h9Test8"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_h9Test8"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h9Test9": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_h9Test9"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_h9Test9"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__split__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__split__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_parse_CharSequence_caseInsensitive",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_parse_CharSequence_caseInsensitive()",
            "assertionSTMT": "assertEquals(YearHalf.of(year, half), YearHalf.parse(text))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__split__threeten-extra/org.threeten.extra.TestYearHalf.test_parse_CharSequence_caseInsensitive__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)",
                "org.threeten.extra.YearHalf.parse(java.lang.CharSequence)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "int",
                    "expression": "year",
                    "statement": "assertEquals(YearHalf.of(year, half), YearHalf.parse(text));",
                    "invocation": "YearHalf.of(year, half)"
                },
                {
                    "type": "int",
                    "expression": "half",
                    "statement": "assertEquals(YearHalf.of(year, half), YearHalf.parse(text));",
                    "invocation": "YearHalf.of(year, half)"
                }
            ],
            "followUpInput": [
                {
                    "type": "CharSequence",
                    "expression": "text",
                    "statement": "assertEquals(YearHalf.of(year, half), YearHalf.parse(text));",
                    "invocation": "YearHalf.parse(text)"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*"
        },
        "pair_inputs": {
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_caseInsensitive_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_caseInsensitive_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_caseInsensitive_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_caseInsensitive_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_caseInsensitive_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_caseInsensitive_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_caseInsensitive_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_caseInsensitive_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_caseInsensitive_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequence_caseInsensitive_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__split__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__split__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/Map1Test.java",
            "test_simple_name": "test",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__fastjson2/com.alibaba.fastjson2.internal.processor.maps.Map1Test.test__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<String, String>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Map<String, String> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                },
                {
                    "type": "Type",
                    "expression": "mapType",
                    "statement": "Map<String, String> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference;java.lang.reflect.Type"
        },
        "pair_inputs": {
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_h9Test3"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_h9Test3": "org.opentest4j.AssertionFailedError: expected: <{123=null}> but was: <{}>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_h9Test3"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_h9Test3": "org.opentest4j.AssertionFailedError: expected: <{123=null}> but was: <{}>"
                    }
                }
            },
            "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__split__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__split__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_with_TemporalAdjuster_Year",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_with_TemporalAdjuster_Year()",
            "assertionSTMT": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).with(Year.of(year2)))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__split__threeten-extra/org.threeten.extra.TestYearHalf.test_with_TemporalAdjuster_Year__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)",
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "int",
                    "expression": "year1",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).with(Year.of(year2)));",
                    "invocation": "YearHalf.of(year1, half1)"
                },
                {
                    "type": "int",
                    "expression": "half1",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).with(Year.of(year2)));",
                    "invocation": "YearHalf.of(year1, half1)"
                },
                {
                    "type": "int",
                    "expression": "year2",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).with(Year.of(year2)));",
                    "invocation": "Year.of(year2)"
                }
            ],
            "followUpInput": [
                {
                    "type": "int",
                    "expression": "year3",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).with(Year.of(year2)));",
                    "invocation": "YearHalf.of(year3, half3)"
                },
                {
                    "type": "int",
                    "expression": "half3",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).with(Year.of(year2)));",
                    "invocation": "YearHalf.of(year3, half3)"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*"
        },
        "pair_inputs": {
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_with_TemporalAdjuster_Year_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_with_TemporalAdjuster_Year_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_with_TemporalAdjuster_Year_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_with_TemporalAdjuster_Year_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_with_TemporalAdjuster_Year_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_with_TemporalAdjuster_Year_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_with_TemporalAdjuster_Year_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_with_TemporalAdjuster_Year_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_with_TemporalAdjuster_Year_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_with_TemporalAdjuster_Year_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__split__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__split__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_withYear",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_withYear()",
            "assertionSTMT": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withYear(year2))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__split__threeten-extra/org.threeten.extra.TestYearHalf.test_withYear__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)",
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "int",
                    "expression": "year1",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withYear(year2));",
                    "invocation": "YearHalf.of(year1, half1)"
                },
                {
                    "type": "int",
                    "expression": "half1",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withYear(year2));",
                    "invocation": "YearHalf.of(year1, half1)"
                },
                {
                    "type": "int",
                    "expression": "year2",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withYear(year2));",
                    "invocation": "year2"
                }
            ],
            "followUpInput": [
                {
                    "type": "int",
                    "expression": "year3",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withYear(year2));",
                    "invocation": "YearHalf.of(year3, half3)"
                },
                {
                    "type": "int",
                    "expression": "half3",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withYear(year2));",
                    "invocation": "YearHalf.of(year3, half3)"
                }
            ],
            "comments": "\u4e0d\u77e5\u4e3a\u5565\u4e0d\u80fd\u8dd1\uff0c\u4e34\u65f6\u505c\u4e00\u4e0b\u770b\u770b",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*"
        },
        "pair_inputs": {
            "org.threeten.extra.TestYearHalf_test_withYear_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_withYear_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_withYear_h9Test0": "org.opentest4j.AssertionFailedError: expected: <2007-H1> but was: <2012-H1>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withYear_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_withYear_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withYear_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withYear_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_withYear_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "test_withYear_h9Test2"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_withYear_h9Test2": "java.time.DateTimeException: Invalid value for Half: 3"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "test_withYear_h9Test2"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_withYear_h9Test2": "java.time.DateTimeException: Invalid value for Half: 3"
                    }
                }
            },
            "org.threeten.extra.TestYearHalf_test_withYear_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "test_withYear_h9Test3"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_withYear_h9Test3": "java.time.DateTimeException: Invalid value for Half: 3"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "test_withYear_h9Test3"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_withYear_h9Test3": "java.time.DateTimeException: Invalid value for Half: 3"
                    }
                }
            },
            "org.threeten.extra.TestYearHalf_test_withYear_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_withYear_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_withYear_h9Test4": "org.opentest4j.AssertionFailedError: expected: <2007-H2> but was: <2012-H2>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withYear_h9Test4"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_withYear_h9Test5": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withYear_h9Test5"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withYear_h9Test5"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_withYear_h9Test6": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_withYear_h9Test6"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_withYear_h9Test6": "org.opentest4j.AssertionFailedError: expected: <2007-H2> but was: <2100-H2>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withYear_h9Test6"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_withYear_h9Test7": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withYear_h9Test7"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withYear_h9Test7"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_withYear_h9Test8": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_withYear_h9Test8"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_withYear_h9Test8": "org.opentest4j.AssertionFailedError: expected: <2007-H2> but was: <1900-H2>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withYear_h9Test8"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_withYear_h9Test9": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withYear_h9Test9"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withYear_h9Test9"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__split__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__split__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_withHalf_int",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_withHalf_int()",
            "assertionSTMT": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withHalf(half2))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__split__threeten-extra/org.threeten.extra.TestYearHalf.test_withHalf_int__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)",
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "int",
                    "expression": "year1",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withHalf(half2));",
                    "invocation": "YearHalf.of(year1, half1)"
                },
                {
                    "type": "int",
                    "expression": "half1",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withHalf(half2));",
                    "invocation": "YearHalf.of(year1, half1)"
                },
                {
                    "type": "int",
                    "expression": "half2",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withHalf(half2));",
                    "invocation": "half2"
                }
            ],
            "followUpInput": [
                {
                    "type": "int",
                    "expression": "year3",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withHalf(half2));",
                    "invocation": "YearHalf.of(year3, half3)"
                },
                {
                    "type": "int",
                    "expression": "half3",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withHalf(half2));",
                    "invocation": "YearHalf.of(year3, half3)"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*"
        },
        "pair_inputs": {
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withHalf_int_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withHalf_int_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withHalf_int_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withHalf_int_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withHalf_int_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withHalf_int_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withHalf_int_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withHalf_int_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withHalf_int_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withHalf_int_h9Test4"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h9Test5": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withHalf_int_h9Test5"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withHalf_int_h9Test5"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h9Test6": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withHalf_int_h9Test6"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withHalf_int_h9Test6"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h9Test7": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withHalf_int_h9Test7"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_withHalf_int_h9Test7"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h9Test8": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "test_withHalf_int_h9Test8"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_withHalf_int_h9Test8": "java.time.DateTimeException: Invalid value for Half: 3"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "test_withHalf_int_h9Test8"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_withHalf_int_h9Test8": "java.time.DateTimeException: Invalid value for HalfOfYear (valid values 1 - 2): 3"
                    }
                }
            },
            "org.threeten.extra.TestYearHalf_test_withHalf_int_h9Test9": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "test_withHalf_int_h9Test9"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_withHalf_int_h9Test9": "java.time.DateTimeException: Invalid value for HalfOfYear (valid values 1 - 2): 3"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "test_withHalf_int_h9Test9"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_withHalf_int_h9Test9": "java.time.DateTimeException: Invalid value for HalfOfYear (valid values 1 - 2): 3"
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "apache__split__druid",
            "test_file_path": "./data/ITrans/projects/apache__split__druid/extensions-contrib/kubernetes-overlord-extensions/src/test/java/org/apache/druid/k8s/overlord/common/KubernetesOverlordUtilsTest.java",
            "test_simple_name": "test_stripJobName_avoidDuplicatesWithLongDataSourceName",
            "FQS_testMethos": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest.test_stripJobName_avoidDuplicatesWithLongDataSourceName()",
            "assertionSTMT": "Assert.assertNotEquals(jobName1, jobName2)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__split__druid/org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest.test_stripJobName_avoidDuplicatesWithLongDataSourceName__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtils.convertTaskIdToJobName(java.lang.String)",
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtils.convertTaskIdToJobName(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "taskId1",
                    "statement": "String jobName1 = KubernetesOverlordUtils.convertTaskIdToJobName(taskId1);",
                    "invocation": "jobName1 = KubernetesOverlordUtils.convertTaskIdToJobName(taskId1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "taskId2",
                    "statement": "String jobName2 = KubernetesOverlordUtils.convertTaskIdToJobName(taskId2);",
                    "invocation": "jobName2 = KubernetesOverlordUtils.convertTaskIdToJobName(taskId2)"
                }
            ],
            "comments": "",
            "dependency": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtils;org.apache.druid.k8s.overlord.common.KubernetesOverlordUtils.*"
        },
        "pair_inputs": {
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "cdk__split__cdk",
            "test_file_path": "./data/ITrans/projects/cdk__split__cdk/misc/extra/src/test/java/org/openscience/cdk/AssociationTest.java",
            "test_simple_name": "testGetAtomAt",
            "FQS_testMethos": "org.openscience.cdk.AssociationTest.testGetAtomAt()",
            "assertionSTMT": "Assertions.assertEquals(n, association2.getAtomAt(position2))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/cdk__split__cdk/org.openscience.cdk.AssociationTest.testGetAtomAt__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.openscience.cdk.Association.setAtomAt(org.openscience.cdk.interfaces.IAtom, int)",
                "org.openscience.cdk.Association.getAtomAt(int)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Association",
                    "expression": "association",
                    "statement": "association.setAtomAt(n, position);",
                    "invocation": "association.setAtomAt(n, position)"
                },
                {
                    "type": "Atom",
                    "expression": "n",
                    "statement": "association.setAtomAt(n, position);",
                    "invocation": "association.setAtomAt(n, position)"
                },
                {
                    "type": "int",
                    "expression": "position",
                    "statement": "association.setAtomAt(n, position);",
                    "invocation": "association.setAtomAt(n, position)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Association",
                    "expression": "association2",
                    "statement": "Assertions.assertEquals(n, association2.getAtomAt(position2))",
                    "invocation": "association2.getAtomAt(position2)"
                },
                {
                    "type": "int",
                    "expression": "position2",
                    "statement": "Assertions.assertEquals(n, association2.getAtomAt(position2))",
                    "invocation": "association2.getAtomAt(position2)"
                }
            ],
            "comments": "fail, because class not found: ./data/ITrans/projects/cdk__split__cdk/AutoMR/test_exe/org.openscience.cdk.AssociationTest_testGetAtomAt_hTest.log",
            "dependency": "org.openscience.cdk.Association;org.openscience.cdk.Association.*"
        },
        "pair_inputs": {
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 2,
                    "num_of_passed_test_cases": 2,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetAtomAt_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 2,
                    "num_of_passed_test_cases": 2,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetAtomAt_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 2,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testGetAtomAt_h9Test2"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testGetAtomAt_h9Test2": "java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 2"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 2,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testGetAtomAt_h9Test2"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testGetAtomAt_h9Test2": "java.lang.ArrayIndexOutOfBoundsException: Index -1 out of bounds for length 2"
                    }
                }
            },
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 2,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testGetAtomAt_h9Test3"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testGetAtomAt_h9Test3": "java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 2,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testGetAtomAt_h9Test3"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testGetAtomAt_h9Test3": "java.lang.ArrayIndexOutOfBoundsException: Index 2 out of bounds for length 2"
                    }
                }
            },
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 2,
                    "num_of_passed_test_cases": 2,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetAtomAt_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 2,
                    "num_of_passed_test_cases": 2,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetAtomAt_h9Test4"
                    ],
                    "failure_info": {}
                }
            },
            "org.openscience.cdk.AssociationTest_testGetAtomAt_h9Test5": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "bootique__split__bootique",
            "test_file_path": "./data/ITrans/projects/bootique__split__bootique/bootique/src/test/java/io/bootique/di/TypeLiteralTest.java",
            "test_simple_name": "normalize",
            "FQS_testMethos": "io.bootique.di.TypeLiteralTest.normalize()",
            "assertionSTMT": "assertSame(type1, type3)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/bootique__split__bootique/io.bootique.di.TypeLiteralTest.normalize__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "io.bootique.di.TypeLiteral.listOf(java.lang.Class<? extends T>)",
                "io.bootique.di.TypeLiteral.normalize(io.bootique.di.TypeLiteral<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Class",
                    "expression": "input",
                    "statement": "TypeLiteral<List<Integer>> type1 = TypeLiteral.listOf(input);",
                    "invocation": "type1 = TypeLiteral.listOf(input)"
                }
            ],
            "followUpInput": [
                {
                    "type": "TypeLiteral<List<Integer>>",
                    "expression": "input2",
                    "statement": "TypeLiteral<List<Integer>> type3 = TypeLiteral.normalize(input2);",
                    "invocation": "type3 = TypeLiteral.normalize(input2)"
                }
            ],
            "comments": "",
            "dependency": "io.bootique.di.TypeLiteral;io.bootique.di.TypeLiteral.*"
        },
        "pair_inputs": {
            "io.bootique.di.TypeLiteralTest_normalize_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "normalize_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "normalize_h9Test0": "org.opentest4j.AssertionFailedError: expected: <-1059248154> but was: <-16357653>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "normalize_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "io.bootique.di.TypeLiteralTest_normalize_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "normalize_h9Test1"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "normalize_h9Test1": "org.opentest4j.AssertionFailedError: expected: <-1493220442> but was: <-16357653>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "normalize_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "io.bootique.di.TypeLiteralTest_normalize_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "normalize_h9Test2"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "normalize_h9Test2": "org.opentest4j.AssertionFailedError: expected: <2106280927> but was: <-16357653>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "normalize_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "io.bootique.di.TypeLiteralTest_normalize_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "normalize_h9Test3"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "normalize_h9Test3": "org.opentest4j.AssertionFailedError: expected: <-1190630636> but was: <-16357653>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "normalize_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "io.bootique.di.TypeLiteralTest_normalize_h9Test4": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "spotify-web-api-java__split__spotify-web-api-java",
            "test_file_path": "./data/ITrans/projects/spotify-web-api-java__split__spotify-web-api-java/src/test/java/se/michaelthelin/spotify/Base64Test.java",
            "test_simple_name": "testCustomBase64",
            "FQS_testMethos": "se.michaelthelin.spotify.Base64Test.testCustomBase64()",
            "assertionSTMT": "Assertions.assertArrayEquals(testDataBytes, decoded)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/spotify-web-api-java__split__spotify-web-api-java/se.michaelthelin.spotify.Base64Test.testCustomBase64__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "se.michaelthelin.spotify.Base64.encode(byte[])",
                "se.michaelthelin.spotify.Base64.decode(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "byte[]",
                    "expression": "testDataBytes",
                    "statement": "String encoded = Base64.encode(testDataBytes);",
                    "invocation": "encoded = Base64.encode(testDataBytes)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "input2",
                    "statement": "byte[] decoded = Base64.decode(input2);",
                    "invocation": "decoded = Base64.decode(input2)"
                }
            ],
            "comments": "",
            "dependency": "se.michaelthelin.spotify.Base64;se.michaelthelin.spotify.Base64.*"
        },
        "pair_inputs": {
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCustomBase64_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCustomBase64_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCustomBase64_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCustomBase64_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCustomBase64_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCustomBase64_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCustomBase64_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCustomBase64_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "se.michaelthelin.spotify.Base64Test_testCustomBase64_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCustomBase64_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCustomBase64_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "itext__split__itext7",
            "test_file_path": "./data/ITrans/projects/itext__split__itext7/commons/src/test/java/com/itextpdf/commons/datastructures/ConcurrentWeakMapTest.java",
            "test_simple_name": "entrySetTest",
            "FQS_testMethos": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest.entrySetTest()",
            "assertionSTMT": "Assert.assertEquals(anotherMap.entrySet(), map.entrySet())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/itext__split__itext7/com.itextpdf.commons.datastructures.ConcurrentWeakMapTest.entrySetTest__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "com.itextpdf.commons.datastructures.ConcurrentWeakMap.putAll(java.util.Map<? extends K, ? extends V>)",
                "com.itextpdf.commons.datastructures.ConcurrentWeakMap.entrySet()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<Integer, Integer>",
                    "expression": "anotherMap",
                    "statement": "Assert.assertEquals(anotherMap.entrySet(), map.entrySet());",
                    "invocation": "anotherMap.entrySet()"
                }
            ],
            "followUpInput": [
                {
                    "type": "ConcurrentWeakMap<Integer, Integer>",
                    "expression": "map",
                    "statement": "Assert.assertEquals(anotherMap.entrySet(), map2.entrySet());",
                    "invocation": "map2.entrySet()"
                }
            ],
            "comments": "",
            "dependency": "com.itextpdf.commons.datastructures.ConcurrentWeakMap;com.itextpdf.commons.datastructures.ConcurrentWeakMap.*"
        },
        "pair_inputs": {
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entrySetTest_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entrySetTest_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entrySetTest_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entrySetTest_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entrySetTest_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entrySetTest_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entrySetTest_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entrySetTest_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entrySetTest_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "entrySetTest_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "itext__split__itext7",
            "test_file_path": "./data/ITrans/projects/itext__split__itext7/commons/src/test/java/com/itextpdf/commons/datastructures/ConcurrentWeakMapTest.java",
            "test_simple_name": "keySetTest",
            "FQS_testMethos": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest.keySetTest()",
            "assertionSTMT": "Assert.assertEquals(anotherMap.keySet(), map.keySet())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/itext__split__itext7/com.itextpdf.commons.datastructures.ConcurrentWeakMapTest.keySetTest__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "com.itextpdf.commons.datastructures.ConcurrentWeakMap.putAll(java.util.Map<? extends K, ? extends V>)",
                "com.itextpdf.commons.datastructures.ConcurrentWeakMap.keySet()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<Integer, Integer>",
                    "expression": "anotherMap",
                    "statement": "Assert.assertEquals(anotherMap.keySet(), map.keySet());",
                    "invocation": "anotherMap.keySet()"
                }
            ],
            "followUpInput": [
                {
                    "type": "ConcurrentWeakMap<Integer, Integer>",
                    "expression": "map",
                    "statement": "Assert.assertEquals(anotherMap.keySet(), map2.keySet());",
                    "invocation": "map2.keySet()"
                }
            ],
            "comments": "",
            "dependency": "com.itextpdf.commons.datastructures.ConcurrentWeakMap;com.itextpdf.commons.datastructures.ConcurrentWeakMap.*"
        },
        "pair_inputs": {
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "keySetTest_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "keySetTest_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "keySetTest_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "keySetTest_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "keySetTest_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "keySetTest_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "keySetTest_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "keySetTest_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "keySetTest_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "keySetTest_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "aws__split__event-ruler",
            "test_file_path": "./data/ITrans/projects/aws__split__event-ruler/src/test/software/amazon/event/ruler/SubRuleContextTest.java",
            "test_simple_name": "testGetters",
            "FQS_testMethos": "software.amazon.event.ruler.SubRuleContextTest.testGetters()",
            "assertionSTMT": "assertEquals(NAME, generator.getNameForGeneratedId(context.getId()))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/aws__split__event-ruler/software.amazon.event.ruler.SubRuleContextTest.testGetters__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "software.amazon.event.ruler.SubRuleContext.Generator.generate(java.lang.Object)",
                "software.amazon.event.ruler.SubRuleContext.Generator.getNameForGeneratedId(java.lang.Double)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "SubRuleContext.Generator",
                    "expression": "generator",
                    "statement": "SubRuleContext context = generator.generate(NAME);",
                    "invocation": "generator.generate(NAME)"
                },
                {
                    "type": "String",
                    "expression": "NAME",
                    "statement": "SubRuleContext context = generator.generate(NAME);",
                    "invocation": "generator.generate(NAME)"
                }
            ],
            "followUpInput": [
                {
                    "type": "SubRuleContext.Generator",
                    "expression": "generator2",
                    "statement": "assertEquals(NAME, generator2.getNameForGeneratedId(id));",
                    "invocation": "generator2.getNameForGeneratedId(id)"
                },
                {
                    "type": "Double",
                    "expression": "id",
                    "statement": "assertEquals(NAME, generator2.getNameForGeneratedId(id));",
                    "invocation": "generator2.getNameForGeneratedId(id)"
                }
            ],
            "comments": "",
            "dependency": "software.amazon.event.ruler.SubRuleContext;software.amazon.event.ruler.SubRuleContext.*"
        },
        "pair_inputs": {
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testGetters_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testGetters_h9Test0": "org.junit.ComparisonFailure, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetters_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testGetters_h9Test1"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testGetters_h9Test1": "org.junit.ComparisonFailure, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetters_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testGetters_h9Test2"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testGetters_h9Test2": "java.lang.NullPointerException, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testGetters_h9Test2"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testGetters_h9Test2": "java.lang.NullPointerException, line:None"
                    }
                }
            },
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testGetters_h9Test3"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testGetters_h9Test3": "org.junit.ComparisonFailure, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetters_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "software.amazon.event.ruler.SubRuleContextTest_testGetters_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testGetters_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testGetters_h9Test4": "org.junit.ComparisonFailure, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetters_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "datageartech__split__datagear",
            "test_file_path": "./data/ITrans/projects/datageartech__split__datagear/datagear-util/src/test/java/org/datagear/util/version/VersionTest.java",
            "test_simple_name": "stringOfTest",
            "FQS_testMethos": "org.datagear.util.version.VersionTest.stringOfTest()",
            "assertionSTMT": "assertEquals(v, Version.stringOf(version))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/datageartech__split__datagear/org.datagear.util.version.VersionTest.stringOfTest__split__1.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.datagear.util.version.Version.valueOf(java.lang.String)",
                "org.datagear.util.version.Version.stringOf(org.datagear.util.version.Version)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 4,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "v",
                    "statement": "Version version = Version.valueOf(v);",
                    "invocation": "version = Version.valueOf(v)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Version",
                    "expression": "version1",
                    "statement": "assertEquals(v, Version.stringOf(version1));",
                    "invocation": "Version.stringOf(version1)"
                }
            ],
            "comments": "",
            "dependency": "org.datagear.util.version.Version;org.datagear.util.version.Version.*"
        },
        "pair_inputs": {
            "org.datagear.util.version.VersionTest_stringOfTest_h9Test0": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.datagear.util.version.VersionTest_stringOfTest_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.datagear.util.version.VersionTest_stringOfTest_h9Test2": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.datagear.util.version.VersionTest_stringOfTest_h9Test3": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.datagear.util.version.VersionTest_stringOfTest_h9Test4": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.datagear.util.version.VersionTest_stringOfTest_h9Test5": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.datagear.util.version.VersionTest_stringOfTest_h9Test6": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.datagear.util.version.VersionTest_stringOfTest_h9Test7": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.datagear.util.version.VersionTest_stringOfTest_h9Test8": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.datagear.util.version.VersionTest_stringOfTest_h9Test9": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "optimatika__split__ojAlgo",
            "test_file_path": "./data/ITrans/projects/optimatika__split__ojAlgo/src/test/java/org/ojalgo/data/transform/DiscreteFourierTransformTest.java",
            "test_simple_name": "testNonPowerOf2",
            "FQS_testMethos": "org.ojalgo.data.transform.DiscreteFourierTransformTest.testNonPowerOf2()",
            "assertionSTMT": "TestUtils.assertEquals(input, reverted, accuracy)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/optimatika__split__ojAlgo/org.ojalgo.data.transform.DiscreteFourierTransformTest.testNonPowerOf2__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.ojalgo.data.transform.DiscreteFourierTransform.transform(org.ojalgo.structure.Access1D<?>)",
                "org.ojalgo.data.transform.DiscreteFourierTransform.inverse(org.ojalgo.structure.Access1D<org.ojalgo.scalar.ComplexNumber>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "DiscreteFourierTransform",
                    "expression": "transformer",
                    "statement": "MatrixStore<ComplexNumber> transformed = transformer.transform(input);",
                    "invocation": "transformed = transformer.transform(input)"
                },
                {
                    "type": "PhysicalStore<Double>",
                    "expression": "input",
                    "statement": "MatrixStore<ComplexNumber> transformed = transformer.transform(input);",
                    "invocation": "transformed = transformer.transform(input)"
                }
            ],
            "followUpInput": [
                {
                    "type": "MatrixStore<ComplexNumber>",
                    "expression": "transformed2",
                    "statement": "MatrixStore<Double> reverted = transformer.inverse(transformed2);",
                    "invocation": "reverted = transformer.inverse(transformed2)"
                }
            ],
            "comments": "",
            "dependency": "org.ojalgo.data.transform.DiscreteFourierTransform;org.ojalgo.data.transform.DiscreteFourierTransform.*"
        },
        "pair_inputs": {
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testNonPowerOf2_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testNonPowerOf2_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testNonPowerOf2_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testNonPowerOf2_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testNonPowerOf2_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testNonPowerOf2_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testNonPowerOf2_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testNonPowerOf2_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testNonPowerOf2_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testNonPowerOf2_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "opentripplanner__split__OpenTripPlanner",
            "test_file_path": "./data/ITrans/projects/opentripplanner__split__OpenTripPlanner/src/test/java/org/opentripplanner/framework/model/CostTest.java",
            "test_simple_name": "testHashCodeAndEquals",
            "FQS_testMethos": "org.opentripplanner.framework.model.CostTest.testHashCodeAndEquals()",
            "assertionSTMT": "assertNotEquals(subject.hashCode(), other.hashCode())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/opentripplanner__split__OpenTripPlanner/org.opentripplanner.framework.model.CostTest.testHashCodeAndEquals__split__2.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.opentripplanner.framework.model.Cost.hashCode()",
                "org.opentripplanner.framework.model.Cost.hashCode()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 3,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Cost",
                    "expression": "subject",
                    "statement": "assertNotEquals(subject.hashCode(), other.hashCode());",
                    "invocation": "subject.hashCode()"
                }
            ],
            "followUpInput": [
                {
                    "type": "Cost",
                    "expression": "other",
                    "statement": "assertNotEquals(subject.hashCode(), other.hashCode());",
                    "invocation": "other.hashCode()"
                }
            ],
            "comments": "",
            "dependency": "org.opentripplanner.framework.model.Cost;org.opentripplanner.framework.model.Cost.*"
        },
        "pair_inputs": {
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testHashCodeAndEquals_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testHashCodeAndEquals_h9Test0": "org.opentest4j.AssertionFailedError: expected: not equal but was: <0>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testHashCodeAndEquals_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testHashCodeAndEquals_h9Test0": "org.opentest4j.AssertionFailedError: expected: not equal but was: <0>"
                    }
                }
            },
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testHashCodeAndEquals_h9Test1"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testHashCodeAndEquals_h9Test1": "org.opentest4j.AssertionFailedError: expected: not equal but was: <2147483647>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testHashCodeAndEquals_h9Test1"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testHashCodeAndEquals_h9Test1": "java.lang.IllegalArgumentException: Negative value not expected for value: -1932735284"
                    }
                }
            },
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testHashCodeAndEquals_h9Test2"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testHashCodeAndEquals_h9Test2": "java.lang.IllegalArgumentException: Negative value not expected for value: -1"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testHashCodeAndEquals_h9Test2"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testHashCodeAndEquals_h9Test2": "java.lang.IllegalArgumentException: Negative value not expected for value: -1"
                    }
                }
            },
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testHashCodeAndEquals_h9Test3"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testHashCodeAndEquals_h9Test3": "org.opentest4j.AssertionFailedError: expected: not equal but was: <100>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testHashCodeAndEquals_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testHashCodeAndEquals_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testHashCodeAndEquals_h9Test4": "java.lang.IllegalArgumentException: Negative value not expected for value: -2147483648"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testHashCodeAndEquals_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testHashCodeAndEquals_h9Test4": "java.lang.IllegalArgumentException: Negative value not expected for value: -2147483648"
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "apache__split__druid",
            "test_file_path": "./data/ITrans/projects/apache__split__druid/extensions-core/azure-extensions/src/test/java/org/apache/druid/storage/azure/AzureClientFactoryTest.java",
            "test_simple_name": "test_blobServiceClientBuilder_useCachedClient",
            "FQS_testMethos": "org.apache.druid.storage.azure.AzureClientFactoryTest.test_blobServiceClientBuilder_useCachedClient()",
            "assertionSTMT": "Assert.assertEquals(blobServiceClient, blobServiceClient2)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__split__druid/org.apache.druid.storage.azure.AzureClientFactoryTest.test_blobServiceClientBuilder_useCachedClient__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.apache.druid.storage.azure.AzureClientFactory.getBlobServiceClient(java.lang.Integer, java.lang.String)",
                "org.apache.druid.storage.azure.AzureClientFactory.getBlobServiceClient(java.lang.Integer, java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Integer",
                    "expression": "retryCount1",
                    "statement": "BlobServiceClient blobServiceClient = factory.getBlobServiceClient(retryCount1, ACCOUNT1);",
                    "invocation": "blobServiceClient = factory.getBlobServiceClient(retryCount1, ACCOUNT1)"
                },
                {
                    "type": "String",
                    "expression": "ACCOUNT1",
                    "statement": "BlobServiceClient blobServiceClient = factory.getBlobServiceClient(retryCount1, ACCOUNT1);",
                    "invocation": "blobServiceClient = factory.getBlobServiceClient(retryCount1, ACCOUNT1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Integer",
                    "expression": "retryCount2",
                    "statement": "BlobServiceClient blobServiceClient2 = factory.getBlobServiceClient(retryCount2, ACCOUNT2);",
                    "invocation": "blobServiceClient2 = factory.getBlobServiceClient(retryCount2, ACCOUNT2)"
                },
                {
                    "type": "String",
                    "expression": "ACCOUNT2",
                    "statement": "BlobServiceClient blobServiceClient2 = factory.getBlobServiceClient(retryCount2, ACCOUNT2);",
                    "invocation": "blobServiceClient2 = factory.getBlobServiceClient(retryCount2, ACCOUNT2)"
                }
            ],
            "comments": "",
            "dependency": "org.apache.druid.storage.azure.AzureClientFactory;org.apache.druid.storage.azure.AzureClientFactory.*"
        },
        "pair_inputs": {
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_blobServiceClientBuilder_useCachedClient_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_blobServiceClientBuilder_useCachedClient_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_blobServiceClientBuilder_useCachedClient_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_blobServiceClientBuilder_useCachedClient_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_blobServiceClientBuilder_useCachedClient_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_blobServiceClientBuilder_useCachedClient_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_blobServiceClientBuilder_useCachedClient_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_blobServiceClientBuilder_useCachedClient_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_blobServiceClientBuilder_useCachedClient_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_blobServiceClientBuilder_useCachedClient_h9Test4"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test5": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_blobServiceClientBuilder_useCachedClient_h9Test5"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_blobServiceClientBuilder_useCachedClient_h9Test5"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test6": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_blobServiceClientBuilder_useCachedClient_h9Test6"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_blobServiceClientBuilder_useCachedClient_h9Test6"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test7": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_blobServiceClientBuilder_useCachedClient_h9Test7"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_blobServiceClientBuilder_useCachedClient_h9Test7"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test8": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test9": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "apache__split__druid",
            "test_file_path": "./data/ITrans/projects/apache__split__druid/extensions-core/azure-extensions/src/test/java/org/apache/druid/storage/azure/AzureClientFactoryTest.java",
            "test_simple_name": "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount",
            "FQS_testMethos": "org.apache.druid.storage.azure.AzureClientFactoryTest.test_blobServiceClientBuilder_useNewClientForDifferentRetryCount()",
            "assertionSTMT": "Assert.assertNotEquals(blobServiceClient, blobServiceClient2)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__split__druid/org.apache.druid.storage.azure.AzureClientFactoryTest.test_blobServiceClientBuilder_useNewClientForDifferentRetryCount__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.apache.druid.storage.azure.AzureClientFactory.getBlobServiceClient(java.lang.Integer, java.lang.String)",
                "org.apache.druid.storage.azure.AzureClientFactory.getBlobServiceClient(java.lang.Integer, java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Integer",
                    "expression": "retryCount1",
                    "statement": "BlobServiceClient blobServiceClient = factory.getBlobServiceClient(retryCount1, ACCOUNT1);",
                    "invocation": "blobServiceClient = factory.getBlobServiceClient(retryCount1, ACCOUNT1)"
                },
                {
                    "type": "String",
                    "expression": "ACCOUNT1",
                    "statement": "BlobServiceClient blobServiceClient = factory.getBlobServiceClient(retryCount1, ACCOUNT1);",
                    "invocation": "blobServiceClient = factory.getBlobServiceClient(retryCount1, ACCOUNT1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Integer",
                    "expression": "retryCount2",
                    "statement": "BlobServiceClient blobServiceClient2 = factory.getBlobServiceClient(retryCount2, ACCOUNT2);",
                    "invocation": "blobServiceClient2 = factory.getBlobServiceClient(retryCount2, ACCOUNT2)"
                },
                {
                    "type": "String",
                    "expression": "ACCOUNT2",
                    "statement": "BlobServiceClient blobServiceClient2 = factory.getBlobServiceClient(retryCount2, ACCOUNT2);",
                    "invocation": "blobServiceClient2 = factory.getBlobServiceClient(retryCount2, ACCOUNT2)"
                }
            ],
            "comments": "",
            "dependency": "org.apache.druid.storage.azure.AzureClientFactory;org.apache.druid.storage.azure.AzureClientFactory.*"
        },
        "pair_inputs": {
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h9Test0": "java.lang.AssertionError, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h9Test1"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h9Test1": "java.lang.AssertionError, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h9Test2"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h9Test2": "java.lang.AssertionError, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h9Test3"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h9Test3": "java.lang.AssertionError, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h9Test4": "java.lang.AssertionError, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "vladmihalcea__split__high-performance-java-persistence",
            "test_file_path": "./data/ITrans/projects/vladmihalcea__split__high-performance-java-persistence/core/src/test/java/com/vladmihalcea/hpjp/util/CryptoUtilsTest.java",
            "test_simple_name": "testPerformanceUsingCache",
            "FQS_testMethos": "com.vladmihalcea.hpjp.util.CryptoUtilsTest.testPerformanceUsingCache()",
            "assertionSTMT": "assertEquals(value.longValue(), decryptedValue.longValue())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/vladmihalcea__split__high-performance-java-persistence/com.vladmihalcea.hpjp.util.CryptoUtilsTest.testPerformanceUsingCache__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.vladmihalcea.hpjp.util.CryptoUtils.encrypt(java.lang.Object)",
                "com.vladmihalcea.hpjp.util.CryptoUtils.decrypt(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Long",
                    "expression": "value",
                    "statement": "encryptedValue = CryptoUtils.encrypt(value);",
                    "invocation": "encryptedValue = CryptoUtils.encrypt(value)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "message",
                    "statement": "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz);",
                    "invocation": "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz)"
                },
                {
                    "type": "Class<?>",
                    "expression": "clazz",
                    "statement": "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz);",
                    "invocation": "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz)"
                }
            ],
            "comments": "",
            "dependency": "com.vladmihalcea.hpjp.util.CryptoUtils;com.vladmihalcea.hpjp.util.CryptoUtils.*"
        },
        "pair_inputs": {
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testPerformanceUsingCache_h9Test0"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testPerformanceUsingCache_h9Test0": "java.lang.RuntimeException, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testPerformanceUsingCache_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testPerformanceUsingCache_h9Test1"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testPerformanceUsingCache_h9Test1": "java.lang.RuntimeException, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testPerformanceUsingCache_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testPerformanceUsingCache_h9Test2"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testPerformanceUsingCache_h9Test2": "java.lang.RuntimeException, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testPerformanceUsingCache_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testPerformanceUsingCache_h9Test3"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testPerformanceUsingCache_h9Test3": "java.lang.RuntimeException, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testPerformanceUsingCache_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testPerformanceUsingCache_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testPerformanceUsingCache_h9Test4": "java.lang.NullPointerException, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testPerformanceUsingCache_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testPerformanceUsingCache_h9Test4": "java.lang.NullPointerException, line:None"
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__split__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__split__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/collections/JSONArrayTest.java",
            "test_simple_name": "test",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest.test()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__fastjson2/com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest.test__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "JSONArray",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "JSONArray v02 = JSON.parseObject(str2, clazz);",
                    "invocation": "v02 = JSON.parseObject(str2, clazz)"
                },
                {
                    "type": "Class<JSONArray>",
                    "expression": "clazz",
                    "statement": "JSONArray v02 = JSON.parseObject(str2, clazz);",
                    "invocation": "v02 = JSON.parseObject(str2, clazz)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*"
        },
        "pair_inputs": {
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h9Test2": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h9Test3": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h9Test4": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h9Test5": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__split__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__split__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/collections/JSONArrayTest.java",
            "test_simple_name": "test1",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest.test1()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__fastjson2/com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest.test1__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "JSONArray",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "JSONArray v02 = JSON.parseObject(str2, clazz);",
                    "invocation": "v02 = JSON.parseObject(str2, clazz)"
                },
                {
                    "type": "Class<JSONArray>",
                    "expression": "clazz",
                    "statement": "JSONArray v02 = JSON.parseObject(str2, clazz);",
                    "invocation": "v02 = JSON.parseObject(str2, clazz)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*"
        },
        "pair_inputs": {
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h9Test3": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test1_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "mulesoft__split__mule",
            "test_file_path": "./data/ITrans/projects/mulesoft__split__mule/modules/log4j-configurator/src/test/java/org/mule/runtime/module/log4j/internal/ArtifactAwareContextSelectorTestCase.java",
            "test_simple_name": "returnsMuleLoggerContextForArtifactClassLoaderChild",
            "FQS_testMethos": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase.returnsMuleLoggerContextForArtifactClassLoaderChild()",
            "assertionSTMT": "assertThat(childCtx, sameInstance(parentCtx))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/mulesoft__split__mule/org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase.returnsMuleLoggerContextForArtifactClassLoaderChild__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelector.getContext(java.lang.String, java.lang.ClassLoader, boolean)",
                "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelector.getContext(java.lang.String, java.lang.ClassLoader, boolean)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "fqcn",
                    "statement": "LoggerContext parentCtx = selector.getContext(fqcn, regionClassLoader, currentContext);",
                    "invocation": "parentCtx = selector.getContext(fqcn, regionClassLoader, currentContext)"
                },
                {
                    "type": "boolean",
                    "expression": "currentContext",
                    "statement": "LoggerContext parentCtx = selector.getContext(fqcn, regionClassLoader, currentContext);",
                    "invocation": "parentCtx = selector.getContext(fqcn, regionClassLoader, currentContext)"
                },
                {
                    "type": "RegionClassLoader",
                    "expression": "regionClassLoader",
                    "statement": "LoggerContext parentCtx = selector.getContext(fqcn, regionClassLoader, currentContext);",
                    "invocation": "parentCtx = selector.getContext(fqcn, regionClassLoader, currentContext)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "fqcn2",
                    "statement": "LoggerContext childCtx = selector.getContext(fqcn2, childClassLoader, currentContext2);",
                    "invocation": "childCtx = selector.getContext(fqcn2, childClassLoader, currentContext2)"
                },
                {
                    "type": "ClassLoader",
                    "expression": "childClassLoader",
                    "statement": "LoggerContext childCtx = selector.getContext(fqcn2, childClassLoader, currentContext2);",
                    "invocation": "childCtx = selector.getContext(fqcn2, childClassLoader, currentContext2)"
                },
                {
                    "type": "boolean",
                    "expression": "currentContext2",
                    "statement": "LoggerContext childCtx = selector.getContext(fqcn2, childClassLoader, currentContext2);",
                    "invocation": "childCtx = selector.getContext(fqcn2, childClassLoader, currentContext2)"
                }
            ],
            "comments": "",
            "dependency": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelector;org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelector.*"
        },
        "pair_inputs": {
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForArtifactClassLoaderChild_h9Test0",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForArtifactClassLoaderChild_h9Test0",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                }
            },
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForArtifactClassLoaderChild_h9Test1",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForArtifactClassLoaderChild_h9Test1",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                }
            },
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForArtifactClassLoaderChild_h9Test2",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForArtifactClassLoaderChild_h9Test2",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                }
            },
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForArtifactClassLoaderChild_h9Test3",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForArtifactClassLoaderChild_h9Test3",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                }
            },
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForArtifactClassLoaderChild_h9Test4",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForArtifactClassLoaderChild_h9Test4",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "mulesoft__split__mule",
            "test_file_path": "./data/ITrans/projects/mulesoft__split__mule/modules/log4j-configurator/src/test/java/org/mule/runtime/module/log4j/internal/ArtifactAwareContextSelectorTestCase.java",
            "test_simple_name": "returnsMuleLoggerContextForInternalArtifactClassLoader",
            "FQS_testMethos": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase.returnsMuleLoggerContextForInternalArtifactClassLoader()",
            "assertionSTMT": "assertThat(serviceCtx, sameInstance(systemContext))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/mulesoft__split__mule/org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase.returnsMuleLoggerContextForInternalArtifactClassLoader__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelector.getContext(java.lang.String, java.lang.ClassLoader, boolean)",
                "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelector.getContext(java.lang.String, java.lang.ClassLoader, boolean)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "fqcn",
                    "statement": "LoggerContext systemContext = selector.getContext(fqcn, systemLoader, currentContext);",
                    "invocation": "systemContext = selector.getContext(fqcn, systemLoader, currentContext)"
                },
                {
                    "type": "boolean",
                    "expression": "currentContext",
                    "statement": "LoggerContext systemContext = selector.getContext(fqcn, systemLoader, currentContext);",
                    "invocation": "systemContext = selector.getContext(fqcn, systemLoader, currentContext)"
                },
                {
                    "type": "ClassLoader",
                    "expression": "systemLoader",
                    "statement": "LoggerContext systemContext = selector.getContext(fqcn, systemLoader, currentContext);",
                    "invocation": "systemContext = selector.getContext(fqcn, systemLoader, currentContext)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "fqcn2",
                    "statement": "LoggerContext serviceCtx = selector.getContext(fqcn2, serviceLoader, currentContext2);",
                    "invocation": "serviceCtx = selector.getContext(fqcn2, serviceLoader, currentContext2)"
                },
                {
                    "type": "ClassLoader",
                    "expression": "serviceLoader",
                    "statement": "LoggerContext serviceCtx = selector.getContext(fqcn2, serviceLoader, currentContext2);",
                    "invocation": "serviceCtx = selector.getContext(fqcn2, serviceLoader, currentContext2)"
                },
                {
                    "type": "boolean",
                    "expression": "currentContext2",
                    "statement": "LoggerContext serviceCtx = selector.getContext(fqcn2, serviceLoader, currentContext2);",
                    "invocation": "serviceCtx = selector.getContext(fqcn2, serviceLoader, currentContext2)"
                }
            ],
            "comments": "",
            "dependency": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelector;org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelector.*"
        },
        "pair_inputs": {
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test0",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test0",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                }
            },
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test1",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test1",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                }
            },
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test2",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test2",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                }
            },
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test3",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test3",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                }
            },
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test4",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test4",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                }
            },
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test5": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test5",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test5",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                }
            },
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test6": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test6",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test6",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                }
            },
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test7": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test7",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test7",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                }
            },
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test8": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test8",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test8",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                }
            },
            "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test9": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test9",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 3,
                    "num_of_passed_test_cases": 3,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "before",
                        "returnsMuleLoggerContextForInternalArtifactClassLoader_h9Test9",
                        "assertReaperThreadNotRunning"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "sakaiproject__split__sakai",
            "test_file_path": "./data/ITrans/projects/sakaiproject__split__sakai/basiclti/tsugi-util/src/test/org/tsugi/util/Base64DoubleUrlEncodeSafeTest.java",
            "test_simple_name": "testAllNonSurrogateCodePoints",
            "FQS_testMethos": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest.testAllNonSurrogateCodePoints()",
            "assertionSTMT": "assertEquals(input, decoded)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/sakaiproject__split__sakai/org.tsugi.util.Base64DoubleUrlEncodeSafeTest.testAllNonSurrogateCodePoints__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.tsugi.util.Base64DoubleUrlEncodeSafe.encode(java.lang.String)",
                "org.tsugi.util.Base64DoubleUrlEncodeSafe.decode(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "input",
                    "statement": "String encoded = Base64DoubleUrlEncodeSafe.encode(input);",
                    "invocation": "encoded = Base64DoubleUrlEncodeSafe.encode(input)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "encoded2",
                    "statement": "String decoded = Base64DoubleUrlEncodeSafe.decode(encoded2);",
                    "invocation": "decoded = Base64DoubleUrlEncodeSafe.decode(encoded2)"
                }
            ],
            "comments": "",
            "dependency": "org.tsugi.util.Base64DoubleUrlEncodeSafe.*"
        },
        "pair_inputs": {
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testAllNonSurrogateCodePoints_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testAllNonSurrogateCodePoints_h9Test0": "org.junit.ComparisonFailure, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testAllNonSurrogateCodePoints_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testAllNonSurrogateCodePoints_h9Test1"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testAllNonSurrogateCodePoints_h9Test1": "org.junit.ComparisonFailure, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testAllNonSurrogateCodePoints_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testAllNonSurrogateCodePoints_h9Test2"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testAllNonSurrogateCodePoints_h9Test2": "org.junit.ComparisonFailure, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testAllNonSurrogateCodePoints_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testAllNonSurrogateCodePoints_h9Test3"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testAllNonSurrogateCodePoints_h9Test3": "org.junit.ComparisonFailure, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testAllNonSurrogateCodePoints_h9Test3"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "TheAlgorithms__split__Java",
            "test_file_path": "./data/ITrans/projects/TheAlgorithms__split__Java/src/test/java/com/thealgorithms/datastructures/crdt/LWWElementSetTest.java",
            "test_simple_name": "testCompareDifferentSets",
            "FQS_testMethos": "com.thealgorithms.datastructures.crdt.LWWElementSetTest.testCompareDifferentSets()",
            "assertionSTMT": "assertFalse(set.compare(otherSet))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/TheAlgorithms__split__Java/com.thealgorithms.datastructures.crdt.LWWElementSetTest.testCompareDifferentSets__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.thealgorithms.datastructures.crdt.LWWElementSet.add(com.thealgorithms.datastructures.crdt.Element)",
                "com.thealgorithms.datastructures.crdt.LWWElementSet.add(com.thealgorithms.datastructures.crdt.Element)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Element",
                    "expression": "element1",
                    "statement": "set.add(element1);",
                    "invocation": "set.add(element1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Element",
                    "expression": "element2",
                    "statement": "otherSet.add(element2);",
                    "invocation": "otherSet.add(element2)"
                }
            ],
            "comments": "",
            "dependency": "com.thealgorithms.datastructures.crdt.LWWElementSet;com.thealgorithms.datastructures.crdt.LWWElementSet.*"
        },
        "pair_inputs": {
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCompareDifferentSets_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCompareDifferentSets_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCompareDifferentSets_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCompareDifferentSets_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCompareDifferentSets_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCompareDifferentSets_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCompareDifferentSets_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCompareDifferentSets_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCompareDifferentSets_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCompareDifferentSets_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "TheAlgorithms__split__Java",
            "test_file_path": "./data/ITrans/projects/TheAlgorithms__split__Java/src/test/java/com/thealgorithms/datastructures/crdt/ORSetTest.java",
            "test_simple_name": "testCompareDifferentSets",
            "FQS_testMethos": "com.thealgorithms.datastructures.crdt.ORSetTest.testCompareDifferentSets()",
            "assertionSTMT": "assertFalse(orSet1.compare(orSet2))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/TheAlgorithms__split__Java/com.thealgorithms.datastructures.crdt.ORSetTest.testCompareDifferentSets__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.thealgorithms.datastructures.crdt.ORSet.add(T)",
                "com.thealgorithms.datastructures.crdt.ORSet.add(T)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "element1",
                    "statement": "orSet1.add(element1);",
                    "invocation": "orSet1.add(element1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "element2",
                    "statement": "orSet2.add(element2);",
                    "invocation": "orSet2.add(element2)"
                }
            ],
            "comments": "",
            "dependency": "com.thealgorithms.datastructures.crdt.ORSet;com.thealgorithms.datastructures.crdt.ORSet.*"
        },
        "pair_inputs": {
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCompareDifferentSets_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCompareDifferentSets_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCompareDifferentSets_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCompareDifferentSets_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCompareDifferentSets_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCompareDifferentSets_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCompareDifferentSets_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCompareDifferentSets_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCompareDifferentSets_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testCompareDifferentSets_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__split__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__split__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_of_int_int",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_of_int_int()",
            "assertionSTMT": "assertEquals(half, test.getHalfValue())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__split__threeten-extra/org.threeten.extra.TestYearHalf.test_of_int_int__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.of(int, int)",
                "org.threeten.extra.YearHalf.getHalfValue()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 3,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "int",
                    "expression": "year",
                    "statement": "YearHalf test = YearHalf.of(year, half);",
                    "invocation": "test = YearHalf.of(year, half)"
                },
                {
                    "type": "int",
                    "expression": "half",
                    "statement": "YearHalf test = YearHalf.of(year, half);",
                    "invocation": "test = YearHalf.of(year, half)"
                }
            ],
            "followUpInput": [
                {
                    "type": "YearHalf",
                    "expression": "test2",
                    "statement": "assertEquals(half, test2.getHalfValue());",
                    "invocation": "test2.getHalfValue()"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*"
        },
        "pair_inputs": {
            "org.threeten.extra.TestYearHalf_test_of_int_int_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_of_int_int_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_of_int_int_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_of_int_int_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_of_int_int_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_of_int_int_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_of_int_int_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_of_int_int_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_of_int_int_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_of_int_int_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_of_int_int_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_of_int_int_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_of_int_int_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_of_int_int_h9Test4"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_of_int_int_h9Test4"
                    ],
                    "failure_info": {}
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "optimatika__split__ojAlgo",
            "test_file_path": "./data/ITrans/projects/optimatika__split__ojAlgo/src/test/java/org/ojalgo/data/transform/DiscreteFourierTransformTest.java",
            "test_simple_name": "testShiftAndRevertEven",
            "FQS_testMethos": "org.ojalgo.data.transform.DiscreteFourierTransformTest.testShiftAndRevertEven()",
            "assertionSTMT": "TestUtils.assertEquals(original, reverted)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/optimatika__split__ojAlgo/org.ojalgo.data.transform.DiscreteFourierTransformTest.testShiftAndRevertEven__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.ojalgo.data.transform.DiscreteFourierTransform.shift(org.ojalgo.matrix.store.MatrixStore<N>)",
                "org.ojalgo.data.transform.DiscreteFourierTransform.shift(org.ojalgo.matrix.store.MatrixStore<N>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Primitive64Store",
                    "expression": "original",
                    "statement": "MatrixStore<Double> shifted = DiscreteFourierTransform.shift(original);",
                    "invocation": "shifted = DiscreteFourierTransform.shift(original)"
                }
            ],
            "followUpInput": [
                {
                    "type": "MatrixStore<Double> shifted2",
                    "expression": "shifted2",
                    "statement": "MatrixStore<Double> reverted = DiscreteFourierTransform.shift(shifted2);",
                    "invocation": "reverted = DiscreteFourierTransform.shift(shifted2)"
                }
            ],
            "comments": "",
            "dependency": "org.ojalgo.data.transform.DiscreteFourierTransform;org.ojalgo.data.transform.DiscreteFourierTransform.*"
        },
        "pair_inputs": {
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testShiftAndRevertEven_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testShiftAndRevertEven_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testShiftAndRevertEven_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testShiftAndRevertEven_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testShiftAndRevertEven_h9Test2"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testShiftAndRevertEven_h9Test2": "org.opentest4j.AssertionFailedError: Access1D<?> != Access1D<?>, large norm differences 50.99019513592786 !<< 74.33034373659252 ==> expected: <true> but was: <false>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testShiftAndRevertEven_h9Test2"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testShiftAndRevertEven_h9Test2": "org.opentest4j.AssertionFailedError: Access1D<?> != Access1D<?>, large norm differences 50.99019513592786 !<< 74.33034373659252 ==> expected: <true> but was: <false>"
                    }
                }
            },
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testShiftAndRevertEven_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testShiftAndRevertEven_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testShiftAndRevertEven_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testShiftAndRevertEven_h9Test4": "org.opentest4j.AssertionFailedError: Access1D<?> != Access1D<?>, large norm differences 41.060930335295645 !<< 38.678159211627424 ==> expected: <true> but was: <false>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testShiftAndRevertEven_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testShiftAndRevertEven_h9Test4": "org.opentest4j.AssertionFailedError: Access1D<?> != Access1D<?>, large norm differences 41.060930335295645 !<< 38.678159211627424 ==> expected: <true> but was: <false>"
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "arextest__split__arex-agent-java",
            "test_file_path": "./data/ITrans/projects/arextest__split__arex-agent-java/arex-instrumentation-api/src/test/java/io/arex/inst/runtime/serializer/SerializerTest.java",
            "test_simple_name": "testNestedList",
            "FQS_testMethos": "io.arex.inst.runtime.serializer.SerializerTest.testNestedList()",
            "assertionSTMT": "assertEquals(list, actualResult)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/arextest__split__arex-agent-java/io.arex.inst.runtime.serializer.SerializerTest.testNestedList__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "io.arex.inst.runtime.serializer.Serializer.serialize(java.lang.Object, java.lang.String)",
                "io.arex.inst.runtime.serializer.Serializer.deserialize(java.lang.String, java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "List<List<Object>>",
                    "expression": "list",
                    "statement": "String json = Serializer.serialize(list, serializer);",
                    "invocation": "json = Serializer.serialize(list, serializer)"
                },
                {
                    "type": "String",
                    "expression": "serializer",
                    "statement": "String json = Serializer.serialize(list, serializer);",
                    "invocation": "json = Serializer.serialize(list, serializer)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "json2",
                    "statement": "List<List<Object>> actualResult = Serializer.deserialize(json2, typeName2);",
                    "invocation": "actualResult = Serializer.deserialize(json2, typeName2)"
                },
                {
                    "type": "String",
                    "expression": "typeName2",
                    "statement": "List<List<Object>> actualResult = Serializer.deserialize(json2, typeName2);",
                    "invocation": "actualResult = Serializer.deserialize(json2, typeName2)"
                }
            ],
            "comments": "",
            "dependency": "io.arex.inst.runtime.serializer.Serializer;io.arex.inst.runtime.serializer.Serializer.*"
        },
        "pair_inputs": {
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedList_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testNestedList_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testNestedList_h9Test0": "org.opentest4j.AssertionFailedError: expected: <[]> but was: <[null, []]>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testNestedList_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedList_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testNestedList_h9Test1"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testNestedList_h9Test1": "org.opentest4j.AssertionFailedError: expected: <[null]> but was: <[null, [], null]>"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "testNestedList_h9Test1"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testNestedList_h9Test1": "org.opentest4j.AssertionFailedError: expected: <[null]> but was: <null>"
                    }
                }
            },
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedList_h9Test2": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedList_h9Test3": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "io.arex.inst.runtime.serializer.SerializerTest_testNestedList_h9Test4": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "apache__split__druid",
            "test_file_path": "./data/ITrans/projects/apache__split__druid/extensions-core/multi-stage-query/src/test/java/org/apache/druid/msq/exec/WorkerStorageParametersTest.java",
            "test_simple_name": "test_WorkerStorageParameter_createInstance",
            "FQS_testMethos": "org.apache.druid.msq.exec.WorkerStorageParametersTest.test_WorkerStorageParameter_createInstance()",
            "assertionSTMT": "Assert.assertEquals(WorkerStorageParameters.createInstanceForTests(l), WorkerStorageParameters.createInstance(l2, b))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__split__druid/org.apache.druid.msq.exec.WorkerStorageParametersTest.test_WorkerStorageParameter_createInstance__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.apache.druid.msq.exec.WorkerStorageParameters.createInstanceForTests(long)",
                "org.apache.druid.msq.exec.WorkerStorageParameters.createInstance(long, boolean)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "long",
                    "expression": "l",
                    "statement": "Assert.assertEquals(WorkerStorageParameters.createInstanceForTests(l), WorkerStorageParameters.createInstance(l2, b));",
                    "invocation": "WorkerStorageParameters.createInstanceForTests(l)"
                }
            ],
            "followUpInput": [
                {
                    "type": "long",
                    "expression": "l2",
                    "statement": "Assert.assertEquals(WorkerStorageParameters.createInstanceForTests(l), WorkerStorageParameters.createInstance(l2, b));",
                    "invocation": "WorkerStorageParameters.createInstance(l2, b)"
                },
                {
                    "type": "boolean",
                    "expression": "b",
                    "statement": "Assert.assertEquals(WorkerStorageParameters.createInstanceForTests(l), WorkerStorageParameters.createInstance(l2, b));",
                    "invocation": "WorkerStorageParameters.createInstance(l2, b)"
                }
            ],
            "comments": "not sure",
            "dependency": "org.apache.druid.msq.exec.WorkerStorageParameters;org.apache.druid.msq.exec.WorkerStorageParameters.*"
        },
        "pair_inputs": {
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_WorkerStorageParameter_createInstance_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_WorkerStorageParameter_createInstance_h9Test0": "java.lang.AssertionError, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_WorkerStorageParameter_createInstance_h9Test0"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_WorkerStorageParameter_createInstance_h9Test0": "java.lang.AssertionError, line:None"
                    }
                }
            },
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "test_WorkerStorageParameter_createInstance_h9Test1"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_WorkerStorageParameter_createInstance_h9Test1": "org.apache.druid.msq.indexing.error.MSQException, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_WorkerStorageParameter_createInstance_h9Test1"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_WorkerStorageParameter_createInstance_h9Test1": "java.lang.AssertionError, line:None"
                    }
                }
            },
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_WorkerStorageParameter_createInstance_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_WorkerStorageParameter_createInstance_h9Test2"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_WorkerStorageParameter_createInstance_h9Test2": "java.lang.AssertionError, line:None"
                    }
                }
            },
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "test_WorkerStorageParameter_createInstance_h9Test3"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_WorkerStorageParameter_createInstance_h9Test3": "org.apache.druid.msq.indexing.error.MSQException, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_WorkerStorageParameter_createInstance_h9Test3"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_WorkerStorageParameter_createInstance_h9Test3": "java.lang.AssertionError, line:None"
                    }
                }
            },
            "org.apache.druid.msq.exec.WorkerStorageParametersTest_test_WorkerStorageParameter_createInstance_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_WorkerStorageParameter_createInstance_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_WorkerStorageParameter_createInstance_h9Test4": "java.lang.AssertionError, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 1,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [
                        "test_WorkerStorageParameter_createInstance_h9Test4"
                    ],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_WorkerStorageParameter_createInstance_h9Test4": "java.lang.AssertionError, line:None"
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "ngs-doo__split__dsl-json",
            "test_file_path": "./data/ITrans/projects/ngs-doo__split__dsl-json/library/src/test/java/com/dslplatform/json/DateTest.java",
            "test_simple_name": "localTimeBoundary",
            "FQS_testMethos": "com.dslplatform.json.DateTest.localTimeBoundary()",
            "assertionSTMT": "Assert.assertArrayEquals(lts, values)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ngs-doo__split__dsl-json/com.dslplatform.json.DateTest.localTimeBoundary__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.dslplatform.json.DslJson.serialize(com.dslplatform.json.JsonWriter, T[])",
                "com.dslplatform.json.DslJson.deserialize(java.lang.Class<TResult>, byte[], int)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "JsonWriter",
                    "expression": "jw",
                    "statement": "dslJson.serialize(jw, lts);",
                    "invocation": "dslJson.serialize(jw, lts)"
                },
                {
                    "type": "LocalTime[]",
                    "expression": "lts",
                    "statement": "dslJson.serialize(jw, lts);",
                    "invocation": "dslJson.serialize(jw, lts)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Class<LocalTime[]",
                    "expression": "manifest",
                    "statement": "LocalTime[] values = dslJson.deserialize(manifest, body, size);",
                    "invocation": "values = dslJson.deserialize(manifest, body, size)"
                },
                {
                    "type": "byte[]",
                    "expression": "body",
                    "statement": "LocalTime[] values = dslJson.deserialize(manifest, body, size);",
                    "invocation": "values = dslJson.deserialize(manifest, body, size)"
                },
                {
                    "type": "int",
                    "expression": "size",
                    "statement": "LocalTime[] values = dslJson.deserialize(manifest, body, size);",
                    "invocation": "values = dslJson.deserialize(manifest, body, size)"
                }
            ],
            "comments": "",
            "dependency": "com.dslplatform.json.DslJson;com.dslplatform.json.DslJson.*"
        },
        "pair_inputs": {
            "com.dslplatform.json.DateTest_localTimeBoundary_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "localTimeBoundary_h9Test0"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "localTimeBoundary_h9Test0": "localTimeBoundary_h9Test0"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "localTimeBoundary_h9Test0"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "localTimeBoundary_h9Test0": "localTimeBoundary_h9Test0"
                    }
                }
            },
            "com.dslplatform.json.DateTest_localTimeBoundary_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "localTimeBoundary_h9Test1"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "localTimeBoundary_h9Test1": "localTimeBoundary_h9Test1"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "localTimeBoundary_h9Test1"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "localTimeBoundary_h9Test1": "localTimeBoundary_h9Test1"
                    }
                }
            },
            "com.dslplatform.json.DateTest_localTimeBoundary_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "localTimeBoundary_h9Test2"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "localTimeBoundary_h9Test2": "localTimeBoundary_h9Test2"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "localTimeBoundary_h9Test2"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "localTimeBoundary_h9Test2": "localTimeBoundary_h9Test2"
                    }
                }
            },
            "com.dslplatform.json.DateTest_localTimeBoundary_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "localTimeBoundary_h9Test3"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "localTimeBoundary_h9Test3": "localTimeBoundary_h9Test3"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "localTimeBoundary_h9Test3"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "localTimeBoundary_h9Test3": "localTimeBoundary_h9Test3"
                    }
                }
            },
            "com.dslplatform.json.DateTest_localTimeBoundary_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "localTimeBoundary_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "localTimeBoundary_h9Test4": "localTimeBoundary_h9Test4"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "localTimeBoundary_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "localTimeBoundary_h9Test4": "localTimeBoundary_h9Test4"
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__split__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__split__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_parse_CharSequenceDateTimeFormatter",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_parse_CharSequenceDateTimeFormatter()",
            "assertionSTMT": "assertEquals(YearHalf.parse(text, f), YearHalf.of(year, half))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__split__threeten-extra/org.threeten.extra.TestYearHalf.test_parse_CharSequenceDateTimeFormatter__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)",
                "org.threeten.extra.YearHalf.parse(java.lang.CharSequence, java.time.format.DateTimeFormatter)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "CharSequence",
                    "expression": "text",
                    "statement": "assertEquals(YearHalf.parse(text, f), YearHalf.of(year, half));",
                    "invocation": "YearHalf.parse(text, f)"
                },
                {
                    "type": "DateTimeFormatter",
                    "expression": "f",
                    "statement": "assertEquals(YearHalf.parse(text, f), YearHalf.of(year, half));",
                    "invocation": "YearHalf.parse(text, f)"
                }
            ],
            "followUpInput": [
                {
                    "type": "int",
                    "expression": "half",
                    "statement": "assertEquals(YearHalf.parse(text, f), YearHalf.of(year, half));",
                    "invocation": "YearHalf.of(year, half)"
                },
                {
                    "type": "int",
                    "expression": "year",
                    "statement": "assertEquals(YearHalf.parse(text, f), YearHalf.of(year, half));",
                    "invocation": "YearHalf.of(year, half)"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*"
        },
        "pair_inputs": {
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequenceDateTimeFormatter_h9Test0"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequenceDateTimeFormatter_h9Test0"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequenceDateTimeFormatter_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequenceDateTimeFormatter_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h9Test2": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequenceDateTimeFormatter_h9Test2"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequenceDateTimeFormatter_h9Test2"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h9Test3": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequenceDateTimeFormatter_h9Test3"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "test_parse_CharSequenceDateTimeFormatter_h9Test3"
                    ],
                    "failure_info": {}
                }
            },
            "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h9Test4": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "test_parse_CharSequenceDateTimeFormatter_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_parse_CharSequenceDateTimeFormatter_h9Test4": "java.time.format.DateTimeParseException: Text 'H3 2012' could not be parsed: Unable to obtain YearHalf from TemporalAccessor: {Year=2012, HalfOfYear=3},ISO of type java.time.format.Parsed"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": -1,
                    "assertionLineNums": [],
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "test_parse_CharSequenceDateTimeFormatter_h9Test4"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_parse_CharSequenceDateTimeFormatter_h9Test4": "java.time.format.DateTimeParseException: Text 'H3 2012' could not be parsed: Unable to obtain YearHalf from TemporalAccessor: {HalfOfYear=3, Year=2012},ISO of type java.time.format.Parsed"
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__split__druid",
            "test_file_path": "./data/ITrans/projects/alibaba__split__druid/core/src/test/java/com/alibaba/druid/bvt/sql/mysql/issues/Issue5686.java",
            "test_simple_name": "test_column_comment",
            "FQS_testMethos": "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686.test_column_comment()",
            "assertionSTMT": "assertEquals(newSql, newSql2)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__split__druid/com.alibaba.druid.bvt.sql.mysql.issues.Issue5686.test_column_comment__split__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.druid.sql.ast.statement.SQLInsertStatement.toString()",
                "com.alibaba.druid.sql.ast.statement.SQLInsertStatement.toString()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "MySqlInsertStatement",
                    "expression": "sqlStatement",
                    "statement": "String newSql = sqlStatement.toString();",
                    "invocation": "newSql = sqlStatement.toString()"
                }
            ],
            "followUpInput": [
                {
                    "type": "MySqlInsertStatement",
                    "expression": "sqlStatement2",
                    "statement": "String newSql2 = sqlStatement2.toString();",
                    "invocation": "newSql2 = sqlStatement2.toString()"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.druid.sql.ast.statement.SQLInsertStatement;com.alibaba.druid.sql.ast.statement.SQLInsertStatement.*"
        },
        "pair_inputs": {
            "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686_test_column_comment_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "test_column_comment_h9Test0"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_column_comment_h9Test0": "com.alibaba.druid.sql.parser.ParserException, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "test_column_comment_h9Test0"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "test_column_comment_h9Test0": "com.alibaba.druid.sql.parser.ParserException, line:None"
                    }
                }
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "opengoofy__split__hippo4j",
            "test_file_path": "./data/ITrans/projects/opengoofy__split__hippo4j/threadpool/core/src/test/java/cn/hippo4j/core/executor/plugin/manager/ThreadPoolPluginSupportTest.java",
            "test_simple_name": "testGetPlugin",
            "FQS_testMethos": "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest.testGetPlugin()",
            "assertionSTMT": "Assert.assertSame(plugin, support.getPlugin(plugin.getId()).orElse(null))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/opengoofy__split__hippo4j/cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest.testGetPlugin__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupport.register(cn.hippo4j.core.executor.plugin.ThreadPoolPlugin)",
                "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupport.getPlugin(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "ThreadPoolPlugin",
                    "expression": "plugin",
                    "statement": "support.register(plugin);",
                    "invocation": "support.register(plugin)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "pluginId",
                    "statement": "Assert.assertSame(plugin, support.getPlugin(pluginId).orElse(null));",
                    "invocation": "support.getPlugin(pluginId).orElse(null)"
                }
            ],
            "comments": "",
            "dependency": "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupport.*"
        },
        "pair_inputs": {
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h9Test0": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": false,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testGetPlugin_h9Test0"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testGetPlugin_h9Test0": "java.lang.NullPointerException, line:None"
                    }
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": false,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 0,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 1,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [
                        "testGetPlugin_h9Test0"
                    ],
                    "passed_test_cases_list": [],
                    "failure_info": {
                        "testGetPlugin_h9Test0": "java.lang.NullPointerException, line:None"
                    }
                }
            },
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h9Test1": {
                "generated_inputs_compilation_result": true,
                "generated_inputs_validation_result": true,
                "generated_inputs_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetPlugin_h9Test1"
                    ],
                    "failure_info": {}
                },
                "generated_Sinput_compilation_result": true,
                "generated_Sinput_validation_result": true,
                "generated_Sinput_validation_exe_detail": {
                    "num_of_test_cases": 1,
                    "num_of_passed_test_cases": 1,
                    "num_of_assertion_failed_test_cases": 0,
                    "num_of_exception_thrown_test_cases": 0,
                    "num_of_reach_assertion_test_cases": 0,
                    "assertionLineNums": false,
                    "reach_assertion_test_cases_list": [],
                    "assertion_failed_test_cases_list": [],
                    "exception_thrown_test_cases_list": [],
                    "passed_test_cases_list": [
                        "testGetPlugin_h9Test1"
                    ],
                    "failure_info": {}
                }
            },
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h9Test2": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h9Test3": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetPlugin_h9Test4": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    },
    {
        "MTC_item": {
            "poj_name": "rsksmart__split__rskj",
            "test_file_path": "./data/ITrans/projects/rsksmart__split__rskj/rskj-core/src/test/java/org/ethereum/rpc/FilterTest.java",
            "test_simple_name": "testGetNewEvents",
            "FQS_testMethos": "org.ethereum.rpc.FilterTest.testGetNewEvents()",
            "assertionSTMT": "assertArrayEquals(new Object[] { mockEvent.getJsonEventObject() }, events1)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/rsksmart__split__rskj/org.ethereum.rpc.FilterTest.testGetNewEvents__split__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.ethereum.rpc.Filter.add(org.ethereum.rpc.Filter.FilterEvent)",
                "org.ethereum.rpc.Filter.getNewEvents()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Filter.FilterEvent",
                    "expression": "mockEvent",
                    "statement": "filter.add(mockEvent);",
                    "invocation": "filter.add(mockEvent)"
                },
                {
                    "type": "Filter",
                    "expression": "filter",
                    "statement": "filter.add(mockEvent);",
                    "invocation": "filter.add(mockEvent)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Filter.FilterEvent",
                    "expression": "mockEvent2",
                    "statement": "filter2.add(mockEvent2);",
                    "invocation": "filter2.add(mockEvent2)"
                },
                {
                    "type": "Filter",
                    "expression": "filter2",
                    "statement": "filter2.add(mockEvent2);",
                    "invocation": "filter2.add(mockEvent2)"
                }
            ],
            "comments": "",
            "dependency": "org.ethereum.rpc.Filter;org.ethereum.rpc.Filter.*;org.ethereum.rpc.FilterTest;org.ethereum.rpc.FilterTest.*"
        },
        "pair_inputs": {
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h9Test0": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h9Test1": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h9Test2": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h9Test3": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            },
            "org.ethereum.rpc.FilterTest_testGetNewEvents_h9Test4": {
                "generated_inputs_compilation_result": false,
                "generated_inputs_validation_result": null,
                "generated_inputs_validation_exe_detail": null,
                "generated_Sinput_compilation_result": false,
                "generated_Sinput_validation_result": null,
                "generated_Sinput_validation_exe_detail": null
            }
        },
        "source_only_input": {}
    }
]