JUnit version 4.13.2
SLF4J: Class path contains multiple SLF4J bindings.
SLF4J: Found binding in [jar:file:/ssddata1/cxubl/data/ITrans/projects/vladmihalcea__castle__high-performance-java-persistence/core/target/dependency/logback-classic-1.2.11.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: Found binding in [jar:file:/ssddata1/cxubl/data/ITrans/projects/vladmihalcea__castle__high-performance-java-persistence/target/dependency/logback-classic-1.2.11.jar!/org/slf4j/impl/StaticLoggerBinder.class]
SLF4J: See http://www.slf4j.org/codes.html#multiple_bindings for an explanation.
SLF4J: Actual binding is of type [ch.qos.logback.classic.util.ContextSelectorStaticBinder]
.E
Time: 0.03
There was 1 failure:
1) testPerformanceUsingCache_h9Test4(com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h9Test4)
java.lang.NullPointerException: Cannot invoke "Object.hashCode()" because "key" is null
	at org.hibernate.internal.util.collections.BoundedConcurrentHashMap.get(BoundedConcurrentHashMap.java:1632)
	at com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h9Test4.testPerformanceUsingCache_h9Test4(CryptoUtilsTest_testPerformanceUsingCache_h9Test4.java:50)

FAILURES!!!
Tests run: 1,  Failures: 1

CMD: cd /ssddata1/cxubl/data/ITrans/projects/vladmihalcea__castle__high-performance-java-persistence/ ; /ssddata1/cxubl/software/zulu_jdks/zulu17.40.19-ca-jdk17.0.6-linux_x64/bin/java -XX:ActiveProcessorCount=10 -classpath ./:./core/target/classes:./core/target/test-classes:./core/target/dependency/*:./jooq/jooq-core/target/classes:./jooq/jooq-core/target/test-classes:./jooq/jooq-mysql/target/test-classes:./jooq/jooq-pgsql/target/test-classes:./target/dependency/*:/ssddata1/cxubl/software/junit/junit-4.13.2.jar:/ssddata1/cxubl/software/junit/junit-jupiter-api-5.8.2.jar:/ssddata1/cxubl/software/junit/hamcrest-core-1.3.jar:/ssddata1/cxubl/.m2/repository/org/slf4j/slf4j-api/2.0.0/slf4j-api-2.0.0.jar:/ssddata1/cxubl/.m2/repository/org/apache/logging/log4j/log4j-api/2.1/log4j-api-2.1.jar:/ssddata1/cxubl/.m2/repository/com/google/guava/guava/33.0.0-jre/guava-33.0.0-jre.jar:/ssddata1/cxubl/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.4.0/jackson-databind-2.4.0.jar:/ssddata1/cxubl/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.12.1/jackson-core-2.12.1.jar:/ssddata1/cxubl/.m2/repository/org/springframework/spring-test/5.3.26/spring-test-5.3.26.jar:/ssddata1/cxubl/data/ITrans/projects/thingsboard__castle__thingsboard/dao/target/dependency/commons-logging-1.2.jar:/ssddata1/cxubl/.m2/repository/org/springframework/spring-core/5.3.2/spring-core-5.3.26.jar:arex-instrumentation-api/target/dependency/jackson-annotations-2.13.1.jar:arex-instrumentation-api/target/dependency/gson-2.10.1.jar:misc/extra/target/dependency/vecmath-1.5.2.jar:/ssddata1/cxubl/data/ITrans/projects/vladmihalcea__castle__high-performance-java-persistence/ITrans/processed_GT_only/:/ssddata1/cxubl/data/ITrans/projects/vladmihalcea__castle__high-performance-java-persistence/ITrans/processed_MTCITrans_only/:/ssddata1/cxubl/data/ITrans/projects/vladmihalcea__castle__high-performance-java-persistence/ITrans/generated_ITrans/:/ssddata1/cxubl/data/ITrans/projects/vladmihalcea__castle__high-performance-java-persistence/ITrans/generated_inputs/:/ssddata1/cxubl/data/ITrans/projects/vladmihalcea__castle__high-performance-java-persistence/ITrans/generated_inputs/qw:/ssddata1/cxubl/data/ITrans/projects/vladmihalcea__castle__high-performance-java-persistence/ITrans/generated_inputs/ org.junit.runner.JUnitCore com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h9Test4 > /ssddata1/cxubl/data/ITrans/projects/vladmihalcea__castle__high-performance-java-persistence/AutoMR/test_exe/com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h9Test4.log 2>&1
file path: 
/ssddata1/cxubl/data/ITrans/projects/vladmihalcea__castle__high-performance-java-persistence/ITrans/generated_inputs/qw/com/vladmihalcea/hpjp/util/CryptoUtilsTest_testPerformanceUsingCache_h9Test4.java
file content: 
package com.vladmihalcea.hpjp.util;

import com.vladmihalcea.hpjp.util.CryptoUtils;
import com.vladmihalcea.hpjp.util.CryptoUtils.*;
import com.codahale.metrics.MetricRegistry;
import com.codahale.metrics.Slf4jReporter;
import com.codahale.metrics.Timer;
import com.vladmihalcea.hpjp.spring.transaction.readonly.config.stats.SpringTransactionStatisticsReport;
import org.hibernate.internal.util.collections.BoundedConcurrentHashMap;
import org.junit.Test;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import java.util.Arrays;
import java.util.List;
import java.util.concurrent.ThreadLocalRandom;
import java.util.concurrent.TimeUnit;
import java.util.stream.LongStream;
import static org.junit.Assert.assertEquals;

/**
 * @author  Vlad Mihalcea
 */
public final class CryptoUtilsTest_testPerformanceUsingCache_h9Test4 {

    public static Logger LOGGER = LoggerFactory.getLogger(SpringTransactionStatisticsReport.class);

    private MetricRegistry metricRegistry = new MetricRegistry();

    private Slf4jReporter logReporter = Slf4jReporter.forRegistry(metricRegistry).outputTo(LOGGER).convertDurationsTo(TimeUnit.MICROSECONDS).build();

    private final Timer encryptTimer = metricRegistry.timer(encryptTimer);

    private final Timer decryptTimer = metricRegistry.timer(decryptTimer);

    private final ThreadLocalRandom random = ThreadLocalRandom.current();

    private int MAX_COUNT = 100_000;

    private final BoundedConcurrentHashMap<Long, String> encryptCache = new BoundedConcurrentHashMap<>(100_000, 20, BoundedConcurrentHashMap.Eviction.LIRS);

    private final BoundedConcurrentHashMap<String, Long> decryptCache = new BoundedConcurrentHashMap<>(100_000, 20, BoundedConcurrentHashMap.Eviction.LIRS);

    private int encryptCallCount = 0;

    private int decryptCallCount = 0;

    @Test
    public void testPerformanceUsingCache_h9Test4() {
    Long value = null;
    String encryptedValue = encryptCache.get(value);
    String message = encryptedValue;
    Class<?> clazz = Long.class;
        long startNanos = System.nanoTime();
        if (encryptedValue == null) {
            encryptCallCount++;
            encryptedValue = CryptoUtils.encrypt(value);
            encryptCache.put(value, encryptedValue);
        }
        encryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);
        startNanos = System.nanoTime();
        Long decryptedValue = decryptCache.get(encryptedValue);
        if (decryptedValue == null) {
            decryptCallCount++;
            decryptedValue = (Long) CryptoUtils.decrypt(message, clazz);
            decryptCache.put(encryptedValue, decryptedValue);
        }
        decryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);
        assertEquals(value.longValue(), decryptedValue.longValue());
    }

    private void warmUp() {
        LongStream.rangeClosed(1, MAX_COUNT / 10).forEach(i -> {
            Long value = random.nextLong();
            String encryptedValue = CryptoUtils.encrypt(value);
            Long decryptedValue = CryptoUtils.decrypt(encryptedValue, Long.class);
            assertEquals(value.longValue(), decryptedValue.longValue());
        });
    }
}


