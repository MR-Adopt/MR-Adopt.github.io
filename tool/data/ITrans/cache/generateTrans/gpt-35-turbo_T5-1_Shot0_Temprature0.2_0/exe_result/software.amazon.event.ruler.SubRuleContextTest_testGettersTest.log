JUnit version 4.13.2
.
Time: 0.01

OK (1 test)

CMD: cd /ssddata1/cxubl/data/ITrans/projects/aws__split__event-ruler/ ; /ssddata1/cxubl/software/zulu_jdks/zulu11.62.17-ca-jdk11.0.18-linux_x64/bin/java -XX:ActiveProcessorCount=10 -classpath ./:./target/classes:./target/test-classes:./target/dependency/*:/ssddata1/cxubl/software/junit/junit-4.13.2.jar:/ssddata1/cxubl/software/junit/junit-jupiter-api-5.8.2.jar:/ssddata1/cxubl/software/junit/hamcrest-core-1.3.jar:/ssddata1/cxubl/.m2/repository/org/slf4j/slf4j-api/2.0.0/slf4j-api-2.0.0.jar:/ssddata1/cxubl/.m2/repository/org/apache/logging/log4j/log4j-api/2.1/log4j-api-2.1.jar:/ssddata1/cxubl/.m2/repository/com/google/guava/guava/33.0.0-jre/guava-33.0.0-jre.jar:/ssddata1/cxubl/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.4.0/jackson-databind-2.4.0.jar:/ssddata1/cxubl/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.12.1/jackson-core-2.12.1.jar:/ssddata1/cxubl/.m2/repository/org/springframework/spring-test/5.3.26/spring-test-5.3.26.jar:/ssddata1/cxubl/data/ITrans/projects/thingsboard__split__thingsboard/dao/target/dependency/commons-logging-1.2.jar:/ssddata1/cxubl/.m2/repository/org/springframework/spring-core/5.3.2/spring-core-5.3.26.jar:arex-instrumentation-api/target/dependency/jackson-annotations-2.13.1.jar:arex-instrumentation-api/target/dependency/gson-2.10.1.jar:misc/extra/target/dependency/vecmath-1.5.2.jar:/ssddata1/cxubl/data/ITrans/projects/aws__split__event-ruler/ITrans/processed_GT_only/:/ssddata1/cxubl/data/ITrans/projects/aws__split__event-ruler/ITrans/processed_MTCITrans_only/:/ssddata1/cxubl/data/ITrans/projects/aws__split__event-ruler/ITrans/generated_ITrans/ org.junit.runner.JUnitCore software.amazon.event.ruler.SubRuleContextTest_testGettersTest > /ssddata1/cxubl/data/ITrans/cache/generateTrans/gpt-35-turbo_T5-1_Shot0_Temprature0.2_0/exe_result/software.amazon.event.ruler.SubRuleContextTest_testGettersTest.log 2>&1
file path: 
/ssddata1/cxubl/data/ITrans/projects/aws__split__event-ruler/ITrans/processed_MTCITrans_only/software/amazon/event/ruler/SubRuleContextTest_testGettersTest.java
file content: 
package software.amazon.event.ruler;

import software.amazon.event.ruler.SubRuleContext;
import software.amazon.event.ruler.SubRuleContext.*;

import org.junit.Test;

import java.util.Arrays;
import java.util.HashSet;
import java.util.List;
import java.util.Set;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNotEquals;
import static org.junit.Assert.assertTrue;

public class SubRuleContextTest_testGettersTest {

    private static final String NAME = name;

//     @Test
//     public void testGetters_h() {
//         SubRuleContext.Generator generator = new SubRuleContext.Generator();
//         String NAME = name;
//         SubRuleContext context = generator.generate(NAME);
//         Double id = -1.7976931348623157E308;
//         SubRuleContext.Generator generator2 = new SubRuleContext.Generator();
//         generator2.generate(name);
//         assertEquals(NAME, generator2.getNameForGeneratedId(id));
//         Set<Double> expectedIds = new HashSet<>();
//         expectedIds.add(context.getId());
//         assertEquals(expectedIds, generator.getIdsGeneratedForName(NAME));
//     }
// 
    @Test
    public void testGetters_IT() {
        SubRuleContext.Generator generator = new SubRuleContext.Generator();
        String NAME = name;
        SubRuleContext context = generator.generate(NAME);
        List<Object> follow_up_inputs = SubRuleContextTest_testGetters.inputTransformation_testGetters(generator, NAME);
        SubRuleContext.Generator generator2 = (SubRuleContext.Generator) follow_up_inputs.get(0);
        Double id = (Double) follow_up_inputs.get(1);
        assertEquals(NAME, generator2.getNameForGeneratedId(id));
        Set<Double> expectedIds = new HashSet<>();
        expectedIds.add(context.getId());
        assertEquals(expectedIds, generator.getIdsGeneratedForName(NAME));
    }

//     public static List<Object> inputTransformation_testGetters(SubRuleContext.Generator generator, String NAME) {
//         SubRuleContext.Generator generator2 = new SubRuleContext.Generator();
//         SubRuleContext context = generator2.generate(NAME);
//         Double id = context.getId();
//         List<Object> follow_up_inputs = Arrays.asList(generator2, id);
//         return follow_up_inputs;
//     }
// 
// 
}
