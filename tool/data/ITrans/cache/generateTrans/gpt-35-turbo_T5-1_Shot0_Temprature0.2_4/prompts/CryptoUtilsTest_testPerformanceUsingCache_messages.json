[
    {
        "role": "system",
        "content": "As an expert in Java programming, you excel at understanding the intentions behind code and developing functions that convert provided inputs into desired outputs.\nIn metamorphic testing, input transformation functions are crafted to automatically generate additional test inputs (denoted as 'FOLLOW UP INPUT') from initial test inputs (denoted as 'SOURCE INPUT') based on defined metamorphic relations (MRs).\n\nGiven the program under test (denoted as 'METHOD UNDER TEST'), an MR-encoded test case (denoted as 'TEST CASE'),\nand additional pairs of 'SOURCE INPUT' and 'FOLLOW UP INPUT' (denoted as 'OTHER INPUT PAIRS'),\\\nyour task is to analyze the program under test and the provided test case, deduce the relationship between 'SOURCE INPUT' and 'FOLLOW UP INPUT' in the test case, and create a function that transforms 'SOURCE INPUT' into 'FOLLOW UP INPUT'.\n\nThe deduced relation and generated transformation function should be applicable to addtional input pairs and other potentail input pairs with similar characteristics.\nConsidering potential input pairs with boundary values as well.\n"
    },
    {
        "role": "user",
        "content": "# METHOD UNDER TEST\n```java\npublic static String encrypt(Object message) {\n    if (message == null) {\n        throw new IllegalArgumentException(\"Only not-null values can be encrypted!\");\n    }\n    try {\n        Cipher cipher = getCipher();\n        cipher.init(Cipher.ENCRYPT_MODE, getEncryptionKey());\n        String messageValue = (message instanceof String) ? (String) message : String.valueOf(message);\n        return Base64.getEncoder().encodeToString(cipher.doFinal(messageValue.getBytes(ENCODING)));\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}\n\npublic static <T> T decrypt(String message, Class<T> clazz) {\n    try {\n        Cipher cipher = getCipher();\n        cipher.init(Cipher.DECRYPT_MODE, getEncryptionKey());\n        String decryptedValue = new String(cipher.doFinal(Base64.getDecoder().decode(message)));\n        return ReflectionUtils.invokeStaticMethod(ReflectionUtils.getMethodOrNull(clazz, \"valueOf\", String.class), decryptedValue);\n    } catch (Exception e) {\n        throw new RuntimeException(e);\n    }\n}\n\n```\n\n\n# TEST CASE\n```java\n@Test\npublic void testPerformanceUsingCache() {\n    long threshold = 5L;\n    Long value = random.nextLong(threshold);\n    long startNanos = System.nanoTime();\n    String encryptedValue = encryptCache.get(value);\n    if (encryptedValue == null) {\n        encryptCallCount++;\n        encryptedValue = CryptoUtils.encrypt(value);\n        encryptCache.put(value, encryptedValue);\n    }\n    encryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);\n    String message = encryptedValue;\n    Class<?> clazz = Long.class;\n    startNanos = System.nanoTime();\n    Long decryptedValue = decryptCache.get(encryptedValue);\n    if (decryptedValue == null) {\n        decryptCallCount++;\n        decryptedValue = (Long) CryptoUtils.decrypt(message, clazz);\n        decryptCache.put(encryptedValue, decryptedValue);\n    }\n    decryptTimer.update((System.nanoTime() - startNanos), TimeUnit.NANOSECONDS);\n    assertEquals(value.longValue(), decryptedValue.longValue());\n}\n\n```\nSOURCE INPUT: `value`\nFOLLOW UP INPUT: `message`,`clazz`\n\n\n# OTHER INPUT PAIRS \n\n\n\n# OUTPUT FORMAT\n```java\npublic class CryptoUtilsTest_testPerformanceUsingCache {\n    public static List<Object> inputTransformation_testPerformanceUsingCache(Long value)  {\n        // TODO\n        String message = \n\t\tClass<?> clazz = \n\t\tList<Object> transformed_inputs = Arrays.asList(message, clazz);\n\t\treturn transformed_inputs;\n    }\n}\n```\nYour task is to deduce the relationship between 'SOURCE INPUT' and 'FOLLOW UP INPUT' in the test case, and create a function that transforms 'SOURCE INPUT' into 'FOLLOW UP INPUT'.\nThe deduced relation and generated transformation function should be applicable to addtional input pairs and other potentail input pairs with similar characteristics.\nGenerate the transformation function by complementing the above code skeleton in 'OUTPUT FORMAT'."
    }
]