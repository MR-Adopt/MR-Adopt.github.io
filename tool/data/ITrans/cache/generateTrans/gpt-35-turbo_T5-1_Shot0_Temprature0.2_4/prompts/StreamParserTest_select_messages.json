[
    {
        "role": "system",
        "content": "As an expert in Java programming, you excel at understanding the intentions behind code and developing functions that convert provided inputs into desired outputs.\nIn metamorphic testing, input transformation functions are crafted to automatically generate additional test inputs (denoted as 'FOLLOW UP INPUT') from initial test inputs (denoted as 'SOURCE INPUT') based on defined metamorphic relations (MRs).\n\nGiven the program under test (denoted as 'METHOD UNDER TEST'), an MR-encoded test case (denoted as 'TEST CASE'),\nand additional pairs of 'SOURCE INPUT' and 'FOLLOW UP INPUT' (denoted as 'OTHER INPUT PAIRS'),\\\nyour task is to analyze the program under test and the provided test case, deduce the relationship between 'SOURCE INPUT' and 'FOLLOW UP INPUT' in the test case, and create a function that transforms 'SOURCE INPUT' into 'FOLLOW UP INPUT'.\n\nThe deduced relation and generated transformation function should be applicable to addtional input pairs and other potentail input pairs with similar characteristics.\nConsidering potential input pairs with boundary values as well.\n"
    },
    {
        "role": "user",
        "content": "# METHOD UNDER TEST\n```java\n/**\n *     Just like {@link #selectFirst(String)}, but if there is no match, throws an {@link IllegalArgumentException}. This\n *     is useful if you want to simply abort processing on a failed match.\n *     @param query the {@link org.jsoup.select.Selector} query.\n *     @return the first matching element\n *     @throws IllegalArgumentException if no match is found\n *     @throws IOException if an I/O error occurs\n */\npublic Element expectFirst(String query) throws IOException {\n    return (Element) Validate.ensureNotNull(selectFirst(query), \"No elements matched the query '%s' in the document.\", query);\n}\n\n/**\n *     Finds the first Element that matches the provided query. If the parsed Document does not already have a match, the\n *     input will be parsed until the first match is found, or the input is completely read.\n *     @param eval the {@link org.jsoup.select.Selector} evaluator.\n *     @return the first matching {@link Element}, or {@code null} if there's no match\n *     @throws IOException if an I/O error occurs\n */\n@Nullable\npublic Element selectFirst(Evaluator eval) throws IOException {\n    final Document doc = document();\n    // run the query on the existing (partial) doc first, as there may be a hit already parsed\n    Element first = doc.selectFirst(eval);\n    if (first != null)\n        return first;\n    return selectNext(eval);\n}\n\n```\n\n\n# TEST CASE\n```java\n@Test\nvoid select() throws IOException {\n    StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");\n    String queryTitle = \"title\";\n    Element title = parser.expectFirst(queryTitle);\n    String queryTitle2 = \"title\";\n    Element title2 = parser.selectFirst(queryTitle2);\n    assertSame(title2, title);\n// Element p1 = parser.expectNext(\"p\");\n// assertEquals(\"P One\", p1.text());\n// Element p2 = parser.expectNext(\"p\");\n// assertEquals(\"P Two\", p2.text());\n// Element pNone = parser.selectNext(\"p\");\n// assertNull(pNone);\n}\n\n```\nSOURCE INPUT: `parser`,`queryTitle`\nFOLLOW UP INPUT: `queryTitle2`\n\n\n# OTHER INPUT PAIRS \n## Input pair1:\n```java\nStreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");\nString queryTitle = \"title\";\nString queryTitle2 = \"title\";\n```\n\n## Input pair2:\n```java\nStreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");\nString queryTitle = \"p\";\nString queryTitle2 = \"p\";\n```\n\n## Input pair3:\n```java\nStreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");\nString queryTitle = \"p[id=1]\";\nString queryTitle2 = \"p[id=1]\";\n```\n\n## Input pair4:\n```java\nStreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");\nString queryTitle = \"p:contains(One)\";\nString queryTitle2 = \"p:contains(One)\";\n```\n\n## Input pair5:\n```java\nStreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");\nString queryTitle = \"p:first-child\";\nString queryTitle2 = \"p:first-child\";\n```\n\n## Input pair6:\n```java\nStreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");\nString queryTitle = \"p:contains(P One)\";\nString queryTitle2 = \"p:contains(P One)\";\n```\n\n\n\n# OUTPUT FORMAT\n```java\npublic class StreamParserTest_select {\n    public static String inputTransformation_select(StreamParser parser, String queryTitle) throws IOException  {\n        // TODO\n        String queryTitle2 = \n\t\treturn queryTitle2;\n    }\n}\n```\nYour task is to deduce the relationship between 'SOURCE INPUT' and 'FOLLOW UP INPUT' in the test case, and create a function that transforms 'SOURCE INPUT' into 'FOLLOW UP INPUT'.\nThe deduced relation and generated transformation function should be applicable to addtional input pairs and other potentail input pairs with similar characteristics.\nGenerate the transformation function by complementing the above code skeleton in 'OUTPUT FORMAT'."
    }
]