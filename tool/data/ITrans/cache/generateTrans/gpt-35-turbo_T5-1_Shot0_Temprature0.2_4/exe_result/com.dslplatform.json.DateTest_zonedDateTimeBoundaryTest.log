JUnit version 4.13.2
.
Time: 0.058

OK (1 test)

CMD: cd /ssddata1/cxubl/data/ITrans/projects/ngs-doo__castle__dsl-json/ ; /ssddata1/cxubl/software/zulu_jdks/zulu11.62.17-ca-jdk11.0.18-linux_x64/bin/java -XX:ActiveProcessorCount=10 -classpath ./:./android/target/classes:./android/target/dependency/*:./android/target/test-classes:./library/target/classes:./library/target/test-classes:./library/target/dependency/*:./tests-java-latest/target/classes:./tests-java-latest/target/test-classes:./tests-java8-external-models/target/classes:./tests-java8-external-models/target/dependency/*:./tests-java8-external-models/target/test-classes:./tests-java8/target/test-classes:./tests-java8/target/dependency/*:./tests-java8/target/classes:./tests-kotlin/target/test-classes:./tests-kotlin/target/dependency/*:./tests-kotlin/target/classes:./tests-processor/target/test-classes:./tests-processor/target/dependency/*:./tests-processor/target/classes:/ssddata1/cxubl/software/junit/junit-4.13.2.jar:/ssddata1/cxubl/software/junit/junit-jupiter-api-5.8.2.jar:/ssddata1/cxubl/software/junit/hamcrest-core-1.3.jar:/ssddata1/cxubl/.m2/repository/org/slf4j/slf4j-api/2.0.0/slf4j-api-2.0.0.jar:/ssddata1/cxubl/.m2/repository/org/apache/logging/log4j/log4j-api/2.1/log4j-api-2.1.jar:/ssddata1/cxubl/.m2/repository/com/google/guava/guava/33.0.0-jre/guava-33.0.0-jre.jar:/ssddata1/cxubl/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.4.0/jackson-databind-2.4.0.jar:/ssddata1/cxubl/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.12.1/jackson-core-2.12.1.jar:/ssddata1/cxubl/.m2/repository/org/springframework/spring-test/5.3.26/spring-test-5.3.26.jar:/ssddata1/cxubl/data/ITrans/projects/thingsboard__castle__thingsboard/dao/target/dependency/commons-logging-1.2.jar:/ssddata1/cxubl/.m2/repository/org/springframework/spring-core/5.3.2/spring-core-5.3.26.jar:arex-instrumentation-api/target/dependency/jackson-annotations-2.13.1.jar:arex-instrumentation-api/target/dependency/gson-2.10.1.jar:misc/extra/target/dependency/vecmath-1.5.2.jar:/ssddata1/cxubl/data/ITrans/projects/ngs-doo__castle__dsl-json/ITrans/processed_GT_only/:/ssddata1/cxubl/data/ITrans/projects/ngs-doo__castle__dsl-json/ITrans/processed_MTCITrans_only/:/ssddata1/cxubl/data/ITrans/projects/ngs-doo__castle__dsl-json/ITrans/generated_ITrans/ org.junit.runner.JUnitCore com.dslplatform.json.DateTest_zonedDateTimeBoundaryTest > /ssddata1/cxubl/data/ITrans/cache/generateTrans/gpt-35-turbo_T5-1_Shot0_Temprature0.2_4/exe_result/com.dslplatform.json.DateTest_zonedDateTimeBoundaryTest.log 2>&1
file path: 
/ssddata1/cxubl/data/ITrans/projects/ngs-doo__castle__dsl-json/ITrans/processed_MTCITrans_only/com/dslplatform/json/DateTest_zonedDateTimeBoundaryTest.java
file content: 
package com.dslplatform.json;

import com.dslplatform.json.DslJson;
import com.dslplatform.json.DslJson.*;

import com.dslplatform.json.runtime.Settings;
import org.junit.Assert;
import org.junit.Test;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.time.*;
import java.util.Arrays;
import java.util.List;

public class DateTest_zonedDateTimeBoundaryTest {

	private static final DslJson dslJson = new DslJson();

// 	@Test
// 	public void zonedDateTimeBoundary_h() throws IOException {
// 		DslJson<Object> dslJson = new DslJson<>();
// 		ZonedDateTime now = ZonedDateTime.parse(2020-01-12T12:13:14.123456789-03:30);
// 		JsonWriter jw = dslJson.newWriter(34);
// 		ZonedDateTime[] lts = new ZonedDateTime[3];
// 		Arrays.fill(lts, now);
// 		dslJson.serialize(jw, lts);
// 		Class<ZonedDateTime[]> manifest = ZonedDateTime[].class;
// 		byte[] body = {91,34,50,48,50,48,45,48,49,45,49,50,84,49,50,58,49,51,58,49,52,46,49,50,51,52,53,54,55,56,57,45,48,51,58,51,48,34,44,34,50,48,50,48,45,48,49,45,49,50,84,49,50,58,49,51,58,49,52,46,49,50,51,52,53,54,55,56,57,45,48,51,58,51,48,34,44,34,50,48,50,48,45,48,49,45,49,50,84,49,50,58,49,51,58,49,52,46,49,50,51,52,53,54,55,56,57,45,48,51,58,51,48,34,93,0,0};
// 		int size = 115;
// 		ZonedDateTime[] values = dslJson.deserialize(manifest, body, size);
// 		Assert.assertArrayEquals(lts, values);
// 	}
// 
	@Test
	public void zonedDateTimeBoundary_IT() throws IOException {
		DslJson<Object> dslJson = new DslJson<>();
		ZonedDateTime now = ZonedDateTime.parse(2020-01-12T12:13:14.123456789-03:30);
		JsonWriter jw = dslJson.newWriter(34);
		ZonedDateTime[] lts = new ZonedDateTime[3];
		Arrays.fill(lts, now);
		dslJson.serialize(jw, lts);
		List<Object> follow_up_inputs = DateTest_zonedDateTimeBoundary.inputTransformation_zonedDateTimeBoundary(jw, lts);
		Class<ZonedDateTime[]> manifest = (Class<ZonedDateTime[]>) follow_up_inputs.get(0);
		byte[] body = (byte[]) follow_up_inputs.get(1);
		int size = (int) follow_up_inputs.get(2);
		ZonedDateTime[] values = dslJson.deserialize(manifest, body, size);
		Assert.assertArrayEquals(lts, values);
	}

// 	public static List<Object> inputTransformation_zonedDateTimeBoundary(JsonWriter jw, ZonedDateTime[] lts) throws IOException {
// 		DslJson<Object> dslJson = new DslJson<>();
// 		dslJson.serialize(jw, lts);
// 
//         Class manifest = lts.getClass();
// 		byte[] body = jw.getByteBuffer();
// 		int size = jw.size();
// 
//         List<Object> follow_up_inputs = Arrays.asList(manifest, body, size);
// 		return follow_up_inputs;
// 	}
// 
	public static class NineODT {
		public OffsetDateTime at;
	}

	public static class NineOT {
		public OffsetTime at;
	}

	public static class ModelLDT {

		public LocalDateTime now;

		public LocalDateTime date;
	}

	public static class ModelODT {

		public OffsetDateTime now;

		public OffsetDateTime date;
	}

	public static class SqlDate {
		public java.util.Date date;
	}

}
