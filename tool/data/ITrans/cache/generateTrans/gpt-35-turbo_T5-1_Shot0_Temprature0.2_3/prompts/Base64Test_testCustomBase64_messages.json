[
    {
        "role": "system",
        "content": "As an expert in Java programming, you excel at understanding the intentions behind code and developing functions that convert provided inputs into desired outputs.\nIn metamorphic testing, input transformation functions are crafted to automatically generate additional test inputs (denoted as 'FOLLOW UP INPUT') from initial test inputs (denoted as 'SOURCE INPUT') based on defined metamorphic relations (MRs).\n\nGiven the program under test (denoted as 'METHOD UNDER TEST'), an MR-encoded test case (denoted as 'TEST CASE'),\nand additional pairs of 'SOURCE INPUT' and 'FOLLOW UP INPUT' (denoted as 'OTHER INPUT PAIRS'),\\\nyour task is to analyze the program under test and the provided test case, deduce the relationship between 'SOURCE INPUT' and 'FOLLOW UP INPUT' in the test case, and create a function that transforms 'SOURCE INPUT' into 'FOLLOW UP INPUT'.\n\nThe deduced relation and generated transformation function should be applicable to addtional input pairs and other potentail input pairs with similar characteristics.\nConsidering potential input pairs with boundary values as well.\n"
    },
    {
        "role": "user",
        "content": "# METHOD UNDER TEST\n```java\npublic static String encode(byte[] data) {\n    char[] tbl = Arrays.copyOf(ENCODE_TABLE_BASE, ENCODE_TABLE_BASE.length);\n    StringBuilder buffer = new StringBuilder();\n    int pad = 0;\n    for (int i = 0; i < data.length; i += 3) {\n        int b = ((data[i] & 0xFF) << 16) & 0xFFFFFF;\n        if (i + 1 < data.length) {\n            b |= (data[i + 1] & 0xFF) << 8;\n        } else {\n            pad++;\n        }\n        if (i + 2 < data.length) {\n            b |= (data[i + 2] & 0xFF);\n        } else {\n            pad++;\n        }\n        for (int j = 0; j < 4 - pad; j++) {\n            int c = (b & 0xFC0000) >> 18;\n            buffer.append(tbl[c]);\n            b <<= 6;\n        }\n    }\n    for (int j = 0; j < pad; j++) {\n        buffer.append(\"=\");\n    }\n    return buffer.toString();\n}\n\npublic static byte[] decode(String data) {\n    int[] tbl = Arrays.copyOf(DECODE_TABLE_BASE, DECODE_TABLE_BASE.length);\n    byte[] bytes = data.getBytes();\n    ByteArrayOutputStream buffer = new ByteArrayOutputStream();\n    for (int i = 0; i < bytes.length; ) {\n        int b;\n        if (tbl[bytes[i]] != -1) {\n            b = (tbl[bytes[i]] & 0xFF) << 18;\n        } else // skip unknown characters\n        {\n            i++;\n            continue;\n        }\n        int num = 0;\n        if (i + 1 < bytes.length && tbl[bytes[i + 1]] != -1) {\n            b = b | ((tbl[bytes[i + 1]] & 0xFF) << 12);\n            num++;\n        }\n        if (i + 2 < bytes.length && tbl[bytes[i + 2]] != -1) {\n            b = b | ((tbl[bytes[i + 2]] & 0xFF) << 6);\n            num++;\n        }\n        if (i + 3 < bytes.length && tbl[bytes[i + 3]] != -1) {\n            b = b | (tbl[bytes[i + 3]] & 0xFF);\n            num++;\n        }\n        while (num > 0) {\n            int c = (b & 0xFF0000) >> 16;\n            buffer.write((char) c);\n            b <<= 8;\n            num--;\n        }\n        i += 4;\n    }\n    return buffer.toByteArray();\n}\n\n```\n\n\n# TEST CASE\n```java\n@Test\npublic void testCustomBase64() {\n    byte[] testDataBytes = BASE_64_TEST_DATA.getBytes();\n    String encoded = Base64.encode(testDataBytes);\n    String input2 = \"SGVsbG8gV29ybGQ=\";\n    byte[] decoded = Base64.decode(input2);\n    Assertions.assertArrayEquals(testDataBytes, decoded);\n}\n\n```\nSOURCE INPUT: `testDataBytes`\nFOLLOW UP INPUT: `input2`\n\n\n# OTHER INPUT PAIRS \n## Input pair1:\n```java\nbyte[] testDataBytes = BASE_64_TEST_DATA.getBytes();\nString input2 = \"SGVsbG8gV29ybGQ=\";\n```\n\n## Input pair2:\n```java\nbyte[] testDataBytes = new byte[]{(byte) 0x01, (byte) 0x02, (byte) 0x03};\nString input2 = \"AQID\";\n```\n\n## Input pair3:\n```java\nbyte[] testDataBytes = new byte[]{};\nString input2 = \"\";\n```\n\n## Input pair4:\n```java\nbyte[] testDataBytes = new byte[]{0x00, 0x01, 0x02};\nString input2 = \"AAEC\";\n```\n\n## Input pair5:\n```java\nbyte[] testDataBytes = new byte[]{0x00, 0x00, 0x00, 0x00};\nString input2 = \"AAAAAA==\";\n```\n\n## Input pair6:\n```java\nbyte[] testDataBytes = new byte[]{0x01, 0x02, 0x03, 0x04, 0x05};\nString input2 = \"AQIDBAU=\";\n```\n\n## Input pair7:\n```java\nbyte[] testDataBytes = new byte[]{0x7F, (byte) 0xFF};\nString input2 = \"f/8=\";\n```\n\n\n\n# OUTPUT FORMAT\n```java\npublic class Base64Test_testCustomBase64 {\n    public static String inputTransformation_testCustomBase64(byte[] testDataBytes)  {\n        // TODO\n        String input2 = \n\t\treturn input2;\n    }\n}\n```\nYour task is to deduce the relationship between 'SOURCE INPUT' and 'FOLLOW UP INPUT' in the test case, and create a function that transforms 'SOURCE INPUT' into 'FOLLOW UP INPUT'.\nThe deduced relation and generated transformation function should be applicable to addtional input pairs and other potentail input pairs with similar characteristics.\nGenerate the transformation function by complementing the above code skeleton in 'OUTPUT FORMAT'."
    }
]