[
    {
        "MTC_item": {
            "poj_name": "datageartech__castle__datagear",
            "test_file_path": "./data/ITrans/projects/datageartech__castle__datagear/datagear-util/src/test/java/org/datagear/util/version/VersionTest.java",
            "test_simple_name": "isHigherThanTest",
            "FQS_testMethos": "org.datagear.util.version.VersionTest.isHigherThanTest()",
            "assertionSTMT": "assertFalse(a.isHigherThan(b))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/datageartech__castle__datagear/org.datagear.util.version.VersionTest.isHigherThanTest__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.datagear.util.version.Version.valueOf(java.lang.String)",
                "org.datagear.util.version.Version.valueOf(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "v1",
                    "statement": "Version a = Version.valueOf(v1);",
                    "invocation": "a = Version.valueOf(v1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "v2",
                    "statement": "Version b = Version.valueOf(v2);",
                    "invocation": "b = Version.valueOf(v2)"
                }
            ],
            "comments": "",
            "dependency": "org.datagear.util.version.Version;org.datagear.util.version.Version.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "isHigherThanTest_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 21,
            "num_of_passed_test_cases": 12,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 9,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [
                    "isHigherThanTest_h0Test1"
                ],
                [],
                [
                    "isHigherThanTest_h0Test3"
                ],
                [],
                [
                    "isHigherThanTest_h1Test1"
                ],
                [],
                [],
                [
                    "isHigherThanTest_h2Test1"
                ],
                [],
                [
                    "isHigherThanTest_h2Test3"
                ],
                [],
                [
                    "isHigherThanTest_h3Test1"
                ],
                [],
                [
                    "isHigherThanTest_h3Test3"
                ],
                [],
                [
                    "isHigherThanTest_h4Test0"
                ],
                [
                    "isHigherThanTest_h4Test1"
                ],
                [
                    "isHigherThanTest_h4Test2"
                ],
                [
                    "isHigherThanTest_h4Test3"
                ],
                [
                    "isHigherThanTest_h4Test4"
                ]
            ],
            "failure_info": {
                "org.datagear.util.version.VersionTest_isHigherThanTest_h0Test0_valid": {
                    "isHigherThanTest_h0Test0": "isHigherThanTest_h0Test0"
                },
                "org.datagear.util.version.VersionTest_isHigherThanTest_h0Test2_valid": {
                    "isHigherThanTest_h0Test2": "isHigherThanTest_h0Test2"
                },
                "org.datagear.util.version.VersionTest_isHigherThanTest_h0Test4_valid": {
                    "isHigherThanTest_h0Test4": "isHigherThanTest_h0Test4"
                },
                "org.datagear.util.version.VersionTest_isHigherThanTest_h1Test2_valid": {
                    "isHigherThanTest_h1Test2": "isHigherThanTest_h1Test2"
                },
                "org.datagear.util.version.VersionTest_isHigherThanTest_h1Test4_valid": {
                    "isHigherThanTest_h1Test4": "isHigherThanTest_h1Test4"
                },
                "org.datagear.util.version.VersionTest_isHigherThanTest_h2Test2_valid": {
                    "isHigherThanTest_h2Test2": "isHigherThanTest_h2Test2"
                },
                "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test0_valid": {
                    "isHigherThanTest_h3Test0": "isHigherThanTest_h3Test0"
                },
                "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test2_valid": {
                    "isHigherThanTest_h3Test2": "isHigherThanTest_h3Test2"
                },
                "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test4_valid": {
                    "isHigherThanTest_h3Test4": "isHigherThanTest_h3Test4"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 23,
            "num_of_passed_test_cases": 9,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 14,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [
                    "isHigherThanTest_h0Test1"
                ],
                [],
                [],
                [],
                [
                    "isHigherThanTest_h3Test0"
                ],
                [
                    "isHigherThanTest_h3Test1"
                ],
                [
                    "isHigherThanTest_h3Test2"
                ],
                [],
                [],
                [],
                [],
                [
                    "isHigherThanTest_h5Test1"
                ],
                [],
                [
                    "isHigherThanTest_h6Test0"
                ],
                [
                    "isHigherThanTest_h6Test4"
                ],
                [],
                [
                    "isHigherThanTest_h7Test3"
                ],
                [],
                [],
                [],
                [],
                [
                    "isHigherThanTest_h9Test0"
                ]
            ],
            "failure_info": {
                "org.datagear.util.version.VersionTest_isHigherThanTest_h0Test0_valid": {
                    "isHigherThanTest_h0Test0": "isHigherThanTest_h0Test0"
                },
                "org.datagear.util.version.VersionTest_isHigherThanTest_h0Test2_valid": {
                    "isHigherThanTest_h0Test2": "isHigherThanTest_h0Test2"
                },
                "org.datagear.util.version.VersionTest_isHigherThanTest_h0Test3_valid": {
                    "isHigherThanTest_h0Test3": "isHigherThanTest_h0Test3"
                },
                "org.datagear.util.version.VersionTest_isHigherThanTest_h2Test3_valid": {
                    "isHigherThanTest_h2Test3": "isHigherThanTest_h2Test3"
                },
                "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test4_valid": {
                    "isHigherThanTest_h3Test4": "isHigherThanTest_h3Test4"
                },
                "org.datagear.util.version.VersionTest_isHigherThanTest_h4Test1_valid": {
                    "isHigherThanTest_h4Test1": "isHigherThanTest_h4Test1"
                },
                "org.datagear.util.version.VersionTest_isHigherThanTest_h4Test2_valid": {
                    "isHigherThanTest_h4Test2": "isHigherThanTest_h4Test2"
                },
                "org.datagear.util.version.VersionTest_isHigherThanTest_h5Test0_valid": {
                    "isHigherThanTest_h5Test0": "isHigherThanTest_h5Test0"
                },
                "org.datagear.util.version.VersionTest_isHigherThanTest_h5Test2_valid": {
                    "isHigherThanTest_h5Test2": "isHigherThanTest_h5Test2"
                },
                "org.datagear.util.version.VersionTest_isHigherThanTest_h7Test1_valid": {
                    "isHigherThanTest_h7Test1": "isHigherThanTest_h7Test1"
                },
                "org.datagear.util.version.VersionTest_isHigherThanTest_h7Test4_valid": {
                    "isHigherThanTest_h7Test4": "isHigherThanTest_h7Test4"
                },
                "org.datagear.util.version.VersionTest_isHigherThanTest_h7Test5_valid": {
                    "isHigherThanTest_h7Test5": "isHigherThanTest_h7Test5"
                },
                "org.datagear.util.version.VersionTest_isHigherThanTest_h7Test6_valid": {
                    "isHigherThanTest_h7Test6": "isHigherThanTest_h7Test6"
                },
                "org.datagear.util.version.VersionTest_isHigherThanTest_h7Test7_valid": {
                    "isHigherThanTest_h7Test7": "isHigherThanTest_h7Test7"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "datageartech__castle__datagear",
            "test_file_path": "./data/ITrans/projects/datageartech__castle__datagear/datagear-util/src/test/java/org/datagear/util/version/VersionTest.java",
            "test_simple_name": "isEqualTest",
            "FQS_testMethos": "org.datagear.util.version.VersionTest.isEqualTest()",
            "assertionSTMT": "assertFalse(a.isEqual(b))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/datageartech__castle__datagear/org.datagear.util.version.VersionTest.isEqualTest__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.datagear.util.version.Version.valueOf(java.lang.String)",
                "org.datagear.util.version.Version.valueOf(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "v1",
                    "statement": "Version a = Version.valueOf(v1);",
                    "invocation": "a = Version.valueOf(v1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "v2",
                    "statement": "Version b = Version.valueOf(v2);",
                    "invocation": "b = Version.valueOf(v2)"
                }
            ],
            "comments": "",
            "dependency": "org.datagear.util.version.Version;org.datagear.util.version.Version.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "isEqualTest_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "isEqualTest_IT": "isEqualTest_IT"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 13,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 13,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.datagear.util.version.VersionTest_isEqualTest_h0Test0_valid": {
                    "isEqualTest_h0Test0": "isEqualTest_h0Test0"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h0Test1_valid": {
                    "isEqualTest_h0Test1": "isEqualTest_h0Test1"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h0Test2_valid": {
                    "isEqualTest_h0Test2": "isEqualTest_h0Test2"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h0Test3_valid": {
                    "isEqualTest_h0Test3": "isEqualTest_h0Test3"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h0Test5_valid": {
                    "isEqualTest_h0Test5": "isEqualTest_h0Test5"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h1Test0_valid": {
                    "isEqualTest_h1Test0": "isEqualTest_h1Test0"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h1Test1_valid": {
                    "isEqualTest_h1Test1": "isEqualTest_h1Test1"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h1Test2_valid": {
                    "isEqualTest_h1Test2": "isEqualTest_h1Test2"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h1Test3_valid": {
                    "isEqualTest_h1Test3": "isEqualTest_h1Test3"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h1Test4_valid": {
                    "isEqualTest_h1Test4": "isEqualTest_h1Test4"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h2Test0_valid": {
                    "isEqualTest_h2Test0": "isEqualTest_h2Test0"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h2Test1_valid": {
                    "isEqualTest_h2Test1": "isEqualTest_h2Test1"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h2Test3_valid": {
                    "isEqualTest_h2Test3": "isEqualTest_h2Test3"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 13,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 13,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.datagear.util.version.VersionTest_isEqualTest_h0Test0_valid": {
                    "isEqualTest_h0Test0": "isEqualTest_h0Test0"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h0Test1_valid": {
                    "isEqualTest_h0Test1": "isEqualTest_h0Test1"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h0Test2_valid": {
                    "isEqualTest_h0Test2": "isEqualTest_h0Test2"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h0Test3_valid": {
                    "isEqualTest_h0Test3": "isEqualTest_h0Test3"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h0Test4_valid": {
                    "isEqualTest_h0Test4": "isEqualTest_h0Test4"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h2Test0_valid": {
                    "isEqualTest_h2Test0": "isEqualTest_h2Test0"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h2Test1_valid": {
                    "isEqualTest_h2Test1": "isEqualTest_h2Test1"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h2Test2_valid": {
                    "isEqualTest_h2Test2": "isEqualTest_h2Test2"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h2Test3_valid": {
                    "isEqualTest_h2Test3": "isEqualTest_h2Test3"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h2Test4_valid": {
                    "isEqualTest_h2Test4": "isEqualTest_h2Test4"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h7Test0_valid": {
                    "isEqualTest_h7Test0": "isEqualTest_h7Test0"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h7Test3_valid": {
                    "isEqualTest_h7Test3": "isEqualTest_h7Test3"
                },
                "org.datagear.util.version.VersionTest_isEqualTest_h8Test1_valid": {
                    "isEqualTest_h8Test1": "isEqualTest_h8Test1"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "ngs-doo__castle__dsl-json",
            "test_file_path": "./data/ITrans/projects/ngs-doo__castle__dsl-json/library/src/test/java/com/dslplatform/json/DateTest.java",
            "test_simple_name": "localTimeBoundary",
            "FQS_testMethos": "com.dslplatform.json.DateTest.localTimeBoundary()",
            "assertionSTMT": "Assert.assertArrayEquals(lts, values)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ngs-doo__castle__dsl-json/com.dslplatform.json.DateTest.localTimeBoundary__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.dslplatform.json.DslJson.serialize(com.dslplatform.json.JsonWriter, T[])",
                "com.dslplatform.json.DslJson.deserialize(java.lang.Class<TResult>, byte[], int)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "JsonWriter",
                    "expression": "jw",
                    "statement": "dslJson.serialize(jw, lts);",
                    "invocation": "dslJson.serialize(jw, lts)"
                },
                {
                    "type": "LocalTime[]",
                    "expression": "lts",
                    "statement": "dslJson.serialize(jw, lts);",
                    "invocation": "dslJson.serialize(jw, lts)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Class<LocalTime[]",
                    "expression": "manifest",
                    "statement": "LocalTime[] values = dslJson.deserialize(manifest, body, size);",
                    "invocation": "values = dslJson.deserialize(manifest, body, size)"
                },
                {
                    "type": "byte[]",
                    "expression": "body",
                    "statement": "LocalTime[] values = dslJson.deserialize(manifest, body, size);",
                    "invocation": "values = dslJson.deserialize(manifest, body, size)"
                },
                {
                    "type": "int",
                    "expression": "size",
                    "statement": "LocalTime[] values = dslJson.deserialize(manifest, body, size);",
                    "invocation": "values = dslJson.deserialize(manifest, body, size)"
                }
            ],
            "comments": "",
            "dependency": "com.dslplatform.json.DslJson;com.dslplatform.json.DslJson.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "localTimeBoundary_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "localTimeBoundary_IT": "localTimeBoundary_IT"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": null,
        "LLMI_testing_generatedIT_result_evaluation": null,
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "dromara__castle__hutool",
            "test_file_path": "./data/ITrans/projects/dromara__castle__hutool/hutool-json/src/test/java/cn/hutool/json/IssueI7GPGXTest.java",
            "test_simple_name": "toBeanTest",
            "FQS_testMethos": "cn.hutool.json.IssueI7GPGXTest.toBeanTest()",
            "assertionSTMT": "Assert.assertEquals(hutoolPair, pair)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/dromara__castle__hutool/cn.hutool.json.IssueI7GPGXTest.toBeanTest__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "cn.hutool.json.JSONUtil.toJsonStr(java.lang.Object)",
                "cn.hutool.json.JSONUtil.toBean(java.lang.String, cn.hutool.core.lang.TypeReference<T>, boolean)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Pair<String, Boolean>",
                    "expression": "hutoolPair",
                    "statement": "String json = JSONUtil.toJsonStr(hutoolPair);",
                    "invocation": "json = JSONUtil.toJsonStr(hutoolPair)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "jsonString",
                    "statement": "final Pair<String, Boolean> pair = JSONUtil.toBean(jsonString ,typeReference, ignoreError);",
                    "invocation": "pair = JSONUtil.toBean(jsonString ,typeReference, ignoreError)"
                },
                {
                    "type": "TypeReference<Pair<String, Boolean>>",
                    "expression": "typeReference",
                    "statement": "final Pair<String, Boolean> pair = JSONUtil.toBean(jsonString ,typeReference, ignoreError);",
                    "invocation": "pair = JSONUtil.toBean(jsonString ,typeReference, ignoreError)"
                },
                {
                    "type": "boolean",
                    "expression": "ignoreError",
                    "statement": "final Pair<String, Boolean> pair = JSONUtil.toBean(jsonString ,typeReference, ignoreError);",
                    "invocation": "pair = JSONUtil.toBean(jsonString ,typeReference, ignoreError)"
                }
            ],
            "comments": "",
            "dependency": "cn.hutool.json.JSONUtil;cn.hutool.json.JSONUtil.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "toBeanTest_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 8,
            "num_of_passed_test_cases": 8,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "toBeanTest_h0Test0"
                ],
                [
                    "toBeanTest_h0Test1"
                ],
                [
                    "toBeanTest_h0Test4"
                ],
                [
                    "toBeanTest_h2Test0"
                ],
                [
                    "toBeanTest_h2Test1"
                ],
                [
                    "toBeanTest_h2Test4"
                ],
                [
                    "toBeanTest_h3Test2"
                ],
                [
                    "toBeanTest_h3Test3"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 22,
            "num_of_passed_test_cases": 21,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "toBeanTest_h0Test0"
                ],
                [
                    "toBeanTest_h0Test1"
                ],
                [],
                [
                    "toBeanTest_h2Test0"
                ],
                [
                    "toBeanTest_h2Test1"
                ],
                [
                    "toBeanTest_h2Test2"
                ],
                [
                    "toBeanTest_h5Test1"
                ],
                [
                    "toBeanTest_h5Test3"
                ],
                [
                    "toBeanTest_h5Test5"
                ],
                [
                    "toBeanTest_h6Test1"
                ],
                [
                    "toBeanTest_h6Test3"
                ],
                [
                    "toBeanTest_h6Test4"
                ],
                [
                    "toBeanTest_h6Test5"
                ],
                [
                    "toBeanTest_h6Test6"
                ],
                [
                    "toBeanTest_h6Test7"
                ],
                [
                    "toBeanTest_h6Test9"
                ],
                [
                    "toBeanTest_h7Test5"
                ],
                [
                    "toBeanTest_h8Test8"
                ],
                [
                    "toBeanTest_h8Test9"
                ],
                [
                    "toBeanTest_h9Test1"
                ],
                [
                    "toBeanTest_h9Test5"
                ],
                [
                    "toBeanTest_h9Test7"
                ]
            ],
            "failure_info": {
                "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h0Test3_valid": {
                    "toBeanTest_h0Test3": "toBeanTest_h0Test3"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "bootique__castle__bootique",
            "test_file_path": "./data/ITrans/projects/bootique__castle__bootique/bootique/src/test/java/io/bootique/di/KeyTest.java",
            "test_simple_name": "equals",
            "FQS_testMethos": "io.bootique.di.KeyTest.equals()",
            "assertionSTMT": "assertTrue(key1.equals(key2))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/bootique__castle__bootique/io.bootique.di.KeyTest.equals__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "io.bootique.di.Key.get(java.lang.Class<T>)",
                "io.bootique.di.Key.get(java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Class<?>",
                    "expression": "type1",
                    "statement": "Key<?> key1 = Key.get(type1);",
                    "invocation": "key1 = Key.get(type1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Class<?>",
                    "expression": "type2",
                    "statement": "Key<?> key2 = Key.get(type2);",
                    "invocation": "key2 = Key.get(type2)"
                }
            ],
            "comments": "",
            "dependency": "io.bootique.di.Key;io.bootique.di.Key.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "equals_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 6,
            "num_of_passed_test_cases": 6,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -7,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "equals_h0Test1"
                ],
                [
                    "equals_h0Test2"
                ],
                [
                    "equals_h0Test3"
                ],
                [
                    "equals_h0Test4"
                ],
                [
                    "equals_h0Test5"
                ],
                [
                    "equals_h1Test3"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 5,
            "num_of_passed_test_cases": 5,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -6,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "equals_h0Test0"
                ],
                [
                    "equals_h0Test2"
                ],
                [
                    "equals_h0Test6"
                ],
                [
                    "equals_h0Test8"
                ],
                [
                    "equals_h2Test4"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "ngs-doo__castle__dsl-json",
            "test_file_path": "./data/ITrans/projects/ngs-doo__castle__dsl-json/library/src/test/java/com/dslplatform/json/DateTest.java",
            "test_simple_name": "zonedDateTimeBoundary",
            "FQS_testMethos": "com.dslplatform.json.DateTest.zonedDateTimeBoundary()",
            "assertionSTMT": "Assert.assertArrayEquals(lts, values)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ngs-doo__castle__dsl-json/com.dslplatform.json.DateTest.zonedDateTimeBoundary__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.dslplatform.json.DslJson.serialize(com.dslplatform.json.JsonWriter, T[])",
                "com.dslplatform.json.DslJson.deserialize(java.lang.Class<TResult>, byte[], int)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "JsonWriter",
                    "expression": "jw",
                    "statement": "dslJson.serialize(jw, lts);",
                    "invocation": "dslJson.serialize(jw, lts)"
                },
                {
                    "type": "ZonedDateTime[]",
                    "expression": "lts",
                    "statement": "dslJson.serialize(jw, lts);",
                    "invocation": "dslJson.serialize(jw, lts)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Class<ZonedDateTime[]>",
                    "expression": "manifest",
                    "statement": "ZonedDateTime[] values = dslJson.deserialize(manifest, body, size);",
                    "invocation": "values = dslJson.deserialize(manifest, body, size)"
                },
                {
                    "type": "byte[]",
                    "expression": "body",
                    "statement": "ZonedDateTime[] values = dslJson.deserialize(manifest, body, size);",
                    "invocation": "values = dslJson.deserialize(manifest, body, size)"
                },
                {
                    "type": "int",
                    "expression": "size",
                    "statement": "ZonedDateTime[] values = dslJson.deserialize(manifest, body, size);",
                    "invocation": "values = dslJson.deserialize(manifest, body, size)"
                }
            ],
            "comments": "",
            "dependency": "com.dslplatform.json.DslJson;com.dslplatform.json.DslJson.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "zonedDateTimeBoundary_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "zonedDateTimeBoundary_IT": "zonedDateTimeBoundary_IT"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 10,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 10,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h1Test1_valid": {
                    "zonedDateTimeBoundary_h1Test1": "zonedDateTimeBoundary_h1Test1"
                },
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h1Test2_valid": {
                    "zonedDateTimeBoundary_h1Test2": "zonedDateTimeBoundary_h1Test2"
                },
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h1Test3_valid": {
                    "zonedDateTimeBoundary_h1Test3": "zonedDateTimeBoundary_h1Test3"
                },
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h2Test1_valid": {
                    "zonedDateTimeBoundary_h2Test1": "zonedDateTimeBoundary_h2Test1"
                },
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h2Test2_valid": {
                    "zonedDateTimeBoundary_h2Test2": "zonedDateTimeBoundary_h2Test2"
                },
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h2Test3_valid": {
                    "zonedDateTimeBoundary_h2Test3": "zonedDateTimeBoundary_h2Test3"
                },
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h4Test1_valid": {
                    "zonedDateTimeBoundary_h4Test1": "zonedDateTimeBoundary_h4Test1"
                },
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h4Test2_valid": {
                    "zonedDateTimeBoundary_h4Test2": "zonedDateTimeBoundary_h4Test2"
                },
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h4Test3_valid": {
                    "zonedDateTimeBoundary_h4Test3": "zonedDateTimeBoundary_h4Test3"
                },
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h4Test4_valid": {
                    "zonedDateTimeBoundary_h4Test4": "zonedDateTimeBoundary_h4Test4"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 12,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 12,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h0Test0_valid": {
                    "zonedDateTimeBoundary_h0Test0": "zonedDateTimeBoundary_h0Test0"
                },
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h0Test1_valid": {
                    "zonedDateTimeBoundary_h0Test1": "zonedDateTimeBoundary_h0Test1"
                },
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h0Test2_valid": {
                    "zonedDateTimeBoundary_h0Test2": "zonedDateTimeBoundary_h0Test2"
                },
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h3Test1_valid": {
                    "zonedDateTimeBoundary_h3Test1": "zonedDateTimeBoundary_h3Test1"
                },
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h3Test2_valid": {
                    "zonedDateTimeBoundary_h3Test2": "zonedDateTimeBoundary_h3Test2"
                },
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h8Test0_valid": {
                    "zonedDateTimeBoundary_h8Test0": "zonedDateTimeBoundary_h8Test0"
                },
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h8Test4_valid": {
                    "zonedDateTimeBoundary_h8Test4": "zonedDateTimeBoundary_h8Test4"
                },
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h8Test6_valid": {
                    "zonedDateTimeBoundary_h8Test6": "zonedDateTimeBoundary_h8Test6"
                },
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h8Test8_valid": {
                    "zonedDateTimeBoundary_h8Test8": "zonedDateTimeBoundary_h8Test8"
                },
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h9Test4_valid": {
                    "zonedDateTimeBoundary_h9Test4": "zonedDateTimeBoundary_h9Test4"
                },
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h9Test6_valid": {
                    "zonedDateTimeBoundary_h9Test6": "zonedDateTimeBoundary_h9Test6"
                },
                "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h9Test8_valid": {
                    "zonedDateTimeBoundary_h9Test8": "zonedDateTimeBoundary_h9Test8"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "quartz-scheduler__castle__quartz",
            "test_file_path": "./data/ITrans/projects/quartz-scheduler__castle__quartz/quartz/src/test/java/org/quartz/impl/RemoteMBeanSchedulerTest.java",
            "test_simple_name": "testJobOperations",
            "FQS_testMethos": "org.quartz.impl.RemoteMBeanSchedulerTest.testJobOperations()",
            "assertionSTMT": "assertThat(remoteScheduler.getJobDetail(job22), equalTo(job2Detail))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/quartz-scheduler__castle__quartz/org.quartz.impl.RemoteMBeanSchedulerTest.testJobOperations__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.quartz.impl.RemoteMBeanScheduler.addJob(org.quartz.JobDetail, boolean)",
                "org.quartz.impl.RemoteMBeanScheduler.getJobDetail(org.quartz.JobKey)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "JobDetail",
                    "expression": "job2Detail",
                    "statement": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().build();",
                    "invocation": "job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().build()"
                }
            ],
            "followUpInput": [
                {
                    "type": "JobKey",
                    "expression": "job22",
                    "statement": "assertThat(remoteScheduler.getJobDetail(job22), equalTo(job2Detail));",
                    "invocation": "remoteScheduler.getJobDetail(job22)"
                }
            ],
            "comments": "",
            "dependency": "org.quartz.impl.RemoteMBeanScheduler;org.quartz.impl.RemoteMBeanScheduler.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testJobOperations_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 0,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -12,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h0Test1_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h0Test2_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h0Test3_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h0Test4_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h1Test2_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h1Test3_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h1Test4_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test1_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test2_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test3_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test4_valid": {}
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 0,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -15,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h0Test0_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test2_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h7Test1_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h7Test4_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h7Test5_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h8Test0_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h8Test1_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h8Test3_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h8Test4_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h8Test5_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h8Test6_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h8Test7_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h8Test8_valid": {},
                "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h8Test9_valid": {}
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "jhy__castle__jsoup",
            "test_file_path": "./data/ITrans/projects/jhy__castle__jsoup/src/test/java/org/jsoup/parser/StreamParserTest.java",
            "test_simple_name": "select",
            "FQS_testMethos": "org.jsoup.parser.StreamParserTest.select()",
            "assertionSTMT": "assertSame(title2, title)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/jhy__castle__jsoup/org.jsoup.parser.StreamParserTest.select__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.jsoup.parser.StreamParser.expectFirst(java.lang.String)",
                "org.jsoup.parser.StreamParser.selectFirst(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "StreamParser",
                    "expression": "parser",
                    "statement": "Element title = parser.expectFirst(queryTitle);",
                    "invocation": "title = parser.selectFirst(queryTitle)"
                },
                {
                    "type": "String",
                    "expression": "queryTitle",
                    "statement": "Element title = parser.expectFirst(queryTitle);",
                    "invocation": "title = parser.selectFirst(queryTitle)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "queryTitle2",
                    "statement": "Element title2 = parser.selectFirst(queryTitle2);",
                    "invocation": "title2 = parser.selectFirst(queryTitle2)"
                }
            ],
            "comments": "",
            "dependency": "org.jsoup.parser.StreamParser;org.jsoup.parser.StreamParser.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "select_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 5,
            "num_of_passed_test_cases": 5,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -6,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "select_h0Test0"
                ],
                [
                    "select_h0Test2"
                ],
                [
                    "select_h0Test3"
                ],
                [
                    "select_h1Test3"
                ],
                [
                    "select_h3Test2"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 6,
            "num_of_passed_test_cases": 4,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 2,
            "num_of_reach_assertion_test_cases": -7,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "select_h0Test0"
                ],
                [
                    "select_h0Test4"
                ],
                [
                    "select_h5Test2"
                ],
                [],
                [
                    "select_h5Test4"
                ],
                []
            ],
            "failure_info": {
                "org.jsoup.parser.StreamParserTest_select_h5Test3_valid": {
                    "select_h5Test3": "org.jsoup.helper.ValidationException: No elements matched the query 'p#3' in the document."
                },
                "org.jsoup.parser.StreamParserTest_select_h7Test4_valid": {
                    "select_h7Test4": "org.jsoup.helper.ValidationException: No elements matched the query 'nonexistent' in the document."
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "apache__castle__rocketmq",
            "test_file_path": "./data/ITrans/projects/apache__castle__rocketmq/tieredstore/src/test/java/org/apache/rocketmq/tieredstore/common/InFlightRequestFutureTest.java",
            "test_simple_name": "testInFlightRequestKey",
            "FQS_testMethos": "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest.testInFlightRequestKey()",
            "assertionSTMT": "Assert.assertEquals(requestKey1.hashCode(), requestKey2.hashCode())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__castle__rocketmq/org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest.testInFlightRequestKey__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.apache.rocketmq.tieredstore.common.InFlightRequestKey.hashCode()",
                "org.apache.rocketmq.tieredstore.common.InFlightRequestKey.hashCode()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "InFlightRequestKey",
                    "expression": "requestKey1",
                    "statement": "Assert.assertEquals(requestKey1.hashCode(), requestKey2.hashCode())",
                    "invocation": "requestKey1.hashCode()"
                }
            ],
            "followUpInput": [
                {
                    "type": "InFlightRequestKey",
                    "expression": "requestKey2",
                    "statement": "Assert.assertEquals(requestKey1.hashCode(), requestKey2.hashCode())",
                    "invocation": "requestKey2.hashCode()"
                }
            ],
            "comments": "",
            "dependency": "org.apache.rocketmq.tieredstore.common.InFlightRequestKey;org.apache.rocketmq.tieredstore.common.InFlightRequestKey.*;org.apache.rocketmq.tieredstore.common.InFlightRequestFuture;org.apache.rocketmq.tieredstore.common.InFlightRequestFuture.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "testInFlightRequestKey_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "testInFlightRequestKey_IT": "java.lang.NoClassDefFoundError, line:None"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 15,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 15,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h0Test0_valid": {
                    "testInFlightRequestKey_h0Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h0Test1_valid": {
                    "testInFlightRequestKey_h0Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h0Test2_valid": {
                    "testInFlightRequestKey_h0Test2": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h0Test3_valid": {
                    "testInFlightRequestKey_h0Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h0Test4_valid": {
                    "testInFlightRequestKey_h0Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h1Test0_valid": {
                    "testInFlightRequestKey_h1Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h1Test3_valid": {
                    "testInFlightRequestKey_h1Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h1Test4_valid": {
                    "testInFlightRequestKey_h1Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h2Test0_valid": {
                    "testInFlightRequestKey_h2Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h2Test1_valid": {
                    "testInFlightRequestKey_h2Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test1_valid": {
                    "testInFlightRequestKey_h3Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test3_valid": {
                    "testInFlightRequestKey_h3Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test4_valid": {
                    "testInFlightRequestKey_h3Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h4Test3_valid": {
                    "testInFlightRequestKey_h4Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h4Test4_valid": {
                    "testInFlightRequestKey_h4Test4": "java.lang.NoClassDefFoundError, line:None"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 12,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 12,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h0Test0_valid": {
                    "testInFlightRequestKey_h0Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h0Test1_valid": {
                    "testInFlightRequestKey_h0Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h0Test2_valid": {
                    "testInFlightRequestKey_h0Test2": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h0Test3_valid": {
                    "testInFlightRequestKey_h0Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h0Test4_valid": {
                    "testInFlightRequestKey_h0Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test0_valid": {
                    "testInFlightRequestKey_h3Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test1_valid": {
                    "testInFlightRequestKey_h3Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test2_valid": {
                    "testInFlightRequestKey_h3Test2": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h5Test0_valid": {
                    "testInFlightRequestKey_h5Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h5Test1_valid": {
                    "testInFlightRequestKey_h5Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h5Test3_valid": {
                    "testInFlightRequestKey_h5Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h6Test3_valid": {
                    "testInFlightRequestKey_h6Test3": "java.lang.NoClassDefFoundError, line:None"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__castle__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__castle__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/collections/JSONArrayTest.java",
            "test_simple_name": "test1",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest.test1()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__castle__fastjson2/com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest.test1__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "JSONArray",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "JSONArray v02 = JSON.parseObject(str2, clazz);",
                    "invocation": "v02 = JSON.parseObject(str2, clazz)"
                },
                {
                    "type": "Class<JSONArray>",
                    "expression": "clazz",
                    "statement": "JSONArray v02 = JSON.parseObject(str2, clazz);",
                    "invocation": "v02 = JSON.parseObject(str2, clazz)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test1_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 10,
            "num_of_passed_test_cases": 10,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -11,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test1_h0Test0"
                ],
                [
                    "test1_h2Test0"
                ],
                [
                    "test1_h2Test1"
                ],
                [
                    "test1_h2Test2"
                ],
                [
                    "test1_h2Test3"
                ],
                [
                    "test1_h2Test4"
                ],
                [
                    "test1_h4Test1"
                ],
                [
                    "test1_h4Test2"
                ],
                [
                    "test1_h4Test3"
                ],
                [
                    "test1_h4Test5"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 13,
            "num_of_passed_test_cases": 11,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 2,
            "num_of_reach_assertion_test_cases": -14,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test1_h0Test1"
                ],
                [
                    "test1_h0Test2"
                ],
                [
                    "test1_h0Test3"
                ],
                [
                    "test1_h0Test5"
                ],
                [
                    "test1_h2Test0"
                ],
                [
                    "test1_h3Test1"
                ],
                [
                    "test1_h4Test2"
                ],
                [
                    "test1_h4Test4"
                ],
                [
                    "test1_h6Test1"
                ],
                [
                    "test1_h6Test2"
                ],
                [
                    "test1_h6Test4"
                ],
                [],
                []
            ],
            "failure_info": {
                "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h8Test2_valid": {
                    "test1_h8Test2": "java.lang.NoClassDefFoundError: com/alibaba/fastjson2/internal/processor/collections/JSONArrayTest_test1"
                },
                "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h8Test3_valid": {
                    "test1_h8Test3": "java.lang.NoClassDefFoundError: com/alibaba/fastjson2/internal/processor/collections/JSONArrayTest_test1"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "apache__castle__incubator-paimon",
            "test_file_path": "./data/ITrans/projects/apache__castle__incubator-paimon/paimon-spark/paimon-spark-common/src/test/java/org/apache/paimon/spark/ConvertBinaryUtilTest.java",
            "test_simple_name": "testConvertToLong",
            "FQS_testMethos": "org.apache.paimon.spark.ConvertBinaryUtilTest.testConvertToLong()",
            "assertionSTMT": "Assert.assertEquals(convertStringValue, convertBytesValue)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__castle__incubator-paimon/org.apache.paimon.spark.ConvertBinaryUtilTest.testConvertToLong__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.apache.paimon.spark.utils.ConvertBinaryUtil.convertStringToLong(java.lang.String)",
                "org.apache.paimon.spark.utils.ConvertBinaryUtil.convertBytesToLong(byte[])"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "randomString",
                    "statement": "long convertStringValue = ConvertBinaryUtil.convertStringToLong(randomString);",
                    "invocation": "convertStringValue = ConvertBinaryUtil.convertStringToLong(randomString)"
                }
            ],
            "followUpInput": [
                {
                    "type": "byte[]",
                    "expression": "randomStringBytes",
                    "statement": "long convertBytesValue = ConvertBinaryUtil.convertBytesToLong(randomStringBytes);",
                    "invocation": "convertBytesValue = ConvertBinaryUtil.convertBytesToLong(randomStringBytes)"
                }
            ],
            "comments": "",
            "dependency": "org.apache.paimon.spark.utils.ConvertBinaryUtil;org.apache.paimon.spark.utils.ConvertBinaryUtil.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testConvertToLong_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 11,
            "num_of_passed_test_cases": 11,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -12,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testConvertToLong_h0Test0"
                ],
                [
                    "testConvertToLong_h0Test1"
                ],
                [
                    "testConvertToLong_h0Test2"
                ],
                [
                    "testConvertToLong_h0Test3"
                ],
                [
                    "testConvertToLong_h1Test4"
                ],
                [
                    "testConvertToLong_h2Test2"
                ],
                [
                    "testConvertToLong_h2Test3"
                ],
                [
                    "testConvertToLong_h2Test4"
                ],
                [
                    "testConvertToLong_h3Test1"
                ],
                [
                    "testConvertToLong_h3Test3"
                ],
                [
                    "testConvertToLong_h4Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 29,
            "num_of_passed_test_cases": 29,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -30,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testConvertToLong_h0Test0"
                ],
                [
                    "testConvertToLong_h0Test1"
                ],
                [
                    "testConvertToLong_h0Test2"
                ],
                [
                    "testConvertToLong_h0Test3"
                ],
                [
                    "testConvertToLong_h0Test4"
                ],
                [
                    "testConvertToLong_h2Test2"
                ],
                [
                    "testConvertToLong_h2Test4"
                ],
                [
                    "testConvertToLong_h4Test3"
                ],
                [
                    "testConvertToLong_h4Test4"
                ],
                [
                    "testConvertToLong_h5Test1"
                ],
                [
                    "testConvertToLong_h5Test2"
                ],
                [
                    "testConvertToLong_h5Test3"
                ],
                [
                    "testConvertToLong_h5Test4"
                ],
                [
                    "testConvertToLong_h5Test5"
                ],
                [
                    "testConvertToLong_h5Test6"
                ],
                [
                    "testConvertToLong_h5Test7"
                ],
                [
                    "testConvertToLong_h5Test8"
                ],
                [
                    "testConvertToLong_h5Test9"
                ],
                [
                    "testConvertToLong_h7Test3"
                ],
                [
                    "testConvertToLong_h7Test4"
                ],
                [
                    "testConvertToLong_h7Test5"
                ],
                [
                    "testConvertToLong_h8Test1"
                ],
                [
                    "testConvertToLong_h8Test2"
                ],
                [
                    "testConvertToLong_h8Test3"
                ],
                [
                    "testConvertToLong_h8Test4"
                ],
                [
                    "testConvertToLong_h8Test5"
                ],
                [
                    "testConvertToLong_h8Test7"
                ],
                [
                    "testConvertToLong_h8Test8"
                ],
                [
                    "testConvertToLong_h8Test9"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "dromara__castle__hutool",
            "test_file_path": "./data/ITrans/projects/dromara__castle__hutool/hutool-json/src/test/java/cn/hutool/json/IssueI6SZYBTest.java",
            "test_simple_name": "pairTest",
            "FQS_testMethos": "cn.hutool.json.IssueI6SZYBTest.pairTest()",
            "assertionSTMT": "Assert.assertEquals(pair, bean)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/dromara__castle__hutool/cn.hutool.json.IssueI6SZYBTest.pairTest__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "cn.hutool.json.JSONUtil.toJsonStr(java.lang.Object)",
                "cn.hutool.json.JSONUtil.toBean(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Pair<Integer, Integer>",
                    "expression": "pair",
                    "statement": "String json = JSONUtil.toJsonStr(pair);",
                    "invocation": "json = JSONUtil.toJsonStr(pair)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "jsonString",
                    "statement": "final Pair bean = JSONUtil.toBean(jsonString, beanClass);",
                    "invocation": "bean = JSONUtil.toBean(jsonString, beanClass)"
                },
                {
                    "type": "Class<Pair>",
                    "expression": "beanClass",
                    "statement": "final Pair bean = JSONUtil.toBean(jsonString, beanClass);",
                    "invocation": "bean = JSONUtil.toBean(jsonString, beanClass)"
                }
            ],
            "comments": "",
            "dependency": "cn.hutool.json.JSONUtil;cn.hutool.json.JSONUtil.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "pairTest_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "pairTest_IT": "pairTest_IT"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 9,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 9,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "cn.hutool.json.IssueI6SZYBTest_pairTest_h0Test0_valid": {
                    "pairTest_h0Test0": "pairTest_h0Test0"
                },
                "cn.hutool.json.IssueI6SZYBTest_pairTest_h0Test1_valid": {
                    "pairTest_h0Test1": "pairTest_h0Test1"
                },
                "cn.hutool.json.IssueI6SZYBTest_pairTest_h0Test2_valid": {
                    "pairTest_h0Test2": "pairTest_h0Test2"
                },
                "cn.hutool.json.IssueI6SZYBTest_pairTest_h0Test3_valid": {
                    "pairTest_h0Test3": "pairTest_h0Test3"
                },
                "cn.hutool.json.IssueI6SZYBTest_pairTest_h0Test4_valid": {
                    "pairTest_h0Test4": "pairTest_h0Test4"
                },
                "cn.hutool.json.IssueI6SZYBTest_pairTest_h1Test4_valid": {
                    "pairTest_h1Test4": "pairTest_h1Test4"
                },
                "cn.hutool.json.IssueI6SZYBTest_pairTest_h3Test2_valid": {
                    "pairTest_h3Test2": "pairTest_h3Test2"
                },
                "cn.hutool.json.IssueI6SZYBTest_pairTest_h3Test3_valid": {
                    "pairTest_h3Test3": "pairTest_h3Test3"
                },
                "cn.hutool.json.IssueI6SZYBTest_pairTest_h3Test4_valid": {
                    "pairTest_h3Test4": "pairTest_h3Test4"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 6,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 6,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "cn.hutool.json.IssueI6SZYBTest_pairTest_h0Test0_valid": {
                    "pairTest_h0Test0": "pairTest_h0Test0"
                },
                "cn.hutool.json.IssueI6SZYBTest_pairTest_h0Test1_valid": {
                    "pairTest_h0Test1": "pairTest_h0Test1"
                },
                "cn.hutool.json.IssueI6SZYBTest_pairTest_h0Test2_valid": {
                    "pairTest_h0Test2": "pairTest_h0Test2"
                },
                "cn.hutool.json.IssueI6SZYBTest_pairTest_h0Test3_valid": {
                    "pairTest_h0Test3": "pairTest_h0Test3"
                },
                "cn.hutool.json.IssueI6SZYBTest_pairTest_h0Test4_valid": {
                    "pairTest_h0Test4": "pairTest_h0Test4"
                },
                "cn.hutool.json.IssueI6SZYBTest_pairTest_h3Test1_valid": {
                    "pairTest_h3Test1": "pairTest_h3Test1"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "vladmihalcea__castle__high-performance-java-persistence",
            "test_file_path": "./data/ITrans/projects/vladmihalcea__castle__high-performance-java-persistence/core/src/test/java/com/vladmihalcea/hpjp/util/CryptoUtilsTest.java",
            "test_simple_name": "testPerformance",
            "FQS_testMethos": "com.vladmihalcea.hpjp.util.CryptoUtilsTest.testPerformance()",
            "assertionSTMT": "assertEquals(value.longValue(), decryptedValue.longValue())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/vladmihalcea__castle__high-performance-java-persistence/com.vladmihalcea.hpjp.util.CryptoUtilsTest.testPerformance__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.vladmihalcea.hpjp.util.CryptoUtils.encrypt(java.lang.Object)",
                "com.vladmihalcea.hpjp.util.CryptoUtils.decrypt(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Long",
                    "expression": "value",
                    "statement": "String encryptedValue = CryptoUtils.encrypt(value);",
                    "invocation": "encryptedValue = CryptoUtils.encrypt(value)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "message",
                    "statement": "Long decryptedValue = (Long) CryptoUtils.decrypt(message, clazz);",
                    "invocation": "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz)"
                },
                {
                    "type": "Class<?>",
                    "expression": "clazz",
                    "statement": "Long decryptedValue = (Long) CryptoUtils.decrypt(message, clazz);",
                    "invocation": "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz)"
                }
            ],
            "comments": "",
            "dependency": "com.vladmihalcea.hpjp.util.CryptoUtils;com.vladmihalcea.hpjp.util.CryptoUtils.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testPerformance_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 13,
            "num_of_passed_test_cases": 13,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testPerformance_h0Test0"
                ],
                [
                    "testPerformance_h0Test1"
                ],
                [
                    "testPerformance_h0Test2"
                ],
                [
                    "testPerformance_h0Test3"
                ],
                [
                    "testPerformance_h0Test4"
                ],
                [
                    "testPerformance_h1Test0"
                ],
                [
                    "testPerformance_h1Test1"
                ],
                [
                    "testPerformance_h1Test2"
                ],
                [
                    "testPerformance_h1Test3"
                ],
                [
                    "testPerformance_h1Test4"
                ],
                [
                    "testPerformance_h3Test3"
                ],
                [
                    "testPerformance_h3Test4"
                ],
                [
                    "testPerformance_h4Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 9,
            "num_of_passed_test_cases": 8,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testPerformance_h0Test0"
                ],
                [
                    "testPerformance_h0Test1"
                ],
                [
                    "testPerformance_h0Test2"
                ],
                [
                    "testPerformance_h0Test3"
                ],
                [],
                [
                    "testPerformance_h2Test2"
                ],
                [
                    "testPerformance_h2Test4"
                ],
                [
                    "testPerformance_h3Test1"
                ],
                [
                    "testPerformance_h5Test4"
                ]
            ],
            "failure_info": {
                "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h0Test4_valid": {
                    "testPerformance_h0Test4": "java.lang.IllegalArgumentException, line:None"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__castle__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__castle__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/collections/ListTest1.java",
            "test_simple_name": "test",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.collections.ListTest1.test()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__castle__fastjson2/com.alibaba.fastjson2.internal.processor.collections.ListTest1.test__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "List<Integer>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "List<Integer> v02 = JSON.parseObject(str2, listType);",
                    "invocation": "v02 = JSON.parseObject(str2, listType)"
                },
                {
                    "type": "java.lang.reflect.Type",
                    "expression": "listType",
                    "statement": "List<Integer> v02 = JSON.parseObject(str2, listType);",
                    "invocation": "v02 = JSON.parseObject(str2, listType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 6,
            "num_of_passed_test_cases": 6,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -7,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_h1Test0"
                ],
                [
                    "test_h1Test1"
                ],
                [
                    "test_h1Test2"
                ],
                [
                    "test_h1Test3"
                ],
                [
                    "test_h1Test4"
                ],
                [
                    "test_h2Test1"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 7,
            "num_of_passed_test_cases": 7,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -8,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_h0Test0"
                ],
                [
                    "test_h0Test1"
                ],
                [
                    "test_h0Test2"
                ],
                [
                    "test_h0Test3"
                ],
                [
                    "test_h0Test4"
                ],
                [
                    "test_h3Test4"
                ],
                [
                    "test_h6Test4"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__castle__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__castle__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_from_TemporalAccessor_leapYear",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_from_TemporalAccessor_leapYear()",
            "assertionSTMT": "assertEquals(YearHalf.of(year, expected), test)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__castle__threeten-extra/org.threeten.extra.TestYearHalf.test_from_TemporalAccessor_leapYear__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.from(java.time.temporal.TemporalAccessor)",
                "org.threeten.extra.YearHalf.of(int, int)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "LocalDate",
                    "expression": "date",
                    "statement": "YearHalf test = YearHalf.from(date);",
                    "invocation": "test = YearHalf.from(date)"
                }
            ],
            "followUpInput": [
                {
                    "type": "int",
                    "expression": "year",
                    "statement": "assertEquals(YearHalf.of(year, expected), test);",
                    "invocation": "YearHalf.of(year, expected)"
                },
                {
                    "type": "int",
                    "expression": "expected",
                    "statement": "assertEquals(YearHalf.of(year, expected), test);",
                    "invocation": "YearHalf.of(year, expected)"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test_from_TemporalAccessor_leapYear_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": null,
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 8,
            "num_of_passed_test_cases": 8,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -9,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_from_TemporalAccessor_leapYear_h0Test0"
                ],
                [
                    "test_from_TemporalAccessor_leapYear_h0Test1"
                ],
                [
                    "test_from_TemporalAccessor_leapYear_h0Test2"
                ],
                [
                    "test_from_TemporalAccessor_leapYear_h2Test3"
                ],
                [
                    "test_from_TemporalAccessor_leapYear_h2Test4"
                ],
                [
                    "test_from_TemporalAccessor_leapYear_h4Test4"
                ],
                [
                    "test_from_TemporalAccessor_leapYear_h4Test6"
                ],
                [
                    "test_from_TemporalAccessor_leapYear_h4Test8"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "apache__castle__druid",
            "test_file_path": "./data/ITrans/projects/apache__castle__druid/extensions-core/multi-stage-query/src/test/java/org/apache/druid/msq/exec/WorkerStorageParametersTest.java",
            "test_simple_name": "test_WorkerStorageParameter_createInstance",
            "FQS_testMethos": "org.apache.druid.msq.exec.WorkerStorageParametersTest.test_WorkerStorageParameter_createInstance()",
            "assertionSTMT": "Assert.assertEquals(WorkerStorageParameters.createInstanceForTests(l), WorkerStorageParameters.createInstance(l2, b))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__castle__druid/org.apache.druid.msq.exec.WorkerStorageParametersTest.test_WorkerStorageParameter_createInstance__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.apache.druid.msq.exec.WorkerStorageParameters.createInstanceForTests(long)",
                "org.apache.druid.msq.exec.WorkerStorageParameters.createInstance(long, boolean)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "long",
                    "expression": "l",
                    "statement": "Assert.assertEquals(WorkerStorageParameters.createInstanceForTests(l), WorkerStorageParameters.createInstance(l2, b));",
                    "invocation": "WorkerStorageParameters.createInstanceForTests(l)"
                }
            ],
            "followUpInput": [
                {
                    "type": "long",
                    "expression": "l2",
                    "statement": "Assert.assertEquals(WorkerStorageParameters.createInstanceForTests(l), WorkerStorageParameters.createInstance(l2, b));",
                    "invocation": "WorkerStorageParameters.createInstance(l2, b)"
                },
                {
                    "type": "boolean",
                    "expression": "b",
                    "statement": "Assert.assertEquals(WorkerStorageParameters.createInstanceForTests(l), WorkerStorageParameters.createInstance(l2, b));",
                    "invocation": "WorkerStorageParameters.createInstance(l2, b)"
                }
            ],
            "comments": "not sure",
            "dependency": "org.apache.druid.msq.exec.WorkerStorageParameters;org.apache.druid.msq.exec.WorkerStorageParameters.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "test_WorkerStorageParameter_createInstance_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "test_WorkerStorageParameter_createInstance_IT": "org.apache.druid.msq.indexing.error.MSQException, line:None"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": null,
        "LLMI_testing_generatedIT_result_evaluation": null,
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "vladmihalcea__castle__high-performance-java-persistence",
            "test_file_path": "./data/ITrans/projects/vladmihalcea__castle__high-performance-java-persistence/core/src/test/java/com/vladmihalcea/hpjp/util/CryptoUtilsTest.java",
            "test_simple_name": "testPerformanceUsingCache",
            "FQS_testMethos": "com.vladmihalcea.hpjp.util.CryptoUtilsTest.testPerformanceUsingCache()",
            "assertionSTMT": "assertEquals(value.longValue(), decryptedValue.longValue())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/vladmihalcea__castle__high-performance-java-persistence/com.vladmihalcea.hpjp.util.CryptoUtilsTest.testPerformanceUsingCache__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.vladmihalcea.hpjp.util.CryptoUtils.encrypt(java.lang.Object)",
                "com.vladmihalcea.hpjp.util.CryptoUtils.decrypt(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Long",
                    "expression": "value",
                    "statement": "encryptedValue = CryptoUtils.encrypt(value);",
                    "invocation": "encryptedValue = CryptoUtils.encrypt(value)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "message",
                    "statement": "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz);",
                    "invocation": "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz)"
                },
                {
                    "type": "Class<?>",
                    "expression": "clazz",
                    "statement": "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz);",
                    "invocation": "decryptedValue = (Long) CryptoUtils.decrypt(message, clazz)"
                }
            ],
            "comments": "",
            "dependency": "com.vladmihalcea.hpjp.util.CryptoUtils;com.vladmihalcea.hpjp.util.CryptoUtils.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testPerformanceUsingCache_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 10,
            "num_of_passed_test_cases": 10,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testPerformanceUsingCache_h0Test0"
                ],
                [
                    "testPerformanceUsingCache_h0Test1"
                ],
                [
                    "testPerformanceUsingCache_h0Test2"
                ],
                [
                    "testPerformanceUsingCache_h0Test3"
                ],
                [
                    "testPerformanceUsingCache_h0Test4"
                ],
                [
                    "testPerformanceUsingCache_h2Test2"
                ],
                [
                    "testPerformanceUsingCache_h2Test3"
                ],
                [
                    "testPerformanceUsingCache_h3Test2"
                ],
                [
                    "testPerformanceUsingCache_h3Test3"
                ],
                [
                    "testPerformanceUsingCache_h3Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 10,
            "num_of_passed_test_cases": 10,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testPerformanceUsingCache_h0Test0"
                ],
                [
                    "testPerformanceUsingCache_h0Test1"
                ],
                [
                    "testPerformanceUsingCache_h0Test2"
                ],
                [
                    "testPerformanceUsingCache_h0Test3"
                ],
                [
                    "testPerformanceUsingCache_h0Test4"
                ],
                [
                    "testPerformanceUsingCache_h3Test2"
                ],
                [
                    "testPerformanceUsingCache_h3Test3"
                ],
                [
                    "testPerformanceUsingCache_h4Test3"
                ],
                [
                    "testPerformanceUsingCache_h4Test4"
                ],
                [
                    "testPerformanceUsingCache_h6Test4"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "dromara__castle__hutool",
            "test_file_path": "./data/ITrans/projects/dromara__castle__hutool/hutool-json/src/test/java/cn/hutool/json/IssueI6SZYBTest.java",
            "test_simple_name": "entryTest",
            "FQS_testMethos": "cn.hutool.json.IssueI6SZYBTest.entryTest()",
            "assertionSTMT": "Assert.assertEquals(pair, bean)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/dromara__castle__hutool/cn.hutool.json.IssueI6SZYBTest.entryTest__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "cn.hutool.json.JSONUtil.toJsonStr(java.lang.Object)",
                "cn.hutool.json.JSONUtil.toBean(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map.Entry<String, Integer>",
                    "expression": "pair",
                    "statement": "String json = JSONUtil.toJsonStr(pair);",
                    "invocation": "json = JSONUtil.toJsonStr(pair)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "jsonString",
                    "statement": "final Map.Entry bean = (Entry) JSONUtil.toBean(jsonString, beanClass);",
                    "invocation": "bean = (Entry) JSONUtil.toBean(jsonString, beanClass)"
                },
                {
                    "type": "Class",
                    "expression": "beanClass",
                    "statement": "final Map.Entry bean = (Entry) JSONUtil.toBean(jsonString, beanClass);",
                    "invocation": "bean = (Entry) JSONUtil.toBean(jsonString, beanClass)"
                }
            ],
            "comments": "",
            "dependency": "cn.hutool.json.JSONUtil;cn.hutool.json.JSONUtil.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "entryTest_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 10,
            "num_of_passed_test_cases": 9,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "entryTest_h0Test0"
                ],
                [
                    "entryTest_h0Test1"
                ],
                [
                    "entryTest_h0Test2"
                ],
                [
                    "entryTest_h0Test4"
                ],
                [
                    "entryTest_h1Test2"
                ],
                [],
                [
                    "entryTest_h4Test0"
                ],
                [
                    "entryTest_h4Test2"
                ],
                [
                    "entryTest_h4Test3"
                ],
                [
                    "entryTest_h4Test4"
                ]
            ],
            "failure_info": {
                "cn.hutool.json.IssueI6SZYBTest_entryTest_h1Test4_valid": {
                    "entryTest_h1Test4": "entryTest_h1Test4"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 15,
            "num_of_passed_test_cases": 14,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "entryTest_h0Test0"
                ],
                [
                    "entryTest_h0Test1"
                ],
                [],
                [
                    "entryTest_h3Test2"
                ],
                [
                    "entryTest_h3Test3"
                ],
                [
                    "entryTest_h5Test0"
                ],
                [
                    "entryTest_h5Test4"
                ],
                [
                    "entryTest_h6Test2"
                ],
                [
                    "entryTest_h8Test8"
                ],
                [
                    "entryTest_h9Test1"
                ],
                [
                    "entryTest_h9Test3"
                ],
                [
                    "entryTest_h9Test6"
                ],
                [
                    "entryTest_h9Test7"
                ],
                [
                    "entryTest_h9Test8"
                ],
                [
                    "entryTest_h9Test9"
                ]
            ],
            "failure_info": {
                "cn.hutool.json.IssueI6SZYBTest_entryTest_h0Test2_valid": {
                    "entryTest_h0Test2": "entryTest_h0Test2"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__castle__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__castle__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/Map1Test.java",
            "test_simple_name": "test2",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test2()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__castle__fastjson2/com.alibaba.fastjson2.internal.processor.maps.Map1Test.test2__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<String, Long>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Map<String, Long> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                },
                {
                    "type": "Type",
                    "expression": "mapType",
                    "statement": "Map<String, Long> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference;java.lang.reflect.Type",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test2_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 12,
            "num_of_passed_test_cases": 12,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -13,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test2_h0Test0"
                ],
                [
                    "test2_h0Test1"
                ],
                [
                    "test2_h0Test2"
                ],
                [
                    "test2_h0Test3"
                ],
                [
                    "test2_h0Test4"
                ],
                [
                    "test2_h1Test3"
                ],
                [
                    "test2_h1Test4"
                ],
                [
                    "test2_h3Test0"
                ],
                [
                    "test2_h3Test1"
                ],
                [
                    "test2_h3Test2"
                ],
                [
                    "test2_h3Test3"
                ],
                [
                    "test2_h3Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 29,
            "num_of_passed_test_cases": 29,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -30,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test2_h0Test0"
                ],
                [
                    "test2_h0Test1"
                ],
                [
                    "test2_h0Test2"
                ],
                [
                    "test2_h0Test3"
                ],
                [
                    "test2_h0Test4"
                ],
                [
                    "test2_h2Test1"
                ],
                [
                    "test2_h2Test3"
                ],
                [
                    "test2_h3Test4"
                ],
                [
                    "test2_h4Test0"
                ],
                [
                    "test2_h4Test2"
                ],
                [
                    "test2_h4Test5"
                ],
                [
                    "test2_h4Test6"
                ],
                [
                    "test2_h4Test7"
                ],
                [
                    "test2_h4Test8"
                ],
                [
                    "test2_h5Test0"
                ],
                [
                    "test2_h5Test2"
                ],
                [
                    "test2_h5Test3"
                ],
                [
                    "test2_h5Test4"
                ],
                [
                    "test2_h5Test5"
                ],
                [
                    "test2_h5Test6"
                ],
                [
                    "test2_h5Test9"
                ],
                [
                    "test2_h5Test10"
                ],
                [
                    "test2_h6Test2"
                ],
                [
                    "test2_h6Test8"
                ],
                [
                    "test2_h7Test3"
                ],
                [
                    "test2_h8Test1"
                ],
                [
                    "test2_h8Test2"
                ],
                [
                    "test2_h8Test3"
                ],
                [
                    "test2_h8Test4"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "cdk__castle__cdk",
            "test_file_path": "./data/ITrans/projects/cdk__castle__cdk/misc/extra/src/test/java/org/openscience/cdk/AssociationTest.java",
            "test_simple_name": "testGetAtomAt",
            "FQS_testMethos": "org.openscience.cdk.AssociationTest.testGetAtomAt()",
            "assertionSTMT": "Assertions.assertEquals(n, association2.getAtomAt(position2))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/cdk__castle__cdk/org.openscience.cdk.AssociationTest.testGetAtomAt__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.openscience.cdk.Association.setAtomAt(org.openscience.cdk.interfaces.IAtom, int)",
                "org.openscience.cdk.Association.getAtomAt(int)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Association",
                    "expression": "association",
                    "statement": "association.setAtomAt(n, position);",
                    "invocation": "association.setAtomAt(n, position)"
                },
                {
                    "type": "Atom",
                    "expression": "n",
                    "statement": "association.setAtomAt(n, position);",
                    "invocation": "association.setAtomAt(n, position)"
                },
                {
                    "type": "int",
                    "expression": "position",
                    "statement": "association.setAtomAt(n, position);",
                    "invocation": "association.setAtomAt(n, position)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Association",
                    "expression": "association2",
                    "statement": "Assertions.assertEquals(n, association2.getAtomAt(position2))",
                    "invocation": "association2.getAtomAt(position2)"
                },
                {
                    "type": "int",
                    "expression": "position2",
                    "statement": "Assertions.assertEquals(n, association2.getAtomAt(position2))",
                    "invocation": "association2.getAtomAt(position2)"
                }
            ],
            "comments": "fail, because class not found: /ssddata1/cxubl/data/ITrans/projects/cdk__castle__cdk/AutoMR/test_exe/org.openscience.cdk.AssociationTest_testGetAtomAt_hTest.log",
            "dependency": "org.openscience.cdk.Association;org.openscience.cdk.Association.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 2,
            "num_of_passed_test_cases": 2,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testGetAtomAt_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 6,
            "num_of_passed_test_cases": 6,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -4,
            "assertionLineNums": [
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testGetAtomAt_h0Test0"
                ],
                [
                    "testGetAtomAt_h0Test3"
                ],
                [
                    "testGetAtomAt_h1Test0"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 10,
            "num_of_passed_test_cases": 10,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -6,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testGetAtomAt_h0Test0"
                ],
                [
                    "testGetAtomAt_h2Test3"
                ],
                [
                    "testGetAtomAt_h3Test0"
                ],
                [
                    "testGetAtomAt_h3Test2"
                ],
                [
                    "testGetAtomAt_h6Test0"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "datageartech__castle__datagear",
            "test_file_path": "./data/ITrans/projects/datageartech__castle__datagear/datagear-util/src/test/java/org/datagear/util/version/VersionTest.java",
            "test_simple_name": "isLowerThanTest",
            "FQS_testMethos": "org.datagear.util.version.VersionTest.isLowerThanTest()",
            "assertionSTMT": "assertTrue(a.isLowerThan(b))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/datageartech__castle__datagear/org.datagear.util.version.VersionTest.isLowerThanTest__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.datagear.util.version.Version.valueOf(java.lang.String)",
                "org.datagear.util.version.Version.valueOf(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "v1",
                    "statement": "Version a = Version.valueOf(v1);",
                    "invocation": "a = Version.valueOf(v1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "v2",
                    "statement": "Version b = Version.valueOf(v2);",
                    "invocation": "b = Version.valueOf(v2)"
                }
            ],
            "comments": "",
            "dependency": "org.datagear.util.version.Version;org.datagear.util.version.Version.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "isLowerThanTest_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 16,
            "num_of_passed_test_cases": 16,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "isLowerThanTest_h0Test0"
                ],
                [
                    "isLowerThanTest_h0Test1"
                ],
                [
                    "isLowerThanTest_h0Test2"
                ],
                [
                    "isLowerThanTest_h0Test3"
                ],
                [
                    "isLowerThanTest_h0Test4"
                ],
                [
                    "isLowerThanTest_h1Test0"
                ],
                [
                    "isLowerThanTest_h1Test1"
                ],
                [
                    "isLowerThanTest_h1Test2"
                ],
                [
                    "isLowerThanTest_h1Test3"
                ],
                [
                    "isLowerThanTest_h1Test4"
                ],
                [
                    "isLowerThanTest_h2Test1"
                ],
                [
                    "isLowerThanTest_h2Test2"
                ],
                [
                    "isLowerThanTest_h2Test3"
                ],
                [
                    "isLowerThanTest_h2Test4"
                ],
                [
                    "isLowerThanTest_h2Test5"
                ],
                [
                    "isLowerThanTest_h4Test0"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 32,
            "num_of_passed_test_cases": 32,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "isLowerThanTest_h0Test0"
                ],
                [
                    "isLowerThanTest_h0Test2"
                ],
                [
                    "isLowerThanTest_h0Test4"
                ],
                [
                    "isLowerThanTest_h0Test6"
                ],
                [
                    "isLowerThanTest_h0Test8"
                ],
                [
                    "isLowerThanTest_h2Test1"
                ],
                [
                    "isLowerThanTest_h2Test2"
                ],
                [
                    "isLowerThanTest_h3Test0"
                ],
                [
                    "isLowerThanTest_h3Test1"
                ],
                [
                    "isLowerThanTest_h3Test3"
                ],
                [
                    "isLowerThanTest_h4Test2"
                ],
                [
                    "isLowerThanTest_h4Test3"
                ],
                [
                    "isLowerThanTest_h4Test4"
                ],
                [
                    "isLowerThanTest_h5Test0"
                ],
                [
                    "isLowerThanTest_h5Test1"
                ],
                [
                    "isLowerThanTest_h5Test2"
                ],
                [
                    "isLowerThanTest_h5Test3"
                ],
                [
                    "isLowerThanTest_h6Test4"
                ],
                [
                    "isLowerThanTest_h6Test6"
                ],
                [
                    "isLowerThanTest_h6Test8"
                ],
                [
                    "isLowerThanTest_h7Test0"
                ],
                [
                    "isLowerThanTest_h7Test1"
                ],
                [
                    "isLowerThanTest_h7Test2"
                ],
                [
                    "isLowerThanTest_h7Test3"
                ],
                [
                    "isLowerThanTest_h7Test4"
                ],
                [
                    "isLowerThanTest_h7Test5"
                ],
                [
                    "isLowerThanTest_h7Test6"
                ],
                [
                    "isLowerThanTest_h7Test7"
                ],
                [
                    "isLowerThanTest_h7Test8"
                ],
                [
                    "isLowerThanTest_h7Test9"
                ],
                [
                    "isLowerThanTest_h9Test1"
                ],
                [
                    "isLowerThanTest_h9Test2"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "TheAlgorithms__castle__Java",
            "test_file_path": "./data/ITrans/projects/TheAlgorithms__castle__Java/src/test/java/com/thealgorithms/datastructures/crdt/LWWElementSetTest.java",
            "test_simple_name": "testCompareDifferentSets",
            "FQS_testMethos": "com.thealgorithms.datastructures.crdt.LWWElementSetTest.testCompareDifferentSets()",
            "assertionSTMT": "assertFalse(set.compare(otherSet))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/TheAlgorithms__castle__Java/com.thealgorithms.datastructures.crdt.LWWElementSetTest.testCompareDifferentSets__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.thealgorithms.datastructures.crdt.LWWElementSet.add(com.thealgorithms.datastructures.crdt.Element)",
                "com.thealgorithms.datastructures.crdt.LWWElementSet.add(com.thealgorithms.datastructures.crdt.Element)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Element",
                    "expression": "element1",
                    "statement": "set.add(element1);",
                    "invocation": "set.add(element1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Element",
                    "expression": "element2",
                    "statement": "otherSet.add(element2);",
                    "invocation": "otherSet.add(element2)"
                }
            ],
            "comments": "",
            "dependency": "com.thealgorithms.datastructures.crdt.LWWElementSet;com.thealgorithms.datastructures.crdt.LWWElementSet.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "testCompareDifferentSets_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "testCompareDifferentSets_IT": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testCompareDifferentSets"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 9,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 9,
            "num_of_reach_assertion_test_cases": -10,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h0Test1_valid": {
                    "testCompareDifferentSets_h0Test1": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testCompareDifferentSets"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h0Test2_valid": {
                    "testCompareDifferentSets_h0Test2": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testCompareDifferentSets"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h0Test3_valid": {
                    "testCompareDifferentSets_h0Test3": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testCompareDifferentSets"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h0Test4_valid": {
                    "testCompareDifferentSets_h0Test4": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testCompareDifferentSets"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h1Test4_valid": {
                    "testCompareDifferentSets_h1Test4": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testCompareDifferentSets"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h1Test5_valid": {
                    "testCompareDifferentSets_h1Test5": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testCompareDifferentSets"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h2Test5_valid": {
                    "testCompareDifferentSets_h2Test5": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testCompareDifferentSets"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h3Test3_valid": {
                    "testCompareDifferentSets_h3Test3": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testCompareDifferentSets"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h3Test5_valid": {
                    "testCompareDifferentSets_h3Test5": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testCompareDifferentSets"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 5,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 5,
            "num_of_reach_assertion_test_cases": -6,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h9Test0_valid": {
                    "testCompareDifferentSets_h9Test0": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testCompareDifferentSets"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h9Test1_valid": {
                    "testCompareDifferentSets_h9Test1": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testCompareDifferentSets"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h9Test2_valid": {
                    "testCompareDifferentSets_h9Test2": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testCompareDifferentSets"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h9Test3_valid": {
                    "testCompareDifferentSets_h9Test3": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testCompareDifferentSets"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h9Test4_valid": {
                    "testCompareDifferentSets_h9Test4": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testCompareDifferentSets"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "jdereg__castle__java-util",
            "test_file_path": "./data/ITrans/projects/jdereg__castle__java-util/src/test/java/com/cedarsoftware/util/convert/ConverterTest.java",
            "test_simple_name": "testSqlDateToString",
            "FQS_testMethos": "com.cedarsoftware.util.convert.ConverterTest.testSqlDateToString()",
            "assertionSTMT": "assertEquals(l1, l2)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/jdereg__castle__java-util/com.cedarsoftware.util.convert.ConverterTest.testSqlDateToString__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.cedarsoftware.util.convert.Converter.convert(java.lang.Object, java.lang.Class<T>)",
                "com.cedarsoftware.util.convert.Converter.convert(java.lang.Object, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Date",
                    "expression": "date",
                    "statement": "LocalDate l1 = (LocalDate) this.converter.convert(date, clazz1);",
                    "invocation": "l1 = (LocalDate) this.converter.convert(date, clazz1))"
                },
                {
                    "type": "Class<?>",
                    "expression": "clazz1",
                    "statement": "LocalDate l1 = (LocalDate) this.converter.convert(date, clazz1);",
                    "invocation": "l1 = (LocalDate) this.converter.convert(date, clazz1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Date",
                    "expression": "x",
                    "statement": "LocalDate l2 = (LocalDate) this.converter.convert(x, clazz2);",
                    "invocation": "l2 = (LocalDate) this.converter.convert(x, clazz2)"
                },
                {
                    "type": "Class<?>",
                    "expression": "clazz2",
                    "statement": "LocalDate l2 = (LocalDate) this.converter.convert(x, clazz2);",
                    "invocation": "l2 = (LocalDate) this.converter.convert(x, clazz2)"
                }
            ],
            "comments": "",
            "dependency": "com.cedarsoftware.util.convert.Converter;com.cedarsoftware.util.convert.Converter.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1602,
            "num_of_passed_test_cases": 15,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1587,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "toByte_whenEmpty_andNotPrimitive_returnsZero",
                "testInstantToDate",
                "testInstantToDate",
                "testInstantToDate",
                "testInstantToDate",
                "testInstantToDate",
                "testInstantToDate",
                "testInstantToDate",
                "testInstantToDate",
                "testInstantToDate",
                "testInstantToDate",
                "testInstantToDate",
                "testInstantToDate",
                "testInstantToLong",
                "testInstantToLong",
                "testInstantToLong",
                "testInstantToLong",
                "testInstantToLong",
                "testInstantToLong",
                "testInstantToLong",
                "testInstantToLong",
                "testInstantToLong",
                "testInstantToLong",
                "testInstantToLong",
                "testInstantToLong",
                "testBigIntegerToLocalDateTime",
                "testBigIntegerToLocalDateTime",
                "testBigIntegerToLocalDateTime",
                "testBigIntegerToLocalDateTime",
                "testBigIntegerToLocalDateTime",
                "testBigIntegerToLocalDateTime",
                "testBigIntegerToLocalDateTime",
                "testBigIntegerToLocalDateTime",
                "testBigIntegerToLocalDateTime",
                "testBigIntegerToLocalDateTime",
                "testBigIntegerToLocalDateTime",
                "testBigIntegerToLocalDateTime",
                "testLocalDateTimestampAndBack",
                "testLocalDateTimestampAndBack",
                "testLocalDateTimestampAndBack",
                "toLong_withBooleanParams_returnsCommonValues",
                "toLong_withBooleanParams_returnsCommonValues",
                "toLong_withBooleanParams_returnsCommonValues",
                "toLong_withBooleanParams_returnsCommonValues",
                "toLong_withBooleanParams_returnsCommonValues",
                "toLong_withBooleanParams_returnsCommonValues",
                "testConvertString_withIllegalArguments",
                "testConvertString_withIllegalArguments",
                "testLong_withIllegalArguments",
                "testLong_withIllegalArguments",
                "testLong_withIllegalArguments",
                "testLong_withIllegalArguments",
                "testInstantToBigInteger",
                "testInstantToBigInteger",
                "testInstantToBigInteger",
                "testInstantToBigInteger",
                "testInstantToBigInteger",
                "testInstantToBigInteger",
                "testInstantToBigInteger",
                "testInstantToBigInteger",
                "testInstantToBigInteger",
                "testInstantToBigInteger",
                "testInstantToBigInteger",
                "testInstantToBigInteger",
                "testStringNullAndEmpty",
                "testStringNullAndEmpty",
                "testInstantToDouble",
                "testInstantToDouble",
                "testInstantToDouble",
                "testInstantToDouble",
                "testInstantToDouble",
                "testInstantToDouble",
                "testInstantToDouble",
                "testInstantToDouble",
                "testInstantToDouble",
                "testInstantToDouble",
                "testInstantToDouble",
                "testInstantToDouble",
                "toFloat_withBooleanArguments_returnsCommonValue",
                "toFloat_withBooleanArguments_returnsCommonValue",
                "toFloat_withBooleanArguments_returnsCommonValue",
                "toFloat_withBooleanArguments_returnsCommonValue",
                "toFloat_withBooleanArguments_returnsCommonValue",
                "toFloat_withBooleanArguments_returnsCommonValue",
                "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue",
                "testConvertToAtomicLong_whenNullString",
                "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                "toShort_usingPrimitive_withNullAndEmptySource_returnsZero",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "toShort_usingPrimitiveClass",
                "testInstantToAtomicLong",
                "testInstantToAtomicLong",
                "testInstantToAtomicLong",
                "testInstantToAtomicLong",
                "testInstantToAtomicLong",
                "testInstantToAtomicLong",
                "testInstantToAtomicLong",
                "testInstantToAtomicLong",
                "testInstantToAtomicLong",
                "testInstantToAtomicLong",
                "testInstantToAtomicLong",
                "testInstantToAtomicLong",
                "testInstantToSqlDate",
                "testInstantToSqlDate",
                "testInstantToSqlDate",
                "testInstantToSqlDate",
                "testInstantToSqlDate",
                "testInstantToSqlDate",
                "testInstantToSqlDate",
                "testInstantToSqlDate",
                "testInstantToSqlDate",
                "testInstantToSqlDate",
                "testInstantToSqlDate",
                "testInstantToSqlDate",
                "toInt_withIllegalArguments_throwsException",
                "toInt_withIllegalArguments_throwsException",
                "toInt_withIllegalArguments_throwsException",
                "toInt_withIllegalArguments_throwsException",
                "toInt_withIllegalArguments_throwsException",
                "toShort_withIllegalArguments_throwsException",
                "toShort_withIllegalArguments_throwsException",
                "toShort_withIllegalArguments_throwsException",
                "toShort_withIllegalArguments_throwsException",
                "testZonedDateTimeToCalendar",
                "testZonedDateTimeToCalendar",
                "testZonedDateTimeToCalendar",
                "testZonedDateTimeToCalendar",
                "testZonedDateTimeToCalendar",
                "testZonedDateTimeToCalendar",
                "testZonedDateTimeToCalendar",
                "testZonedDateTimeToCalendar",
                "testZonedDateTimeToCalendar",
                "testZonedDateTimeToCalendar",
                "testZonedDateTimeToCalendar",
                "testZonedDateTimeToCalendar",
                "toLong_whenNotPrimitive_andNull_returnsNull",
                "testAtomicLongToLocalDateTime",
                "testAtomicLongToLocalDateTime",
                "testAtomicLongToLocalDateTime",
                "testAtomicLongToLocalDateTime",
                "testAtomicLongToLocalDateTime",
                "testAtomicLongToLocalDateTime",
                "testAtomicLongToLocalDateTime",
                "testAtomicLongToLocalDateTime",
                "testAtomicLongToLocalDateTime",
                "testAtomicLongToLocalDateTime",
                "testAtomicLongToLocalDateTime",
                "testAtomicLongToLocalDateTime",
                "testDateToLocalDateTime",
                "testDateToLocalDateTime",
                "testDateToLocalDateTime",
                "testDateToLocalDateTime",
                "testDateToLocalDateTime",
                "testDateToLocalDateTime",
                "testDateToLocalDateTime",
                "testDateToLocalDateTime",
                "testDateToLocalDateTime",
                "testDateToLocalDateTime",
                "testDateToLocalDateTime",
                "testDateToLocalDateTime",
                "testLocalDateZonedDateTimeAndBack",
                "testLocalDateZonedDateTimeAndBack",
                "testLocalDateZonedDateTimeAndBack",
                "testLocalDateSqlDateAndBack",
                "testLocalDateSqlDateAndBack",
                "testLocalDateSqlDateAndBack",
                "testEpochMilliWithZoneId",
                "testEpochMilliWithZoneId",
                "testEpochMilliWithZoneId",
                "testEpochMilliWithZoneId",
                "testEpochMilliWithZoneId",
                "testEpochMilliWithZoneId",
                "testLongToLocalDateTime",
                "testLongToLocalDateTime",
                "testLongToLocalDateTime",
                "testLongToLocalDateTime",
                "testLongToLocalDateTime",
                "testLongToLocalDateTime",
                "testLongToLocalDateTime",
                "testLongToLocalDateTime",
                "testLongToLocalDateTime",
                "testLongToLocalDateTime",
                "testLongToLocalDateTime",
                "testLongToLocalDateTime",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testAtomicInteger",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testBigDecimal",
                "testLocalDateTimeToBigDecimal",
                "testLocalDateTimeToBigDecimal",
                "testDateToLocalDate",
                "testDateToLocalDate",
                "testDateToLocalDate",
                "testDateToLocalDate",
                "testDateToLocalDate",
                "testDateToLocalDate",
                "testDateToLocalDate",
                "testDateToLocalDate",
                "testDateToLocalDate",
                "testDateToLocalDate",
                "testDateToLocalDate",
                "testDateToLocalDate",
                "testDateToLocalTime",
                "testDateToLocalTime",
                "testDateToLocalTime",
                "testDateToLocalTime",
                "testDateToLocalTime",
                "testDateToLocalTime",
                "testDateToLocalTime",
                "testDateToLocalTime",
                "testDateToLocalTime",
                "testDateToLocalTime",
                "testDateToLocalTime",
                "testDateToLocalTime",
                "testConvertToFloat_withIllegalArguments",
                "testConvertToFloat_withIllegalArguments",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toFloat",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "toShort",
                "testDate",
                "testDate",
                "testDate",
                "testDate",
                "testDate",
                "testDate",
                "testDate",
                "toByte_fromBoolean_isSameAsCommonValueObject",
                "toByte_fromBoolean_isSameAsCommonValueObject",
                "toByte_fromBoolean_isSameAsCommonValueObject",
                "toByte_fromBoolean_isSameAsCommonValueObject",
                "toByte_fromBoolean_isSameAsCommonValueObject",
                "toByte_fromBoolean_isSameAsCommonValueObject",
                "testInstantToTimestamp",
                "testInstantToTimestamp",
                "testInstantToTimestamp",
                "testInstantToTimestamp",
                "testInstantToTimestamp",
                "testInstantToTimestamp",
                "testInstantToTimestamp",
                "testInstantToTimestamp",
                "testInstantToTimestamp",
                "testInstantToTimestamp",
                "testInstantToTimestamp",
                "testInstantToTimestamp",
                "toShort_withBooleanPrams_returnsCommonValue",
                "toShort_withBooleanPrams_returnsCommonValue",
                "toShort_withBooleanPrams_returnsCommonValue",
                "toShort_withBooleanPrams_returnsCommonValue",
                "toShort_withBooleanPrams_returnsCommonValue",
                "toShort_withBooleanPrams_returnsCommonValue",
                "testLocalDateToBigDecimalAndBack",
                "testLocalDateToBigDecimalAndBack",
                "testLocalDateToBigDecimalAndBack",
                "stringToClass",
                "stringToClass",
                "testLocalDateToBigIntegerAndBack",
                "testLocalDateToBigIntegerAndBack",
                "testLocalDateToBigIntegerAndBack",
                "testStringToCharArray",
                "testStringToCharArray",
                "testStringToCharArray",
                "testStringToCharArray",
                "testStringToCharArray",
                "testStringToCharArray",
                "testInstantToCalendar",
                "testInstantToCalendar",
                "testInstantToCalendar",
                "testInstantToCalendar",
                "testInstantToCalendar",
                "testInstantToCalendar",
                "testInstantToCalendar",
                "testInstantToCalendar",
                "testInstantToCalendar",
                "testInstantToCalendar",
                "testInstantToCalendar",
                "testInstantToCalendar",
                "testClassesThatReturnZero_whenConvertingFromNull",
                "testClassesThatReturnZero_whenConvertingFromNull",
                "testClassesThatReturnZero_whenConvertingFromNull",
                "testClassesThatReturnZero_whenConvertingFromNull",
                "testClassesThatReturnZero_whenConvertingFromNull",
                "testClassesThatReturnZero_whenConvertingFromNull",
                "testClassesThatReturnZero_whenConvertingFromNull",
                "testConvertTCharacter_withIllegalArguments",
                "testConvertTCharacter_withIllegalArguments",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "toLong_usingPrimitives",
                "testZonedDateTimeToLocalDateTime",
                "testZonedDateTimeToLocalDateTime",
                "testZonedDateTimeToLocalDateTime",
                "testZonedDateTimeToLocalDateTime",
                "testZonedDateTimeToLocalDateTime",
                "testZonedDateTimeToLocalDateTime",
                "testZonedDateTimeToLocalDateTime",
                "testZonedDateTimeToLocalDateTime",
                "testZonedDateTimeToLocalDateTime",
                "testZonedDateTimeToLocalDateTime",
                "testZonedDateTimeToLocalDateTime",
                "testZonedDateTimeToLocalDateTime",
                "toInt_whenNotPrimitive_andNullString_returnsNull",
                "toShort_whenNotPrimitive_whenEmptyString_returnsNull",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toByte",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "toLong",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testBigInteger",
                "testAtomicInteger_withBooleanTypes",
                "testAtomicInteger_withBooleanTypes",
                "testAtomicInteger_withBooleanTypes",
                "testAtomicInteger_withBooleanTypes",
                "testAtomicInteger_withBooleanTypes",
                "testAtomicInteger_withBooleanTypes",
                "testLocalDateToLocalTime",
                "testLocalDateToLocalTime",
                "testLocalDateToLocalTime",
                "testLocalDateTimeToBigInteger",
                "testLocalDateTimeToBigInteger",
                "testCalendar_roundTrip_withLocalDate",
                "testCalendar_roundTrip_withLocalDate",
                "testCalendar_roundTrip_withLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalDate",
                "testZonedDateTimeToLocalTime",
                "testZonedDateTimeToLocalTime",
                "testZonedDateTimeToLocalTime",
                "testZonedDateTimeToLocalTime",
                "testZonedDateTimeToLocalTime",
                "testZonedDateTimeToLocalTime",
                "testZonedDateTimeToLocalTime",
                "testZonedDateTimeToLocalTime",
                "testZonedDateTimeToLocalTime",
                "testZonedDateTimeToLocalTime",
                "testZonedDateTimeToLocalTime",
                "testZonedDateTimeToLocalTime",
                "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "conversionsWithPrecisionLoss_primitives",
                "testConvertToAtomicLong_whenEmptyString",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testToBoolean_trueCases",
                "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis",
                "testCalendarToZonedDateTime",
                "testCalendarToZonedDateTime",
                "testCalendarToZonedDateTime",
                "testCalendarToZonedDateTime",
                "testCalendarToZonedDateTime",
                "testCalendarToZonedDateTime",
                "testCalendarToZonedDateTime",
                "testCalendarToZonedDateTime",
                "testCalendarToZonedDateTime",
                "testCalendarToZonedDateTime",
                "testCalendarToZonedDateTime",
                "testCalendarToZonedDateTime",
                "testZonedDateTimeToLong",
                "testZonedDateTimeToLong",
                "testZonedDateTimeToLong",
                "testZonedDateTimeToLong",
                "testZonedDateTimeToLong",
                "testZonedDateTimeToLong",
                "testZonedDateTimeToLong",
                "testZonedDateTimeToLong",
                "testZonedDateTimeToLong",
                "testZonedDateTimeToLong",
                "testZonedDateTimeToLong",
                "testZonedDateTimeToLong",
                "testAtomicLong",
                "testAtomicLong",
                "testAtomicLong",
                "testAtomicLong",
                "testAtomicLong",
                "testAtomicLong",
                "testAtomicLong",
                "testAtomicLong",
                "testAtomicLong",
                "testAtomicLong",
                "testAtomicLong",
                "testAtomicLong",
                "testAtomicLong",
                "testAtomicLong",
                "testAtomicLong",
                "testAtomicLong",
                "testAtomicLong",
                "testAtomicLong",
                "testInstantToLocalDateTime",
                "testInstantToLocalDateTime",
                "testInstantToLocalDateTime",
                "testInstantToLocalDateTime",
                "testInstantToLocalDateTime",
                "testInstantToLocalDateTime",
                "testInstantToLocalDateTime",
                "testInstantToLocalDateTime",
                "testInstantToLocalDateTime",
                "testInstantToLocalDateTime",
                "testInstantToLocalDateTime",
                "testInstantToLocalDateTime",
                "testLocalDateTimeToAtomicLong",
                "testLocalDateTimeToAtomicLong",
                "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject",
                "toInt_fromBoolean_returnsCommonValue",
                "toInt_fromBoolean_returnsCommonValue",
                "toInt_fromBoolean_returnsCommonValue",
                "toInt_fromBoolean_returnsCommonValue",
                "toInt_fromBoolean_returnsCommonValue",
                "toInt_fromBoolean_returnsCommonValue",
                "testCalendar_roundTrip",
                "testCalendar_roundTrip",
                "testCalendar_roundTrip",
                "testCalendar_roundTrip",
                "testCalendar_roundTrip",
                "testCalendar_roundTrip",
                "testCalendar_roundTrip",
                "testCalendar_roundTrip",
                "testCalendar_roundTrip",
                "testCalendar_roundTrip",
                "testCalendar_roundTrip",
                "testCalendar_roundTrip",
                "conversionsWithPrecisionLoss_toAtomicLong",
                "conversionsWithPrecisionLoss_toAtomicLong",
                "testDateToInstant",
                "testDateToInstant",
                "testDateToInstant",
                "testDateToInstant",
                "testDateToInstant",
                "testDateToInstant",
                "testDateToInstant",
                "testDateToInstant",
                "testDateToInstant",
                "testDateToInstant",
                "testDateToInstant",
                "testDateToInstant",
                "testStringToByteArray",
                "testStringToByteArray",
                "testStringToByteArray",
                "testStringToByteArray",
                "testStringToByteArray",
                "testStringToByteArray",
                "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue",
                "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "toFloat_objectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testDouble_ObjectType",
                "testBigInteger_withObjectsShouldBeSameAs",
                "testBigInteger_withObjectsShouldBeSameAs",
                "testBigInteger_withObjectsShouldBeSameAs",
                "testBigInteger_withObjectsShouldBeSameAs",
                "testBigInteger_withObjectsShouldBeSameAs",
                "testBigInteger_withObjectsShouldBeSameAs",
                "testBigInteger_withObjectsShouldBeSameAs",
                "testBigInteger_withObjectsShouldBeSameAs",
                "testBigInteger_withObjectsShouldBeSameAs",
                "testBigInteger_withObjectsShouldBeSameAs",
                "testBigInteger_withObjectsShouldBeSameAs",
                "testBigInteger_withObjectsShouldBeSameAs",
                "testBigInteger_withObjectsShouldBeSameAs",
                "testBigInteger_withObjectsShouldBeSameAs",
                "testLocalDateTimeToZonedDateTime",
                "testLocalDateTimeToZonedDateTime",
                "testCalendarToDouble",
                "testCalendarToDouble",
                "testCalendarToDouble",
                "testCalendarToDouble",
                "testCalendarToDouble",
                "testCalendarToDouble",
                "testCalendarToDouble",
                "testCalendarToDouble",
                "testCalendarToDouble",
                "testCalendarToDouble",
                "testCalendarToDouble",
                "testCalendarToDouble",
                "testToBoolean_falseCases",
                "testToBoolean_falseCases",
                "testToBoolean_falseCases",
                "testToBoolean_falseCases",
                "testToBoolean_falseCases",
                "testToBoolean_falseCases",
                "testToBoolean_falseCases",
                "testToBoolean_falseCases",
                "testToBoolean_falseCases",
                "testToBoolean_falseCases",
                "testToBoolean_falseCases",
                "testToBoolean_falseCases",
                "testToBoolean_falseCases",
                "testToBoolean_falseCases",
                "testToBoolean_falseCases",
                "testToBoolean_falseCases",
                "testToBoolean_falseCases",
                "testToBoolean_falseCases",
                "testToBoolean_falseCases",
                "testToBoolean_falseCases",
                "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                "testStringDateWithTimeZoneToLocalDateTimeWithZone",
                "testTimestampToLocalDate",
                "testTimestampToLocalDate",
                "testTimestampToLocalDate",
                "testTimestampToLocalDate",
                "testTimestampToLocalDate",
                "testTimestampToLocalDate",
                "testTimestampToLocalDate",
                "testTimestampToLocalDate",
                "testTimestampToLocalDate",
                "testTimestampToLocalDate",
                "testTimestampToLocalDate",
                "testTimestampToLocalDate",
                "toInt_whenNotPrimitive_andEmptyString_returnsZero",
                "testAtomicInteger_withIllegalArguments",
                "testAtomicInteger_withIllegalArguments",
                "testAtomicInteger_withIllegalArguments",
                "testExtremeDateParams",
                "testExtremeDateParams",
                "testExtremeDateParams",
                "testExtremeDateParams",
                "testExtremeDateParams",
                "testExtremeDateParams",
                "testExtremeDateParams",
                "testExtremeDateParams",
                "testExtremeDateParams",
                "testExtremeDateParams",
                "testExtremeDateParams",
                "testLocalDateToDoubleAndBack",
                "testLocalDateToDoubleAndBack",
                "testLocalDateToDoubleAndBack",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "toInt",
                "testConvertToBigDecimal_withIllegalArguments",
                "testConvertToBigDecimal_withIllegalArguments",
                "testConvertToBigDecimal_withIllegalArguments",
                "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue",
                "toCharacter_ObjectType",
                "toCharacter_ObjectType",
                "toCharacter_ObjectType",
                "toCharacter_ObjectType",
                "toCharacter_ObjectType",
                "toCharacter_ObjectType",
                "toCharacter_ObjectType",
                "toCharacter_ObjectType",
                "toCharacter_ObjectType",
                "toCharacter_ObjectType",
                "toCharacter_ObjectType",
                "toCharacter_ObjectType",
                "toCharacter_ObjectType",
                "toCharacter_ObjectType",
                "toCharacter_ObjectType",
                "toCharacter_ObjectType",
                "testSqlDateToLocalDateTime",
                "testSqlDateToLocalDateTime",
                "testSqlDateToLocalDateTime",
                "testSqlDateToLocalDateTime",
                "testSqlDateToLocalDateTime",
                "testSqlDateToLocalDateTime",
                "testSqlDateToLocalDateTime",
                "testSqlDateToLocalDateTime",
                "testSqlDateToLocalDateTime",
                "testSqlDateToLocalDateTime",
                "testSqlDateToLocalDateTime",
                "testSqlDateToLocalDateTime",
                "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject",
                "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive",
                "testLocalDateTimeToInstant",
                "testLocalDateTimeToInstant",
                "testLocalDateToLocalDateTimeAndBack",
                "testLocalDateToLocalDateTimeAndBack",
                "testLocalDateToLocalDateTimeAndBack",
                "testConvertLocalDateToLongAndBack",
                "testConvertLocalDateToLongAndBack",
                "testConvertLocalDateToLongAndBack",
                "testCalendarToBigDecimal",
                "testCalendarToBigDecimal",
                "testCalendarToBigDecimal",
                "testCalendarToBigDecimal",
                "testCalendarToBigDecimal",
                "testCalendarToBigDecimal",
                "testCalendarToBigDecimal",
                "testCalendarToBigDecimal",
                "testCalendarToBigDecimal",
                "testCalendarToBigDecimal",
                "testCalendarToBigDecimal",
                "testCalendarToBigDecimal",
                "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter",
                "toLong_whenNotPrimitive_andEmptyString_returnsZero",
                "testSqlDateToLocalDate",
                "testSqlDateToLocalDate",
                "testSqlDateToLocalDate",
                "testSqlDateToLocalDate",
                "testSqlDateToLocalDate",
                "testSqlDateToLocalDate",
                "testSqlDateToLocalDate",
                "testSqlDateToLocalDate",
                "testSqlDateToLocalDate",
                "testSqlDateToLocalDate",
                "testSqlDateToLocalDate",
                "testSqlDateToLocalDate",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "toByteUsingPrimitive",
                "testLongToInstant",
                "testLongToInstant",
                "testLongToInstant",
                "testLongToInstant",
                "testLongToInstant",
                "testLongToInstant",
                "testLongToInstant",
                "testLongToInstant",
                "testLongToInstant",
                "testLongToInstant",
                "testLongToInstant",
                "testLongToInstant",
                "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                "toLong_whenPrimitive_andNullOrEmpty_returnsZero",
                "testBigDecimal_withObjectsThatShouldBeSameAs",
                "testBigDecimal_withObjectsThatShouldBeSameAs",
                "testBigDecimal_withObjectsThatShouldBeSameAs",
                "testBigDecimal_withObjectsThatShouldBeSameAs",
                "testBigDecimal_withObjectsThatShouldBeSameAs",
                "testBigDecimal_withObjectsThatShouldBeSameAs",
                "testBigDecimal_withObjectsThatShouldBeSameAs",
                "testInstantToFloat",
                "testInstantToFloat",
                "testInstantToFloat",
                "testInstantToFloat",
                "testInstantToFloat",
                "testInstantToFloat",
                "testInstantToFloat",
                "testInstantToFloat",
                "testInstantToFloat",
                "testInstantToFloat",
                "testInstantToFloat",
                "testInstantToFloat",
                "toCharacter",
                "toCharacter",
                "toCharacter",
                "toCharacter",
                "toCharacter",
                "toCharacter",
                "toCharacter",
                "toCharacter",
                "toCharacter",
                "toCharacter",
                "toCharacter",
                "toCharacter",
                "toCharacter",
                "toCharacter",
                "toCharacter",
                "toCharacter",
                "testCalendarToLocalDateTime",
                "testCalendarToLocalDateTime",
                "testCalendarToLocalDateTime",
                "testCalendarToLocalDateTime",
                "testCalendarToLocalDateTime",
                "testCalendarToLocalDateTime",
                "testCalendarToLocalDateTime",
                "testCalendarToLocalDateTime",
                "testCalendarToLocalDateTime",
                "testCalendarToLocalDateTime",
                "testCalendarToLocalDateTime",
                "testCalendarToLocalDateTime",
                "testConvertToBigInteger_withIllegalArguments",
                "testConvertToBigInteger_withIllegalArguments",
                "testConvertToBigInteger_withIllegalArguments",
                "conversionsWithPrecisionLoss_toAtomicInteger",
                "conversionsWithPrecisionLoss_toAtomicInteger",
                "conversionsWithPrecisionLoss_toAtomicInteger",
                "conversionsWithPrecisionLoss_toAtomicInteger",
                "testStringParams",
                "testStringParams",
                "testStringParams",
                "testStringParams",
                "testStringParams",
                "testStringParams",
                "testStringParams",
                "testStringParams",
                "testStringParams",
                "testStringParams",
                "testStringParams",
                "testStringParams",
                "testStringParams",
                "testStringParams",
                "testStringParams",
                "testStringParams",
                "testStringParams",
                "testStringParams",
                "testCalendarToBigInteger",
                "testCalendarToBigInteger",
                "testCalendarToBigInteger",
                "testCalendarToBigInteger",
                "testCalendarToBigInteger",
                "testCalendarToBigInteger",
                "testCalendarToBigInteger",
                "testCalendarToBigInteger",
                "testCalendarToBigInteger",
                "testCalendarToBigInteger",
                "testCalendarToBigInteger",
                "testCalendarToBigInteger",
                "testCalendarToLocalDate",
                "testCalendarToLocalDate",
                "testCalendarToLocalDate",
                "testCalendarToLocalDate",
                "testCalendarToLocalDate",
                "testCalendarToLocalDate",
                "testCalendarToLocalDate",
                "testCalendarToLocalDate",
                "testCalendarToLocalDate",
                "testCalendarToLocalDate",
                "testCalendarToLocalDate",
                "testCalendarToLocalDate",
                "testCalendarToLocalTime",
                "testCalendarToLocalTime",
                "testCalendarToLocalTime",
                "testCalendarToLocalTime",
                "testCalendarToLocalTime",
                "testCalendarToLocalTime",
                "testCalendarToLocalTime",
                "testCalendarToLocalTime",
                "testCalendarToLocalTime",
                "testCalendarToLocalTime",
                "testCalendarToLocalTime",
                "testCalendarToLocalTime",
                "testStringDateWithNoTimeZoneInformation",
                "testStringDateWithNoTimeZoneInformation",
                "testStringDateWithNoTimeZoneInformation",
                "testStringDateWithNoTimeZoneInformation",
                "testStringDateWithNoTimeZoneInformation",
                "testStringDateWithNoTimeZoneInformation",
                "testConvertTCharacter_withNumberFormatExceptions",
                "testConvertTCharacter_withNumberFormatExceptions",
                "testTimestampToLocalDateTime",
                "testTimestampToLocalDateTime",
                "testTimestampToLocalDateTime",
                "testTimestampToLocalDateTime",
                "testTimestampToLocalDateTime",
                "testTimestampToLocalDateTime",
                "testTimestampToLocalDateTime",
                "testTimestampToLocalDateTime",
                "testTimestampToLocalDateTime",
                "testTimestampToLocalDateTime",
                "testTimestampToLocalDateTime",
                "testTimestampToLocalDateTime",
                "testDateToZonedDateTime",
                "testDateToZonedDateTime",
                "testDateToZonedDateTime",
                "testDateToZonedDateTime",
                "testDateToZonedDateTime",
                "testDateToZonedDateTime",
                "testDateToZonedDateTime",
                "testDateToZonedDateTime",
                "testDateToZonedDateTime",
                "testDateToZonedDateTime",
                "testDateToZonedDateTime",
                "testDateToZonedDateTime",
                "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                "testConversions_whenClassTypeMatchesObjectType_returnsItself",
                "testLocalDateTimeToLocalTime",
                "testLocalDateTimeToLocalTime",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "testDouble",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "toInt_usingPrimitives",
                "testStringToByteBuffer",
                "testStringToByteBuffer",
                "testStringToByteBuffer",
                "testStringToByteBuffer",
                "testStringToByteBuffer",
                "testStringToByteBuffer",
                "testByteArrayToString",
                "testByteArrayToString",
                "testByteArrayToString",
                "testByteArrayToString",
                "testByteArrayToString",
                "testByteArrayToString",
                "testAtomicLong_fromBoolean",
                "testAtomicLong_fromBoolean",
                "testAtomicLong_fromBoolean",
                "testAtomicLong_fromBoolean",
                "testAtomicLong_fromBoolean",
                "testAtomicLong_fromBoolean",
                "testLongToLocalDate",
                "testLongToLocalDate",
                "testLongToLocalDate",
                "testLongToLocalDate",
                "testLongToLocalDate",
                "testLongToLocalDate",
                "testLongToLocalDate",
                "testLongToLocalDate",
                "testLongToLocalDate",
                "testLongToLocalDate",
                "testLongToLocalDate",
                "testLongToLocalDate",
                "testLongToLocalTime",
                "testLongToLocalTime",
                "testLongToLocalTime",
                "testLongToLocalTime",
                "testLongToLocalTime",
                "testLongToLocalTime",
                "testLongToLocalTime",
                "testLongToLocalTime",
                "testLongToLocalTime",
                "testLongToLocalTime",
                "testLongToLocalTime",
                "testLongToLocalTime",
                "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero",
                "testBigDecimalToLocalDateTime",
                "testBigDecimalToLocalDateTime",
                "testBigDecimalToLocalDateTime",
                "testBigDecimalToLocalDateTime",
                "testBigDecimalToLocalDateTime",
                "testBigDecimalToLocalDateTime",
                "testBigDecimalToLocalDateTime",
                "testBigDecimalToLocalDateTime",
                "testBigDecimalToLocalDateTime",
                "testBigDecimalToLocalDateTime",
                "testBigDecimalToLocalDateTime",
                "testBigDecimalToLocalDateTime",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch",
                "toShort_whenNotPrimitive_whenNull_returnsNull",
                "testLocalDateToLong",
                "testLocalDateToLong",
                "testLocalDateToAtomicLongAndBack",
                "testLocalDateToAtomicLongAndBack",
                "testLocalDateToAtomicLongAndBack",
                "testCalendarToInstant",
                "testCalendarToInstant",
                "testCalendarToInstant",
                "testCalendarToInstant",
                "testCalendarToInstant",
                "testCalendarToInstant",
                "testCalendarToInstant",
                "testCalendarToInstant",
                "testCalendarToInstant",
                "testCalendarToInstant",
                "testCalendarToInstant",
                "testCalendarToInstant",
                "toByte_withIllegalArguments",
                "toByte_withIllegalArguments",
                "toByte_withIllegalArguments",
                "toByte_withIllegalArguments",
                "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter",
                "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                "testCalendarToLocalDate_whenCalendarTimeZoneMatches",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLongToBigInteger",
                "testLocalDateTimeToLong",
                "testLocalDateTimeToLong",
                "testEmptyStringToType_whereTypeReturnsSpecificObject",
                "testEmptyStringToType_whereTypeReturnsSpecificObject",
                "testEmptyStringToType_whereTypeReturnsSpecificObject",
                "testEmptyStringToType_whereTypeReturnsSpecificObject",
                "testEmptyStringToType_whereTypeReturnsSpecificObject",
                "testEmptyStringToType_whereTypeReturnsSpecificObject",
                "testEmptyStringToType_whereTypeReturnsSpecificObject",
                "testEmptyStringToType_whereTypeReturnsSpecificObject",
                "testEmptyStringToType_whereTypeReturnsSpecificObject",
                "testEmptyStringToType_whereTypeReturnsSpecificObject",
                "testEmptyStringToType_whereTypeReturnsSpecificObject",
                "testEmptyStringToType_whereTypeReturnsSpecificObject",
                "testEmptyStringToType_whereTypeReturnsSpecificObject",
                "testEmptyStringToType_whereTypeReturnsSpecificObject",
                "testEmptyStringToType_whereTypeReturnsSpecificObject",
                "testEmptyStringToType_whereTypeReturnsSpecificObject",
                "testEmptyStringToType_whereTypeReturnsSpecificObject",
                "testEmptyStringToType_whereTypeReturnsSpecificObject",
                "testEmptyStringToType_whereTypeReturnsSpecificObject",
                "testEmptyStringToType_whereTypeReturnsSpecificObject",
                "testEmptyStringToType_whereTypeReturnsSpecificObject",
                "testSqlDateToString_IT",
                "testLocalDateToDateAndBack",
                "testLocalDateToDateAndBack",
                "testLocalDateToDateAndBack",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalDate",
                "testInstantToLocalTime",
                "testInstantToLocalTime",
                "testInstantToLocalTime",
                "testInstantToLocalTime",
                "testInstantToLocalTime",
                "testInstantToLocalTime",
                "testInstantToLocalTime",
                "testInstantToLocalTime",
                "testInstantToLocalTime",
                "testInstantToLocalTime",
                "testInstantToLocalTime",
                "testInstantToLocalTime",
                "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                "testEmptyStringToType_whereTypeIsEqualButNotSameAs",
                "testInstantToBigDecimal",
                "testInstantToBigDecimal",
                "testInstantToBigDecimal",
                "testInstantToBigDecimal",
                "testInstantToBigDecimal",
                "testInstantToBigDecimal",
                "testInstantToBigDecimal",
                "testInstantToBigDecimal",
                "testInstantToBigDecimal",
                "testInstantToBigDecimal",
                "testInstantToBigDecimal",
                "testInstantToBigDecimal",
                "testCharArrayToString",
                "testCharArrayToString",
                "testCharArrayToString",
                "testCharArrayToString",
                "testCharArrayToString",
                "testCharArrayToString",
                "testStringDateWithTimeZoneToLocalDateTime",
                "testStringDateWithTimeZoneToLocalDateTime",
                "testStringDateWithTimeZoneToLocalDateTime",
                "testStringDateWithTimeZoneToLocalDateTime",
                "testStringDateWithTimeZoneToLocalDateTime",
                "testStringDateWithTimeZoneToLocalDateTime",
                "testMapToCalendar",
                "testMapToCalendar",
                "testMapToCalendar",
                "testMapToCalendar",
                "testMapToCalendar",
                "testMapToCalendar",
                "testMapToCalendar",
                "testMapToCalendar",
                "testMapToCalendar",
                "testLocalDateToInstantAndBack",
                "testLocalDateToInstantAndBack",
                "testLocalDateToInstantAndBack",
                "testZonedDateTimeToInstant",
                "testZonedDateTimeToInstant",
                "testZonedDateTimeToInstant",
                "testZonedDateTimeToInstant",
                "testZonedDateTimeToInstant",
                "testZonedDateTimeToInstant",
                "testZonedDateTimeToInstant",
                "testZonedDateTimeToInstant",
                "testZonedDateTimeToInstant",
                "testZonedDateTimeToInstant",
                "testZonedDateTimeToInstant",
                "testZonedDateTimeToInstant",
                "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue",
                "testAtomicLong_withIllegalArguments",
                "testAtomicLong_withIllegalArguments",
                "testAtomicLong_withIllegalArguments",
                "testAtomicLong_withIllegalArguments",
                "toByte_whenNull_andNotPrimitive_returnsNull",
                "testInstantToZonedDateTime",
                "testInstantToZonedDateTime",
                "testInstantToZonedDateTime",
                "testInstantToZonedDateTime",
                "testInstantToZonedDateTime",
                "testInstantToZonedDateTime",
                "testInstantToZonedDateTime",
                "testInstantToZonedDateTime",
                "testInstantToZonedDateTime",
                "testInstantToZonedDateTime",
                "testInstantToZonedDateTime",
                "testInstantToZonedDateTime"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testSqlDateToString_IT": "java.lang.NoClassDefFoundError: com/cedarsoftware/util/convert/ConverterTest_testSqlDateToString",
                "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": null,
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 17622,
            "num_of_passed_test_cases": 165,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 17457,
            "num_of_reach_assertion_test_cases": -12,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h0Test3_valid": {
                    "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToString_h0Test3": "java.lang.NoClassDefFoundError: com/cedarsoftware/util/convert/ConverterTest_testSqlDateToString",
                    "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
                },
                "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h0Test4_valid": {
                    "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToString_h0Test4": "java.lang.NoClassDefFoundError: com/cedarsoftware/util/convert/ConverterTest_testSqlDateToString",
                    "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
                },
                "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h4Test1_valid": {
                    "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToString_h4Test1": "java.lang.NoClassDefFoundError: com/cedarsoftware/util/convert/ConverterTest_testSqlDateToString",
                    "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
                },
                "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h4Test2_valid": {
                    "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToString_h4Test2": "java.lang.NoClassDefFoundError: com/cedarsoftware/util/convert/ConverterTest_testSqlDateToString",
                    "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
                },
                "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h6Test1_valid": {
                    "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToString_h6Test1": "java.lang.NoClassDefFoundError: com/cedarsoftware/util/convert/ConverterTest_testSqlDateToString",
                    "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
                },
                "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h6Test2_valid": {
                    "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToString_h6Test2": "java.lang.NoClassDefFoundError: com/cedarsoftware/util/convert/ConverterTest_testSqlDateToString",
                    "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
                },
                "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h6Test3_valid": {
                    "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToString_h6Test3": "java.lang.NoClassDefFoundError: com/cedarsoftware/util/convert/ConverterTest_testSqlDateToString",
                    "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
                },
                "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h6Test4_valid": {
                    "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToString_h6Test4": "java.lang.NoClassDefFoundError: com/cedarsoftware/util/convert/ConverterTest_testSqlDateToString",
                    "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
                },
                "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h8Test1_valid": {
                    "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToString_h8Test1": "java.lang.NoClassDefFoundError: com/cedarsoftware/util/convert/ConverterTest_testSqlDateToString",
                    "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
                },
                "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h8Test2_valid": {
                    "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToString_h8Test2": "java.lang.NoClassDefFoundError: com/cedarsoftware/util/convert/ConverterTest_testSqlDateToString",
                    "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
                },
                "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h8Test3_valid": {
                    "toByte_whenEmpty_andNotPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigIntegerToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimestampAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_withBooleanParams_returnsCommonValues": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertString_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringNullAndEmpty": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenNullString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitive_withNullAndEmptySource_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_usingPrimitiveClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToSqlDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withIllegalArguments_throwsException": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenNotPrimitive_andNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateZonedDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateSqlDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEpochMilliWithZoneId": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToFloat_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToTimestamp": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigDecimalAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "stringToClass": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToBigIntegerAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToCharArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testClassesThatReturnZero_whenConvertingFromNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andNullString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenEmptyString_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withBooleanTypes": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip_withLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNullOrEmpty_andCovnertingToPrimitive_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_primitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToAtomicLong_whenEmptyString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_trueCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeIncludeMillis": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_stillCreatesNewObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_fromBoolean_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendar_roundTrip": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteArray": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_withBooleanPrams_usingPrimitive_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_objectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigInteger_withObjectsShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testToBoolean_falseCases": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTimeWithZone": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testExtremeDateParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDoubleAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigDecimal_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withDefaultOptions_andObjectType_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_ObjectType": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_fromBoolean_usingPrimitive_isSameAsCommonValueObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toFloat_withBooleanArguments_returnsCommonValueWhenPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLocalDateTimeAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertLocalDateToLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenNotPrimitive_andEmptyString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByteUsingPrimitive": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toLong_whenPrimitive_andNullOrEmpty_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimal_withObjectsThatShouldBeSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testSqlDateToString_h8Test3": "java.lang.NoClassDefFoundError: com/cedarsoftware/util/convert/ConverterTest_testSqlDateToString",
                    "testInstantToFloat": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertToBigInteger_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "conversionsWithPrecisionLoss_toAtomicInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringParams": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithNoTimeZoneInformation": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConvertTCharacter_withNumberFormatExceptions": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testTimestampToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDateToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testConversions_whenClassTypeMatchesObjectType_returnsItself": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testDouble": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitives": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringToByteBuffer": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testByteArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_fromBoolean": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toInt_usingPrimitive_whenEmptyOrNullString_returnsZero": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testBigDecimalToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDateTime_whenCalendarTimeZoneDoesNotMatch": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toShort_whenNotPrimitive_whenNull_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToAtomicLongAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenTrue_withCustomOptions_returnsTrueCharacter": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCalendarToLocalDate_whenCalendarTimeZoneMatches": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLongToBigInteger": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateTimeToLong": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeReturnsSpecificObject": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToDateAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalDate": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToLocalTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testEmptyStringToType_whereTypeIsEqualButNotSameAs": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToBigDecimal": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testCharArrayToString": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testStringDateWithTimeZoneToLocalDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testMapToCalendar": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testLocalDateToInstantAndBack": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testZonedDateTimeToInstant": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toCharacter_whenFalse_withDefaultOptions_returnsCommonValue": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testAtomicLong_withIllegalArguments": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "toByte_whenNull_andNotPrimitive_returnsNull": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions",
                    "testInstantToZonedDateTime": "java.lang.NoClassDefFoundError: org/assertj/core/api/Assertions"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__castle__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__castle__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/MapTest.java",
            "test_simple_name": "test1",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.MapTest.test1()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__castle__fastjson2/com.alibaba.fastjson2.internal.processor.maps.MapTest.test1__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<String, User>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Map<String, User> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                },
                {
                    "type": "Type",
                    "expression": "mapType",
                    "statement": "Map<String, User> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference;java.lang.reflect.Type",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test1_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 23,
            "num_of_passed_test_cases": 23,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -24,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test1_h0Test0"
                ],
                [
                    "test1_h0Test1"
                ],
                [
                    "test1_h0Test2"
                ],
                [
                    "test1_h0Test4"
                ],
                [
                    "test1_h0Test5"
                ],
                [
                    "test1_h1Test0"
                ],
                [
                    "test1_h1Test1"
                ],
                [
                    "test1_h1Test2"
                ],
                [
                    "test1_h1Test3"
                ],
                [
                    "test1_h1Test4"
                ],
                [
                    "test1_h2Test0"
                ],
                [
                    "test1_h2Test1"
                ],
                [
                    "test1_h2Test3"
                ],
                [
                    "test1_h2Test4"
                ],
                [
                    "test1_h3Test0"
                ],
                [
                    "test1_h3Test1"
                ],
                [
                    "test1_h3Test2"
                ],
                [
                    "test1_h3Test4"
                ],
                [
                    "test1_h3Test5"
                ],
                [
                    "test1_h4Test0"
                ],
                [
                    "test1_h4Test1"
                ],
                [
                    "test1_h4Test3"
                ],
                [
                    "test1_h4Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 24,
            "num_of_passed_test_cases": 24,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -25,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test1_h0Test0"
                ],
                [
                    "test1_h0Test1"
                ],
                [
                    "test1_h0Test2"
                ],
                [
                    "test1_h0Test3"
                ],
                [
                    "test1_h0Test4"
                ],
                [
                    "test1_h2Test2"
                ],
                [
                    "test1_h3Test2"
                ],
                [
                    "test1_h4Test1"
                ],
                [
                    "test1_h4Test2"
                ],
                [
                    "test1_h4Test3"
                ],
                [
                    "test1_h4Test4"
                ],
                [
                    "test1_h4Test9"
                ],
                [
                    "test1_h4Test10"
                ],
                [
                    "test1_h5Test2"
                ],
                [
                    "test1_h5Test6"
                ],
                [
                    "test1_h5Test7"
                ],
                [
                    "test1_h5Test10"
                ],
                [
                    "test1_h6Test2"
                ],
                [
                    "test1_h6Test6"
                ],
                [
                    "test1_h6Test8"
                ],
                [
                    "test1_h7Test0"
                ],
                [
                    "test1_h7Test2"
                ],
                [
                    "test1_h7Test3"
                ],
                [
                    "test1_h9Test3"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "aws__castle__event-ruler",
            "test_file_path": "./data/ITrans/projects/aws__castle__event-ruler/src/test/software/amazon/event/ruler/SubRuleContextTest.java",
            "test_simple_name": "testGetters",
            "FQS_testMethos": "software.amazon.event.ruler.SubRuleContextTest.testGetters()",
            "assertionSTMT": "assertEquals(NAME, generator.getNameForGeneratedId(context.getId()))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/aws__castle__event-ruler/software.amazon.event.ruler.SubRuleContextTest.testGetters__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "software.amazon.event.ruler.SubRuleContext.Generator.generate(java.lang.Object)",
                "software.amazon.event.ruler.SubRuleContext.Generator.getNameForGeneratedId(java.lang.Double)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "SubRuleContext.Generator",
                    "expression": "generator",
                    "statement": "SubRuleContext context = generator.generate(NAME);",
                    "invocation": "generator.generate(NAME)"
                },
                {
                    "type": "String",
                    "expression": "NAME",
                    "statement": "SubRuleContext context = generator.generate(NAME);",
                    "invocation": "generator.generate(NAME)"
                }
            ],
            "followUpInput": [
                {
                    "type": "SubRuleContext.Generator",
                    "expression": "generator2",
                    "statement": "assertEquals(NAME, generator2.getNameForGeneratedId(id));",
                    "invocation": "generator2.getNameForGeneratedId(id)"
                },
                {
                    "type": "Double",
                    "expression": "id",
                    "statement": "assertEquals(NAME, generator2.getNameForGeneratedId(id));",
                    "invocation": "generator2.getNameForGeneratedId(id)"
                }
            ],
            "comments": "",
            "dependency": "software.amazon.event.ruler.SubRuleContext;software.amazon.event.ruler.SubRuleContext.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testGetters_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 6,
            "num_of_passed_test_cases": 6,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testGetters_h0Test0"
                ],
                [
                    "testGetters_h0Test2"
                ],
                [
                    "testGetters_h1Test1"
                ],
                [
                    "testGetters_h1Test4"
                ],
                [
                    "testGetters_h2Test0"
                ],
                [
                    "testGetters_h2Test1"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 15,
            "num_of_passed_test_cases": 15,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testGetters_h0Test0"
                ],
                [
                    "testGetters_h0Test1"
                ],
                [
                    "testGetters_h0Test4"
                ],
                [
                    "testGetters_h2Test1"
                ],
                [
                    "testGetters_h2Test2"
                ],
                [
                    "testGetters_h2Test3"
                ],
                [
                    "testGetters_h3Test4"
                ],
                [
                    "testGetters_h4Test3"
                ],
                [
                    "testGetters_h5Test0"
                ],
                [
                    "testGetters_h5Test1"
                ],
                [
                    "testGetters_h5Test3"
                ],
                [
                    "testGetters_h5Test4"
                ],
                [
                    "testGetters_h6Test3"
                ],
                [
                    "testGetters_h6Test4"
                ],
                [
                    "testGetters_h7Test4"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__castle__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__castle__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_parse_CharSequence",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_parse_CharSequence()",
            "assertionSTMT": "assertEquals(YearHalf.of(year, half), YearHalf.parse(text))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__castle__threeten-extra/org.threeten.extra.TestYearHalf.test_parse_CharSequence__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)",
                "org.threeten.extra.YearHalf.parse(java.lang.CharSequence)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "int",
                    "expression": "year",
                    "statement": "assertEquals(YearHalf.of(year, half), YearHalf.parse(text));",
                    "invocation": "YearHalf.of(year, half)"
                },
                {
                    "type": "int",
                    "expression": "half",
                    "statement": "assertEquals(YearHalf.of(year, half), YearHalf.parse(text));",
                    "invocation": "YearHalf.of(year, half)"
                }
            ],
            "followUpInput": [
                {
                    "type": "CharSequence",
                    "expression": "text",
                    "statement": "assertEquals(YearHalf.of(year, half), YearHalf.parse(text));",
                    "invocation": "YearHalf.parse(text)"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 2,
            "num_of_passed_test_cases": 2,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test_parse_CharSequence_IT",
                "test_parse_CharSequence_caseInsensitive"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 14,
            "num_of_passed_test_cases": 14,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -15,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_parse_CharSequence_h0Test0"
                ],
                [
                    "test_parse_CharSequence_h0Test1"
                ],
                [
                    "test_parse_CharSequence_h0Test2"
                ],
                [
                    "test_parse_CharSequence_h0Test3"
                ],
                [
                    "test_parse_CharSequence_h0Test4"
                ],
                [
                    "test_parse_CharSequence_h1Test1"
                ],
                [
                    "test_parse_CharSequence_h1Test3"
                ],
                [
                    "test_parse_CharSequence_h2Test2"
                ],
                [
                    "test_parse_CharSequence_h2Test4"
                ],
                [
                    "test_parse_CharSequence_h3Test0"
                ],
                [
                    "test_parse_CharSequence_h3Test1"
                ],
                [
                    "test_parse_CharSequence_h3Test2"
                ],
                [
                    "test_parse_CharSequence_h3Test3"
                ],
                [
                    "test_parse_CharSequence_h4Test2"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 25,
            "num_of_passed_test_cases": 25,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -26,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_parse_CharSequence_h0Test0"
                ],
                [
                    "test_parse_CharSequence_h0Test1"
                ],
                [
                    "test_parse_CharSequence_h0Test2"
                ],
                [
                    "test_parse_CharSequence_h0Test3"
                ],
                [
                    "test_parse_CharSequence_h0Test4"
                ],
                [
                    "test_parse_CharSequence_h2Test2"
                ],
                [
                    "test_parse_CharSequence_h2Test3"
                ],
                [
                    "test_parse_CharSequence_h2Test4"
                ],
                [
                    "test_parse_CharSequence_h4Test1"
                ],
                [
                    "test_parse_CharSequence_h4Test3"
                ],
                [
                    "test_parse_CharSequence_h4Test4"
                ],
                [
                    "test_parse_CharSequence_h5Test7"
                ],
                [
                    "test_parse_CharSequence_h5Test9"
                ],
                [
                    "test_parse_CharSequence_h6Test3"
                ],
                [
                    "test_parse_CharSequence_h6Test7"
                ],
                [
                    "test_parse_CharSequence_h6Test8"
                ],
                [
                    "test_parse_CharSequence_h6Test9"
                ],
                [
                    "test_parse_CharSequence_h7Test5"
                ],
                [
                    "test_parse_CharSequence_h7Test6"
                ],
                [
                    "test_parse_CharSequence_h7Test7"
                ],
                [
                    "test_parse_CharSequence_h7Test8"
                ],
                [
                    "test_parse_CharSequence_h7Test9"
                ],
                [
                    "test_parse_CharSequence_h8Test9"
                ],
                [
                    "test_parse_CharSequence_h9Test4"
                ],
                [
                    "test_parse_CharSequence_h9Test5"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "TheAlgorithms__castle__Java",
            "test_file_path": "./data/ITrans/projects/TheAlgorithms__castle__Java/src/test/java/com/thealgorithms/datastructures/crdt/ORSetTest.java",
            "test_simple_name": "testCompareDifferentSets",
            "FQS_testMethos": "com.thealgorithms.datastructures.crdt.ORSetTest.testCompareDifferentSets()",
            "assertionSTMT": "assertFalse(orSet1.compare(orSet2))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/TheAlgorithms__castle__Java/com.thealgorithms.datastructures.crdt.ORSetTest.testCompareDifferentSets__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.thealgorithms.datastructures.crdt.ORSet.add(T)",
                "com.thealgorithms.datastructures.crdt.ORSet.add(T)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "element1",
                    "statement": "orSet1.add(element1);",
                    "invocation": "orSet1.add(element1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "element2",
                    "statement": "orSet2.add(element2);",
                    "invocation": "orSet2.add(element2)"
                }
            ],
            "comments": "",
            "dependency": "com.thealgorithms.datastructures.crdt.ORSet;com.thealgorithms.datastructures.crdt.ORSet.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testCompareDifferentSets_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 9,
            "num_of_passed_test_cases": 9,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -10,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testCompareDifferentSets_h0Test0"
                ],
                [
                    "testCompareDifferentSets_h0Test1"
                ],
                [
                    "testCompareDifferentSets_h0Test2"
                ],
                [
                    "testCompareDifferentSets_h0Test4"
                ],
                [
                    "testCompareDifferentSets_h3Test4"
                ],
                [
                    "testCompareDifferentSets_h4Test0"
                ],
                [
                    "testCompareDifferentSets_h4Test1"
                ],
                [
                    "testCompareDifferentSets_h4Test2"
                ],
                [
                    "testCompareDifferentSets_h4Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 5,
            "num_of_passed_test_cases": 5,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -6,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testCompareDifferentSets_h9Test0"
                ],
                [
                    "testCompareDifferentSets_h9Test1"
                ],
                [
                    "testCompareDifferentSets_h9Test2"
                ],
                [
                    "testCompareDifferentSets_h9Test3"
                ],
                [
                    "testCompareDifferentSets_h9Test4"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "javadev__castle__underscore-java",
            "test_file_path": "./data/ITrans/projects/javadev__castle__underscore-java/src/test/java/com/github/underscore/XmlBuilderTest.java",
            "test_simple_name": "parse",
            "FQS_testMethos": "com.github.underscore.XmlBuilderTest.parse()",
            "assertionSTMT": "assertEquals(XML, xmlBuilder.asString())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/javadev__castle__underscore-java/com.github.underscore.XmlBuilderTest.parse__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "com.github.underscore.XmlBuilder.parse(java.lang.String)",
                "com.github.underscore.XmlBuilder.asString()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "XML",
                    "statement": "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                    "invocation": "xmlBuilder = XmlBuilder.parse(XML)"
                }
            ],
            "followUpInput": [
                {
                    "type": "XmlBuilder",
                    "expression": "xmlBuilder2",
                    "statement": "assertEquals(XML, xmlBuilder2.asString());",
                    "invocation": "xmlBuilder2.asString()"
                }
            ],
            "comments": "",
            "dependency": "com.github.underscore.XmlBuilder;com.github.underscore.XmlBuilder.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "parse_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "parse_IT": "java.lang.NoClassDefFoundError: com/github/underscore/XmlBuilderTest_parse"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 7,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 7,
            "num_of_reach_assertion_test_cases": -8,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "com.github.underscore.XmlBuilderTest_parse_h1Test1_valid": {
                    "parse_h1Test1": "java.lang.NoClassDefFoundError: com/github/underscore/XmlBuilderTest_parse"
                },
                "com.github.underscore.XmlBuilderTest_parse_h1Test3_valid": {
                    "parse_h1Test3": "java.lang.NoClassDefFoundError: com/github/underscore/XmlBuilderTest_parse"
                },
                "com.github.underscore.XmlBuilderTest_parse_h1Test4_valid": {
                    "parse_h1Test4": "java.lang.NoClassDefFoundError: com/github/underscore/XmlBuilderTest_parse"
                },
                "com.github.underscore.XmlBuilderTest_parse_h3Test1_valid": {
                    "parse_h3Test1": "java.lang.NoClassDefFoundError: com/github/underscore/XmlBuilderTest_parse"
                },
                "com.github.underscore.XmlBuilderTest_parse_h3Test2_valid": {
                    "parse_h3Test2": "java.lang.NoClassDefFoundError: com/github/underscore/XmlBuilderTest_parse"
                },
                "com.github.underscore.XmlBuilderTest_parse_h3Test3_valid": {
                    "parse_h3Test3": "java.lang.NoClassDefFoundError: com/github/underscore/XmlBuilderTest_parse"
                },
                "com.github.underscore.XmlBuilderTest_parse_h3Test4_valid": {
                    "parse_h3Test4": "java.lang.NoClassDefFoundError: com/github/underscore/XmlBuilderTest_parse"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 5,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 5,
            "num_of_reach_assertion_test_cases": -6,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "com.github.underscore.XmlBuilderTest_parse_h7Test0_valid": {
                    "parse_h7Test0": "java.lang.NoClassDefFoundError: com/github/underscore/XmlBuilderTest_parse"
                },
                "com.github.underscore.XmlBuilderTest_parse_h7Test1_valid": {
                    "parse_h7Test1": "java.lang.NoClassDefFoundError: com/github/underscore/XmlBuilderTest_parse"
                },
                "com.github.underscore.XmlBuilderTest_parse_h7Test2_valid": {
                    "parse_h7Test2": "java.lang.NoClassDefFoundError: com/github/underscore/XmlBuilderTest_parse"
                },
                "com.github.underscore.XmlBuilderTest_parse_h7Test3_valid": {
                    "parse_h7Test3": "java.lang.NoClassDefFoundError: com/github/underscore/XmlBuilderTest_parse"
                },
                "com.github.underscore.XmlBuilderTest_parse_h7Test4_valid": {
                    "parse_h7Test4": "java.lang.NoClassDefFoundError: com/github/underscore/XmlBuilderTest_parse"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__castle__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__castle__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/collections/ListTest1.java",
            "test_simple_name": "test1",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.collections.ListTest1.test1()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__castle__fastjson2/com.alibaba.fastjson2.internal.processor.collections.ListTest1.test1__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "List<String>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "List<String> v02 = JSON.parseObject(str2, listType);",
                    "invocation": "v02 = JSON.parseObject(str2, listType)"
                },
                {
                    "type": "java.lang.reflect.Type",
                    "expression": "listType",
                    "statement": "List<String> v02 = JSON.parseObject(str2, listType);",
                    "invocation": "v02 = JSON.parseObject(str2, listType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test1_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 9,
            "num_of_passed_test_cases": 9,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -10,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test1_h1Test0"
                ],
                [
                    "test1_h2Test1"
                ],
                [
                    "test1_h2Test2"
                ],
                [
                    "test1_h2Test3"
                ],
                [
                    "test1_h2Test4"
                ],
                [
                    "test1_h3Test3"
                ],
                [
                    "test1_h4Test2"
                ],
                [
                    "test1_h4Test3"
                ],
                [
                    "test1_h4Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 23,
            "num_of_passed_test_cases": 23,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -24,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test1_h0Test0"
                ],
                [
                    "test1_h0Test1"
                ],
                [
                    "test1_h0Test2"
                ],
                [
                    "test1_h0Test3"
                ],
                [
                    "test1_h0Test4"
                ],
                [
                    "test1_h2Test2"
                ],
                [
                    "test1_h2Test3"
                ],
                [
                    "test1_h3Test0"
                ],
                [
                    "test1_h3Test1"
                ],
                [
                    "test1_h3Test2"
                ],
                [
                    "test1_h3Test3"
                ],
                [
                    "test1_h3Test4"
                ],
                [
                    "test1_h4Test1"
                ],
                [
                    "test1_h4Test2"
                ],
                [
                    "test1_h4Test3"
                ],
                [
                    "test1_h4Test4"
                ],
                [
                    "test1_h6Test3"
                ],
                [
                    "test1_h7Test1"
                ],
                [
                    "test1_h8Test1"
                ],
                [
                    "test1_h8Test2"
                ],
                [
                    "test1_h8Test3"
                ],
                [
                    "test1_h8Test4"
                ],
                [
                    "test1_h9Test4"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "matsim-org__castle__matsim-libs",
            "test_file_path": "./data/ITrans/projects/matsim-org__castle__matsim-libs/matsim/src/test/java/org/matsim/core/config/groups/ScoringConfigGroupTest.java",
            "test_simple_name": "testAddActivityParams",
            "FQS_testMethos": "org.matsim.core.config.groups.ScoringConfigGroupTest.testAddActivityParams()",
            "assertionSTMT": "Assertions.assertEquals(ap, c.getActivityParams(type))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/matsim-org__castle__matsim-libs/org.matsim.core.config.groups.ScoringConfigGroupTest.testAddActivityParams__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.matsim.core.config.groups.ScoringConfigGroup.addActivityParams(org.matsim.core.config.groups.ScoringConfigGroup.ActivityParams)",
                "org.matsim.core.config.groups.ScoringConfigGroup.getActivityParams(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "ActivityParams",
                    "expression": "ap",
                    "statement": "c.addActivityParams(ap);",
                    "invocation": "c.addActivityParams(ap)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "type",
                    "statement": "Assertions.assertEquals(ap, c.getActivityParams(type));",
                    "invocation": "c.getActivityParams(type)"
                }
            ],
            "comments": "",
            "dependency": "org.matsim.core.config.groups.ScoringConfigGroup;org.matsim.core.config.groups.ScoringConfigGroup.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testAddActivityParams_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 10,
            "num_of_passed_test_cases": 10,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -11,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testAddActivityParams_h0Test0"
                ],
                [
                    "testAddActivityParams_h0Test1"
                ],
                [
                    "testAddActivityParams_h0Test2"
                ],
                [
                    "testAddActivityParams_h0Test3"
                ],
                [
                    "testAddActivityParams_h0Test4"
                ],
                [
                    "testAddActivityParams_h1Test0"
                ],
                [
                    "testAddActivityParams_h1Test1"
                ],
                [
                    "testAddActivityParams_h1Test2"
                ],
                [
                    "testAddActivityParams_h1Test3"
                ],
                [
                    "testAddActivityParams_h1Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 14,
            "num_of_passed_test_cases": 14,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -15,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testAddActivityParams_h0Test0"
                ],
                [
                    "testAddActivityParams_h0Test1"
                ],
                [
                    "testAddActivityParams_h0Test2"
                ],
                [
                    "testAddActivityParams_h0Test3"
                ],
                [
                    "testAddActivityParams_h5Test0"
                ],
                [
                    "testAddActivityParams_h5Test2"
                ],
                [
                    "testAddActivityParams_h5Test4"
                ],
                [
                    "testAddActivityParams_h5Test6"
                ],
                [
                    "testAddActivityParams_h5Test8"
                ],
                [
                    "testAddActivityParams_h6Test0"
                ],
                [
                    "testAddActivityParams_h6Test2"
                ],
                [
                    "testAddActivityParams_h6Test4"
                ],
                [
                    "testAddActivityParams_h6Test6"
                ],
                [
                    "testAddActivityParams_h9Test0"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__castle__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__castle__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/Map1Test.java",
            "test_simple_name": "test3",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test3()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__castle__fastjson2/com.alibaba.fastjson2.internal.processor.maps.Map1Test.test3__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<String, Boolean>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Map<String, Boolean> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                },
                {
                    "type": "Type",
                    "expression": "mapType",
                    "statement": "Map<String, Boolean> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference;java.lang.reflect.Type",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "test3_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "test3_IT": "java.lang.ClassCastException: class com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3$1 cannot be cast to class java.lang.reflect.Type (com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3$1 is in unnamed module of loader java.net.FactoryURLClassLoader @3eb738bb; java.lang.reflect.Type is in module java.base of loader 'bootstrap')"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 9,
            "num_of_passed_test_cases": 9,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -10,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test3_h0Test0"
                ],
                [
                    "test3_h0Test1"
                ],
                [
                    "test3_h0Test2"
                ],
                [
                    "test3_h0Test3"
                ],
                [
                    "test3_h0Test4"
                ],
                [
                    "test3_h1Test0"
                ],
                [
                    "test3_h1Test1"
                ],
                [
                    "test3_h1Test2"
                ],
                [
                    "test3_h2Test3"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 13,
            "num_of_passed_test_cases": 13,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -14,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test3_h0Test0"
                ],
                [
                    "test3_h0Test1"
                ],
                [
                    "test3_h0Test2"
                ],
                [
                    "test3_h0Test3"
                ],
                [
                    "test3_h0Test4"
                ],
                [
                    "test3_h2Test2"
                ],
                [
                    "test3_h2Test3"
                ],
                [
                    "test3_h2Test5"
                ],
                [
                    "test3_h4Test2"
                ],
                [
                    "test3_h4Test4"
                ],
                [
                    "test3_h4Test5"
                ],
                [
                    "test3_h5Test1"
                ],
                [
                    "test3_h5Test2"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "synthetichealth__castle__synthea",
            "test_file_path": "./data/ITrans/projects/synthetichealth__castle__synthea/src/test/java/org/mitre/synthea/engine/ExpressedSymptomTest.java",
            "test_simple_name": "testExpressedSymtpom",
            "FQS_testMethos": "org.mitre.synthea.engine.ExpressedSymptomTest.testExpressedSymtpom()",
            "assertionSTMT": "assertEquals(Long.valueOf(l), symptom2.getSymptomLastUpdatedTime(module2));",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/synthetichealth__castle__synthea/org.mitre.synthea.engine.ExpressedSymptomTest.testExpressedSymtpom__castle__3.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.mitre.synthea.engine.ExpressedSymptom.onSet(java.lang.String, java.lang.String, long, int, java.lang.Boolean)",
                "org.mitre.synthea.engine.ExpressedSymptom.getSymptomLastUpdatedTime(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 8,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "ExpressedSymptom",
                    "expression": "symptom",
                    "statement": "symptom.onSet(module, cause, l, (int) (100 * l), false);",
                    "invocation": "symptom.onSet(module, cause, l, (int) (100 * l), false)"
                },
                {
                    "type": "String",
                    "expression": "module",
                    "statement": "symptom.onSet(module, cause, l, (int) (100 * l), false);",
                    "invocation": "symptom.onSet(module, cause, l, (int) (100 * l), false)"
                }
            ],
            "followUpInput": [
                {
                    "type": "ExpressedSymptom",
                    "expression": "symptom2",
                    "statement": "assertEquals(Long.valueOf(l), symptom.getSymptomLastUpdatedTime(module2));",
                    "invocation": "symptom.getSymptomLastUpdatedTime(module2)"
                },
                {
                    "type": "String",
                    "expression": "module2",
                    "statement": "assertEquals(Long.valueOf(l), symptom2.getSymptomLastUpdatedTime(module2));",
                    "invocation": "symptom2.getSymptomLastUpdatedTime(module2)"
                }
            ],
            "comments": "",
            "dependency": "org.mitre.synthea.engine.ExpressedSymptom;org.mitre.synthea.engine.ExpressedSymptom.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testExpressedSymtpom_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false
            ],
            "reach_assertion_test_cases_list": [
                []
            ],
            "assertion_failed_test_cases_list": [
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testExpressedSymtpom_h2Test0"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false
            ],
            "reach_assertion_test_cases_list": [
                []
            ],
            "assertion_failed_test_cases_list": [
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testExpressedSymtpom_h0Test0"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "arextest__castle__arex-agent-java",
            "test_file_path": "./data/ITrans/projects/arextest__castle__arex-agent-java/arex-instrumentation-api/src/test/java/io/arex/inst/runtime/model/SerializeSkipInfoTest.java",
            "test_simple_name": "testHashCode",
            "FQS_testMethos": "io.arex.inst.runtime.model.SerializeSkipInfoTest.testHashCode()",
            "assertionSTMT": "assertEquals(serializeSkipInfo2.hashCode(), serializeSkipInfo.hashCode())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/arextest__castle__arex-agent-java/io.arex.inst.runtime.model.SerializeSkipInfoTest.testHashCode__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "io.arex.inst.runtime.model.SerializeSkipInfo.hashCode()",
                "io.arex.inst.runtime.model.SerializeSkipInfo.hashCode()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "SerializeSkipInfo",
                    "expression": "serializeSkipInfo",
                    "statement": "assertEquals(serializeSkipInfo2.hashCode(), serializeSkipInfo.hashCode());",
                    "invocation": "serializeSkipInfo.hashCode()"
                }
            ],
            "followUpInput": [
                {
                    "type": "SerializeSkipInfo",
                    "expression": "serializeSkipInfo2",
                    "statement": "assertEquals(serializeSkipInfo2.hashCode(), serializeSkipInfo.hashCode());",
                    "invocation": "serializeSkipInfo2.hashCode()"
                }
            ],
            "comments": "",
            "dependency": "io.arex.inst.runtime.model.SerializeSkipInfo;io.arex.inst.runtime.model.SerializeSkipInfo.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testHashCode_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 11,
            "num_of_passed_test_cases": 11,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -12,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testHashCode_h0Test0"
                ],
                [
                    "testHashCode_h0Test1"
                ],
                [
                    "testHashCode_h0Test2"
                ],
                [
                    "testHashCode_h0Test3"
                ],
                [
                    "testHashCode_h0Test4"
                ],
                [
                    "testHashCode_h1Test1"
                ],
                [
                    "testHashCode_h2Test2"
                ],
                [
                    "testHashCode_h2Test3"
                ],
                [
                    "testHashCode_h2Test4"
                ],
                [
                    "testHashCode_h3Test3"
                ],
                [
                    "testHashCode_h4Test2"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 11,
            "num_of_passed_test_cases": 11,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -12,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testHashCode_h0Test0"
                ],
                [
                    "testHashCode_h0Test1"
                ],
                [
                    "testHashCode_h4Test3"
                ],
                [
                    "testHashCode_h4Test4"
                ],
                [
                    "testHashCode_h6Test2"
                ],
                [
                    "testHashCode_h6Test3"
                ],
                [
                    "testHashCode_h6Test4"
                ],
                [
                    "testHashCode_h7Test3"
                ],
                [
                    "testHashCode_h7Test4"
                ],
                [
                    "testHashCode_h8Test1"
                ],
                [
                    "testHashCode_h9Test7"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "apache__castle__systemds",
            "test_file_path": "./data/ITrans/projects/apache__castle__systemds/src/test/java/org/apache/sysds/test/component/compress/util/ArrayListTest.java",
            "test_simple_name": "extract",
            "FQS_testMethos": "org.apache.sysds.test.component.compress.util.ArrayListTest.extract()",
            "assertionSTMT": "assertTrue(ex.length >= et.length)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__castle__systemds/org.apache.sysds.test.component.compress.util.ArrayListTest.extract__castle__1.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.apache.sysds.runtime.compress.utils.IntArrayList.extractValues(boolean)",
                "org.apache.sysds.runtime.compress.utils.IntArrayList.extractValues(boolean)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 2,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "IntArrayList",
                    "expression": "a",
                    "statement": "int[] ex = a.extractValues(trimFlag);",
                    "invocation": "ex = a.extractValues(trimFlag)"
                },
                {
                    "type": "boolean",
                    "expression": "trimFlag",
                    "statement": "int[] ex = a.extractValues(trimFlag);",
                    "invocation": "ex = a.extractValues(trimFlag)"
                }
            ],
            "followUpInput": [
                {
                    "type": "IntArrayList",
                    "expression": "a2",
                    "statement": "int[] ex2 = a2.extractValues(trimFlag2);",
                    "invocation": "ex2 = a2.extractValues(trimFlag2)"
                },
                {
                    "type": "boolean",
                    "expression": "trimFlag2",
                    "statement": "int[] ex2 = a2.extractValues(trimFlag2);",
                    "invocation": "ex2 = a2.extractValues(trimFlag2)"
                }
            ],
            "comments": "",
            "dependency": "org.apache.sysds.runtime.compress.utils.IntArrayList;org.apache.sysds.runtime.compress.utils.IntArrayList.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 2,
            "num_of_passed_test_cases": 2,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "extract_h0",
                "extract_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false
            ],
            "reach_assertion_test_cases_list": [
                []
            ],
            "assertion_failed_test_cases_list": [
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "extract_h0Test1"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false
            ],
            "reach_assertion_test_cases_list": [
                []
            ],
            "assertion_failed_test_cases_list": [
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "extract_h0Test1"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "rsksmart__castle__rskj",
            "test_file_path": "./data/ITrans/projects/rsksmart__castle__rskj/rskj-core/src/test/java/org/ethereum/rpc/FilterTest.java",
            "test_simple_name": "testGetNewEvents",
            "FQS_testMethos": "org.ethereum.rpc.FilterTest.testGetNewEvents()",
            "assertionSTMT": "assertArrayEquals(new Object[] { mockEvent.getJsonEventObject() }, events1)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/rsksmart__castle__rskj/org.ethereum.rpc.FilterTest.testGetNewEvents__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.ethereum.rpc.Filter.add(org.ethereum.rpc.Filter.FilterEvent)",
                "org.ethereum.rpc.Filter.getNewEvents()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Filter.FilterEvent",
                    "expression": "mockEvent",
                    "statement": "filter.add(mockEvent);",
                    "invocation": "filter.add(mockEvent)"
                },
                {
                    "type": "Filter",
                    "expression": "filter",
                    "statement": "filter.add(mockEvent);",
                    "invocation": "filter.add(mockEvent)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Filter.FilterEvent",
                    "expression": "mockEvent2",
                    "statement": "filter2.add(mockEvent2);",
                    "invocation": "filter2.add(mockEvent2)"
                },
                {
                    "type": "Filter",
                    "expression": "filter2",
                    "statement": "filter2.add(mockEvent2);",
                    "invocation": "filter2.add(mockEvent2)"
                }
            ],
            "comments": "",
            "dependency": "org.ethereum.rpc.Filter;org.ethereum.rpc.Filter.*;org.ethereum.rpc.FilterTest;org.ethereum.rpc.FilterTest.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "testGetNewEvents_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "testGetNewEvents_IT": "java.lang.NoClassDefFoundError: org/ethereum/rpc/FilterTest_testGetNewEvents"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": null,
        "LLMI_testing_generatedIT_result_evaluation": null,
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "networknt__castle__json-schema-validator",
            "test_file_path": "./data/ITrans/projects/networknt__castle__json-schema-validator/src/test/java/com/networknt/schema/JsonNodePathTest.java",
            "test_simple_name": "equalsEquals",
            "FQS_testMethos": "com.networknt.schema.JsonNodePathTest.equalsEquals()",
            "assertionSTMT": "assertEquals(a1, a2)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/networknt__castle__json-schema-validator/com.networknt.schema.JsonNodePathTest.equalsEquals__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.networknt.schema.JsonNodePath.append(java.lang.String)",
                "com.networknt.schema.JsonNodePath.append(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "token1",
                    "statement": "a1.append(token1);",
                    "invocation": "a1.append(token1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "token2",
                    "statement": "a2.append(token2);",
                    "invocation": "a2.append(token2)"
                }
            ],
            "comments": "",
            "dependency": "com.networknt.schema.JsonNodePath;com.networknt.schema.JsonNodePath.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "equalsEquals_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 7,
            "num_of_passed_test_cases": 7,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -8,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "equalsEquals_h0Test0"
                ],
                [
                    "equalsEquals_h0Test1"
                ],
                [
                    "equalsEquals_h0Test2"
                ],
                [
                    "equalsEquals_h0Test3"
                ],
                [
                    "equalsEquals_h0Test4"
                ],
                [
                    "equalsEquals_h1Test2"
                ],
                [
                    "equalsEquals_h1Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 13,
            "num_of_passed_test_cases": 13,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -14,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "equalsEquals_h0Test0"
                ],
                [
                    "equalsEquals_h0Test2"
                ],
                [
                    "equalsEquals_h0Test3"
                ],
                [
                    "equalsEquals_h0Test4"
                ],
                [
                    "equalsEquals_h0Test5"
                ],
                [
                    "equalsEquals_h2Test2"
                ],
                [
                    "equalsEquals_h2Test4"
                ],
                [
                    "equalsEquals_h2Test6"
                ],
                [
                    "equalsEquals_h2Test8"
                ],
                [
                    "equalsEquals_h3Test4"
                ],
                [
                    "equalsEquals_h3Test6"
                ],
                [
                    "equalsEquals_h3Test8"
                ],
                [
                    "equalsEquals_h7Test6"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__castle__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__castle__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/primitives/IntTest.java",
            "test_simple_name": "test1",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.primitives.IntTest.test1()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__castle__fastjson2/com.alibaba.fastjson2.internal.processor.primitives.IntTest.test1__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Integer",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Integer v02 = JSON.parseObject(str2, clazz);",
                    "invocation": "v02 = JSON.parseObject(str2, clazz)"
                },
                {
                    "type": "Class<Integer>",
                    "expression": "clazz",
                    "statement": "Integer v02 = JSON.parseObject(str2, clazz);",
                    "invocation": "v02 = JSON.parseObject(str2, clazz)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test1_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 7,
            "num_of_passed_test_cases": 7,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -8,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test1_h0Test0"
                ],
                [
                    "test1_h0Test1"
                ],
                [
                    "test1_h0Test2"
                ],
                [
                    "test1_h0Test3"
                ],
                [
                    "test1_h0Test4"
                ],
                [
                    "test1_h2Test2"
                ],
                [
                    "test1_h3Test5"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 12,
            "num_of_passed_test_cases": 12,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -13,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test1_h0Test0"
                ],
                [
                    "test1_h0Test1"
                ],
                [
                    "test1_h0Test2"
                ],
                [
                    "test1_h0Test3"
                ],
                [
                    "test1_h0Test4"
                ],
                [
                    "test1_h2Test1"
                ],
                [
                    "test1_h8Test0"
                ],
                [
                    "test1_h8Test1"
                ],
                [
                    "test1_h8Test2"
                ],
                [
                    "test1_h8Test3"
                ],
                [
                    "test1_h8Test4"
                ],
                [
                    "test1_h9Test5"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__castle__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__castle__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_parse_CharSequence_caseInsensitive",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_parse_CharSequence_caseInsensitive()",
            "assertionSTMT": "assertEquals(YearHalf.of(year, half), YearHalf.parse(text))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__castle__threeten-extra/org.threeten.extra.TestYearHalf.test_parse_CharSequence_caseInsensitive__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)",
                "org.threeten.extra.YearHalf.parse(java.lang.CharSequence)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "int",
                    "expression": "year",
                    "statement": "assertEquals(YearHalf.of(year, half), YearHalf.parse(text));",
                    "invocation": "YearHalf.of(year, half)"
                },
                {
                    "type": "int",
                    "expression": "half",
                    "statement": "assertEquals(YearHalf.of(year, half), YearHalf.parse(text));",
                    "invocation": "YearHalf.of(year, half)"
                }
            ],
            "followUpInput": [
                {
                    "type": "CharSequence",
                    "expression": "text",
                    "statement": "assertEquals(YearHalf.of(year, half), YearHalf.parse(text));",
                    "invocation": "YearHalf.parse(text)"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test_parse_CharSequence_caseInsensitive_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 8,
            "num_of_passed_test_cases": 8,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -9,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_parse_CharSequence_caseInsensitive_h0Test0"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h0Test1"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h0Test2"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h0Test3"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h0Test4"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h1Test1"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h1Test3"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h1Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 16,
            "num_of_passed_test_cases": 16,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -17,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_parse_CharSequence_caseInsensitive_h0Test0"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h0Test1"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h0Test2"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h0Test3"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h0Test4"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h2Test1"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h5Test2"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h7Test3"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h7Test4"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h7Test5"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h7Test8"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h7Test9"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h8Test6"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h8Test7"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h8Test8"
                ],
                [
                    "test_parse_CharSequence_caseInsensitive_h8Test9"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__castle__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__castle__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/JSONObjectTest.java",
            "test_simple_name": "test",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest.test()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__castle__fastjson2/com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest.test__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "JSONObject",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "JSONObject v02 = JSON.parseObject(str2, clazz);",
                    "invocation": "v02 = JSON.parseObject(str2, clazz)"
                },
                {
                    "type": "Class<JSONObject>",
                    "expression": "clazz",
                    "statement": "JSONObject v02 = JSON.parseObject(str2, clazz);",
                    "invocation": "v02 = JSON.parseObject(str2, clazz)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 11,
            "num_of_passed_test_cases": 11,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -12,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_h0Test0"
                ],
                [
                    "test_h1Test0"
                ],
                [
                    "test_h1Test1"
                ],
                [
                    "test_h1Test2"
                ],
                [
                    "test_h1Test3"
                ],
                [
                    "test_h3Test2"
                ],
                [
                    "test_h3Test4"
                ],
                [
                    "test_h3Test6"
                ],
                [
                    "test_h3Test8"
                ],
                [
                    "test_h4Test3"
                ],
                [
                    "test_h4Test5"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 11,
            "num_of_passed_test_cases": 11,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -12,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_h0Test1"
                ],
                [
                    "test_h0Test2"
                ],
                [
                    "test_h0Test3"
                ],
                [
                    "test_h0Test4"
                ],
                [
                    "test_h7Test4"
                ],
                [
                    "test_h7Test6"
                ],
                [
                    "test_h7Test8"
                ],
                [
                    "test_h8Test2"
                ],
                [
                    "test_h8Test3"
                ],
                [
                    "test_h8Test4"
                ],
                [
                    "test_h8Test5"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "javadev__castle__underscore-java",
            "test_file_path": "./data/ITrans/projects/javadev__castle__underscore-java/src/test/java/com/github/underscore/XmlBuilderTest.java",
            "test_simple_name": "toJson",
            "FQS_testMethos": "com.github.underscore.XmlBuilderTest.toJson()",
            "assertionSTMT": "assertEquals(U.xmlToJson(XML), xmlBuilder.toJson())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/javadev__castle__underscore-java/com.github.underscore.XmlBuilderTest.toJson__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "com.github.underscore.XmlBuilder.parse(java.lang.String)",
                "com.github.underscore.XmlBuilder.toJson()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "XML",
                    "statement": "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                    "invocation": "xmlBuilder = XmlBuilder.parse(XML)"
                }
            ],
            "followUpInput": [
                {
                    "type": "XmlBuilder",
                    "expression": "xmlBuilder2",
                    "statement": "assertEquals(U.xmlToJson(XML), xmlBuilder2.toJson());",
                    "invocation": "xmlBuilder2.toJson()"
                }
            ],
            "comments": "",
            "dependency": "com.github.underscore.XmlBuilder;com.github.underscore.XmlBuilder.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "toJson_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 7,
            "num_of_passed_test_cases": 7,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -8,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "toJson_h0Test1"
                ],
                [
                    "toJson_h0Test2"
                ],
                [
                    "toJson_h0Test3"
                ],
                [
                    "toJson_h0Test4"
                ],
                [
                    "toJson_h1Test2"
                ],
                [
                    "toJson_h1Test3"
                ],
                [
                    "toJson_h1Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 26,
            "num_of_passed_test_cases": 26,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -27,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "toJson_h3Test0"
                ],
                [
                    "toJson_h3Test1"
                ],
                [
                    "toJson_h3Test2"
                ],
                [
                    "toJson_h3Test3"
                ],
                [
                    "toJson_h4Test0"
                ],
                [
                    "toJson_h4Test1"
                ],
                [
                    "toJson_h5Test0"
                ],
                [
                    "toJson_h5Test2"
                ],
                [
                    "toJson_h5Test4"
                ],
                [
                    "toJson_h5Test6"
                ],
                [
                    "toJson_h5Test8"
                ],
                [
                    "toJson_h6Test0"
                ],
                [
                    "toJson_h6Test1"
                ],
                [
                    "toJson_h6Test2"
                ],
                [
                    "toJson_h6Test3"
                ],
                [
                    "toJson_h6Test4"
                ],
                [
                    "toJson_h7Test4"
                ],
                [
                    "toJson_h8Test1"
                ],
                [
                    "toJson_h8Test2"
                ],
                [
                    "toJson_h8Test3"
                ],
                [
                    "toJson_h8Test4"
                ],
                [
                    "toJson_h9Test0"
                ],
                [
                    "toJson_h9Test1"
                ],
                [
                    "toJson_h9Test2"
                ],
                [
                    "toJson_h9Test3"
                ],
                [
                    "toJson_h9Test4"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "arextest__castle__arex-agent-java",
            "test_file_path": "./data/ITrans/projects/arextest__castle__arex-agent-java/arex-instrumentation-api/src/test/java/io/arex/inst/runtime/model/SerializeSkipInfoTest.java",
            "test_simple_name": "testToString",
            "FQS_testMethos": "io.arex.inst.runtime.model.SerializeSkipInfoTest.testToString()",
            "assertionSTMT": "assertEquals(serializeSkipInfo.toString(), serializeSkipInfo2.toString())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/arextest__castle__arex-agent-java/io.arex.inst.runtime.model.SerializeSkipInfoTest.testToString__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "io.arex.inst.runtime.model.SerializeSkipInfo.toString()",
                "io.arex.inst.runtime.model.SerializeSkipInfo.toString()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "SerializeSkipInfo",
                    "expression": "serializeSkipInfo",
                    "statement": "assertEquals(serializeSkipInfo.toString(), serializeSkipInfo2.toString());",
                    "invocation": "serializeSkipInfo.toString()"
                }
            ],
            "followUpInput": [
                {
                    "type": "SerializeSkipInfo",
                    "expression": "serializeSkipInfo2",
                    "statement": "assertEquals(serializeSkipInfo.toString(), serializeSkipInfo2.toString());",
                    "invocation": "serializeSkipInfo2.toString()"
                }
            ],
            "comments": "",
            "dependency": "io.arex.inst.runtime.model.SerializeSkipInfo;io.arex.inst.runtime.model.SerializeSkipInfo.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testToString_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 12,
            "num_of_passed_test_cases": 9,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 3,
            "num_of_reach_assertion_test_cases": -13,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testToString_h0Test0"
                ],
                [
                    "testToString_h0Test1"
                ],
                [
                    "testToString_h0Test2"
                ],
                [
                    "testToString_h0Test3"
                ],
                [],
                [
                    "testToString_h1Test3"
                ],
                [
                    "testToString_h2Test2"
                ],
                [
                    "testToString_h2Test3"
                ],
                [
                    "testToString_h2Test4"
                ],
                [],
                [],
                [
                    "testToString_h4Test3"
                ]
            ],
            "failure_info": {
                "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h0Test4_valid": {
                    "testToString_h0Test4": "java.lang.NullPointerException"
                },
                "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h3Test3_valid": {
                    "testToString_h3Test3": "java.lang.NullPointerException"
                },
                "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h3Test4_valid": {
                    "testToString_h3Test4": "java.lang.NullPointerException"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 5,
            "num_of_passed_test_cases": 3,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 2,
            "num_of_reach_assertion_test_cases": -6,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testToString_h0Test0"
                ],
                [
                    "testToString_h0Test1"
                ],
                [],
                [],
                [
                    "testToString_h4Test4"
                ]
            ],
            "failure_info": {
                "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h4Test2_valid": {
                    "testToString_h4Test2": "java.lang.NullPointerException"
                },
                "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h4Test3_valid": {
                    "testToString_h4Test3": "java.lang.NullPointerException"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "rsksmart__castle__rskj",
            "test_file_path": "./data/ITrans/projects/rsksmart__castle__rskj/rskj-core/src/test/java/org/ethereum/rpc/FilterTest.java",
            "test_simple_name": "testGetEventsInternal",
            "FQS_testMethos": "org.ethereum.rpc.FilterTest.testGetEventsInternal()",
            "assertionSTMT": "assertNotSame(events, filter2.getEventsInternal())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/rsksmart__castle__rskj/org.ethereum.rpc.FilterTest.testGetEventsInternal__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.ethereum.rpc.Filter.getEventsInternal()",
                "org.ethereum.rpc.Filter.getEventsInternal()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 2,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Filter",
                    "expression": "filter",
                    "statement": "Object[] events = filter.getEventsInternal();",
                    "invocation": "events = filter.getEventsInternal()"
                }
            ],
            "followUpInput": [
                {
                    "type": "Filter",
                    "expression": "filter2",
                    "statement": "assertNotSame(events, filter2.getEventsInternal());",
                    "invocation": "filter2.getEventsInternal()"
                }
            ],
            "comments": "",
            "dependency": "org.ethereum.rpc.Filter;org.ethereum.rpc.Filter.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testGetEventsInternal_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 6,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 6,
            "num_of_reach_assertion_test_cases": -7,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.ethereum.rpc.FilterTest_testGetEventsInternal_h0Test1_valid": {
                    "testGetEventsInternal_h0Test1": "java.lang.NoClassDefFoundError: org/ethereum/rpc/FilterTest_testGetEventsInternal_h0Test1_valid$FilterEventMock"
                },
                "org.ethereum.rpc.FilterTest_testGetEventsInternal_h0Test3_valid": {
                    "testGetEventsInternal_h0Test3": "java.lang.NoClassDefFoundError: org/ethereum/rpc/FilterTest_testGetEventsInternal_h0Test3_valid$FilterEventMock"
                },
                "org.ethereum.rpc.FilterTest_testGetEventsInternal_h1Test0_valid": {
                    "testGetEventsInternal_h1Test0": "java.lang.NoClassDefFoundError: org/ethereum/rpc/FilterTest_testGetEventsInternal_h1Test0_valid$FilterEventMock"
                },
                "org.ethereum.rpc.FilterTest_testGetEventsInternal_h1Test1_valid": {
                    "testGetEventsInternal_h1Test1": "java.lang.NoClassDefFoundError: org/ethereum/rpc/FilterTest_testGetEventsInternal_h1Test1_valid$FilterEventMock"
                },
                "org.ethereum.rpc.FilterTest_testGetEventsInternal_h1Test2_valid": {
                    "testGetEventsInternal_h1Test2": "java.lang.NoClassDefFoundError: org/ethereum/rpc/FilterTest_testGetEventsInternal_h1Test2_valid$FilterEventMock"
                },
                "org.ethereum.rpc.FilterTest_testGetEventsInternal_h1Test4_valid": {
                    "testGetEventsInternal_h1Test4": "java.lang.NoClassDefFoundError: org/ethereum/rpc/FilterTest_testGetEventsInternal_h1Test4_valid$FilterEventMock"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 8,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 8,
            "num_of_reach_assertion_test_cases": -9,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.ethereum.rpc.FilterTest_testGetEventsInternal_h0Test0_valid": {
                    "testGetEventsInternal_h0Test0": "java.lang.NoClassDefFoundError: org/ethereum/rpc/FilterTest_testGetEventsInternal_h0Test0_valid$FilterEventMock"
                },
                "org.ethereum.rpc.FilterTest_testGetEventsInternal_h0Test2_valid": {
                    "testGetEventsInternal_h0Test2": "java.lang.NoClassDefFoundError: org/ethereum/rpc/FilterTest_testGetEventsInternal_h0Test2_valid$FilterEventMock"
                },
                "org.ethereum.rpc.FilterTest_testGetEventsInternal_h0Test4_valid": {
                    "testGetEventsInternal_h0Test4": "java.lang.NoClassDefFoundError: org/ethereum/rpc/FilterTest_testGetEventsInternal_h0Test4_valid$FilterEventMock"
                },
                "org.ethereum.rpc.FilterTest_testGetEventsInternal_h2Test1_valid": {
                    "testGetEventsInternal_h2Test1": "java.lang.NoClassDefFoundError: org/ethereum/rpc/FilterTest_testGetEventsInternal_h2Test1_valid$FilterEventMock"
                },
                "org.ethereum.rpc.FilterTest_testGetEventsInternal_h2Test3_valid": {
                    "testGetEventsInternal_h2Test3": "java.lang.NoClassDefFoundError: org/ethereum/rpc/FilterTest_testGetEventsInternal_h2Test3_valid$FilterEventMock"
                },
                "org.ethereum.rpc.FilterTest_testGetEventsInternal_h5Test3_valid": {
                    "testGetEventsInternal_h5Test3": "java.lang.NoClassDefFoundError: org/ethereum/rpc/FilterTest_testGetEventsInternal_h5Test3_valid$FilterEventMock"
                },
                "org.ethereum.rpc.FilterTest_testGetEventsInternal_h5Test4_valid": {
                    "testGetEventsInternal_h5Test4": "java.lang.NoClassDefFoundError: org/ethereum/rpc/FilterTest_testGetEventsInternal_h5Test4_valid$FilterEventMock"
                },
                "org.ethereum.rpc.FilterTest_testGetEventsInternal_h6Test3_valid": {
                    "testGetEventsInternal_h6Test3": "java.lang.NoClassDefFoundError: org/ethereum/rpc/FilterTest_testGetEventsInternal_h6Test3_valid$FilterEventMock"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "networknt__castle__json-schema-validator",
            "test_file_path": "./data/ITrans/projects/networknt__castle__json-schema-validator/src/test/java/com/networknt/schema/JsonNodePathTest.java",
            "test_simple_name": "hashCodeEquals",
            "FQS_testMethos": "com.networknt.schema.JsonNodePathTest.hashCodeEquals()",
            "assertionSTMT": "assertEquals(a1.hashCode(), a2.hashCode())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/networknt__castle__json-schema-validator/com.networknt.schema.JsonNodePathTest.equalsEquals__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.networknt.schema.JsonNodePath.hashCode()",
                "com.networknt.schema.JsonNodePath.hashCode()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "JsonNodePath",
                    "expression": "a1",
                    "statement": "assertEquals(a1.hashCode(), a2.hashCode());",
                    "invocation": "a1.hashCode()"
                }
            ],
            "followUpInput": [
                {
                    "type": "JsonNodePath",
                    "expression": "a2",
                    "statement": "assertEquals(a1.hashCode(), a2.hashCode());",
                    "invocation": "a1.hashCode()"
                }
            ],
            "comments": "manual light crafted",
            "dependency": "com.networknt.schema.JsonNodePath;com.networknt.schema.JsonNodePath.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "hashCodeEquals_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "hashCodeEquals_IT": "java.lang.NoClassDefFoundError: com/networknt/schema/JsonNodePathTest_hashCodeEquals"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 10,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 10,
            "num_of_reach_assertion_test_cases": -11,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h0Test0_valid": {
                    "hashCodeEquals_h0Test0": "java.lang.NoClassDefFoundError: com/networknt/schema/JsonNodePathTest_hashCodeEquals"
                },
                "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h0Test1_valid": {
                    "hashCodeEquals_h0Test1": "java.lang.NoClassDefFoundError: com/networknt/schema/JsonNodePathTest_hashCodeEquals"
                },
                "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h0Test2_valid": {
                    "hashCodeEquals_h0Test2": "java.lang.NoClassDefFoundError: com/networknt/schema/JsonNodePathTest_hashCodeEquals"
                },
                "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h0Test3_valid": {
                    "hashCodeEquals_h0Test3": "java.lang.NoClassDefFoundError: com/networknt/schema/JsonNodePathTest_hashCodeEquals"
                },
                "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h0Test4_valid": {
                    "hashCodeEquals_h0Test4": "java.lang.NoClassDefFoundError: com/networknt/schema/JsonNodePathTest_hashCodeEquals"
                },
                "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h3Test1_valid": {
                    "hashCodeEquals_h3Test1": "java.lang.NoClassDefFoundError: com/networknt/schema/JsonNodePathTest_hashCodeEquals"
                },
                "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h3Test2_valid": {
                    "hashCodeEquals_h3Test2": "java.lang.NoClassDefFoundError: com/networknt/schema/JsonNodePathTest_hashCodeEquals"
                },
                "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h3Test3_valid": {
                    "hashCodeEquals_h3Test3": "java.lang.NoClassDefFoundError: com/networknt/schema/JsonNodePathTest_hashCodeEquals"
                },
                "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h3Test4_valid": {
                    "hashCodeEquals_h3Test4": "java.lang.NoClassDefFoundError: com/networknt/schema/JsonNodePathTest_hashCodeEquals"
                },
                "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h4Test4_valid": {
                    "hashCodeEquals_h4Test4": "java.lang.NoClassDefFoundError: com/networknt/schema/JsonNodePathTest_hashCodeEquals"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 6,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 6,
            "num_of_reach_assertion_test_cases": -7,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h0Test0_valid": {
                    "hashCodeEquals_h0Test0": "java.lang.NoClassDefFoundError: com/networknt/schema/JsonNodePathTest_hashCodeEquals"
                },
                "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h0Test1_valid": {
                    "hashCodeEquals_h0Test1": "java.lang.NoClassDefFoundError: com/networknt/schema/JsonNodePathTest_hashCodeEquals"
                },
                "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h0Test2_valid": {
                    "hashCodeEquals_h0Test2": "java.lang.NoClassDefFoundError: com/networknt/schema/JsonNodePathTest_hashCodeEquals"
                },
                "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h0Test3_valid": {
                    "hashCodeEquals_h0Test3": "java.lang.NoClassDefFoundError: com/networknt/schema/JsonNodePathTest_hashCodeEquals"
                },
                "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h0Test4_valid": {
                    "hashCodeEquals_h0Test4": "java.lang.NoClassDefFoundError: com/networknt/schema/JsonNodePathTest_hashCodeEquals"
                },
                "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h2Test1_valid": {
                    "hashCodeEquals_h2Test1": "java.lang.NoClassDefFoundError: com/networknt/schema/JsonNodePathTest_hashCodeEquals"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__castle__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__castle__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/Map1Test.java",
            "test_simple_name": "test4",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test4()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__castle__fastjson2/com.alibaba.fastjson2.internal.processor.maps.Map1Test.test4__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<String, Float>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Map<String, Float> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                },
                {
                    "type": "Type",
                    "expression": "mapType",
                    "statement": "Map<String, Float> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference;java.lang.reflect.Type",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test4_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 6,
            "num_of_passed_test_cases": 6,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -7,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test4_h2Test0"
                ],
                [
                    "test4_h2Test2"
                ],
                [
                    "test4_h2Test4"
                ],
                [
                    "test4_h2Test6"
                ],
                [
                    "test4_h3Test5"
                ],
                [
                    "test4_h3Test9"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 19,
            "num_of_passed_test_cases": 19,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -20,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test4_h0Test0"
                ],
                [
                    "test4_h0Test2"
                ],
                [
                    "test4_h0Test3"
                ],
                [
                    "test4_h5Test0"
                ],
                [
                    "test4_h5Test2"
                ],
                [
                    "test4_h5Test4"
                ],
                [
                    "test4_h5Test6"
                ],
                [
                    "test4_h5Test8"
                ],
                [
                    "test4_h7Test0"
                ],
                [
                    "test4_h7Test2"
                ],
                [
                    "test4_h7Test4"
                ],
                [
                    "test4_h8Test0"
                ],
                [
                    "test4_h8Test2"
                ],
                [
                    "test4_h8Test3"
                ],
                [
                    "test4_h8Test4"
                ],
                [
                    "test4_h8Test5"
                ],
                [
                    "test4_h8Test6"
                ],
                [
                    "test4_h9Test0"
                ],
                [
                    "test4_h9Test2"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "TheAlgorithms__castle__Java",
            "test_file_path": "./data/ITrans/projects/TheAlgorithms__castle__Java/src/test/java/com/thealgorithms/ciphers/PlayfairTest.java",
            "test_simple_name": "testEncryptionAndDecryption",
            "FQS_testMethos": "com.thealgorithms.ciphers.PlayfairTest.testEncryptionAndDecryption()",
            "assertionSTMT": "assertEquals(plaintext, decryptedText)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/TheAlgorithms__castle__Java/com.thealgorithms.ciphers.PlayfairTest.testEncryptionAndDecryption__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "com.thealgorithms.ciphers.PlayfairCipher.encrypt(java.lang.String)",
                "com.thealgorithms.ciphers.PlayfairCipher.decrypt(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "PlayfairCipher",
                    "expression": "playfairCipher",
                    "statement": "String encryptedText = playfairCipher.encrypt(plaintext);",
                    "invocation": "encryptedText = playfairCipher.encrypt(plaintext)"
                },
                {
                    "type": "String",
                    "expression": "plaintext",
                    "statement": "String encryptedText = playfairCipher.encrypt(plaintext);",
                    "invocation": "encryptedText = playfairCipher.encrypt(plaintext)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "textTodecrypt",
                    "statement": "String decryptedText = playfairCipher.decrypt(textTodecrypt);",
                    "invocation": "decryptedText = playfairCipher.decrypt(textTodecrypt)"
                }
            ],
            "comments": "",
            "dependency": "com.thealgorithms.ciphers.PlayfairCipher;com.thealgorithms.ciphers.PlayfairCipher.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 1,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [
                "testEncryptionAndDecryption_IT"
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [],
            "failure_info": {
                "testEncryptionAndDecryption_IT": "org.opentest4j.AssertionFailedError: expected: <PLAYFAIR> but was: <SHYVHRFB>"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 1,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -2,
            "assertionLineNums": [
                []
            ],
            "reach_assertion_test_cases_list": [
                []
            ],
            "assertion_failed_test_cases_list": [
                [
                    "testEncryptionAndDecryption_h0Test4"
                ]
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                []
            ],
            "failure_info": {
                "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h0Test4_valid": {
                    "testEncryptionAndDecryption_h0Test4": "org.opentest4j.AssertionFailedError: expected: <TESTCASE> but was: <UKMZBDNO>"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 7,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 7,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -8,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [
                    "testEncryptionAndDecryption_h5Test3"
                ],
                [
                    "testEncryptionAndDecryption_h5Test5"
                ],
                [
                    "testEncryptionAndDecryption_h7Test2"
                ],
                [
                    "testEncryptionAndDecryption_h7Test3"
                ],
                [
                    "testEncryptionAndDecryption_h8Test2"
                ],
                [
                    "testEncryptionAndDecryption_h8Test3"
                ],
                [
                    "testEncryptionAndDecryption_h8Test4"
                ]
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h5Test3_valid": {
                    "testEncryptionAndDecryption_h5Test3": "org.opentest4j.AssertionFailedError: expected: <TESTCASE> but was: <PNLAYIKY>"
                },
                "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h5Test5_valid": {
                    "testEncryptionAndDecryption_h5Test5": "org.opentest4j.AssertionFailedError: expected: <PLAYFAIR> but was: <FPLAYLDI>"
                },
                "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h7Test2_valid": {
                    "testEncryptionAndDecryption_h7Test2": "org.opentest4j.AssertionFailedError: expected: <TESTCASE> but was: <PNLAYIKY>"
                },
                "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h7Test3_valid": {
                    "testEncryptionAndDecryption_h7Test3": "org.opentest4j.AssertionFailedError: expected: <DEMOGRAPHICS> but was: <ADEMCTZHBPFR>"
                },
                "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h8Test2_valid": {
                    "testEncryptionAndDecryption_h8Test2": "org.opentest4j.AssertionFailedError: expected: <CASE> but was: <GTET>"
                },
                "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h8Test3_valid": {
                    "testEncryptionAndDecryption_h8Test3": "org.opentest4j.AssertionFailedError: expected: <DEMO> but was: <BNQI>"
                },
                "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h8Test4_valid": {
                    "testEncryptionAndDecryption_h8Test4": "org.opentest4j.AssertionFailedError: expected: <COMPUTER> but was: <FATSPBKG>"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "optimatika__castle__ojAlgo",
            "test_file_path": "./data/ITrans/projects/optimatika__castle__ojAlgo/src/test/java/org/ojalgo/data/transform/DiscreteFourierTransformTest.java",
            "test_simple_name": "testNonPowerOf2",
            "FQS_testMethos": "org.ojalgo.data.transform.DiscreteFourierTransformTest.testNonPowerOf2()",
            "assertionSTMT": "TestUtils.assertEquals(input, reverted, accuracy)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/optimatika__castle__ojAlgo/org.ojalgo.data.transform.DiscreteFourierTransformTest.testNonPowerOf2__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.ojalgo.data.transform.DiscreteFourierTransform.transform(org.ojalgo.structure.Access1D<?>)",
                "org.ojalgo.data.transform.DiscreteFourierTransform.inverse(org.ojalgo.structure.Access1D<org.ojalgo.scalar.ComplexNumber>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "DiscreteFourierTransform",
                    "expression": "transformer",
                    "statement": "MatrixStore<ComplexNumber> transformed = transformer.transform(input);",
                    "invocation": "transformed = transformer.transform(input)"
                },
                {
                    "type": "PhysicalStore<Double>",
                    "expression": "input",
                    "statement": "MatrixStore<ComplexNumber> transformed = transformer.transform(input);",
                    "invocation": "transformed = transformer.transform(input)"
                }
            ],
            "followUpInput": [
                {
                    "type": "MatrixStore<ComplexNumber>",
                    "expression": "transformed2",
                    "statement": "MatrixStore<Double> reverted = transformer.inverse(transformed2);",
                    "invocation": "reverted = transformer.inverse(transformed2)"
                }
            ],
            "comments": "",
            "dependency": "org.ojalgo.data.transform.DiscreteFourierTransform;org.ojalgo.data.transform.DiscreteFourierTransform.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "testNonPowerOf2_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "testNonPowerOf2_IT": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 6,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 6,
            "num_of_reach_assertion_test_cases": -7,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h0Test0_valid": {
                    "testNonPowerOf2_h0Test0": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h0Test1_valid": {
                    "testNonPowerOf2_h0Test1": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h0Test2_valid": {
                    "testNonPowerOf2_h0Test2": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h0Test3_valid": {
                    "testNonPowerOf2_h0Test3": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h0Test4_valid": {
                    "testNonPowerOf2_h0Test4": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h2Test3_valid": {
                    "testNonPowerOf2_h2Test3": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 35,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 35,
            "num_of_reach_assertion_test_cases": -36,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h0Test0_valid": {
                    "testNonPowerOf2_h0Test0": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h0Test1_valid": {
                    "testNonPowerOf2_h0Test1": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h0Test2_valid": {
                    "testNonPowerOf2_h0Test2": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h0Test3_valid": {
                    "testNonPowerOf2_h0Test3": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h2Test0_valid": {
                    "testNonPowerOf2_h2Test0": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h2Test1_valid": {
                    "testNonPowerOf2_h2Test1": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h2Test2_valid": {
                    "testNonPowerOf2_h2Test2": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h2Test3_valid": {
                    "testNonPowerOf2_h2Test3": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h2Test4_valid": {
                    "testNonPowerOf2_h2Test4": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h3Test2_valid": {
                    "testNonPowerOf2_h3Test2": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h3Test4_valid": {
                    "testNonPowerOf2_h3Test4": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h4Test0_valid": {
                    "testNonPowerOf2_h4Test0": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h4Test1_valid": {
                    "testNonPowerOf2_h4Test1": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h5Test0_valid": {
                    "testNonPowerOf2_h5Test0": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h5Test1_valid": {
                    "testNonPowerOf2_h5Test1": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h5Test2_valid": {
                    "testNonPowerOf2_h5Test2": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h5Test3_valid": {
                    "testNonPowerOf2_h5Test3": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h5Test4_valid": {
                    "testNonPowerOf2_h5Test4": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h6Test0_valid": {
                    "testNonPowerOf2_h6Test0": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h6Test1_valid": {
                    "testNonPowerOf2_h6Test1": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h6Test2_valid": {
                    "testNonPowerOf2_h6Test2": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h6Test3_valid": {
                    "testNonPowerOf2_h6Test3": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h6Test4_valid": {
                    "testNonPowerOf2_h6Test4": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h7Test1_valid": {
                    "testNonPowerOf2_h7Test1": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h7Test2_valid": {
                    "testNonPowerOf2_h7Test2": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h7Test3_valid": {
                    "testNonPowerOf2_h7Test3": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h7Test4_valid": {
                    "testNonPowerOf2_h7Test4": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h8Test1_valid": {
                    "testNonPowerOf2_h8Test1": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h8Test2_valid": {
                    "testNonPowerOf2_h8Test2": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h8Test3_valid": {
                    "testNonPowerOf2_h8Test3": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h8Test4_valid": {
                    "testNonPowerOf2_h8Test4": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h9Test1_valid": {
                    "testNonPowerOf2_h9Test1": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h9Test2_valid": {
                    "testNonPowerOf2_h9Test2": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h9Test3_valid": {
                    "testNonPowerOf2_h9Test3": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                },
                "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h9Test4_valid": {
                    "testNonPowerOf2_h9Test4": "java.lang.NoClassDefFoundError: org/ojalgo/data/transform/DiscreteFourierTransformTest_testNonPowerOf2"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__castle__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__castle__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_parse_CharSequenceDateTimeFormatter",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_parse_CharSequenceDateTimeFormatter()",
            "assertionSTMT": "assertEquals(YearHalf.parse(text, f), YearHalf.of(year, half))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__castle__threeten-extra/org.threeten.extra.TestYearHalf.test_parse_CharSequenceDateTimeFormatter__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)",
                "org.threeten.extra.YearHalf.parse(java.lang.CharSequence, java.time.format.DateTimeFormatter)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "CharSequence",
                    "expression": "text",
                    "statement": "assertEquals(YearHalf.parse(text, f), YearHalf.of(year, half));",
                    "invocation": "YearHalf.parse(text, f)"
                },
                {
                    "type": "DateTimeFormatter",
                    "expression": "f",
                    "statement": "assertEquals(YearHalf.parse(text, f), YearHalf.of(year, half));",
                    "invocation": "YearHalf.parse(text, f)"
                }
            ],
            "followUpInput": [
                {
                    "type": "int",
                    "expression": "half",
                    "statement": "assertEquals(YearHalf.parse(text, f), YearHalf.of(year, half));",
                    "invocation": "YearHalf.of(year, half)"
                },
                {
                    "type": "int",
                    "expression": "year",
                    "statement": "assertEquals(YearHalf.parse(text, f), YearHalf.of(year, half));",
                    "invocation": "YearHalf.of(year, half)"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 3,
            "num_of_passed_test_cases": 2,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "test_parse_CharSequenceDateTimeFormatter_IT"
            ],
            "passed_test_cases_list": [
                "test_parse_CharSequenceDateTimeFormatter_nullCharSequence",
                "test_parse_CharSequenceDateTimeFormatter_nullDateTimeFormatter"
            ],
            "failure_info": {
                "test_parse_CharSequenceDateTimeFormatter_IT": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 5,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 5,
            "num_of_reach_assertion_test_cases": -6,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h0Test0_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h0Test0": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h0Test1_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h0Test1": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h0Test2_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h0Test2": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h0Test3_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h0Test3": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h0Test4_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h0Test4": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 19,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 19,
            "num_of_reach_assertion_test_cases": -20,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h0Test1_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h0Test1": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h0Test3_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h0Test3": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h1Test0_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h1Test0": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h1Test1_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h1Test1": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h1Test3_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h1Test3": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h2Test2_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h2Test2": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h3Test3_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h3Test3": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h4Test2_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h4Test2": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h4Test3_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h4Test3": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h4Test4_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h4Test4": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h5Test1_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h5Test1": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h5Test9_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h5Test9": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h6Test1_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h6Test1": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h6Test3_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h6Test3": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h6Test7_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h6Test7": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h6Test9_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h6Test9": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h7Test1_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h7Test1": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h7Test2_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h7Test2": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                },
                "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h7Test4_valid": {
                    "test_parse_CharSequenceDateTimeFormatter_h7Test4": "java.lang.NoClassDefFoundError: org/threeten/extra/TestYearHalf_test_parse_CharSequenceDateTimeFormatter"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "aws__castle__event-ruler",
            "test_file_path": "./data/ITrans/projects/aws__castle__event-ruler/src/test/software/amazon/event/ruler/NameStateTest.java",
            "test_simple_name": "testNextNameStateWithAdditionalNameStateReuse",
            "FQS_testMethos": "software.amazon.event.ruler.NameStateTest.testNextNameStateWithAdditionalNameStateReuse()",
            "assertionSTMT": "assertEquals(nextNameState, nameState2.getNextNameState(key2))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/aws__castle__event-ruler/software.amazon.event.ruler.NameStateTest.testNextNameStateWithAdditionalNameStateReuse__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "software.amazon.event.ruler.NameState.addNextNameState(java.lang.String, software.amazon.event.ruler.NameState)",
                "software.amazon.event.ruler.NameState.getNextNameState(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "key",
                    "statement": "nameState.addNextNameState(key, nextNameState);;",
                    "invocation": "nameState.addNextNameState(key, nextNameState)"
                },
                {
                    "type": "NameState",
                    "expression": "nextNameState",
                    "statement": "nameState.addNextNameState(key, nextNameState);;",
                    "invocation": "nameState.addNextNameState(key, nextNameState)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "key2",
                    "statement": "assertEquals(nextNameState, nameState2.getNextNameState(key2))",
                    "invocation": "nameState2.getNextNameState(key2)"
                },
                {
                    "type": "NameState",
                    "expression": "nameState2",
                    "statement": "assertEquals(nextNameState, nameState2.getNextNameState(key2))",
                    "invocation": "nameState2.getNextNameState(key2)"
                }
            ],
            "comments": "",
            "dependency": "software.amazon.event.ruler.NameState;software.amazon.event.ruler.NameState.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "testNextNameStateWithAdditionalNameStateReuse_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "testNextNameStateWithAdditionalNameStateReuse_IT": "java.lang.NoClassDefFoundError, line:None"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 8,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 8,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h0Test1_valid": {
                    "testNextNameStateWithAdditionalNameStateReuse_h0Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h0Test2_valid": {
                    "testNextNameStateWithAdditionalNameStateReuse_h0Test2": "java.lang.NoClassDefFoundError, line:None"
                },
                "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h0Test3_valid": {
                    "testNextNameStateWithAdditionalNameStateReuse_h0Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h0Test4_valid": {
                    "testNextNameStateWithAdditionalNameStateReuse_h0Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h1Test4_valid": {
                    "testNextNameStateWithAdditionalNameStateReuse_h1Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h2Test0_valid": {
                    "testNextNameStateWithAdditionalNameStateReuse_h2Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h4Test2_valid": {
                    "testNextNameStateWithAdditionalNameStateReuse_h4Test2": "java.lang.NoClassDefFoundError, line:None"
                },
                "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h4Test4_valid": {
                    "testNextNameStateWithAdditionalNameStateReuse_h4Test4": "java.lang.NoClassDefFoundError, line:None"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 7,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 7,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h0Test0_valid": {
                    "testNextNameStateWithAdditionalNameStateReuse_h0Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h0Test1_valid": {
                    "testNextNameStateWithAdditionalNameStateReuse_h0Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h0Test3_valid": {
                    "testNextNameStateWithAdditionalNameStateReuse_h0Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h2Test1_valid": {
                    "testNextNameStateWithAdditionalNameStateReuse_h2Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h4Test4_valid": {
                    "testNextNameStateWithAdditionalNameStateReuse_h4Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h5Test4_valid": {
                    "testNextNameStateWithAdditionalNameStateReuse_h5Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h6Test8_valid": {
                    "testNextNameStateWithAdditionalNameStateReuse_h6Test8": "java.lang.NoClassDefFoundError, line:None"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "apache__castle__druid",
            "test_file_path": "./data/ITrans/projects/apache__castle__druid/processing/src/test/java/org/apache/druid/audit/AuditInfoTest.java",
            "test_simple_name": "testAuditInfoEquality",
            "FQS_testMethos": "org.apache.druid.audit.AuditInfoTest.testAuditInfoEquality()",
            "assertionSTMT": "Assert.assertEquals(auditInfo1.hashCode(), auditInfo2.hashCode())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__castle__druid/org.apache.druid.audit.AuditInfoTest.testAuditInfoEquality__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.apache.druid.audit.AuditInfo.hashCode()",
                "org.apache.druid.audit.AuditInfo.hashCode()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "AuditInfo",
                    "expression": "auditInfo1",
                    "statement": "AuditInfo auditInfo2 = new AuditInfo();",
                    "invocation": "auditInfo2 = new AuditInfo()"
                }
            ],
            "followUpInput": [
                {
                    "type": "AuditInfo",
                    "expression": "auditInfo2",
                    "statement": "Assert.assertEquals(auditInfo1.hashCode(), auditInfo2.hashCode())",
                    "invocation": "Assert.assertEquals(auditInfo1.hashCode(), auditInfo2.hashCode())"
                }
            ],
            "comments": "",
            "dependency": "org.apache.druid.audit.AuditInfo;org.apache.druid.audit.AuditInfo.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testAuditInfoEquality_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 9,
            "num_of_passed_test_cases": 9,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testAuditInfoEquality_h0Test0"
                ],
                [
                    "testAuditInfoEquality_h0Test1"
                ],
                [
                    "testAuditInfoEquality_h0Test2"
                ],
                [
                    "testAuditInfoEquality_h0Test3"
                ],
                [
                    "testAuditInfoEquality_h0Test4"
                ],
                [
                    "testAuditInfoEquality_h1Test4"
                ],
                [
                    "testAuditInfoEquality_h4Test1"
                ],
                [
                    "testAuditInfoEquality_h4Test2"
                ],
                [
                    "testAuditInfoEquality_h4Test3"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 9,
            "num_of_passed_test_cases": 9,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testAuditInfoEquality_h0Test0"
                ],
                [
                    "testAuditInfoEquality_h0Test1"
                ],
                [
                    "testAuditInfoEquality_h0Test2"
                ],
                [
                    "testAuditInfoEquality_h0Test3"
                ],
                [
                    "testAuditInfoEquality_h0Test4"
                ],
                [
                    "testAuditInfoEquality_h2Test2"
                ],
                [
                    "testAuditInfoEquality_h2Test3"
                ],
                [
                    "testAuditInfoEquality_h2Test4"
                ],
                [
                    "testAuditInfoEquality_h9Test2"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "aws__castle__event-ruler",
            "test_file_path": "./data/ITrans/projects/aws__castle__event-ruler/src/test/software/amazon/event/ruler/SubRuleContextTest.java",
            "test_simple_name": "testEquals",
            "FQS_testMethos": "software.amazon.event.ruler.SubRuleContextTest.testEquals()",
            "assertionSTMT": "assertTrue(contextA1.equals(contextB1))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/aws__castle__event-ruler/software.amazon.event.ruler.SubRuleContextTest.testEquals__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "software.amazon.event.ruler.SubRuleContext.Generator.generate(java.lang.Object)",
                "software.amazon.event.ruler.SubRuleContext.Generator.generate(java.lang.Object)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "SubRuleContext.Generator",
                    "expression": "generatorA",
                    "statement": "SubRuleContext contextA1 = generatorA.generate(NAME);",
                    "invocation": "contextA1 = generatorA.generate(NAME)"
                },
                {
                    "type": "String",
                    "expression": "NAME",
                    "statement": "SubRuleContext contextB1 = generatorA.generate(NAME);",
                    "invocation": "contextB1 = generatorA.generate(NAME)"
                }
            ],
            "followUpInput": [
                {
                    "type": "SubRuleContext.Generator",
                    "expression": "generatorB",
                    "statement": "SubRuleContext contextB1 = generatorB.generate(NAME2);",
                    "invocation": "contextB1 = generatorB.generate(NAME2)"
                },
                {
                    "type": "String",
                    "expression": "NAME2",
                    "statement": "SubRuleContext contextB1 = generatorB.generate(NAME2);",
                    "invocation": "contextB1 = generatorB.generate(NAME2)"
                }
            ],
            "comments": "",
            "dependency": "software.amazon.event.ruler.SubRuleContext;software.amazon.event.ruler.SubRuleContext.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testEquals_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 5,
            "num_of_passed_test_cases": 5,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testEquals_h0Test1"
                ],
                [
                    "testEquals_h0Test2"
                ],
                [
                    "testEquals_h0Test4"
                ],
                [
                    "testEquals_h1Test1"
                ],
                [
                    "testEquals_h1Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 8,
            "num_of_passed_test_cases": 8,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testEquals_h0Test0"
                ],
                [
                    "testEquals_h0Test1"
                ],
                [
                    "testEquals_h0Test2"
                ],
                [
                    "testEquals_h0Test3"
                ],
                [
                    "testEquals_h0Test4"
                ],
                [
                    "testEquals_h3Test1"
                ],
                [
                    "testEquals_h3Test3"
                ],
                [
                    "testEquals_h3Test4"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__castle__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__castle__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/JSONObjectTest.java",
            "test_simple_name": "test1",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest.test1()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__castle__fastjson2/com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest.test1__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "JSONObject",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "JSONObject v02 = JSON.parseObject(str2, clazz);",
                    "invocation": "v02 = JSON.parseObject(str2, clazz)"
                },
                {
                    "type": "Class<JSONObject>",
                    "expression": "clazz",
                    "statement": "JSONObject v02 = JSON.parseObject(str2, clazz);",
                    "invocation": "v02 = JSON.parseObject(str2, clazz)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test1_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 6,
            "num_of_passed_test_cases": 6,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -7,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test1_h3Test0"
                ],
                [
                    "test1_h3Test1"
                ],
                [
                    "test1_h3Test2"
                ],
                [
                    "test1_h3Test3"
                ],
                [
                    "test1_h4Test2"
                ],
                [
                    "test1_h4Test3"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 7,
            "num_of_passed_test_cases": 7,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -8,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test1_h2Test1"
                ],
                [
                    "test1_h2Test2"
                ],
                [
                    "test1_h2Test3"
                ],
                [
                    "test1_h2Test4"
                ],
                [
                    "test1_h3Test3"
                ],
                [
                    "test1_h3Test4"
                ],
                [
                    "test1_h3Test5"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "optimatika__castle__ojAlgo",
            "test_file_path": "./data/ITrans/projects/optimatika__castle__ojAlgo/src/test/java/org/ojalgo/data/transform/DiscreteFourierTransformTest.java",
            "test_simple_name": "testShiftAndRevertEven",
            "FQS_testMethos": "org.ojalgo.data.transform.DiscreteFourierTransformTest.testShiftAndRevertEven()",
            "assertionSTMT": "TestUtils.assertEquals(original, reverted)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/optimatika__castle__ojAlgo/org.ojalgo.data.transform.DiscreteFourierTransformTest.testShiftAndRevertEven__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.ojalgo.data.transform.DiscreteFourierTransform.shift(org.ojalgo.matrix.store.MatrixStore<N>)",
                "org.ojalgo.data.transform.DiscreteFourierTransform.shift(org.ojalgo.matrix.store.MatrixStore<N>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Primitive64Store",
                    "expression": "original",
                    "statement": "MatrixStore<Double> shifted = DiscreteFourierTransform.shift(original);",
                    "invocation": "shifted = DiscreteFourierTransform.shift(original)"
                }
            ],
            "followUpInput": [
                {
                    "type": "MatrixStore<Double> shifted2",
                    "expression": "shifted2",
                    "statement": "MatrixStore<Double> reverted = DiscreteFourierTransform.shift(shifted2);",
                    "invocation": "reverted = DiscreteFourierTransform.shift(shifted2)"
                }
            ],
            "comments": "",
            "dependency": "org.ojalgo.data.transform.DiscreteFourierTransform;org.ojalgo.data.transform.DiscreteFourierTransform.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testShiftAndRevertEven_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 4,
            "num_of_passed_test_cases": 4,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -5,
            "assertionLineNums": [
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testShiftAndRevertEven_h0Test0"
                ],
                [
                    "testShiftAndRevertEven_h0Test8"
                ],
                [
                    "testShiftAndRevertEven_h3Test4"
                ],
                [
                    "testShiftAndRevertEven_h3Test6"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -2,
            "assertionLineNums": [
                []
            ],
            "reach_assertion_test_cases_list": [
                []
            ],
            "assertion_failed_test_cases_list": [
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testShiftAndRevertEven_h9Test0"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "TheAlgorithms__castle__Java",
            "test_file_path": "./data/ITrans/projects/TheAlgorithms__castle__Java/src/test/java/com/thealgorithms/datastructures/crdt/LWWElementSetTest.java",
            "test_simple_name": "testRemove",
            "FQS_testMethos": "com.thealgorithms.datastructures.crdt.LWWElementSetTest.testRemove()",
            "assertionSTMT": "assertFalse(set.lookup(element))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/TheAlgorithms__castle__Java/com.thealgorithms.datastructures.crdt.LWWElementSetTest.testRemove__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "com.thealgorithms.datastructures.crdt.LWWElementSet.add(com.thealgorithms.datastructures.crdt.Element)",
                "com.thealgorithms.datastructures.crdt.LWWElementSet.remove(com.thealgorithms.datastructures.crdt.Element)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Element",
                    "expression": "element",
                    "statement": "set.add(element);",
                    "invocation": "set.add(element)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Element",
                    "expression": "element2",
                    "statement": "set.remove(element2);",
                    "invocation": "set.remove(element2)"
                }
            ],
            "comments": "",
            "dependency": "com.thealgorithms.datastructures.crdt.LWWElementSet;com.thealgorithms.datastructures.crdt.LWWElementSet.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "testRemove_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "testRemove_IT": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testRemove"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 5,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 5,
            "num_of_reach_assertion_test_cases": -6,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h0Test0_valid": {
                    "testRemove_h0Test0": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testRemove"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h1Test1_valid": {
                    "testRemove_h1Test1": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testRemove"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h1Test2_valid": {
                    "testRemove_h1Test2": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testRemove"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h1Test3_valid": {
                    "testRemove_h1Test3": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testRemove"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h1Test4_valid": {
                    "testRemove_h1Test4": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testRemove"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 9,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 9,
            "num_of_reach_assertion_test_cases": -10,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h0Test0_valid": {
                    "testRemove_h0Test0": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testRemove"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h0Test1_valid": {
                    "testRemove_h0Test1": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testRemove"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h0Test2_valid": {
                    "testRemove_h0Test2": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testRemove"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h0Test3_valid": {
                    "testRemove_h0Test3": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testRemove"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h0Test4_valid": {
                    "testRemove_h0Test4": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testRemove"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h5Test0_valid": {
                    "testRemove_h5Test0": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testRemove"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h5Test2_valid": {
                    "testRemove_h5Test2": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testRemove"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h6Test3_valid": {
                    "testRemove_h6Test3": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testRemove"
                },
                "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h7Test8_valid": {
                    "testRemove_h7Test8": "java.lang.NoClassDefFoundError: com/thealgorithms/datastructures/crdt/LWWElementSetTest_testRemove"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "eclipse-vertx__castle__vert.x",
            "test_file_path": "./data/ITrans/projects/eclipse-vertx__castle__vert.x/src/test/java/io/vertx/core/json/jackson/HybridJacksonPoolTest.java",
            "test_simple_name": "testVirtualThreadPoolWithSingleThread",
            "FQS_testMethos": "io.vertx.core.json.jackson.HybridJacksonPoolTest.testVirtualThreadPoolWithSingleThread()",
            "assertionSTMT": "assertSame(pooledResource, virtualPool.acquirePooled())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/eclipse-vertx__castle__vert.x/io.vertx.core.json.jackson.HybridJacksonPoolTest.testVirtualThreadPoolWithSingleThread__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "io.vertx.core.json.jackson.HybridJacksonPool.StripedLockFreePool.acquirePooled()",
                "io.vertx.core.json.jackson.HybridJacksonPool.StripedLockFreePool.acquirePooled()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "HybridJacksonPool.StripedLockFreePool",
                    "expression": "virtualPool",
                    "statement": "PooledResource pooledResource = virtualPool.acquirePooled();",
                    "invocation": "pooledResource = virtualPool.acquirePooled()"
                }
            ],
            "followUpInput": [
                {
                    "type": "HybridJacksonPool.StripedLockFreePool",
                    "expression": "virtualPool2",
                    "statement": "assertSame(pooledResource, virtualPool2.acquirePooled());",
                    "invocation": "virtualPool2.acquirePooled()"
                }
            ],
            "comments": "",
            "dependency": "io.vertx.core.json.jackson.HybridJacksonPool;io.vertx.core.json.jackson.HybridJacksonPool.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "testVirtualThreadPoolWithSingleThread_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "testVirtualThreadPoolWithSingleThread_IT": "java.lang.NoClassDefFoundError, line:None"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 3,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 3,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                []
            ],
            "failure_info": {
                "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h0Test2_valid": {
                    "testVirtualThreadPoolWithSingleThread_h0Test2": "java.lang.NoClassDefFoundError, line:None"
                },
                "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h2Test4_valid": {
                    "testVirtualThreadPoolWithSingleThread_h2Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h4Test4_valid": {
                    "testVirtualThreadPoolWithSingleThread_h4Test4": "java.lang.NoClassDefFoundError, line:None"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 5,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 5,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h0Test1_valid": {
                    "testVirtualThreadPoolWithSingleThread_h0Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h0Test4_valid": {
                    "testVirtualThreadPoolWithSingleThread_h0Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h5Test2_valid": {
                    "testVirtualThreadPoolWithSingleThread_h5Test2": "java.lang.NoClassDefFoundError, line:None"
                },
                "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h5Test3_valid": {
                    "testVirtualThreadPoolWithSingleThread_h5Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h5Test4_valid": {
                    "testVirtualThreadPoolWithSingleThread_h5Test4": "java.lang.NoClassDefFoundError, line:None"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "opentripplanner__castle__OpenTripPlanner",
            "test_file_path": "./data/ITrans/projects/opentripplanner__castle__OpenTripPlanner/src/test/java/org/opentripplanner/framework/model/CostTest.java",
            "test_simple_name": "testHashCodeAndEquals",
            "FQS_testMethos": "org.opentripplanner.framework.model.CostTest.testHashCodeAndEquals()",
            "assertionSTMT": "assertNotEquals(subject.hashCode(), other.hashCode())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/opentripplanner__castle__OpenTripPlanner/org.opentripplanner.framework.model.CostTest.testHashCodeAndEquals__castle__2.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.opentripplanner.framework.model.Cost.hashCode()",
                "org.opentripplanner.framework.model.Cost.hashCode()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 3,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Cost",
                    "expression": "subject",
                    "statement": "assertNotEquals(subject.hashCode(), other.hashCode());",
                    "invocation": "subject.hashCode()"
                }
            ],
            "followUpInput": [
                {
                    "type": "Cost",
                    "expression": "other",
                    "statement": "assertNotEquals(subject.hashCode(), other.hashCode());",
                    "invocation": "other.hashCode()"
                }
            ],
            "comments": "",
            "dependency": "org.opentripplanner.framework.model.Cost;org.opentripplanner.framework.model.Cost.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "testHashCodeAndEquals_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "testHashCodeAndEquals_IT": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/model/CostTest_testHashCodeAndEquals"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -2,
            "assertionLineNums": [
                []
            ],
            "reach_assertion_test_cases_list": [
                []
            ],
            "assertion_failed_test_cases_list": [
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                []
            ],
            "failure_info": {
                "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h0Test3_valid": {
                    "testHashCodeAndEquals_h0Test3": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/model/CostTest_testHashCodeAndEquals"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 6,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 6,
            "num_of_reach_assertion_test_cases": -7,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h0Test4_valid": {
                    "testHashCodeAndEquals_h0Test4": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/model/CostTest_testHashCodeAndEquals"
                },
                "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h2Test4_valid": {
                    "testHashCodeAndEquals_h2Test4": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/model/CostTest_testHashCodeAndEquals"
                },
                "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h3Test3_valid": {
                    "testHashCodeAndEquals_h3Test3": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/model/CostTest_testHashCodeAndEquals"
                },
                "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h6Test3_valid": {
                    "testHashCodeAndEquals_h6Test3": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/model/CostTest_testHashCodeAndEquals"
                },
                "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h7Test2_valid": {
                    "testHashCodeAndEquals_h7Test2": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/model/CostTest_testHashCodeAndEquals"
                },
                "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h7Test3_valid": {
                    "testHashCodeAndEquals_h7Test3": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/model/CostTest_testHashCodeAndEquals"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "mulesoft__castle__mule",
            "test_file_path": "./data/ITrans/projects/mulesoft__castle__mule/modules/deployment/src/test/java/org/mule/runtime/module/deployment/test/internal/singleapp/SingleAppDeploymentServiceTestCase.java",
            "test_simple_name": "startupListeners",
            "FQS_testMethos": "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase.startupListeners()",
            "assertionSTMT": "assertThat(singleAppDeploymentService.getStartupListeners(), hasItems(startUpListener1, startUpListener2))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/mulesoft__castle__mule/org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase.startupListeners__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.mule.runtime.module.deployment.internal.singleapp.SingleAppDeploymentService.addStartupListener(org.mule.runtime.module.deployment.api.StartupListener)",
                "org.mule.runtime.module.deployment.internal.singleapp.SingleAppDeploymentService.addStartupListener(org.mule.runtime.module.deployment.api.StartupListener)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "StartupListener",
                    "expression": "startUpListener1",
                    "statement": "singleAppDeploymentService.addStartupListener(startUpListener1);",
                    "invocation": "singleAppDeploymentService.addStartupListener(startUpListener1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "StartupListener",
                    "expression": "startUpListener2",
                    "statement": "assertThat(singleAppDeploymentService.getStartupListeners(), hasItems(startUpListener1, startUpListener2));",
                    "invocation": "singleAppDeploymentService.getStartupListeners()"
                }
            ],
            "comments": "",
            "dependency": "org.mule.runtime.module.deployment.internal.singleapp.SingleAppDeploymentService;org.mule.runtime.module.deployment.internal.singleapp.SingleAppDeploymentService.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "startupListeners_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false
            ],
            "reach_assertion_test_cases_list": [
                []
            ],
            "assertion_failed_test_cases_list": [
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "startupListeners_h0Test2"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 2,
            "num_of_passed_test_cases": 2,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "startupListeners_h8Test2"
                ],
                [
                    "startupListeners_h8Test4"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "arextest__castle__arex-agent-java",
            "test_file_path": "./data/ITrans/projects/arextest__castle__arex-agent-java/arex-instrumentation-api/src/test/java/io/arex/inst/runtime/serializer/SerializerTest.java",
            "test_simple_name": "testNestedSet",
            "FQS_testMethos": "io.arex.inst.runtime.serializer.SerializerTest.testNestedSet()",
            "assertionSTMT": "assertEquals(set, actualResult)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/arextest__castle__arex-agent-java/io.arex.inst.runtime.serializer.SerializerTest.testNestedSet__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "io.arex.inst.runtime.serializer.Serializer.serialize(java.lang.Object, java.lang.String)",
                "io.arex.inst.runtime.serializer.Serializer.deserialize(java.lang.String, java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Set<Set<Object>>",
                    "expression": "set",
                    "statement": "String json = Serializer.serialize(set, serializer);",
                    "invocation": "json = Serializer.serialize(set, serializer)"
                },
                {
                    "type": "String",
                    "expression": "serializer",
                    "statement": "String json = Serializer.serialize(set, serializer);",
                    "invocation": "json = Serializer.serialize(set, serializer)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "json2",
                    "statement": "Set<Set<Object>> actualResult = Serializer.deserialize(json2, typeName2);",
                    "invocation": "actualResult = Serializer.deserialize(json2, typeName2)"
                },
                {
                    "type": "String",
                    "expression": "typeName2",
                    "statement": "Set<Set<Object>> actualResult = Serializer.deserialize(json2, typeName2);",
                    "invocation": "actualResult = Serializer.deserialize(json2, typeName2)"
                }
            ],
            "comments": "",
            "dependency": "io.arex.inst.runtime.serializer.Serializer;io.arex.inst.runtime.serializer.Serializer.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "testNestedSet_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "testNestedSet_IT": "java.lang.NullPointerException"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 3,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 3,
            "num_of_reach_assertion_test_cases": -4,
            "assertionLineNums": [
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                []
            ],
            "failure_info": {
                "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h1Test0_valid": {
                    "testNestedSet_h1Test0": "java.lang.NullPointerException"
                },
                "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h2Test0_valid": {
                    "testNestedSet_h2Test0": "java.lang.NoClassDefFoundError: io/arex/inst/runtime/serializer/SerializerTest_testNestedSet"
                },
                "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h3Test0_valid": {
                    "testNestedSet_h3Test0": "java.lang.NoClassDefFoundError: io/arex/inst/runtime/serializer/SerializerTest_testNestedSet"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 2,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 2,
            "num_of_reach_assertion_test_cases": -3,
            "assertionLineNums": [
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                []
            ],
            "failure_info": {
                "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h0Test1_valid": {
                    "testNestedSet_h0Test1": "java.lang.NoClassDefFoundError: io/arex/inst/runtime/serializer/SerializerTest_testNestedSet"
                },
                "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h0Test3_valid": {
                    "testNestedSet_h0Test3": "java.lang.NoClassDefFoundError: io/arex/inst/runtime/serializer/SerializerTest_testNestedSet"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__castle__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__castle__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/Map1Test.java",
            "test_simple_name": "test5",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test5()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__castle__fastjson2/com.alibaba.fastjson2.internal.processor.maps.Map1Test.test5__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<String, Double>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Map<String, Double> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                },
                {
                    "type": "Type",
                    "expression": "mapType",
                    "statement": "Map<String, Double> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference;java.lang.reflect.Type",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "test5_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "test5_IT": "java.lang.ClassCastException: class com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5$1 cannot be cast to class java.lang.reflect.Type (com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5$1 is in unnamed module of loader java.net.FactoryURLClassLoader @3eb738bb; java.lang.reflect.Type is in module java.base of loader 'bootstrap')"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 6,
            "num_of_passed_test_cases": 6,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -7,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test5_h0Test0"
                ],
                [
                    "test5_h0Test1"
                ],
                [
                    "test5_h0Test2"
                ],
                [
                    "test5_h0Test3"
                ],
                [
                    "test5_h0Test4"
                ],
                [
                    "test5_h3Test2"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 20,
            "num_of_passed_test_cases": 14,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 6,
            "num_of_reach_assertion_test_cases": -21,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test5_h0Test0"
                ],
                [
                    "test5_h0Test2"
                ],
                [
                    "test5_h0Test3"
                ],
                [
                    "test5_h0Test4"
                ],
                [],
                [],
                [],
                [],
                [
                    "test5_h3Test1"
                ],
                [
                    "test5_h3Test2"
                ],
                [
                    "test5_h3Test3"
                ],
                [
                    "test5_h3Test4"
                ],
                [
                    "test5_h4Test2"
                ],
                [
                    "test5_h4Test3"
                ],
                [],
                [],
                [
                    "test5_h7Test0"
                ],
                [
                    "test5_h7Test1"
                ],
                [
                    "test5_h7Test2"
                ],
                [
                    "test5_h8Test5"
                ]
            ],
            "failure_info": {
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h2Test0_valid": {
                    "test5_h2Test0": "java.lang.ClassCastException: class com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5$1 cannot be cast to class java.lang.reflect.Type (com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5$1 is in unnamed module of loader java.net.FactoryURLClassLoader @3eb738bb; java.lang.reflect.Type is in module java.base of loader 'bootstrap')"
                },
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h2Test1_valid": {
                    "test5_h2Test1": "java.lang.ClassCastException: class com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5$1 cannot be cast to class java.lang.reflect.Type (com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5$1 is in unnamed module of loader java.net.FactoryURLClassLoader @3eb738bb; java.lang.reflect.Type is in module java.base of loader 'bootstrap')"
                },
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h2Test2_valid": {
                    "test5_h2Test2": "java.lang.ClassCastException: class com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5$1 cannot be cast to class java.lang.reflect.Type (com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5$1 is in unnamed module of loader java.net.FactoryURLClassLoader @3eb738bb; java.lang.reflect.Type is in module java.base of loader 'bootstrap')"
                },
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h2Test3_valid": {
                    "test5_h2Test3": "java.lang.ClassCastException: class com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5$1 cannot be cast to class java.lang.reflect.Type (com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5$1 is in unnamed module of loader java.net.FactoryURLClassLoader @3eb738bb; java.lang.reflect.Type is in module java.base of loader 'bootstrap')"
                },
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h5Test0_valid": {
                    "test5_h5Test0": "java.lang.ClassCastException: class com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5$1 cannot be cast to class java.lang.reflect.Type (com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5$1 is in unnamed module of loader java.net.FactoryURLClassLoader @3eb738bb; java.lang.reflect.Type is in module java.base of loader 'bootstrap')"
                },
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h5Test1_valid": {
                    "test5_h5Test1": "java.lang.ClassCastException: class com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5$1 cannot be cast to class java.lang.reflect.Type (com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5$1 is in unnamed module of loader java.net.FactoryURLClassLoader @3eb738bb; java.lang.reflect.Type is in module java.base of loader 'bootstrap')"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "cucumber__castle__cucumber-jvm",
            "test_file_path": "./data/ITrans/projects/cucumber__castle__cucumber-jvm/cucumber-core/src/test/java/io/cucumber/core/eventbus/RandomUuidGeneratorTest.java",
            "test_simple_name": "generates_different_non_null_uuids",
            "FQS_testMethos": "io.cucumber.core.eventbus.RandomUuidGeneratorTest.generates_different_non_null_uuids()",
            "assertionSTMT": "assertNotEquals(uuid1, uuid2)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/cucumber__castle__cucumber-jvm/io.cucumber.core.eventbus.RandomUuidGeneratorTest.generates_different_non_null_uuids__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "io.cucumber.core.eventbus.UuidGenerator.generateId()",
                "io.cucumber.core.eventbus.UuidGenerator.generateId()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "UuidGenerator",
                    "expression": "generator",
                    "statement": "String uuid1 = generator.generateId();",
                    "invocation": "uuid1 = generator.generateId()"
                }
            ],
            "followUpInput": [
                {
                    "type": "UuidGenerator",
                    "expression": "generator2",
                    "statement": "String uuid2 = generator2.generateId();",
                    "invocation": "uuid2 = generator2.generateId()"
                }
            ],
            "comments": "",
            "dependency": "io.cucumber.core.eventbus.UuidGenerator;io.cucumber.core.eventbus.UuidGenerator.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "generates_different_non_null_uuids_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "generates_different_non_null_uuids_IT": "java.lang.NoClassDefFoundError: io/cucumber/core/eventbus/RandomUuidGeneratorTest_generates_different_non_null_uuids"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": null,
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -2,
            "assertionLineNums": [
                []
            ],
            "reach_assertion_test_cases_list": [
                []
            ],
            "assertion_failed_test_cases_list": [
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                []
            ],
            "failure_info": {
                "io.cucumber.core.eventbus.RandomUuidGeneratorTest_generates_different_non_null_uuids_h7Test3_valid": {
                    "generates_different_non_null_uuids_h7Test3": "java.lang.NoClassDefFoundError: io/cucumber/core/eventbus/RandomUuidGeneratorTest_generates_different_non_null_uuids"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "opentripplanner__castle__OpenTripPlanner",
            "test_file_path": "./data/ITrans/projects/opentripplanner__castle__OpenTripPlanner/src/test/java/org/opentripplanner/framework/token/FieldDefinitionTest.java",
            "test_simple_name": "testEqualsAndHashCode",
            "FQS_testMethos": "org.opentripplanner.framework.token.FieldDefinitionTest.testEqualsAndHashCode()",
            "assertionSTMT": "assertNotEquals(other3.hashCode(), subject.hashCode())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/opentripplanner__castle__OpenTripPlanner/org.opentripplanner.framework.token.FieldDefinitionTest.testEqualsAndHashCode__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.opentripplanner.framework.token.FieldDefinition.hashCode()",
                "org.opentripplanner.framework.token.FieldDefinition.hashCode()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "FieldDefinition",
                    "expression": "subject",
                    "statement": "assertNotEquals(other3.hashCode(), subject.hashCode());",
                    "invocation": "subject.hashCode()"
                }
            ],
            "followUpInput": [
                {
                    "type": "FieldDefinition",
                    "expression": "other3",
                    "statement": "assertNotEquals(other3.hashCode(), subject.hashCode());",
                    "invocation": "other3.hashCode()"
                }
            ],
            "comments": "",
            "dependency": "org.opentripplanner.framework.token.FieldDefinition;org.opentripplanner.framework.token.FieldDefinition.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "testEqualsAndHashCode_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "testEqualsAndHashCode_IT": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/token/FieldDefinitionTest_testEqualsAndHashCode"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 3,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 3,
            "num_of_reach_assertion_test_cases": -4,
            "assertionLineNums": [
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                []
            ],
            "failure_info": {
                "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h1Test0_valid": {
                    "testEqualsAndHashCode_h1Test0": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/token/FieldDefinitionTest_testEqualsAndHashCode"
                },
                "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h1Test1_valid": {
                    "testEqualsAndHashCode_h1Test1": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/token/FieldDefinitionTest_testEqualsAndHashCode"
                },
                "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h4Test1_valid": {
                    "testEqualsAndHashCode_h4Test1": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/token/FieldDefinitionTest_testEqualsAndHashCode"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 13,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 13,
            "num_of_reach_assertion_test_cases": -14,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h0Test0_valid": {
                    "testEqualsAndHashCode_h0Test0": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/token/FieldDefinitionTest_testEqualsAndHashCode"
                },
                "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h5Test0_valid": {
                    "testEqualsAndHashCode_h5Test0": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/token/FieldDefinitionTest_testEqualsAndHashCode"
                },
                "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h5Test1_valid": {
                    "testEqualsAndHashCode_h5Test1": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/token/FieldDefinitionTest_testEqualsAndHashCode"
                },
                "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h6Test1_valid": {
                    "testEqualsAndHashCode_h6Test1": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/token/FieldDefinitionTest_testEqualsAndHashCode"
                },
                "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h6Test2_valid": {
                    "testEqualsAndHashCode_h6Test2": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/token/FieldDefinitionTest_testEqualsAndHashCode"
                },
                "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h6Test3_valid": {
                    "testEqualsAndHashCode_h6Test3": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/token/FieldDefinitionTest_testEqualsAndHashCode"
                },
                "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h6Test4_valid": {
                    "testEqualsAndHashCode_h6Test4": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/token/FieldDefinitionTest_testEqualsAndHashCode"
                },
                "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h6Test5_valid": {
                    "testEqualsAndHashCode_h6Test5": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/token/FieldDefinitionTest_testEqualsAndHashCode"
                },
                "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h6Test6_valid": {
                    "testEqualsAndHashCode_h6Test6": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/token/FieldDefinitionTest_testEqualsAndHashCode"
                },
                "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h6Test7_valid": {
                    "testEqualsAndHashCode_h6Test7": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/token/FieldDefinitionTest_testEqualsAndHashCode"
                },
                "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h6Test8_valid": {
                    "testEqualsAndHashCode_h6Test8": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/token/FieldDefinitionTest_testEqualsAndHashCode"
                },
                "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h6Test9_valid": {
                    "testEqualsAndHashCode_h6Test9": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/token/FieldDefinitionTest_testEqualsAndHashCode"
                },
                "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h7Test1_valid": {
                    "testEqualsAndHashCode_h7Test1": "java.lang.NoClassDefFoundError: org/opentripplanner/framework/token/FieldDefinitionTest_testEqualsAndHashCode"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__castle__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__castle__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_isLeapYear_int",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_isLeapYear_int()",
            "assertionSTMT": "assertEquals(Year.isLeap(year), test2.isLeapYear())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__castle__threeten-extra/org.threeten.extra.TestYearHalf.test_isLeapYear_int__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)",
                "org.threeten.extra.YearHalf.isLeapYear()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "int",
                    "expression": "year",
                    "statement": "YearHalf test = YearHalf.of(year, half);",
                    "invocation": "test = YearHalf.of(year, half)"
                },
                {
                    "type": "Half",
                    "expression": "half",
                    "statement": "YearHalf test = YearHalf.of(year, half);",
                    "invocation": "test = YearHalf.of(year, half)"
                }
            ],
            "followUpInput": [
                {
                    "type": "YearHalf",
                    "expression": "test2",
                    "statement": "assertEquals(Year.isLeap(year), test2.isLeapYear());",
                    "invocation": "test2.isLeapYear()"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test_isLeapYear_int_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": null,
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 19,
            "num_of_passed_test_cases": 19,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -20,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_isLeapYear_int_h2Test0"
                ],
                [
                    "test_isLeapYear_int_h2Test1"
                ],
                [
                    "test_isLeapYear_int_h2Test2"
                ],
                [
                    "test_isLeapYear_int_h2Test3"
                ],
                [
                    "test_isLeapYear_int_h2Test4"
                ],
                [
                    "test_isLeapYear_int_h3Test1"
                ],
                [
                    "test_isLeapYear_int_h3Test2"
                ],
                [
                    "test_isLeapYear_int_h3Test3"
                ],
                [
                    "test_isLeapYear_int_h3Test4"
                ],
                [
                    "test_isLeapYear_int_h5Test0"
                ],
                [
                    "test_isLeapYear_int_h5Test2"
                ],
                [
                    "test_isLeapYear_int_h5Test3"
                ],
                [
                    "test_isLeapYear_int_h5Test4"
                ],
                [
                    "test_isLeapYear_int_h5Test5"
                ],
                [
                    "test_isLeapYear_int_h7Test0"
                ],
                [
                    "test_isLeapYear_int_h7Test7"
                ],
                [
                    "test_isLeapYear_int_h7Test9"
                ],
                [
                    "test_isLeapYear_int_h9Test2"
                ],
                [
                    "test_isLeapYear_int_h9Test4"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__castle__druid",
            "test_file_path": "./data/ITrans/projects/alibaba__castle__druid/core/src/test/java/com/alibaba/druid/bvt/sql/postgresql/issues/Issue5366.java",
            "test_simple_name": "test_create_table",
            "FQS_testMethos": "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366.test_create_table()",
            "assertionSTMT": "assertEquals(normalizeSql.toLowerCase(), normalizeNewSql.toLowerCase())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__castle__druid/com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366.test_create_table__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366.normalizeSql(java.lang.String)",
                "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366.normalizeSql(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "sql",
                    "statement": "String normalizeSql = normalizeSql(sql1);",
                    "invocation": "normalizeSql = normalizeSql(sql1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "newSql",
                    "statement": "String normalizeNewSql = normalizeSql(newSql1);",
                    "invocation": "normalizeNewSql = normalizeSql(newSql1)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366;com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test_create_table_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 13,
            "num_of_passed_test_cases": 13,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_create_table_h0Test0"
                ],
                [
                    "test_create_table_h0Test1"
                ],
                [
                    "test_create_table_h0Test2"
                ],
                [
                    "test_create_table_h2Test1"
                ],
                [
                    "test_create_table_h2Test2"
                ],
                [
                    "test_create_table_h2Test3"
                ],
                [
                    "test_create_table_h2Test4"
                ],
                [
                    "test_create_table_h3Test0"
                ],
                [
                    "test_create_table_h3Test1"
                ],
                [
                    "test_create_table_h3Test2"
                ],
                [
                    "test_create_table_h3Test3"
                ],
                [
                    "test_create_table_h3Test4"
                ],
                [
                    "test_create_table_h4Test2"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 7,
            "num_of_passed_test_cases": 7,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_create_table_h0Test0"
                ],
                [
                    "test_create_table_h4Test0"
                ],
                [
                    "test_create_table_h4Test1"
                ],
                [
                    "test_create_table_h4Test2"
                ],
                [
                    "test_create_table_h4Test3"
                ],
                [
                    "test_create_table_h4Test4"
                ],
                [
                    "test_create_table_h7Test4"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__castle__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__castle__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_of_int_int",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_of_int_int()",
            "assertionSTMT": "assertEquals(half, test.getHalfValue())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__castle__threeten-extra/org.threeten.extra.TestYearHalf.test_of_int_int__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.of(int, int)",
                "org.threeten.extra.YearHalf.getHalfValue()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 3,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "int",
                    "expression": "year",
                    "statement": "YearHalf test = YearHalf.of(year, half);",
                    "invocation": "test = YearHalf.of(year, half)"
                },
                {
                    "type": "int",
                    "expression": "half",
                    "statement": "YearHalf test = YearHalf.of(year, half);",
                    "invocation": "test = YearHalf.of(year, half)"
                }
            ],
            "followUpInput": [
                {
                    "type": "YearHalf",
                    "expression": "test2",
                    "statement": "assertEquals(half, test2.getHalfValue());",
                    "invocation": "test2.getHalfValue()"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 5,
            "num_of_passed_test_cases": 5,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test_of_int_int_IT",
                "test_of_int_int_yearTooLow",
                "test_of_int_int_yearTooHigh",
                "test_of_int_int_halfTooLow",
                "test_of_int_int_halfTooHigh"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 6,
            "num_of_passed_test_cases": 6,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -7,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_of_int_int_h1Test2"
                ],
                [
                    "test_of_int_int_h1Test3"
                ],
                [
                    "test_of_int_int_h1Test4"
                ],
                [
                    "test_of_int_int_h2Test0"
                ],
                [
                    "test_of_int_int_h2Test1"
                ],
                [
                    "test_of_int_int_h2Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 7,
            "num_of_passed_test_cases": 7,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -8,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_of_int_int_h0Test0"
                ],
                [
                    "test_of_int_int_h0Test1"
                ],
                [
                    "test_of_int_int_h0Test2"
                ],
                [
                    "test_of_int_int_h0Test3"
                ],
                [
                    "test_of_int_int_h0Test4"
                ],
                [
                    "test_of_int_int_h9Test2"
                ],
                [
                    "test_of_int_int_h9Test3"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__castle__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__castle__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_with_TemporalAdjuster_Year",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_with_TemporalAdjuster_Year()",
            "assertionSTMT": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).with(Year.of(year2)))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__castle__threeten-extra/org.threeten.extra.TestYearHalf.test_with_TemporalAdjuster_Year__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)",
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "int",
                    "expression": "year1",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).with(Year.of(year2)));",
                    "invocation": "YearHalf.of(year1, half1)"
                },
                {
                    "type": "int",
                    "expression": "half1",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).with(Year.of(year2)));",
                    "invocation": "YearHalf.of(year1, half1)"
                },
                {
                    "type": "int",
                    "expression": "year2",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).with(Year.of(year2)));",
                    "invocation": "Year.of(year2)"
                }
            ],
            "followUpInput": [
                {
                    "type": "int",
                    "expression": "year3",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).with(Year.of(year2)));",
                    "invocation": "YearHalf.of(year3, half3)"
                },
                {
                    "type": "int",
                    "expression": "half3",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).with(Year.of(year2)));",
                    "invocation": "YearHalf.of(year3, half3)"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 1,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [
                "test_with_TemporalAdjuster_Year_IT"
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [],
            "failure_info": {
                "test_with_TemporalAdjuster_Year_IT": "org.opentest4j.AssertionFailedError: expected: <2007-H2> but was: <2012-H2>"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 14,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 13,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -15,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [
                    "test_with_TemporalAdjuster_Year_h0Test0"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h0Test2"
                ],
                [],
                [
                    "test_with_TemporalAdjuster_Year_h0Test4"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h0Test5"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h1Test3"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h1Test4"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h2Test3"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h2Test4"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h2Test5"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h3Test3"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h3Test4"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h4Test3"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h4Test4"
                ]
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [
                    "test_with_TemporalAdjuster_Year_h0Test3"
                ],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h0Test0_valid": {
                    "test_with_TemporalAdjuster_Year_h0Test0": "org.opentest4j.AssertionFailedError: expected: <2000-H1> but was: <2005-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h0Test2_valid": {
                    "test_with_TemporalAdjuster_Year_h0Test2": "org.opentest4j.AssertionFailedError: expected: <2021-H2> but was: <2022-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h0Test4_valid": {
                    "test_with_TemporalAdjuster_Year_h0Test4": "org.opentest4j.AssertionFailedError: expected: <2023-H2> but was: <2024-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h0Test5_valid": {
                    "test_with_TemporalAdjuster_Year_h0Test5": "org.opentest4j.AssertionFailedError: expected: <1970-H1> but was: <1975-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test3_valid": {
                    "test_with_TemporalAdjuster_Year_h1Test3": "org.opentest4j.AssertionFailedError: expected: <2023-H2> but was: <2020-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h1Test4_valid": {
                    "test_with_TemporalAdjuster_Year_h1Test4": "org.opentest4j.AssertionFailedError: expected: <1900-H1> but was: <2100-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h2Test3_valid": {
                    "test_with_TemporalAdjuster_Year_h2Test3": "org.opentest4j.AssertionFailedError: expected: <1999-H1> but was: <2000-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h2Test4_valid": {
                    "test_with_TemporalAdjuster_Year_h2Test4": "org.opentest4j.AssertionFailedError: expected: <2022-H1> but was: <2023-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h2Test5_valid": {
                    "test_with_TemporalAdjuster_Year_h2Test5": "org.opentest4j.AssertionFailedError: expected: <2005-H2> but was: <2006-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test3_valid": {
                    "test_with_TemporalAdjuster_Year_h3Test3": "org.opentest4j.AssertionFailedError: expected: <2022-H2> but was: <2021-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test4_valid": {
                    "test_with_TemporalAdjuster_Year_h3Test4": "org.opentest4j.AssertionFailedError: expected: <1900-H1> but was: <1901-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h4Test3_valid": {
                    "test_with_TemporalAdjuster_Year_h4Test3": "org.opentest4j.AssertionFailedError: expected: <2022-H1> but was: <2021-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h4Test4_valid": {
                    "test_with_TemporalAdjuster_Year_h4Test4": "org.opentest4j.AssertionFailedError: expected: <1900-H2> but was: <1901-H2>"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 59,
            "num_of_passed_test_cases": 15,
            "num_of_assertion_failed_test_cases": 44,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -60,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [
                    "test_with_TemporalAdjuster_Year_h2Test6"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h2Test7"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h2Test8"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h2Test9"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h3Test0"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h3Test1"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h3Test2"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h3Test3"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h3Test4"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h3Test5"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h3Test6"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h3Test7"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h3Test8"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h3Test9"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h4Test1"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h4Test2"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h4Test3"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h4Test4"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h4Test5"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h4Test6"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h4Test7"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h4Test8"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h4Test9"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h5Test0"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h5Test1"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h5Test2"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h5Test3"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h5Test4"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h6Test0"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h6Test1"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h6Test2"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h6Test3"
                ],
                [],
                [],
                [
                    "test_with_TemporalAdjuster_Year_h6Test6"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h6Test7"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h6Test8"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h6Test9"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h7Test2"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h7Test3"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h7Test4"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h7Test5"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h7Test6"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h7Test7"
                ],
                [],
                [
                    "test_with_TemporalAdjuster_Year_h8Test3"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h8Test5"
                ],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_with_TemporalAdjuster_Year_h0Test0"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h0Test1"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h0Test2"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h0Test3"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h0Test4"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h2Test2"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h2Test3"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h2Test5"
                ],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [
                    "test_with_TemporalAdjuster_Year_h6Test4"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h6Test5"
                ],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [
                    "test_with_TemporalAdjuster_Year_h7Test9"
                ],
                [],
                [],
                [
                    "test_with_TemporalAdjuster_Year_h9Test1"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h9Test2"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h9Test3"
                ],
                [
                    "test_with_TemporalAdjuster_Year_h9Test4"
                ]
            ],
            "failure_info": {
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h2Test6_valid": {
                    "test_with_TemporalAdjuster_Year_h2Test6": "org.opentest4j.AssertionFailedError: expected: <2020-H2> but was: <2021-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h2Test7_valid": {
                    "test_with_TemporalAdjuster_Year_h2Test7": "org.opentest4j.AssertionFailedError: expected: <2020-H2> but was: <2021-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h2Test8_valid": {
                    "test_with_TemporalAdjuster_Year_h2Test8": "org.opentest4j.AssertionFailedError: expected: <2020-H1> but was: <2022-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h2Test9_valid": {
                    "test_with_TemporalAdjuster_Year_h2Test9": "org.opentest4j.AssertionFailedError: expected: <2020-H1> but was: <2022-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test0_valid": {
                    "test_with_TemporalAdjuster_Year_h3Test0": "org.opentest4j.AssertionFailedError: expected: <2020-H1> but was: <2024-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test1_valid": {
                    "test_with_TemporalAdjuster_Year_h3Test1": "org.opentest4j.AssertionFailedError: expected: <2020-H1> but was: <2024-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test2_valid": {
                    "test_with_TemporalAdjuster_Year_h3Test2": "org.opentest4j.AssertionFailedError: expected: <1900-H2> but was: <1904-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test3_valid": {
                    "test_with_TemporalAdjuster_Year_h3Test3": "org.opentest4j.AssertionFailedError: expected: <1900-H2> but was: <1904-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test4_valid": {
                    "test_with_TemporalAdjuster_Year_h3Test4": "org.opentest4j.AssertionFailedError: expected: <2000-H1> but was: <2004-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test5_valid": {
                    "test_with_TemporalAdjuster_Year_h3Test5": "org.opentest4j.AssertionFailedError: expected: <2000-H1> but was: <2004-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test6_valid": {
                    "test_with_TemporalAdjuster_Year_h3Test6": "org.opentest4j.AssertionFailedError: expected: <2100-H2> but was: <2104-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test7_valid": {
                    "test_with_TemporalAdjuster_Year_h3Test7": "org.opentest4j.AssertionFailedError: expected: <2100-H2> but was: <2104-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test8_valid": {
                    "test_with_TemporalAdjuster_Year_h3Test8": "org.opentest4j.AssertionFailedError: expected: <1800-H1> but was: <1804-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test9_valid": {
                    "test_with_TemporalAdjuster_Year_h3Test9": "org.opentest4j.AssertionFailedError: expected: <1800-H1> but was: <1804-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h4Test1_valid": {
                    "test_with_TemporalAdjuster_Year_h4Test1": "org.opentest4j.AssertionFailedError: expected: <2020-H1> but was: <2025-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h4Test2_valid": {
                    "test_with_TemporalAdjuster_Year_h4Test2": "org.opentest4j.AssertionFailedError: expected: <1900-H2> but was: <1905-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h4Test3_valid": {
                    "test_with_TemporalAdjuster_Year_h4Test3": "org.opentest4j.AssertionFailedError: expected: <1900-H2> but was: <1905-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h4Test4_valid": {
                    "test_with_TemporalAdjuster_Year_h4Test4": "org.opentest4j.AssertionFailedError: expected: <2100-H1> but was: <2105-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h4Test5_valid": {
                    "test_with_TemporalAdjuster_Year_h4Test5": "org.opentest4j.AssertionFailedError: expected: <2100-H1> but was: <2105-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h4Test6_valid": {
                    "test_with_TemporalAdjuster_Year_h4Test6": "org.opentest4j.AssertionFailedError: expected: <2000-H2> but was: <2005-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h4Test7_valid": {
                    "test_with_TemporalAdjuster_Year_h4Test7": "org.opentest4j.AssertionFailedError: expected: <2000-H2> but was: <2005-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h4Test8_valid": {
                    "test_with_TemporalAdjuster_Year_h4Test8": "org.opentest4j.AssertionFailedError: expected: <1800-H1> but was: <1805-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h4Test9_valid": {
                    "test_with_TemporalAdjuster_Year_h4Test9": "org.opentest4j.AssertionFailedError: expected: <1800-H1> but was: <1805-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h5Test0_valid": {
                    "test_with_TemporalAdjuster_Year_h5Test0": "org.opentest4j.AssertionFailedError: expected: <2020-H1> but was: <2025-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h5Test1_valid": {
                    "test_with_TemporalAdjuster_Year_h5Test1": "org.opentest4j.AssertionFailedError: expected: <1900-H2> but was: <2000-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h5Test2_valid": {
                    "test_with_TemporalAdjuster_Year_h5Test2": "org.opentest4j.AssertionFailedError: expected: <2100-H1> but was: <2200-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h5Test3_valid": {
                    "test_with_TemporalAdjuster_Year_h5Test3": "org.opentest4j.AssertionFailedError: expected: <1800-H2> but was: <1900-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h5Test4_valid": {
                    "test_with_TemporalAdjuster_Year_h5Test4": "org.opentest4j.AssertionFailedError: expected: <3000-H1> but was: <3050-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h6Test0_valid": {
                    "test_with_TemporalAdjuster_Year_h6Test0": "org.opentest4j.AssertionFailedError: expected: <0000-H1> but was: <0001-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h6Test1_valid": {
                    "test_with_TemporalAdjuster_Year_h6Test1": "org.opentest4j.AssertionFailedError: expected: <0000-H1> but was: <0001-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h6Test2_valid": {
                    "test_with_TemporalAdjuster_Year_h6Test2": "org.opentest4j.AssertionFailedError: expected: <9999-H2> but was: <+10000-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h6Test3_valid": {
                    "test_with_TemporalAdjuster_Year_h6Test3": "org.opentest4j.AssertionFailedError: expected: <9999-H2> but was: <+10000-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h6Test6_valid": {
                    "test_with_TemporalAdjuster_Year_h6Test6": "org.opentest4j.AssertionFailedError: expected: <-0001-H2> but was: <-0002-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h6Test7_valid": {
                    "test_with_TemporalAdjuster_Year_h6Test7": "org.opentest4j.AssertionFailedError: expected: <-0001-H2> but was: <-0002-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h6Test8_valid": {
                    "test_with_TemporalAdjuster_Year_h6Test8": "org.opentest4j.AssertionFailedError: expected: <3000-H1> but was: <3001-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h6Test9_valid": {
                    "test_with_TemporalAdjuster_Year_h6Test9": "org.opentest4j.AssertionFailedError: expected: <3000-H1> but was: <3001-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h7Test2_valid": {
                    "test_with_TemporalAdjuster_Year_h7Test2": "org.opentest4j.AssertionFailedError: expected: <1990-H2> but was: <1995-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h7Test3_valid": {
                    "test_with_TemporalAdjuster_Year_h7Test3": "org.opentest4j.AssertionFailedError: expected: <1990-H2> but was: <1995-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h7Test4_valid": {
                    "test_with_TemporalAdjuster_Year_h7Test4": "org.opentest4j.AssertionFailedError: expected: <2050-H1> but was: <2055-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h7Test5_valid": {
                    "test_with_TemporalAdjuster_Year_h7Test5": "org.opentest4j.AssertionFailedError: expected: <2050-H1> but was: <2055-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h7Test6_valid": {
                    "test_with_TemporalAdjuster_Year_h7Test6": "org.opentest4j.AssertionFailedError: expected: <2100-H2> but was: <2105-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h7Test7_valid": {
                    "test_with_TemporalAdjuster_Year_h7Test7": "org.opentest4j.AssertionFailedError: expected: <2100-H2> but was: <2105-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h8Test3_valid": {
                    "test_with_TemporalAdjuster_Year_h8Test3": "org.opentest4j.AssertionFailedError: expected: <2020-H2> but was: <2021-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h8Test5_valid": {
                    "test_with_TemporalAdjuster_Year_h8Test5": "org.opentest4j.AssertionFailedError: expected: <2020-H1> but was: <2022-H1>"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "javadev__castle__underscore-java",
            "test_file_path": "./data/ITrans/projects/javadev__castle__underscore-java/src/test/java/com/github/underscore/XmlBuilderTest.java",
            "test_simple_name": "toXml",
            "FQS_testMethos": "com.github.underscore.XmlBuilderTest.toXml()",
            "assertionSTMT": "assertEquals(XML, xmlBuilder.toXml())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/javadev__castle__underscore-java/com.github.underscore.XmlBuilderTest.toXml__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "com.github.underscore.XmlBuilder.parse(java.lang.String)",
                "com.github.underscore.XmlBuilder.toXml()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "XML",
                    "statement": "XmlBuilder xmlBuilder = XmlBuilder.parse(XML);",
                    "invocation": "xmlBuilder = XmlBuilder.parse(XML)"
                }
            ],
            "followUpInput": [
                {
                    "type": "XmlBuilder",
                    "expression": "xmlBuilder2",
                    "statement": "assertEquals(XML, xmlBuilder2.toXml());",
                    "invocation": "xmlBuilder2.toXml()"
                }
            ],
            "comments": "",
            "dependency": "com.github.underscore.XmlBuilder;com.github.underscore.XmlBuilder.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "toXml_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 6,
            "num_of_passed_test_cases": 6,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -7,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "toXml_h0Test1"
                ],
                [
                    "toXml_h0Test2"
                ],
                [
                    "toXml_h0Test3"
                ],
                [
                    "toXml_h4Test2"
                ],
                [
                    "toXml_h4Test3"
                ],
                [
                    "toXml_h4Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 20,
            "num_of_passed_test_cases": 20,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -21,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "toXml_h5Test0"
                ],
                [
                    "toXml_h5Test1"
                ],
                [
                    "toXml_h5Test2"
                ],
                [
                    "toXml_h5Test3"
                ],
                [
                    "toXml_h6Test0"
                ],
                [
                    "toXml_h6Test1"
                ],
                [
                    "toXml_h6Test2"
                ],
                [
                    "toXml_h6Test3"
                ],
                [
                    "toXml_h6Test4"
                ],
                [
                    "toXml_h7Test0"
                ],
                [
                    "toXml_h8Test0"
                ],
                [
                    "toXml_h8Test1"
                ],
                [
                    "toXml_h8Test2"
                ],
                [
                    "toXml_h8Test3"
                ],
                [
                    "toXml_h8Test4"
                ],
                [
                    "toXml_h9Test0"
                ],
                [
                    "toXml_h9Test1"
                ],
                [
                    "toXml_h9Test2"
                ],
                [
                    "toXml_h9Test3"
                ],
                [
                    "toXml_h9Test4"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__castle__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__castle__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/Map1Test.java",
            "test_simple_name": "test",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__castle__fastjson2/com.alibaba.fastjson2.internal.processor.maps.Map1Test.test__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<String, String>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Map<String, String> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                },
                {
                    "type": "Type",
                    "expression": "mapType",
                    "statement": "Map<String, String> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference;java.lang.reflect.Type",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 10,
            "num_of_passed_test_cases": 10,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -11,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_h0Test0"
                ],
                [
                    "test_h0Test1"
                ],
                [
                    "test_h0Test2"
                ],
                [
                    "test_h0Test3"
                ],
                [
                    "test_h0Test4"
                ],
                [
                    "test_h2Test0"
                ],
                [
                    "test_h2Test1"
                ],
                [
                    "test_h2Test2"
                ],
                [
                    "test_h2Test3"
                ],
                [
                    "test_h2Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 35,
            "num_of_passed_test_cases": 32,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 3,
            "num_of_reach_assertion_test_cases": -36,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_h0Test0"
                ],
                [
                    "test_h0Test1"
                ],
                [
                    "test_h0Test2"
                ],
                [
                    "test_h0Test3"
                ],
                [
                    "test_h0Test4"
                ],
                [
                    "test_h2Test1"
                ],
                [
                    "test_h2Test2"
                ],
                [
                    "test_h2Test4"
                ],
                [
                    "test_h3Test0"
                ],
                [
                    "test_h3Test1"
                ],
                [
                    "test_h3Test2"
                ],
                [
                    "test_h3Test3"
                ],
                [
                    "test_h3Test4"
                ],
                [
                    "test_h4Test0"
                ],
                [
                    "test_h4Test1"
                ],
                [
                    "test_h4Test3"
                ],
                [
                    "test_h4Test4"
                ],
                [
                    "test_h5Test0"
                ],
                [
                    "test_h5Test1"
                ],
                [
                    "test_h5Test2"
                ],
                [
                    "test_h5Test3"
                ],
                [
                    "test_h5Test4"
                ],
                [
                    "test_h6Test2"
                ],
                [
                    "test_h6Test3"
                ],
                [
                    "test_h6Test4"
                ],
                [
                    "test_h7Test1"
                ],
                [
                    "test_h7Test2"
                ],
                [
                    "test_h7Test3"
                ],
                [
                    "test_h7Test4"
                ],
                [
                    "test_h8Test1"
                ],
                [
                    "test_h8Test2"
                ],
                [
                    "test_h9Test0"
                ],
                [],
                [],
                []
            ],
            "failure_info": {
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h9Test1_valid": {
                    "test_h9Test1": "java.lang.NoClassDefFoundError: com/alibaba/fastjson2/internal/processor/maps/Map1Test_test"
                },
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h9Test2_valid": {
                    "test_h9Test2": "java.lang.NoClassDefFoundError: com/alibaba/fastjson2/internal/processor/maps/Map1Test_test"
                },
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h9Test4_valid": {
                    "test_h9Test4": "java.lang.NoClassDefFoundError: com/alibaba/fastjson2/internal/processor/maps/Map1Test_test"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "apache__castle__druid",
            "test_file_path": "./data/ITrans/projects/apache__castle__druid/processing/src/test/java/org/apache/druid/collections/CloseableResourceHolderTest.java",
            "test_simple_name": "testCloseableResourceHolder",
            "FQS_testMethos": "org.apache.druid.collections.CloseableResourceHolderTest.testCloseableResourceHolder()",
            "assertionSTMT": "Assert.assertSame(closeable, holder.get())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__castle__druid/org.apache.druid.collections.CloseableResourceHolderTest.testCloseableResourceHolder__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.apache.druid.collections.ResourceHolder.fromCloseable(T)",
                "org.apache.druid.collections.ResourceHolder.get()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Closeable",
                    "expression": "closeable",
                    "statement": "ResourceHolder<Closeable> holder = ResourceHolder.fromCloseable(closeable);",
                    "invocation": "holder = ResourceHolder.fromCloseable(closeable)"
                }
            ],
            "followUpInput": [
                {
                    "type": "ResourceHolder<Closeable>",
                    "expression": "holder2",
                    "statement": "Assert.assertSame(closeable, holder2.get());",
                    "invocation": "holder2.get()"
                }
            ],
            "comments": "",
            "dependency": "org.apache.druid.collections.ResourceHolder;org.apache.druid.collections.ResourceHolder.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testCloseableResourceHolder_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": null,
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 4,
            "num_of_passed_test_cases": 4,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testCloseableResourceHolder_h0Test0"
                ],
                [
                    "testCloseableResourceHolder_h4Test0"
                ],
                [
                    "testCloseableResourceHolder_h4Test1"
                ],
                [
                    "testCloseableResourceHolder_h5Test3"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__castle__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__castle__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/Map1Test.java",
            "test_simple_name": "test6",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test6()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__castle__fastjson2/com.alibaba.fastjson2.internal.processor.maps.Map1Test.test6__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<String, BigDecimal>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Map<String, BigDecimal> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                },
                {
                    "type": "Type",
                    "expression": "mapType",
                    "statement": "Map<String, BigDecimal> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                }
            ],
            "comments": "",
            "dependency": "ccom.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference;java.lang.reflect.Type",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "test6_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "test6_IT": "java.lang.NoClassDefFoundError: com/alibaba/fastjson2/internal/processor/maps/Map1Test_test6"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 5,
            "num_of_passed_test_cases": 5,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -6,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test6_h2Test0"
                ],
                [
                    "test6_h2Test1"
                ],
                [
                    "test6_h2Test2"
                ],
                [
                    "test6_h2Test3"
                ],
                [
                    "test6_h2Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 30,
            "num_of_passed_test_cases": 20,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 10,
            "num_of_reach_assertion_test_cases": -31,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [
                    "test6_h2Test0"
                ],
                [
                    "test6_h2Test2"
                ],
                [
                    "test6_h2Test3"
                ],
                [
                    "test6_h2Test4"
                ],
                [],
                [],
                [],
                [
                    "test6_h4Test0"
                ],
                [
                    "test6_h4Test2"
                ],
                [
                    "test6_h4Test3"
                ],
                [
                    "test6_h4Test4"
                ],
                [
                    "test6_h4Test5"
                ],
                [
                    "test6_h5Test2"
                ],
                [
                    "test6_h5Test3"
                ],
                [
                    "test6_h5Test4"
                ],
                [
                    "test6_h5Test5"
                ],
                [],
                [],
                [
                    "test6_h7Test2"
                ],
                [
                    "test6_h7Test3"
                ],
                [
                    "test6_h7Test5"
                ],
                [
                    "test6_h8Test2"
                ],
                [
                    "test6_h8Test4"
                ],
                [
                    "test6_h8Test6"
                ],
                [
                    "test6_h8Test8"
                ],
                [],
                []
            ],
            "failure_info": {
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h0Test0_valid": {
                    "test6_h0Test0": "java.lang.NoClassDefFoundError: com/alibaba/fastjson2/internal/processor/maps/Map1Test_test6"
                },
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h0Test1_valid": {
                    "test6_h0Test1": "java.lang.NoClassDefFoundError: com/alibaba/fastjson2/internal/processor/maps/Map1Test_test6"
                },
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h0Test2_valid": {
                    "test6_h0Test2": "java.lang.NoClassDefFoundError: com/alibaba/fastjson2/internal/processor/maps/Map1Test_test6"
                },
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h3Test1_valid": {
                    "test6_h3Test1": "java.lang.NoClassDefFoundError: com/alibaba/fastjson2/internal/processor/maps/Map1Test_test6"
                },
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h3Test3_valid": {
                    "test6_h3Test3": "java.lang.NoClassDefFoundError: com/alibaba/fastjson2/internal/processor/maps/Map1Test_test6"
                },
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h3Test4_valid": {
                    "test6_h3Test4": "java.lang.NoClassDefFoundError: com/alibaba/fastjson2/internal/processor/maps/Map1Test_test6"
                },
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h6Test1_valid": {
                    "test6_h6Test1": "java.lang.NoClassDefFoundError: com/alibaba/fastjson2/internal/processor/maps/Map1Test_test6"
                },
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h6Test2_valid": {
                    "test6_h6Test2": "java.lang.NoClassDefFoundError: com/alibaba/fastjson2/internal/processor/maps/Map1Test_test6"
                },
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h9Test1_valid": {
                    "test6_h9Test1": "java.lang.NoClassDefFoundError: com/alibaba/fastjson2/internal/processor/maps/Map1Test_test6"
                },
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h9Test4_valid": {
                    "test6_h9Test4": "java.lang.NoClassDefFoundError: com/alibaba/fastjson2/internal/processor/maps/Map1Test_test6"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "apache__castle__druid",
            "test_file_path": "./data/ITrans/projects/apache__castle__druid/processing/src/test/java/org/apache/druid/query/filter/IsBooleanDimFilterTest.java",
            "test_simple_name": "testGetCacheKey",
            "FQS_testMethos": "org.apache.druid.query.filter.IsBooleanDimFilterTest.testGetCacheKey()",
            "assertionSTMT": "Assert.assertArrayEquals(f1_3.getCacheKey(), f1_4.getCacheKey())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__castle__druid/org.apache.druid.query.filter.IsBooleanDimFilterTest.testGetCacheKey__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.apache.druid.query.filter.IsFalseDimFilter.of(org.apache.druid.query.filter.DimFilter)",
                "org.apache.druid.query.filter.IsFalseDimFilter.of(org.apache.druid.query.filter.DimFilter)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "EqualityFilter",
                    "expression": "f3",
                    "statement": "IsFalseDimFilter f1_3 = IsFalseDimFilter.of(f3);",
                    "invocation": "f1_3 = IsFalseDimFilter.of(f3)"
                }
            ],
            "followUpInput": [
                {
                    "type": "EqualityFilter",
                    "expression": "f4",
                    "statement": "IsFalseDimFilter f1_4 = IsFalseDimFilter.of(f4);",
                    "invocation": "f1_4 = IsFalseDimFilter.of(f4)"
                }
            ],
            "comments": "",
            "dependency": "org.apache.druid.query.filter.IsFalseDimFilter;org.apache.druid.query.filter.IsFalseDimFilter.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testGetCacheKey_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 5,
            "num_of_passed_test_cases": 5,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testGetCacheKey_h0Test0"
                ],
                [
                    "testGetCacheKey_h0Test1"
                ],
                [
                    "testGetCacheKey_h0Test3"
                ],
                [
                    "testGetCacheKey_h0Test4"
                ],
                [
                    "testGetCacheKey_h1Test1"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 2,
            "num_of_passed_test_cases": 2,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testGetCacheKey_h0Test0"
                ],
                [
                    "testGetCacheKey_h0Test2"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__castle__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__castle__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_lengthOfYear",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_lengthOfYear()",
            "assertionSTMT": "assertEquals(Year.isLeap(year) ? 366 : 365, test2.lengthOfYear())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__castle__threeten-extra/org.threeten.extra.TestYearHalf.test_lengthOfYear__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)",
                "org.threeten.extra.YearHalf.lengthOfYear()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "int",
                    "expression": "year",
                    "statement": "YearHalf test = YearHalf.of(year, half);",
                    "invocation": "test = YearHalf.of(year, half)"
                },
                {
                    "type": "Half",
                    "expression": "half",
                    "statement": "YearHalf test = YearHalf.of(year, half);",
                    "invocation": "test = YearHalf.of(year, half)"
                }
            ],
            "followUpInput": [
                {
                    "type": "YearHalf",
                    "expression": "test2",
                    "statement": "assertEquals(Year.isLeap(year) ? 366 : 365, test2.lengthOfYear());",
                    "invocation": "test2.lengthOfYear()"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test_lengthOfYear_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 8,
            "num_of_passed_test_cases": 8,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -9,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_lengthOfYear_h0Test0"
                ],
                [
                    "test_lengthOfYear_h0Test2"
                ],
                [
                    "test_lengthOfYear_h0Test4"
                ],
                [
                    "test_lengthOfYear_h0Test6"
                ],
                [
                    "test_lengthOfYear_h0Test8"
                ],
                [
                    "test_lengthOfYear_h4Test4"
                ],
                [
                    "test_lengthOfYear_h4Test6"
                ],
                [
                    "test_lengthOfYear_h4Test8"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 10,
            "num_of_passed_test_cases": 10,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -11,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_lengthOfYear_h0Test0"
                ],
                [
                    "test_lengthOfYear_h0Test2"
                ],
                [
                    "test_lengthOfYear_h0Test4"
                ],
                [
                    "test_lengthOfYear_h0Test6"
                ],
                [
                    "test_lengthOfYear_h0Test8"
                ],
                [
                    "test_lengthOfYear_h3Test0"
                ],
                [
                    "test_lengthOfYear_h3Test6"
                ],
                [
                    "test_lengthOfYear_h3Test8"
                ],
                [
                    "test_lengthOfYear_h6Test6"
                ],
                [
                    "test_lengthOfYear_h8Test2"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "zfoo-project__castle__zfoo",
            "test_file_path": "./data/ITrans/projects/zfoo-project__castle__zfoo/net/src/test/java/com/zfoo/net/util/NetUtilsTest.java",
            "test_simple_name": "ipv4Test",
            "FQS_testMethos": "com.zfoo.net.util.NetUtilsTest.ipv4Test()",
            "assertionSTMT": "Assert.assertEquals(ipStr2, ipStr1)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/zfoo-project__castle__zfoo/com.zfoo.net.util.NetUtilsTest.localhostTest__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "com.zfoo.net.util.NetUtils.ipv4ToLong()",
                "com.zfoo.net.util.NetUtils.longToIpv4()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "ipStr1",
                    "statement": "long ipLong = NetUtils.ipv4ToLong(ipStr1);",
                    "invocation": "ipLong = NetUtils.ipv4ToLong(ipStr1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "long",
                    "expression": "ipLong2",
                    "statement": "String ipStr2 = NetUtils.longToIpv4(ipLong2);",
                    "invocation": "ipStr2 = NetUtils.longToIpv4(ipLong2)"
                }
            ],
            "comments": "manully light craft case",
            "dependency": "com.zfoo.net.util.NetUtils;com.zfoo.net.util.NetUtils.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "ipv4Test_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 9,
            "num_of_passed_test_cases": 9,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "ipv4Test_h0Test0"
                ],
                [
                    "ipv4Test_h0Test1"
                ],
                [
                    "ipv4Test_h0Test2"
                ],
                [
                    "ipv4Test_h0Test3"
                ],
                [
                    "ipv4Test_h0Test4"
                ],
                [
                    "ipv4Test_h2Test1"
                ],
                [
                    "ipv4Test_h2Test3"
                ],
                [
                    "ipv4Test_h2Test4"
                ],
                [
                    "ipv4Test_h4Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 10,
            "num_of_passed_test_cases": 10,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "ipv4Test_h0Test0"
                ],
                [
                    "ipv4Test_h0Test1"
                ],
                [
                    "ipv4Test_h0Test2"
                ],
                [
                    "ipv4Test_h0Test3"
                ],
                [
                    "ipv4Test_h0Test4"
                ],
                [
                    "ipv4Test_h2Test2"
                ],
                [
                    "ipv4Test_h3Test2"
                ],
                [
                    "ipv4Test_h3Test4"
                ],
                [
                    "ipv4Test_h6Test3"
                ],
                [
                    "ipv4Test_h7Test2"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "MyRobotLab__castle__myrobotlab",
            "test_file_path": "./data/ITrans/projects/MyRobotLab__castle__myrobotlab/src/test/java/org/myrobotlab/service/I2cMuxTest.java",
            "test_simple_name": "testSetDeviceBus",
            "FQS_testMethos": "org.myrobotlab.service.I2cMuxTest.testSetDeviceBus()",
            "assertionSTMT": "assertEquals(deviceBus, i2cMux.getDeviceBus())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/MyRobotLab__castle__myrobotlab/org.myrobotlab.service.I2cMuxTest.testSetDeviceBus__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.myrobotlab.service.I2cMux.setDeviceBus(java.lang.String)",
                "org.myrobotlab.service.I2cMux.getDeviceBus()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "I2cMux",
                    "expression": "i2cMux",
                    "statement": "i2cMux.setDeviceBus(deviceBus);",
                    "invocation": "i2cMux.setDeviceBus(deviceBus)"
                },
                {
                    "type": "String",
                    "expression": "deviceBus",
                    "statement": "i2cMux.setDeviceBus(deviceBus);",
                    "invocation": "i2cMux.setDeviceBus(deviceBus)"
                }
            ],
            "followUpInput": [
                {
                    "type": "I2cMux",
                    "expression": "i2cMux2",
                    "statement": "assertEquals(deviceBus, i2cMux2.getDeviceBus());",
                    "invocation": "i2cMux2.getDeviceBus()"
                }
            ],
            "comments": "",
            "dependency": "org.myrobotlab.service.I2cMux;org.myrobotlab.service.I2cMux.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testSetDeviceBus_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 15,
            "num_of_passed_test_cases": 15,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testSetDeviceBus_h0Test0"
                ],
                [
                    "testSetDeviceBus_h0Test1"
                ],
                [
                    "testSetDeviceBus_h0Test2"
                ],
                [
                    "testSetDeviceBus_h0Test3"
                ],
                [
                    "testSetDeviceBus_h0Test4"
                ],
                [
                    "testSetDeviceBus_h1Test0"
                ],
                [
                    "testSetDeviceBus_h1Test1"
                ],
                [
                    "testSetDeviceBus_h1Test2"
                ],
                [
                    "testSetDeviceBus_h1Test3"
                ],
                [
                    "testSetDeviceBus_h1Test4"
                ],
                [
                    "testSetDeviceBus_h2Test0"
                ],
                [
                    "testSetDeviceBus_h2Test1"
                ],
                [
                    "testSetDeviceBus_h2Test2"
                ],
                [
                    "testSetDeviceBus_h2Test3"
                ],
                [
                    "testSetDeviceBus_h2Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 10,
            "num_of_passed_test_cases": 10,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testSetDeviceBus_h0Test0"
                ],
                [
                    "testSetDeviceBus_h0Test1"
                ],
                [
                    "testSetDeviceBus_h0Test2"
                ],
                [
                    "testSetDeviceBus_h0Test3"
                ],
                [
                    "testSetDeviceBus_h0Test4"
                ],
                [
                    "testSetDeviceBus_h3Test4"
                ],
                [
                    "testSetDeviceBus_h4Test2"
                ],
                [
                    "testSetDeviceBus_h5Test3"
                ],
                [
                    "testSetDeviceBus_h6Test6"
                ],
                [
                    "testSetDeviceBus_h7Test4"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__castle__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__castle__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_withYear",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_withYear()",
            "assertionSTMT": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withYear(year2))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__castle__threeten-extra/org.threeten.extra.TestYearHalf.test_withYear__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)",
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "int",
                    "expression": "year1",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withYear(year2));",
                    "invocation": "YearHalf.of(year1, half1)"
                },
                {
                    "type": "int",
                    "expression": "half1",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withYear(year2));",
                    "invocation": "YearHalf.of(year1, half1)"
                },
                {
                    "type": "int",
                    "expression": "year2",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withYear(year2));",
                    "invocation": "year2"
                }
            ],
            "followUpInput": [
                {
                    "type": "int",
                    "expression": "year3",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withYear(year2));",
                    "invocation": "YearHalf.of(year3, half3)"
                },
                {
                    "type": "int",
                    "expression": "half3",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withYear(year2));",
                    "invocation": "YearHalf.of(year3, half3)"
                }
            ],
            "comments": "\u4e0d\u77e5\u4e3a\u5565\u4e0d\u80fd\u8dd1\uff0c\u4e34\u65f6\u505c\u4e00\u4e0b\u770b\u770b",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 3,
            "num_of_passed_test_cases": 2,
            "num_of_assertion_failed_test_cases": 1,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [
                "test_withYear_IT"
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test_withYear_int_halfTooLow",
                "test_withYear_int_halfTooHigh"
            ],
            "failure_info": {
                "test_withYear_IT": "org.opentest4j.AssertionFailedError: expected: <2007-H2> but was: <2012-H2>"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 14,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 14,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -15,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [
                    "test_withYear_h0Test0"
                ],
                [
                    "test_withYear_h1Test0"
                ],
                [
                    "test_withYear_h1Test2"
                ],
                [
                    "test_withYear_h1Test3"
                ],
                [
                    "test_withYear_h1Test4"
                ],
                [
                    "test_withYear_h1Test5"
                ],
                [
                    "test_withYear_h2Test2"
                ],
                [
                    "test_withYear_h2Test3"
                ],
                [
                    "test_withYear_h2Test4"
                ],
                [
                    "test_withYear_h4Test0"
                ],
                [
                    "test_withYear_h4Test1"
                ],
                [
                    "test_withYear_h4Test2"
                ],
                [
                    "test_withYear_h4Test3"
                ],
                [
                    "test_withYear_h4Test4"
                ]
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.threeten.extra.TestYearHalf_test_withYear_h0Test0_valid": {
                    "test_withYear_h0Test0": "org.opentest4j.AssertionFailedError: expected: <2007-H2> but was: <2012-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h1Test0_valid": {
                    "test_withYear_h1Test0": "org.opentest4j.AssertionFailedError: expected: <2000-H1> but was: <2005-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h1Test2_valid": {
                    "test_withYear_h1Test2": "org.opentest4j.AssertionFailedError: expected: <2021-H2> but was: <2022-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h1Test3_valid": {
                    "test_withYear_h1Test3": "org.opentest4j.AssertionFailedError: expected: <1990-H1> but was: <1995-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h1Test4_valid": {
                    "test_withYear_h1Test4": "org.opentest4j.AssertionFailedError: expected: <2030-H2> but was: <2035-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h1Test5_valid": {
                    "test_withYear_h1Test5": "org.opentest4j.AssertionFailedError: expected: <1985-H1> but was: <1990-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h2Test2_valid": {
                    "test_withYear_h2Test2": "org.opentest4j.AssertionFailedError: expected: <1999-H1> but was: <2000-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h2Test3_valid": {
                    "test_withYear_h2Test3": "org.opentest4j.AssertionFailedError: expected: <2022-H1> but was: <2023-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h2Test4_valid": {
                    "test_withYear_h2Test4": "org.opentest4j.AssertionFailedError: expected: <1900-H2> but was: <1901-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h4Test0_valid": {
                    "test_withYear_h4Test0": "org.opentest4j.AssertionFailedError: expected: <2000-H1> but was: <2005-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h4Test1_valid": {
                    "test_withYear_h4Test1": "org.opentest4j.AssertionFailedError: expected: <2021-H1> but was: <2022-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h4Test2_valid": {
                    "test_withYear_h4Test2": "org.opentest4j.AssertionFailedError: expected: <1995-H2> but was: <2000-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h4Test3_valid": {
                    "test_withYear_h4Test3": "org.opentest4j.AssertionFailedError: expected: <2022-H2> but was: <2023-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h4Test4_valid": {
                    "test_withYear_h4Test4": "org.opentest4j.AssertionFailedError: expected: <2005-H1> but was: <2010-H1>"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 43,
            "num_of_passed_test_cases": 14,
            "num_of_assertion_failed_test_cases": 29,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -44,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [
                    "test_withYear_h2Test0"
                ],
                [
                    "test_withYear_h2Test1"
                ],
                [
                    "test_withYear_h2Test2"
                ],
                [
                    "test_withYear_h2Test3"
                ],
                [
                    "test_withYear_h2Test4"
                ],
                [
                    "test_withYear_h2Test5"
                ],
                [
                    "test_withYear_h2Test6"
                ],
                [
                    "test_withYear_h2Test7"
                ],
                [],
                [
                    "test_withYear_h3Test0"
                ],
                [
                    "test_withYear_h3Test2"
                ],
                [],
                [
                    "test_withYear_h3Test8"
                ],
                [],
                [],
                [],
                [],
                [
                    "test_withYear_h6Test0"
                ],
                [
                    "test_withYear_h6Test1"
                ],
                [
                    "test_withYear_h6Test2"
                ],
                [
                    "test_withYear_h6Test3"
                ],
                [
                    "test_withYear_h6Test4"
                ],
                [
                    "test_withYear_h6Test5"
                ],
                [
                    "test_withYear_h6Test6"
                ],
                [
                    "test_withYear_h6Test7"
                ],
                [
                    "test_withYear_h6Test8"
                ],
                [
                    "test_withYear_h6Test9"
                ],
                [],
                [],
                [],
                [
                    "test_withYear_h9Test0"
                ],
                [
                    "test_withYear_h9Test1"
                ],
                [
                    "test_withYear_h9Test4"
                ],
                [
                    "test_withYear_h9Test5"
                ],
                [
                    "test_withYear_h9Test6"
                ],
                [
                    "test_withYear_h9Test7"
                ],
                [
                    "test_withYear_h9Test8"
                ],
                [
                    "test_withYear_h9Test9"
                ]
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_withYear_h0Test0"
                ],
                [
                    "test_withYear_h0Test1"
                ],
                [
                    "test_withYear_h0Test2"
                ],
                [
                    "test_withYear_h0Test3"
                ],
                [
                    "test_withYear_h0Test4"
                ],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [
                    "test_withYear_h2Test9"
                ],
                [],
                [],
                [
                    "test_withYear_h3Test4"
                ],
                [],
                [
                    "test_withYear_h4Test4"
                ],
                [
                    "test_withYear_h5Test0"
                ],
                [
                    "test_withYear_h5Test1"
                ],
                [
                    "test_withYear_h5Test2"
                ],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [
                    "test_withYear_h7Test3"
                ],
                [
                    "test_withYear_h7Test4"
                ],
                [
                    "test_withYear_h8Test5"
                ],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.threeten.extra.TestYearHalf_test_withYear_h2Test0_valid": {
                    "test_withYear_h2Test0": "org.opentest4j.AssertionFailedError: expected: <1900-H1> but was: <2000-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h2Test1_valid": {
                    "test_withYear_h2Test1": "org.opentest4j.AssertionFailedError: expected: <1900-H1> but was: <2000-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h2Test2_valid": {
                    "test_withYear_h2Test2": "org.opentest4j.AssertionFailedError: expected: <2100-H2> but was: <2200-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h2Test3_valid": {
                    "test_withYear_h2Test3": "org.opentest4j.AssertionFailedError: expected: <2100-H2> but was: <2200-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h2Test4_valid": {
                    "test_withYear_h2Test4": "org.opentest4j.AssertionFailedError: expected: <1800-H1> but was: <1900-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h2Test5_valid": {
                    "test_withYear_h2Test5": "org.opentest4j.AssertionFailedError: expected: <1800-H1> but was: <1900-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h2Test6_valid": {
                    "test_withYear_h2Test6": "org.opentest4j.AssertionFailedError: expected: <2200-H2> but was: <2300-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h2Test7_valid": {
                    "test_withYear_h2Test7": "org.opentest4j.AssertionFailedError: expected: <2200-H2> but was: <2300-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h3Test0_valid": {
                    "test_withYear_h3Test0": "org.opentest4j.AssertionFailedError: expected: <2020-H1> but was: <2022-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h3Test2_valid": {
                    "test_withYear_h3Test2": "org.opentest4j.AssertionFailedError: expected: <1990-H2> but was: <1988-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h3Test8_valid": {
                    "test_withYear_h3Test8": "org.opentest4j.AssertionFailedError: expected: <2020-H1> but was: <2021-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h6Test0_valid": {
                    "test_withYear_h6Test0": "org.opentest4j.AssertionFailedError: expected: <2020-H1> but was: <2025-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h6Test1_valid": {
                    "test_withYear_h6Test1": "org.opentest4j.AssertionFailedError: expected: <2020-H1> but was: <2025-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h6Test2_valid": {
                    "test_withYear_h6Test2": "org.opentest4j.AssertionFailedError: expected: <1990-H2> but was: <1995-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h6Test3_valid": {
                    "test_withYear_h6Test3": "org.opentest4j.AssertionFailedError: expected: <1990-H2> but was: <1995-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h6Test4_valid": {
                    "test_withYear_h6Test4": "org.opentest4j.AssertionFailedError: expected: <2100-H1> but was: <2105-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h6Test5_valid": {
                    "test_withYear_h6Test5": "org.opentest4j.AssertionFailedError: expected: <2100-H1> but was: <2105-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h6Test6_valid": {
                    "test_withYear_h6Test6": "org.opentest4j.AssertionFailedError: expected: <1800-H2> but was: <1805-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h6Test7_valid": {
                    "test_withYear_h6Test7": "org.opentest4j.AssertionFailedError: expected: <1800-H2> but was: <1805-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h6Test8_valid": {
                    "test_withYear_h6Test8": "org.opentest4j.AssertionFailedError: expected: <2000-H1> but was: <2005-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h6Test9_valid": {
                    "test_withYear_h6Test9": "org.opentest4j.AssertionFailedError: expected: <2000-H1> but was: <2005-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h9Test0_valid": {
                    "test_withYear_h9Test0": "org.opentest4j.AssertionFailedError: expected: <2007-H1> but was: <2012-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h9Test1_valid": {
                    "test_withYear_h9Test1": "org.opentest4j.AssertionFailedError: expected: <2007-H1> but was: <2012-H1>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h9Test4_valid": {
                    "test_withYear_h9Test4": "org.opentest4j.AssertionFailedError: expected: <2007-H2> but was: <2012-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h9Test5_valid": {
                    "test_withYear_h9Test5": "org.opentest4j.AssertionFailedError: expected: <2007-H2> but was: <2012-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h9Test6_valid": {
                    "test_withYear_h9Test6": "org.opentest4j.AssertionFailedError: expected: <2007-H2> but was: <2100-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h9Test7_valid": {
                    "test_withYear_h9Test7": "org.opentest4j.AssertionFailedError: expected: <2007-H2> but was: <2100-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h9Test8_valid": {
                    "test_withYear_h9Test8": "org.opentest4j.AssertionFailedError: expected: <2007-H2> but was: <1900-H2>"
                },
                "org.threeten.extra.TestYearHalf_test_withYear_h9Test9_valid": {
                    "test_withYear_h9Test9": "org.opentest4j.AssertionFailedError: expected: <2007-H2> but was: <1900-H2>"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__castle__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__castle__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/Map1Test.java",
            "test_simple_name": "test1",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test1()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__castle__fastjson2/com.alibaba.fastjson2.internal.processor.maps.Map1Test.test1__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<String, Integer>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Map<String, Integer> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                },
                {
                    "type": "Type",
                    "expression": "mapType",
                    "statement": "Map<String, Integer> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference;java.lang.reflect.Type",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test1_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 11,
            "num_of_passed_test_cases": 11,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -12,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test1_h0Test0"
                ],
                [
                    "test1_h1Test0"
                ],
                [
                    "test1_h1Test1"
                ],
                [
                    "test1_h1Test2"
                ],
                [
                    "test1_h1Test3"
                ],
                [
                    "test1_h1Test4"
                ],
                [
                    "test1_h4Test0"
                ],
                [
                    "test1_h4Test1"
                ],
                [
                    "test1_h4Test2"
                ],
                [
                    "test1_h4Test3"
                ],
                [
                    "test1_h4Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 26,
            "num_of_passed_test_cases": 26,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -27,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test1_h0Test0"
                ],
                [
                    "test1_h0Test1"
                ],
                [
                    "test1_h0Test2"
                ],
                [
                    "test1_h0Test3"
                ],
                [
                    "test1_h0Test4"
                ],
                [
                    "test1_h2Test2"
                ],
                [
                    "test1_h2Test3"
                ],
                [
                    "test1_h3Test0"
                ],
                [
                    "test1_h3Test1"
                ],
                [
                    "test1_h3Test2"
                ],
                [
                    "test1_h3Test3"
                ],
                [
                    "test1_h3Test4"
                ],
                [
                    "test1_h4Test1"
                ],
                [
                    "test1_h4Test2"
                ],
                [
                    "test1_h4Test3"
                ],
                [
                    "test1_h4Test4"
                ],
                [
                    "test1_h4Test5"
                ],
                [
                    "test1_h5Test2"
                ],
                [
                    "test1_h5Test3"
                ],
                [
                    "test1_h7Test2"
                ],
                [
                    "test1_h7Test4"
                ],
                [
                    "test1_h8Test0"
                ],
                [
                    "test1_h8Test3"
                ],
                [
                    "test1_h8Test5"
                ],
                [
                    "test1_h8Test7"
                ],
                [
                    "test1_h8Test9"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__castle__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__castle__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/Map1Test.java",
            "test_simple_name": "test7",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test7()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__castle__fastjson2/com.alibaba.fastjson2.internal.processor.maps.Map1Test.test7__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<String, BigInteger>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Map<String, BigInteger> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                },
                {
                    "type": "Type",
                    "expression": "mapType",
                    "statement": "Map<String, BigInteger> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference;java.lang.reflect.Type",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test7_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 10,
            "num_of_passed_test_cases": 10,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -11,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test7_h1Test0"
                ],
                [
                    "test7_h1Test1"
                ],
                [
                    "test7_h1Test2"
                ],
                [
                    "test7_h1Test3"
                ],
                [
                    "test7_h1Test4"
                ],
                [
                    "test7_h2Test0"
                ],
                [
                    "test7_h2Test1"
                ],
                [
                    "test7_h2Test2"
                ],
                [
                    "test7_h2Test3"
                ],
                [
                    "test7_h2Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 33,
            "num_of_passed_test_cases": 32,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -34,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test7_h0Test0"
                ],
                [
                    "test7_h0Test2"
                ],
                [
                    "test7_h0Test3"
                ],
                [
                    "test7_h0Test4"
                ],
                [
                    "test7_h0Test5"
                ],
                [
                    "test7_h2Test3"
                ],
                [
                    "test7_h2Test4"
                ],
                [
                    "test7_h2Test5"
                ],
                [
                    "test7_h3Test0"
                ],
                [
                    "test7_h3Test3"
                ],
                [
                    "test7_h3Test4"
                ],
                [
                    "test7_h3Test5"
                ],
                [
                    "test7_h3Test7"
                ],
                [
                    "test7_h3Test8"
                ],
                [
                    "test7_h3Test9"
                ],
                [
                    "test7_h4Test0"
                ],
                [
                    "test7_h4Test1"
                ],
                [
                    "test7_h4Test2"
                ],
                [
                    "test7_h4Test3"
                ],
                [
                    "test7_h4Test4"
                ],
                [
                    "test7_h5Test0"
                ],
                [
                    "test7_h5Test1"
                ],
                [
                    "test7_h5Test2"
                ],
                [
                    "test7_h5Test3"
                ],
                [],
                [
                    "test7_h6Test3"
                ],
                [
                    "test7_h6Test4"
                ],
                [
                    "test7_h6Test5"
                ],
                [
                    "test7_h7Test2"
                ],
                [
                    "test7_h7Test3"
                ],
                [
                    "test7_h7Test4"
                ],
                [
                    "test7_h7Test5"
                ],
                [
                    "test7_h8Test3"
                ]
            ],
            "failure_info": {
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h5Test4_valid": {
                    "test7_h5Test4": "java.lang.NoClassDefFoundError: com/alibaba/fastjson2/internal/processor/maps/Map1Test_test7"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__castle__druid",
            "test_file_path": "./data/ITrans/projects/alibaba__castle__druid/core/src/test/java/com/alibaba/druid/bvt/sql/hive/issues/Issue5430.java",
            "test_simple_name": "test_createTable",
            "FQS_testMethos": "com.alibaba.druid.bvt.sql.hive.issues.Issue5430.test_createTable()",
            "assertionSTMT": "assertEquals(normalizeSql.toLowerCase(), normalizeNewSql.toLowerCase())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__castle__druid/com.alibaba.druid.bvt.sql.hive.issues.Issue5430.test_createTable__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "com.alibaba.druid.bvt.sql.hive.issues.Issue5430.normalizeSql(java.lang.String)",
                "com.alibaba.druid.bvt.sql.hive.issues.Issue5430.normalizeSql(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "sql",
                    "statement": "String normalizeSql = normalizeSql(sql1);",
                    "invocation": "normalizeSql = normalizeSql(sql1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "newSql",
                    "statement": "String normalizeNewSql = normalizeSql(newSql1);",
                    "invocation": "normalizeNewSql = normalizeSql(newSql1)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.druid.bvt.sql.hive.issues.Issue5430;com.alibaba.druid.bvt.sql.hive.issues.Issue5430.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test_createTable_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 18,
            "num_of_passed_test_cases": 18,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_createTable_h0Test0"
                ],
                [
                    "test_createTable_h0Test1"
                ],
                [
                    "test_createTable_h0Test2"
                ],
                [
                    "test_createTable_h0Test3"
                ],
                [
                    "test_createTable_h0Test4"
                ],
                [
                    "test_createTable_h1Test1"
                ],
                [
                    "test_createTable_h1Test2"
                ],
                [
                    "test_createTable_h1Test3"
                ],
                [
                    "test_createTable_h1Test4"
                ],
                [
                    "test_createTable_h2Test0"
                ],
                [
                    "test_createTable_h2Test1"
                ],
                [
                    "test_createTable_h2Test2"
                ],
                [
                    "test_createTable_h2Test3"
                ],
                [
                    "test_createTable_h2Test4"
                ],
                [
                    "test_createTable_h3Test3"
                ],
                [
                    "test_createTable_h4Test1"
                ],
                [
                    "test_createTable_h4Test2"
                ],
                [
                    "test_createTable_h4Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 14,
            "num_of_passed_test_cases": 14,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_createTable_h0Test1"
                ],
                [
                    "test_createTable_h0Test2"
                ],
                [
                    "test_createTable_h0Test3"
                ],
                [
                    "test_createTable_h2Test2"
                ],
                [
                    "test_createTable_h2Test3"
                ],
                [
                    "test_createTable_h2Test4"
                ],
                [
                    "test_createTable_h2Test5"
                ],
                [
                    "test_createTable_h3Test1"
                ],
                [
                    "test_createTable_h3Test2"
                ],
                [
                    "test_createTable_h3Test3"
                ],
                [
                    "test_createTable_h3Test4"
                ],
                [
                    "test_createTable_h4Test0"
                ],
                [
                    "test_createTable_h5Test1"
                ],
                [
                    "test_createTable_h9Test1"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "sakaiproject__castle__sakai",
            "test_file_path": "./data/ITrans/projects/sakaiproject__castle__sakai/basiclti/tsugi-util/src/test/org/tsugi/util/Base64DoubleUrlEncodeSafeTest.java",
            "test_simple_name": "testEncodeAndDecode",
            "FQS_testMethos": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest.testEncodeAndDecode()",
            "assertionSTMT": "assertEquals(input, decoded)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/sakaiproject__castle__sakai/org.tsugi.util.Base64DoubleUrlEncodeSafeTest.testEncodeAndDecode__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.tsugi.util.Base64DoubleUrlEncodeSafe.encode(java.lang.String)",
                "org.tsugi.util.Base64DoubleUrlEncodeSafe.decode(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "input",
                    "statement": "String encoded = Base64DoubleUrlEncodeSafe.encode(input);",
                    "invocation": "encoded = Base64DoubleUrlEncodeSafe.encode(input)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "encoded2",
                    "statement": "String decoded = Base64DoubleUrlEncodeSafe.decode(encoded2);",
                    "invocation": "decoded = Base64DoubleUrlEncodeSafe.decode(encoded2)"
                }
            ],
            "comments": "",
            "dependency": "org.tsugi.util.Base64DoubleUrlEncodeSafe.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testEncodeAndDecode_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 10,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 10,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h0Test0_valid": {
                    "testEncodeAndDecode_h0Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h0Test1_valid": {
                    "testEncodeAndDecode_h0Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h0Test2_valid": {
                    "testEncodeAndDecode_h0Test2": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h0Test3_valid": {
                    "testEncodeAndDecode_h0Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h0Test4_valid": {
                    "testEncodeAndDecode_h0Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h1Test3_valid": {
                    "testEncodeAndDecode_h1Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h1Test4_valid": {
                    "testEncodeAndDecode_h1Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h2Test3_valid": {
                    "testEncodeAndDecode_h2Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h3Test3_valid": {
                    "testEncodeAndDecode_h3Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h4Test4_valid": {
                    "testEncodeAndDecode_h4Test4": "java.lang.NoClassDefFoundError, line:None"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 37,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 37,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h0Test0_valid": {
                    "testEncodeAndDecode_h0Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h0Test1_valid": {
                    "testEncodeAndDecode_h0Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h0Test2_valid": {
                    "testEncodeAndDecode_h0Test2": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h0Test3_valid": {
                    "testEncodeAndDecode_h0Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h0Test4_valid": {
                    "testEncodeAndDecode_h0Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h2Test3_valid": {
                    "testEncodeAndDecode_h2Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h2Test4_valid": {
                    "testEncodeAndDecode_h2Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h3Test2_valid": {
                    "testEncodeAndDecode_h3Test2": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h3Test4_valid": {
                    "testEncodeAndDecode_h3Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h4Test4_valid": {
                    "testEncodeAndDecode_h4Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h5Test0_valid": {
                    "testEncodeAndDecode_h5Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h5Test2_valid": {
                    "testEncodeAndDecode_h5Test2": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h5Test3_valid": {
                    "testEncodeAndDecode_h5Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h6Test0_valid": {
                    "testEncodeAndDecode_h6Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h6Test3_valid": {
                    "testEncodeAndDecode_h6Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h6Test4_valid": {
                    "testEncodeAndDecode_h6Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h6Test5_valid": {
                    "testEncodeAndDecode_h6Test5": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h7Test0_valid": {
                    "testEncodeAndDecode_h7Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h7Test4_valid": {
                    "testEncodeAndDecode_h7Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h7Test8_valid": {
                    "testEncodeAndDecode_h7Test8": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h8Test0_valid": {
                    "testEncodeAndDecode_h8Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h8Test1_valid": {
                    "testEncodeAndDecode_h8Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h8Test3_valid": {
                    "testEncodeAndDecode_h8Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h8Test4_valid": {
                    "testEncodeAndDecode_h8Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h8Test5_valid": {
                    "testEncodeAndDecode_h8Test5": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h8Test6_valid": {
                    "testEncodeAndDecode_h8Test6": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h8Test7_valid": {
                    "testEncodeAndDecode_h8Test7": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h8Test8_valid": {
                    "testEncodeAndDecode_h8Test8": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h8Test9_valid": {
                    "testEncodeAndDecode_h8Test9": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test0_valid": {
                    "testEncodeAndDecode_h9Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test2_valid": {
                    "testEncodeAndDecode_h9Test2": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test3_valid": {
                    "testEncodeAndDecode_h9Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test5_valid": {
                    "testEncodeAndDecode_h9Test5": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test6_valid": {
                    "testEncodeAndDecode_h9Test6": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test7_valid": {
                    "testEncodeAndDecode_h9Test7": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test8_valid": {
                    "testEncodeAndDecode_h9Test8": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test9_valid": {
                    "testEncodeAndDecode_h9Test9": "java.lang.NoClassDefFoundError, line:None"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__castle__druid",
            "test_file_path": "./data/ITrans/projects/alibaba__castle__druid/core/src/test/java/com/alibaba/druid/bvt/sql/mysql/issues/Issue5686.java",
            "test_simple_name": "test_column_comment",
            "FQS_testMethos": "com.alibaba.druid.bvt.sql.mysql.issues.Issue5686.test_column_comment()",
            "assertionSTMT": "assertEquals(newSql, newSql2)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__castle__druid/com.alibaba.druid.bvt.sql.mysql.issues.Issue5686.test_column_comment__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.druid.sql.ast.statement.SQLInsertStatement.toString()",
                "com.alibaba.druid.sql.ast.statement.SQLInsertStatement.toString()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "MySqlInsertStatement",
                    "expression": "sqlStatement",
                    "statement": "String newSql = sqlStatement.toString();",
                    "invocation": "newSql = sqlStatement.toString()"
                }
            ],
            "followUpInput": [
                {
                    "type": "MySqlInsertStatement",
                    "expression": "sqlStatement2",
                    "statement": "String newSql2 = sqlStatement2.toString();",
                    "invocation": "newSql2 = sqlStatement2.toString()"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.druid.sql.ast.statement.SQLInsertStatement;com.alibaba.druid.sql.ast.statement.SQLInsertStatement.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test_column_comment_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 8,
            "num_of_passed_test_cases": 8,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_column_comment_h3Test1"
                ],
                [
                    "test_column_comment_h3Test2"
                ],
                [
                    "test_column_comment_h3Test3"
                ],
                [
                    "test_column_comment_h3Test4"
                ],
                [
                    "test_column_comment_h4Test1"
                ],
                [
                    "test_column_comment_h4Test2"
                ],
                [
                    "test_column_comment_h4Test3"
                ],
                [
                    "test_column_comment_h4Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": null,
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__castle__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__castle__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_withHalf_int",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_withHalf_int()",
            "assertionSTMT": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withHalf(half2))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__castle__threeten-extra/org.threeten.extra.TestYearHalf.test_withHalf_int__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)",
                "org.threeten.extra.YearHalf.of(int, org.threeten.extra.Half)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "int",
                    "expression": "year1",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withHalf(half2));",
                    "invocation": "YearHalf.of(year1, half1)"
                },
                {
                    "type": "int",
                    "expression": "half1",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withHalf(half2));",
                    "invocation": "YearHalf.of(year1, half1)"
                },
                {
                    "type": "int",
                    "expression": "half2",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withHalf(half2));",
                    "invocation": "half2"
                }
            ],
            "followUpInput": [
                {
                    "type": "int",
                    "expression": "year3",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withHalf(half2));",
                    "invocation": "YearHalf.of(year3, half3)"
                },
                {
                    "type": "int",
                    "expression": "half3",
                    "statement": "assertEquals(YearHalf.of(year3, half3), YearHalf.of(year1, half1).withHalf(half2));",
                    "invocation": "YearHalf.of(year3, half3)"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 3,
            "num_of_passed_test_cases": 3,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test_withHalf_int_IT",
                "test_withHalf_int_halfTooLow",
                "test_withHalf_int_halfTooHigh"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 11,
            "num_of_passed_test_cases": 11,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -12,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_withHalf_int_h0Test0"
                ],
                [
                    "test_withHalf_int_h0Test1"
                ],
                [
                    "test_withHalf_int_h0Test2"
                ],
                [
                    "test_withHalf_int_h0Test3"
                ],
                [
                    "test_withHalf_int_h0Test4"
                ],
                [
                    "test_withHalf_int_h1Test1"
                ],
                [
                    "test_withHalf_int_h1Test2"
                ],
                [
                    "test_withHalf_int_h1Test4"
                ],
                [
                    "test_withHalf_int_h2Test4"
                ],
                [
                    "test_withHalf_int_h3Test3"
                ],
                [
                    "test_withHalf_int_h4Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 34,
            "num_of_passed_test_cases": 34,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -35,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_withHalf_int_h0Test0"
                ],
                [
                    "test_withHalf_int_h0Test1"
                ],
                [
                    "test_withHalf_int_h0Test2"
                ],
                [
                    "test_withHalf_int_h0Test3"
                ],
                [
                    "test_withHalf_int_h0Test4"
                ],
                [
                    "test_withHalf_int_h2Test1"
                ],
                [
                    "test_withHalf_int_h2Test3"
                ],
                [
                    "test_withHalf_int_h2Test4"
                ],
                [
                    "test_withHalf_int_h2Test5"
                ],
                [
                    "test_withHalf_int_h2Test6"
                ],
                [
                    "test_withHalf_int_h2Test7"
                ],
                [
                    "test_withHalf_int_h2Test8"
                ],
                [
                    "test_withHalf_int_h2Test9"
                ],
                [
                    "test_withHalf_int_h3Test7"
                ],
                [
                    "test_withHalf_int_h3Test8"
                ],
                [
                    "test_withHalf_int_h3Test9"
                ],
                [
                    "test_withHalf_int_h4Test0"
                ],
                [
                    "test_withHalf_int_h4Test1"
                ],
                [
                    "test_withHalf_int_h4Test3"
                ],
                [
                    "test_withHalf_int_h4Test4"
                ],
                [
                    "test_withHalf_int_h4Test5"
                ],
                [
                    "test_withHalf_int_h4Test7"
                ],
                [
                    "test_withHalf_int_h4Test9"
                ],
                [
                    "test_withHalf_int_h6Test1"
                ],
                [
                    "test_withHalf_int_h6Test3"
                ],
                [
                    "test_withHalf_int_h6Test5"
                ],
                [
                    "test_withHalf_int_h6Test8"
                ],
                [
                    "test_withHalf_int_h6Test9"
                ],
                [
                    "test_withHalf_int_h7Test3"
                ],
                [
                    "test_withHalf_int_h8Test6"
                ],
                [
                    "test_withHalf_int_h8Test7"
                ],
                [
                    "test_withHalf_int_h9Test3"
                ],
                [
                    "test_withHalf_int_h9Test5"
                ],
                [
                    "test_withHalf_int_h9Test7"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__castle__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__castle__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/maps/Map1Test.java",
            "test_simple_name": "test8",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test8()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__castle__fastjson2/com.alibaba.fastjson2.internal.processor.maps.Map1Test.test8__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<String, UUID>",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "Map<String, UUID> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                },
                {
                    "type": "Type",
                    "expression": "mapType",
                    "statement": "Map<String, UUID> v02 = JSON.parseObject(str2, mapType);",
                    "invocation": "v02 = JSON.parseObject(str2, mapType)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*;com.alibaba.fastjson.TypeReference;java.lang.reflect.Type",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test8_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 11,
            "num_of_passed_test_cases": 9,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 2,
            "num_of_reach_assertion_test_cases": -12,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test8_h2Test0"
                ],
                [
                    "test8_h2Test1"
                ],
                [
                    "test8_h2Test2"
                ],
                [
                    "test8_h2Test3"
                ],
                [
                    "test8_h2Test4"
                ],
                [
                    "test8_h3Test2"
                ],
                [
                    "test8_h3Test3"
                ],
                [
                    "test8_h4Test0"
                ],
                [
                    "test8_h4Test1"
                ],
                [],
                []
            ],
            "failure_info": {
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h4Test2_valid": {
                    "test8_h4Test2": "java.lang.NoClassDefFoundError: com/alibaba/fastjson2/internal/processor/maps/Map1Test_test8"
                },
                "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h4Test3_valid": {
                    "test8_h4Test3": "java.lang.NoClassDefFoundError: com/alibaba/fastjson2/internal/processor/maps/Map1Test_test8"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 6,
            "num_of_passed_test_cases": 6,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -7,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test8_h0Test0"
                ],
                [
                    "test8_h0Test2"
                ],
                [
                    "test8_h0Test3"
                ],
                [
                    "test8_h2Test1"
                ],
                [
                    "test8_h2Test3"
                ],
                [
                    "test8_h2Test4"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "apache__castle__druid",
            "test_file_path": "./data/ITrans/projects/apache__castle__druid/server/src/test/java/org/apache/druid/server/coordinator/balancer/SegmentToMoveCalculatorTest.java",
            "test_simple_name": "testMinSegmentsArePickedForMoveWhenNoSkew",
            "FQS_testMethos": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest.testMinSegmentsArePickedForMoveWhenNoSkew()",
            "assertionSTMT": "Assert.assertEquals(minSegmentsToMove, segmentsToMove)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__castle__druid/org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest.testMinSegmentsArePickedForMoveWhenNoSkew__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculator.computeMinSegmentsToMoveInTier(int)",
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculator.computeNumSegmentsToMoveInTier(java.lang.String, java.util.List<org.apache.druid.server.coordinator.ServerHolder>, int)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "int",
                    "expression": "totalSegmentsInTier",
                    "statement": "int minSegmentsToMove = calculator.computeMinSegmentsToMoveInTier(totalSegmentsInTier);",
                    "invocation": "minSegmentsToMove = calculator.computeMinSegmentsToMoveInTier(totalSegmentsInTier)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "tier",
                    "statement": "int segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier, historicals, minSegmentsToMove);",
                    "invocation": "segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier, historicals, minSegmentsToMove)"
                },
                {
                    "type": "List<ServerHolder>",
                    "expression": "historicals",
                    "statement": "int segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier, historicals, minSegmentsToMove);",
                    "invocation": "segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier, historicals, minSegmentsToMove)"
                },
                {
                    "type": "int",
                    "expression": "maxSegmentsToMoveInTier",
                    "statement": "int segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier, historicals, maxSegmentsToMoveInTier);",
                    "invocation": "segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier, historicals, maxSegmentsToMoveInTier)"
                }
            ],
            "comments": "not sure",
            "dependency": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculator;org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculator.*;org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest;org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "testMinSegmentsArePickedForMoveWhenNoSkew_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "testMinSegmentsArePickedForMoveWhenNoSkew_IT": "java.lang.NoClassDefFoundError, line:None"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 5,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 5,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h0Test1_valid": {
                    "testMinSegmentsArePickedForMoveWhenNoSkew_h0Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h0Test3_valid": {
                    "testMinSegmentsArePickedForMoveWhenNoSkew_h0Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h0Test4_valid": {
                    "testMinSegmentsArePickedForMoveWhenNoSkew_h0Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h1Test4_valid": {
                    "testMinSegmentsArePickedForMoveWhenNoSkew_h1Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h2Test2_valid": {
                    "testMinSegmentsArePickedForMoveWhenNoSkew_h2Test2": "java.lang.NoClassDefFoundError, line:None"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 11,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 11,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h0Test0_valid": {
                    "testMinSegmentsArePickedForMoveWhenNoSkew_h0Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h0Test1_valid": {
                    "testMinSegmentsArePickedForMoveWhenNoSkew_h0Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h2Test2_valid": {
                    "testMinSegmentsArePickedForMoveWhenNoSkew_h2Test2": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h2Test4_valid": {
                    "testMinSegmentsArePickedForMoveWhenNoSkew_h2Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h2Test6_valid": {
                    "testMinSegmentsArePickedForMoveWhenNoSkew_h2Test6": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h2Test8_valid": {
                    "testMinSegmentsArePickedForMoveWhenNoSkew_h2Test8": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h3Test5_valid": {
                    "testMinSegmentsArePickedForMoveWhenNoSkew_h3Test5": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h4Test4_valid": {
                    "testMinSegmentsArePickedForMoveWhenNoSkew_h4Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h5Test3_valid": {
                    "testMinSegmentsArePickedForMoveWhenNoSkew_h5Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h5Test4_valid": {
                    "testMinSegmentsArePickedForMoveWhenNoSkew_h5Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h7Test4_valid": {
                    "testMinSegmentsArePickedForMoveWhenNoSkew_h7Test4": "java.lang.NoClassDefFoundError, line:None"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "mulesoft__castle__mule",
            "test_file_path": "./data/ITrans/projects/mulesoft__castle__mule/modules/log4j-configurator/src/test/java/org/mule/runtime/module/log4j/internal/ArtifactAwareContextSelectorTestCase.java",
            "test_simple_name": "returnsMuleLoggerContextForArtifactClassLoaderChild",
            "FQS_testMethos": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase.returnsMuleLoggerContextForArtifactClassLoaderChild()",
            "assertionSTMT": "assertThat(childCtx, sameInstance(parentCtx))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/mulesoft__castle__mule/org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase.returnsMuleLoggerContextForArtifactClassLoaderChild__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelector.getContext(java.lang.String, java.lang.ClassLoader, boolean)",
                "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelector.getContext(java.lang.String, java.lang.ClassLoader, boolean)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "fqcn",
                    "statement": "LoggerContext parentCtx = selector.getContext(fqcn, regionClassLoader, currentContext);",
                    "invocation": "parentCtx = selector.getContext(fqcn, regionClassLoader, currentContext)"
                },
                {
                    "type": "boolean",
                    "expression": "currentContext",
                    "statement": "LoggerContext parentCtx = selector.getContext(fqcn, regionClassLoader, currentContext);",
                    "invocation": "parentCtx = selector.getContext(fqcn, regionClassLoader, currentContext)"
                },
                {
                    "type": "RegionClassLoader",
                    "expression": "regionClassLoader",
                    "statement": "LoggerContext parentCtx = selector.getContext(fqcn, regionClassLoader, currentContext);",
                    "invocation": "parentCtx = selector.getContext(fqcn, regionClassLoader, currentContext)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "fqcn2",
                    "statement": "LoggerContext childCtx = selector.getContext(fqcn2, childClassLoader, currentContext2);",
                    "invocation": "childCtx = selector.getContext(fqcn2, childClassLoader, currentContext2)"
                },
                {
                    "type": "ClassLoader",
                    "expression": "childClassLoader",
                    "statement": "LoggerContext childCtx = selector.getContext(fqcn2, childClassLoader, currentContext2);",
                    "invocation": "childCtx = selector.getContext(fqcn2, childClassLoader, currentContext2)"
                },
                {
                    "type": "boolean",
                    "expression": "currentContext2",
                    "statement": "LoggerContext childCtx = selector.getContext(fqcn2, childClassLoader, currentContext2);",
                    "invocation": "childCtx = selector.getContext(fqcn2, childClassLoader, currentContext2)"
                }
            ],
            "comments": "",
            "dependency": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelector;org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelector.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 3,
            "num_of_passed_test_cases": 3,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "before",
                "returnsMuleLoggerContextForArtifactClassLoaderChild_IT",
                "assertReaperThreadNotRunning"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 21,
            "num_of_passed_test_cases": 19,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 2,
            "num_of_reach_assertion_test_cases": 3,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [
                    "assertReaperThreadNotRunning",
                    "before"
                ],
                [
                    "assertReaperThreadNotRunning",
                    "before"
                ],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "before",
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h0Test0",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h0Test1",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h1Test0",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h1Test1",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h3Test4",
                    "assertReaperThreadNotRunning"
                ]
            ],
            "failure_info": {
                "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h0Test2_valid": {
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h0Test2": "returnsMuleLoggerContextForArtifactClassLoaderChild_h0Test2"
                },
                "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h0Test4_valid": {
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h0Test4": "returnsMuleLoggerContextForArtifactClassLoaderChild_h0Test4"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 45,
            "num_of_passed_test_cases": 45,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -2,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                [],
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "before",
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h0Test0",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h0Test1",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h0Test3",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h2Test2",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h3Test1",
                    "assertReaperThreadNotRunning"
                ],
                [],
                [
                    "before",
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h5Test1",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h5Test2",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h5Test3",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h5Test5",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h5Test6",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h5Test7",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h6Test1",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h8Test1",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h8Test2",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForArtifactClassLoaderChild_h8Test3",
                    "assertReaperThreadNotRunning"
                ]
            ],
            "failure_info": {
                "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h3Test4_valid": {}
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "alibaba__castle__fastjson2",
            "test_file_path": "./data/ITrans/projects/alibaba__castle__fastjson2/codegen-test/src/test/java/com/alibaba/fastjson2/internal/processor/collections/JSONArrayTest.java",
            "test_simple_name": "test",
            "FQS_testMethos": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest.test()",
            "assertionSTMT": "assertEquals(v01, v02)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/alibaba__castle__fastjson2/com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest.test__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "com.alibaba.fastjson2.JSON.toJSONString(java.lang.Object)",
                "com.alibaba.fastjson2.JSON.parseObject(java.lang.String, java.lang.Class<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "JSONArray",
                    "expression": "v01",
                    "statement": "String str =  JSON.toJSONString(v01);",
                    "invocation": "str =  JSON.toJSONString(v01);"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "str2",
                    "statement": "JSONArray v02 = JSON.parseObject(str2, clazz);",
                    "invocation": "v02 = JSON.parseObject(str2, clazz)"
                },
                {
                    "type": "Class<JSONArray>",
                    "expression": "clazz",
                    "statement": "JSONArray v02 = JSON.parseObject(str2, clazz);",
                    "invocation": "v02 = JSON.parseObject(str2, clazz)"
                }
            ],
            "comments": "",
            "dependency": "com.alibaba.fastjson2.JSON;com.alibaba.fastjson2.JSON.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 2,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "test_IT"
            ],
            "passed_test_cases_list": [
                "test_h_pre"
            ],
            "failure_info": {
                "test_IT": "java.lang.NoSuchMethodError: 'java.util.List com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test.inputTransformation_test(com.alibaba.fastjson2.JSONArray)'"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -2,
            "assertionLineNums": [
                []
            ],
            "reach_assertion_test_cases_list": [
                []
            ],
            "assertion_failed_test_cases_list": [
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                []
            ],
            "failure_info": {
                "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h0Test0_valid": {
                    "test_h0Test0": "java.lang.NoSuchMethodError: 'java.util.List com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test.inputTransformation_test(com.alibaba.fastjson2.JSONArray)'"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 8,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 8,
            "num_of_reach_assertion_test_cases": -9,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h0Test0_valid": {
                    "test_h0Test0": "java.lang.NoSuchMethodError: 'java.util.List com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test.inputTransformation_test(com.alibaba.fastjson2.JSONArray)'"
                },
                "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h0Test3_valid": {
                    "test_h0Test3": "java.lang.NoSuchMethodError: 'java.util.List com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test.inputTransformation_test(com.alibaba.fastjson2.JSONArray)'"
                },
                "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h5Test2_valid": {
                    "test_h5Test2": "java.lang.NoSuchMethodError: 'java.util.List com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test.inputTransformation_test(com.alibaba.fastjson2.JSONArray)'"
                },
                "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h6Test2_valid": {
                    "test_h6Test2": "java.lang.NoSuchMethodError: 'java.util.List com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test.inputTransformation_test(com.alibaba.fastjson2.JSONArray)'"
                },
                "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h7Test0_valid": {
                    "test_h7Test0": "java.lang.NoSuchMethodError: 'java.util.List com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test.inputTransformation_test(com.alibaba.fastjson2.JSONArray)'"
                },
                "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h7Test1_valid": {
                    "test_h7Test1": "java.lang.NoSuchMethodError: 'java.util.List com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test.inputTransformation_test(com.alibaba.fastjson2.JSONArray)'"
                },
                "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h7Test2_valid": {
                    "test_h7Test2": "java.lang.NoSuchMethodError: 'java.util.List com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test.inputTransformation_test(com.alibaba.fastjson2.JSONArray)'"
                },
                "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h7Test4_valid": {
                    "test_h7Test4": "java.lang.NoSuchMethodError: 'java.util.List com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test.inputTransformation_test(com.alibaba.fastjson2.JSONArray)'"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "MyRobotLab__castle__myrobotlab",
            "test_file_path": "./data/ITrans/projects/MyRobotLab__castle__myrobotlab/src/test/java/org/myrobotlab/service/I2cMuxTest.java",
            "test_simple_name": "testSetDeviceAddress",
            "FQS_testMethos": "org.myrobotlab.service.I2cMuxTest.testSetDeviceAddress()",
            "assertionSTMT": "assertEquals(deviceAddress, i2cMux.getDeviceAddress())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/MyRobotLab__castle__myrobotlab/org.myrobotlab.service.I2cMuxTest.testSetDeviceAddress__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.myrobotlab.service.I2cMux.setDeviceAddress(java.lang.String)",
                "org.myrobotlab.service.I2cMux.getDeviceAddress()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "I2cMux",
                    "expression": "i2cMux",
                    "statement": "i2cMux.setDeviceAddress(deviceAddress);",
                    "invocation": "i2cMux.setDeviceAddress(deviceAddress)"
                },
                {
                    "type": "String",
                    "expression": "deviceAddress",
                    "statement": "i2cMux.setDeviceAddress(deviceAddress);",
                    "invocation": "i2cMux.setDeviceAddress(deviceAddress)"
                }
            ],
            "followUpInput": [
                {
                    "type": "I2cMux",
                    "expression": "i2cMux2",
                    "statement": "assertEquals(deviceAddress, i2cMux2.getDeviceAddress());",
                    "invocation": "i2cMux2.getDeviceAddress()"
                }
            ],
            "comments": "",
            "dependency": "org.myrobotlab.service.I2cMux;org.myrobotlab.service.I2cMux.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testSetDeviceAddress_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 10,
            "num_of_passed_test_cases": 10,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testSetDeviceAddress_h0Test1"
                ],
                [
                    "testSetDeviceAddress_h0Test2"
                ],
                [
                    "testSetDeviceAddress_h0Test3"
                ],
                [
                    "testSetDeviceAddress_h0Test4"
                ],
                [
                    "testSetDeviceAddress_h0Test5"
                ],
                [
                    "testSetDeviceAddress_h1Test0"
                ],
                [
                    "testSetDeviceAddress_h2Test0"
                ],
                [
                    "testSetDeviceAddress_h4Test2"
                ],
                [
                    "testSetDeviceAddress_h4Test3"
                ],
                [
                    "testSetDeviceAddress_h4Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 16,
            "num_of_passed_test_cases": 16,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testSetDeviceAddress_h0Test0"
                ],
                [
                    "testSetDeviceAddress_h0Test1"
                ],
                [
                    "testSetDeviceAddress_h0Test2"
                ],
                [
                    "testSetDeviceAddress_h0Test3"
                ],
                [
                    "testSetDeviceAddress_h0Test4"
                ],
                [
                    "testSetDeviceAddress_h2Test0"
                ],
                [
                    "testSetDeviceAddress_h2Test4"
                ],
                [
                    "testSetDeviceAddress_h4Test0"
                ],
                [
                    "testSetDeviceAddress_h4Test1"
                ],
                [
                    "testSetDeviceAddress_h4Test2"
                ],
                [
                    "testSetDeviceAddress_h4Test3"
                ],
                [
                    "testSetDeviceAddress_h4Test4"
                ],
                [
                    "testSetDeviceAddress_h7Test2"
                ],
                [
                    "testSetDeviceAddress_h7Test3"
                ],
                [
                    "testSetDeviceAddress_h8Test0"
                ],
                [
                    "testSetDeviceAddress_h8Test4"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "sakaiproject__castle__sakai",
            "test_file_path": "./data/ITrans/projects/sakaiproject__castle__sakai/basiclti/tsugi-util/src/test/org/tsugi/util/Base64DoubleUrlEncodeSafeTest.java",
            "test_simple_name": "testAllNonSurrogateCodePoints",
            "FQS_testMethos": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest.testAllNonSurrogateCodePoints()",
            "assertionSTMT": "assertEquals(input, decoded)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/sakaiproject__castle__sakai/org.tsugi.util.Base64DoubleUrlEncodeSafeTest.testAllNonSurrogateCodePoints__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.tsugi.util.Base64DoubleUrlEncodeSafe.encode(java.lang.String)",
                "org.tsugi.util.Base64DoubleUrlEncodeSafe.decode(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "input",
                    "statement": "String encoded = Base64DoubleUrlEncodeSafe.encode(input);",
                    "invocation": "encoded = Base64DoubleUrlEncodeSafe.encode(input)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "encoded2",
                    "statement": "String decoded = Base64DoubleUrlEncodeSafe.decode(encoded2);",
                    "invocation": "decoded = Base64DoubleUrlEncodeSafe.decode(encoded2)"
                }
            ],
            "comments": "",
            "dependency": "org.tsugi.util.Base64DoubleUrlEncodeSafe.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "testAllNonSurrogateCodePoints_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "testAllNonSurrogateCodePoints_IT": "java.lang.NoClassDefFoundError, line:None"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 6,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 6,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h0Test0_valid": {
                    "testAllNonSurrogateCodePoints_h0Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h0Test1_valid": {
                    "testAllNonSurrogateCodePoints_h0Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h3Test0_valid": {
                    "testAllNonSurrogateCodePoints_h3Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h3Test1_valid": {
                    "testAllNonSurrogateCodePoints_h3Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h4Test0_valid": {
                    "testAllNonSurrogateCodePoints_h4Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h4Test1_valid": {
                    "testAllNonSurrogateCodePoints_h4Test1": "java.lang.NoClassDefFoundError, line:None"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 6,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 6,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h4Test1_valid": {
                    "testAllNonSurrogateCodePoints_h4Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h5Test0_valid": {
                    "testAllNonSurrogateCodePoints_h5Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h5Test2_valid": {
                    "testAllNonSurrogateCodePoints_h5Test2": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h7Test1_valid": {
                    "testAllNonSurrogateCodePoints_h7Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h9Test0_valid": {
                    "testAllNonSurrogateCodePoints_h9Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h9Test2_valid": {
                    "testAllNonSurrogateCodePoints_h9Test2": "java.lang.NoClassDefFoundError, line:None"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "arextest__castle__arex-agent-java",
            "test_file_path": "./data/ITrans/projects/arextest__castle__arex-agent-java/arex-instrumentation-api/src/test/java/io/arex/inst/runtime/serializer/SerializerTest.java",
            "test_simple_name": "testNestedList",
            "FQS_testMethos": "io.arex.inst.runtime.serializer.SerializerTest.testNestedList()",
            "assertionSTMT": "assertEquals(list, actualResult)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/arextest__castle__arex-agent-java/io.arex.inst.runtime.serializer.SerializerTest.testNestedList__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "io.arex.inst.runtime.serializer.Serializer.serialize(java.lang.Object, java.lang.String)",
                "io.arex.inst.runtime.serializer.Serializer.deserialize(java.lang.String, java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "List<List<Object>>",
                    "expression": "list",
                    "statement": "String json = Serializer.serialize(list, serializer);",
                    "invocation": "json = Serializer.serialize(list, serializer)"
                },
                {
                    "type": "String",
                    "expression": "serializer",
                    "statement": "String json = Serializer.serialize(list, serializer);",
                    "invocation": "json = Serializer.serialize(list, serializer)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "json2",
                    "statement": "List<List<Object>> actualResult = Serializer.deserialize(json2, typeName2);",
                    "invocation": "actualResult = Serializer.deserialize(json2, typeName2)"
                },
                {
                    "type": "String",
                    "expression": "typeName2",
                    "statement": "List<List<Object>> actualResult = Serializer.deserialize(json2, typeName2);",
                    "invocation": "actualResult = Serializer.deserialize(json2, typeName2)"
                }
            ],
            "comments": "",
            "dependency": "io.arex.inst.runtime.serializer.Serializer;io.arex.inst.runtime.serializer.Serializer.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "testNestedList_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "testNestedList_IT": "java.lang.NullPointerException"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 2,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 2,
            "num_of_reach_assertion_test_cases": -3,
            "assertionLineNums": [
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                []
            ],
            "failure_info": {
                "io.arex.inst.runtime.serializer.SerializerTest_testNestedList_h1Test0_valid": {
                    "testNestedList_h1Test0": "java.lang.NullPointerException"
                },
                "io.arex.inst.runtime.serializer.SerializerTest_testNestedList_h2Test0_valid": {
                    "testNestedList_h2Test0": "java.lang.NullPointerException"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -2,
            "assertionLineNums": [
                []
            ],
            "reach_assertion_test_cases_list": [
                []
            ],
            "assertion_failed_test_cases_list": [
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                []
            ],
            "failure_info": {
                "io.arex.inst.runtime.serializer.SerializerTest_testNestedList_h9Test0_valid": {
                    "testNestedList_h9Test0": "java.lang.StringIndexOutOfBoundsException: begin 0, end -7, length 0"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "bootique__castle__bootique",
            "test_file_path": "./data/ITrans/projects/bootique__castle__bootique/bootique/src/test/java/io/bootique/di/TypeLiteralTest.java",
            "test_simple_name": "normalize",
            "FQS_testMethos": "io.bootique.di.TypeLiteralTest.normalize()",
            "assertionSTMT": "assertSame(type1, type3)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/bootique__castle__bootique/io.bootique.di.TypeLiteralTest.normalize__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "io.bootique.di.TypeLiteral.listOf(java.lang.Class<? extends T>)",
                "io.bootique.di.TypeLiteral.normalize(io.bootique.di.TypeLiteral<T>)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Class",
                    "expression": "input",
                    "statement": "TypeLiteral<List<Integer>> type1 = TypeLiteral.listOf(input);",
                    "invocation": "type1 = TypeLiteral.listOf(input)"
                }
            ],
            "followUpInput": [
                {
                    "type": "TypeLiteral<List<Integer>>",
                    "expression": "input2",
                    "statement": "TypeLiteral<List<Integer>> type3 = TypeLiteral.normalize(input2);",
                    "invocation": "type3 = TypeLiteral.normalize(input2)"
                }
            ],
            "comments": "",
            "dependency": "io.bootique.di.TypeLiteral;io.bootique.di.TypeLiteral.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "normalize_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 6,
            "num_of_passed_test_cases": 6,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -7,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "normalize_h0Test0"
                ],
                [
                    "normalize_h0Test2"
                ],
                [
                    "normalize_h0Test4"
                ],
                [
                    "normalize_h0Test6"
                ],
                [
                    "normalize_h0Test8"
                ],
                [
                    "normalize_h4Test3"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 6,
            "num_of_passed_test_cases": 6,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -7,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "normalize_h0Test1"
                ],
                [
                    "normalize_h0Test2"
                ],
                [
                    "normalize_h5Test2"
                ],
                [
                    "normalize_h6Test3"
                ],
                [
                    "normalize_h7Test3"
                ],
                [
                    "normalize_h7Test4"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "mulesoft__castle__mule",
            "test_file_path": "./data/ITrans/projects/mulesoft__castle__mule/modules/log4j-configurator/src/test/java/org/mule/runtime/module/log4j/internal/ArtifactAwareContextSelectorTestCase.java",
            "test_simple_name": "returnsMuleLoggerContextForInternalArtifactClassLoader",
            "FQS_testMethos": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase.returnsMuleLoggerContextForInternalArtifactClassLoader()",
            "assertionSTMT": "assertThat(serviceCtx, sameInstance(systemContext))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/mulesoft__castle__mule/org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase.returnsMuleLoggerContextForInternalArtifactClassLoader__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelector.getContext(java.lang.String, java.lang.ClassLoader, boolean)",
                "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelector.getContext(java.lang.String, java.lang.ClassLoader, boolean)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "fqcn",
                    "statement": "LoggerContext systemContext = selector.getContext(fqcn, systemLoader, currentContext);",
                    "invocation": "systemContext = selector.getContext(fqcn, systemLoader, currentContext)"
                },
                {
                    "type": "boolean",
                    "expression": "currentContext",
                    "statement": "LoggerContext systemContext = selector.getContext(fqcn, systemLoader, currentContext);",
                    "invocation": "systemContext = selector.getContext(fqcn, systemLoader, currentContext)"
                },
                {
                    "type": "ClassLoader",
                    "expression": "systemLoader",
                    "statement": "LoggerContext systemContext = selector.getContext(fqcn, systemLoader, currentContext);",
                    "invocation": "systemContext = selector.getContext(fqcn, systemLoader, currentContext)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "fqcn2",
                    "statement": "LoggerContext serviceCtx = selector.getContext(fqcn2, serviceLoader, currentContext2);",
                    "invocation": "serviceCtx = selector.getContext(fqcn2, serviceLoader, currentContext2)"
                },
                {
                    "type": "ClassLoader",
                    "expression": "serviceLoader",
                    "statement": "LoggerContext serviceCtx = selector.getContext(fqcn2, serviceLoader, currentContext2);",
                    "invocation": "serviceCtx = selector.getContext(fqcn2, serviceLoader, currentContext2)"
                },
                {
                    "type": "boolean",
                    "expression": "currentContext2",
                    "statement": "LoggerContext serviceCtx = selector.getContext(fqcn2, serviceLoader, currentContext2);",
                    "invocation": "serviceCtx = selector.getContext(fqcn2, serviceLoader, currentContext2)"
                }
            ],
            "comments": "",
            "dependency": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelector;org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelector.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 3,
            "num_of_passed_test_cases": 3,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "before",
                "returnsMuleLoggerContextForInternalArtifactClassLoader_IT",
                "assertReaperThreadNotRunning"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 36,
            "num_of_passed_test_cases": 36,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test0",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test1",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test2",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test3",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test4",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h1Test3",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h2Test2",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h2Test3",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h2Test4",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h3Test2",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h3Test4",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h4Test4",
                    "assertReaperThreadNotRunning"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 75,
            "num_of_passed_test_cases": 73,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 2,
            "num_of_reach_assertion_test_cases": 3,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [
                    "assertReaperThreadNotRunning",
                    "before"
                ],
                [
                    "assertReaperThreadNotRunning",
                    "before"
                ]
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test0",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test1",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test2",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test3",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test4",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test5",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test6",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test7",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test8",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test9",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h2Test1",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h2Test3",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h2Test5",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h2Test6",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h2Test7",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h2Test8",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h2Test9",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h3Test6",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h5Test8",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h5Test9",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h6Test8",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h6Test9",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h7Test8",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "assertReaperThreadNotRunning"
                ],
                [
                    "before",
                    "assertReaperThreadNotRunning"
                ]
            ],
            "failure_info": {
                "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h7Test9_valid": {
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h7Test9": "returnsMuleLoggerContextForInternalArtifactClassLoader_h7Test9"
                },
                "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h8Test2_valid": {
                    "returnsMuleLoggerContextForInternalArtifactClassLoader_h8Test2": "returnsMuleLoggerContextForInternalArtifactClassLoader_h8Test2"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "opengoofy__castle__hippo4j",
            "test_file_path": "./data/ITrans/projects/opengoofy__castle__hippo4j/threadpool/core/src/test/java/cn/hippo4j/core/executor/plugin/manager/ThreadPoolPluginSupportTest.java",
            "test_simple_name": "testGetThreadPoolId",
            "FQS_testMethos": "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest.testGetThreadPoolId()",
            "assertionSTMT": "Assert.assertEquals(executor.getThreadPoolId(), support.getThreadPoolId())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/opengoofy__castle__hippo4j/cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest.testGetThreadPoolId__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupport.getThreadPoolId()",
                "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupport.getThreadPoolId()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "ThreadPoolExecutor",
                    "expression": "executor",
                    "statement": "ThreadPoolPluginSupport support = new ThreadPoolPluginSupport(executor);",
                    "invocation": "support = new ThreadPoolPluginSupport(executor)"
                }
            ],
            "followUpInput": [
                {
                    "type": "ThreadPoolPluginSupport",
                    "expression": "support",
                    "statement": "Assert.assertEquals(executor.getThreadPoolId(), support.getThreadPoolId())",
                    "invocation": "Assert.assertEquals(executor.getThreadPoolId(), support.getThreadPoolId())"
                }
            ],
            "comments": "",
            "dependency": "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupport;cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupport.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "testGetThreadPoolId_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "testGetThreadPoolId_IT": "java.lang.NoClassDefFoundError, line:None"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 2,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 2,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                []
            ],
            "failure_info": {
                "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetThreadPoolId_h0Test0_valid": {
                    "testGetThreadPoolId_h0Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetThreadPoolId_h4Test0_valid": {
                    "testGetThreadPoolId_h4Test0": "java.lang.NoClassDefFoundError, line:None"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false
            ],
            "reach_assertion_test_cases_list": [
                []
            ],
            "assertion_failed_test_cases_list": [
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                []
            ],
            "failure_info": {
                "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetThreadPoolId_h0Test0_valid": {
                    "testGetThreadPoolId_h0Test0": "java.lang.NoClassDefFoundError, line:None"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "spotify-web-api-java__castle__spotify-web-api-java",
            "test_file_path": "./data/ITrans/projects/spotify-web-api-java__castle__spotify-web-api-java/src/test/java/se/michaelthelin/spotify/Base64Test.java",
            "test_simple_name": "testCustomBase64",
            "FQS_testMethos": "se.michaelthelin.spotify.Base64Test.testCustomBase64()",
            "assertionSTMT": "Assertions.assertArrayEquals(testDataBytes, decoded)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/spotify-web-api-java__castle__spotify-web-api-java/se.michaelthelin.spotify.Base64Test.testCustomBase64__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "se.michaelthelin.spotify.Base64.encode(byte[])",
                "se.michaelthelin.spotify.Base64.decode(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "byte[]",
                    "expression": "testDataBytes",
                    "statement": "String encoded = Base64.encode(testDataBytes);",
                    "invocation": "encoded = Base64.encode(testDataBytes)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "input2",
                    "statement": "byte[] decoded = Base64.decode(input2);",
                    "invocation": "decoded = Base64.decode(input2)"
                }
            ],
            "comments": "",
            "dependency": "se.michaelthelin.spotify.Base64;se.michaelthelin.spotify.Base64.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testCustomBase64_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 15,
            "num_of_passed_test_cases": 15,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -16,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testCustomBase64_h0Test0"
                ],
                [
                    "testCustomBase64_h0Test1"
                ],
                [
                    "testCustomBase64_h0Test2"
                ],
                [
                    "testCustomBase64_h0Test3"
                ],
                [
                    "testCustomBase64_h0Test4"
                ],
                [
                    "testCustomBase64_h1Test0"
                ],
                [
                    "testCustomBase64_h1Test1"
                ],
                [
                    "testCustomBase64_h1Test2"
                ],
                [
                    "testCustomBase64_h1Test3"
                ],
                [
                    "testCustomBase64_h1Test4"
                ],
                [
                    "testCustomBase64_h2Test4"
                ],
                [
                    "testCustomBase64_h2Test5"
                ],
                [
                    "testCustomBase64_h3Test3"
                ],
                [
                    "testCustomBase64_h3Test4"
                ],
                [
                    "testCustomBase64_h3Test5"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 29,
            "num_of_passed_test_cases": 29,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -30,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testCustomBase64_h0Test0"
                ],
                [
                    "testCustomBase64_h0Test1"
                ],
                [
                    "testCustomBase64_h0Test2"
                ],
                [
                    "testCustomBase64_h0Test3"
                ],
                [
                    "testCustomBase64_h2Test0"
                ],
                [
                    "testCustomBase64_h2Test1"
                ],
                [
                    "testCustomBase64_h2Test2"
                ],
                [
                    "testCustomBase64_h2Test3"
                ],
                [
                    "testCustomBase64_h2Test4"
                ],
                [
                    "testCustomBase64_h3Test0"
                ],
                [
                    "testCustomBase64_h3Test1"
                ],
                [
                    "testCustomBase64_h3Test3"
                ],
                [
                    "testCustomBase64_h3Test4"
                ],
                [
                    "testCustomBase64_h4Test3"
                ],
                [
                    "testCustomBase64_h4Test4"
                ],
                [
                    "testCustomBase64_h5Test0"
                ],
                [
                    "testCustomBase64_h5Test1"
                ],
                [
                    "testCustomBase64_h5Test2"
                ],
                [
                    "testCustomBase64_h5Test3"
                ],
                [
                    "testCustomBase64_h5Test4"
                ],
                [
                    "testCustomBase64_h6Test0"
                ],
                [
                    "testCustomBase64_h6Test2"
                ],
                [
                    "testCustomBase64_h6Test3"
                ],
                [
                    "testCustomBase64_h6Test4"
                ],
                [
                    "testCustomBase64_h6Test5"
                ],
                [
                    "testCustomBase64_h7Test0"
                ],
                [
                    "testCustomBase64_h7Test3"
                ],
                [
                    "testCustomBase64_h8Test6"
                ],
                [
                    "testCustomBase64_h8Test8"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "opengoofy__castle__hippo4j",
            "test_file_path": "./data/ITrans/projects/opengoofy__castle__hippo4j/threadpool/core/src/test/java/cn/hippo4j/core/executor/plugin/manager/ThreadPoolPluginSupportTest.java",
            "test_simple_name": "testGetPlugin",
            "FQS_testMethos": "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest.testGetPlugin()",
            "assertionSTMT": "Assert.assertSame(plugin, support.getPlugin(plugin.getId()).orElse(null))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/opengoofy__castle__hippo4j/cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest.testGetPlugin__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupport.register(cn.hippo4j.core.executor.plugin.ThreadPoolPlugin)",
                "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupport.getPlugin(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "ThreadPoolPlugin",
                    "expression": "plugin",
                    "statement": "support.register(plugin);",
                    "invocation": "support.register(plugin)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "pluginId",
                    "statement": "Assert.assertSame(plugin, support.getPlugin(pluginId).orElse(null));",
                    "invocation": "support.getPlugin(pluginId).orElse(null)"
                }
            ],
            "comments": "",
            "dependency": "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupport.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "testGetPlugin_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "testGetPlugin_IT": "java.lang.NoClassDefFoundError, line:None"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": null,
        "LLMI_testing_generatedIT_result_evaluation": null,
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "itext__castle__itext7",
            "test_file_path": "./data/ITrans/projects/itext__castle__itext7/commons/src/test/java/com/itextpdf/commons/datastructures/ConcurrentWeakMapTest.java",
            "test_simple_name": "entrySetTest",
            "FQS_testMethos": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest.entrySetTest()",
            "assertionSTMT": "Assert.assertEquals(anotherMap.entrySet(), map.entrySet())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/itext__castle__itext7/com.itextpdf.commons.datastructures.ConcurrentWeakMapTest.entrySetTest__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "com.itextpdf.commons.datastructures.ConcurrentWeakMap.putAll(java.util.Map<? extends K, ? extends V>)",
                "com.itextpdf.commons.datastructures.ConcurrentWeakMap.entrySet()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<Integer, Integer>",
                    "expression": "anotherMap",
                    "statement": "Assert.assertEquals(anotherMap.entrySet(), map.entrySet());",
                    "invocation": "anotherMap.entrySet()"
                }
            ],
            "followUpInput": [
                {
                    "type": "ConcurrentWeakMap<Integer, Integer>",
                    "expression": "map",
                    "statement": "Assert.assertEquals(anotherMap.entrySet(), map2.entrySet());",
                    "invocation": "map2.entrySet()"
                }
            ],
            "comments": "",
            "dependency": "com.itextpdf.commons.datastructures.ConcurrentWeakMap;com.itextpdf.commons.datastructures.ConcurrentWeakMap.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "entrySetTest_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 13,
            "num_of_passed_test_cases": 13,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "entrySetTest_h0Test0"
                ],
                [
                    "entrySetTest_h0Test1"
                ],
                [
                    "entrySetTest_h0Test2"
                ],
                [
                    "entrySetTest_h0Test3"
                ],
                [
                    "entrySetTest_h0Test4"
                ],
                [
                    "entrySetTest_h3Test0"
                ],
                [
                    "entrySetTest_h3Test1"
                ],
                [
                    "entrySetTest_h3Test2"
                ],
                [
                    "entrySetTest_h3Test3"
                ],
                [
                    "entrySetTest_h3Test4"
                ],
                [
                    "entrySetTest_h4Test1"
                ],
                [
                    "entrySetTest_h4Test2"
                ],
                [
                    "entrySetTest_h4Test3"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 30,
            "num_of_passed_test_cases": 30,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "entrySetTest_h0Test0"
                ],
                [
                    "entrySetTest_h0Test1"
                ],
                [
                    "entrySetTest_h0Test2"
                ],
                [
                    "entrySetTest_h0Test3"
                ],
                [
                    "entrySetTest_h0Test4"
                ],
                [
                    "entrySetTest_h2Test0"
                ],
                [
                    "entrySetTest_h2Test1"
                ],
                [
                    "entrySetTest_h2Test2"
                ],
                [
                    "entrySetTest_h3Test0"
                ],
                [
                    "entrySetTest_h3Test4"
                ],
                [
                    "entrySetTest_h4Test1"
                ],
                [
                    "entrySetTest_h4Test2"
                ],
                [
                    "entrySetTest_h5Test0"
                ],
                [
                    "entrySetTest_h5Test1"
                ],
                [
                    "entrySetTest_h5Test2"
                ],
                [
                    "entrySetTest_h5Test3"
                ],
                [
                    "entrySetTest_h5Test4"
                ],
                [
                    "entrySetTest_h6Test0"
                ],
                [
                    "entrySetTest_h6Test1"
                ],
                [
                    "entrySetTest_h6Test2"
                ],
                [
                    "entrySetTest_h6Test3"
                ],
                [
                    "entrySetTest_h6Test4"
                ],
                [
                    "entrySetTest_h7Test1"
                ],
                [
                    "entrySetTest_h7Test2"
                ],
                [
                    "entrySetTest_h7Test3"
                ],
                [
                    "entrySetTest_h7Test4"
                ],
                [
                    "entrySetTest_h8Test3"
                ],
                [
                    "entrySetTest_h8Test4"
                ],
                [
                    "entrySetTest_h9Test1"
                ],
                [
                    "entrySetTest_h9Test4"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "apache__castle__druid",
            "test_file_path": "./data/ITrans/projects/apache__castle__druid/server/src/test/java/org/apache/druid/server/coordinator/balancer/SegmentToMoveCalculatorTest.java",
            "test_simple_name": "testHalfSegmentsArePickedForMoveWhenFullSkew",
            "FQS_testMethos": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest.testHalfSegmentsArePickedForMoveWhenFullSkew()",
            "assertionSTMT": "Assert.assertEquals(segmentsToMoveToFixSkew, segmentsToMove)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__castle__druid/org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest.testHalfSegmentsArePickedForMoveWhenFullSkew__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculator.computeNumSegmentsToMoveToBalanceTier(java.lang.String, java.util.List<org.apache.druid.server.coordinator.ServerHolder>)",
                "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculator.computeNumSegmentsToMoveInTier(java.lang.String, java.util.List<org.apache.druid.server.coordinator.ServerHolder>, int)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "tier",
                    "statement": "int segmentsToMoveToFixSkew = calculator.computeNumSegmentsToMoveToBalanceTier(tier, historicals);",
                    "invocation": "segmentsToMoveToFixSkew = calculator.computeNumSegmentsToMoveToBalanceTier(tier, historicals)"
                },
                {
                    "type": "List<ServerHolder>",
                    "expression": "historicals",
                    "statement": "int segmentsToMoveToFixSkew = calculator.computeNumSegmentsToMoveToBalanceTier(tier, historicals);",
                    "invocation": "segmentsToMoveToFixSkew = calculator.computeNumSegmentsToMoveToBalanceTier(tier, historicals)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "tier2",
                    "statement": "int segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier2, historicals2, segmentsToMoveToFixSkew);",
                    "invocation": "segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier2, historicals2, segmentsToMoveToFixSkew)"
                },
                {
                    "type": "List<ServerHolder>",
                    "expression": "historicals2",
                    "statement": "int segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier2, historicals2, segmentsToMoveToFixSkew);",
                    "invocation": "segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier2, historicals2, segmentsToMoveToFixSkew)"
                },
                {
                    "type": "int",
                    "expression": "maxSegmentsToMoveInTier",
                    "statement": "int segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier2, historicals2, maxSegmentsToMoveInTier);",
                    "invocation": "segmentsToMove = calculator.computeNumSegmentsToMoveInTier(tier2, historicals2, maxSegmentsToMoveInTier)"
                }
            ],
            "comments": "not sure",
            "dependency": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculator;org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculator.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "testHalfSegmentsArePickedForMoveWhenFullSkew_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 9,
            "num_of_passed_test_cases": 9,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h0Test2"
                ],
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h0Test4"
                ],
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h1Test0"
                ],
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h1Test1"
                ],
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h1Test4"
                ],
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h2Test4"
                ],
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h3Test2"
                ],
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h3Test4"
                ],
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h4Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 14,
            "num_of_passed_test_cases": 14,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h0Test1"
                ],
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h0Test3"
                ],
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h0Test4"
                ],
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h2Test3"
                ],
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h2Test4"
                ],
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h4Test0"
                ],
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h4Test1"
                ],
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h4Test2"
                ],
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h4Test4"
                ],
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h5Test1"
                ],
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h5Test3"
                ],
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h5Test4"
                ],
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h7Test3"
                ],
                [
                    "testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test3"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__castle__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__castle__threeten-extra/src/test/java/org/threeten/extra/TestTemporalFields.java",
            "test_simple_name": "test_HALF_YEARS",
            "FQS_testMethos": "org.threeten.extra.TestTemporalFields.test_HALF_YEARS()",
            "assertionSTMT": "assertEquals(YearQuarter.of(year1, quarter1), HALF_YEARS.addTo(YearQuarter.of(year2, quarter2), amount))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__castle__threeten-extra/org.threeten.extra.TestTemporalFields.test_HALF_YEARS__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearQuarter.of(int, int)",
                "org.threeten.extra.YearQuarter.of(int, int)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "int",
                    "expression": "year1",
                    "statement": "assertEquals(YearQuarter.of(year1, quarter1), HALF_YEARS.addTo(YearQuarter.of(year2, quarter2), amount));",
                    "invocation": "YearQuarter.of(year1, quarter1)"
                },
                {
                    "type": "int",
                    "expression": "quarter1",
                    "statement": "assertEquals(YearQuarter.of(year1, quarter1), HALF_YEARS.addTo(YearQuarter.of(year2, quarter2), amount));",
                    "invocation": "YearQuarter.of(year1, quarter1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "int",
                    "expression": "year2",
                    "statement": "assertEquals(YearQuarter.of(year1, quarter1), HALF_YEARS.addTo(YearQuarter.of(year2, quarter2), amount));",
                    "invocation": "YearQuarter.of(year2, quarter2)"
                },
                {
                    "type": "int",
                    "expression": "quarter2",
                    "statement": "assertEquals(YearQuarter.of(year1, quarter1), HALF_YEARS.addTo(YearQuarter.of(year2, quarter2), amount));",
                    "invocation": "YearQuarter.of(year2, quarter2)"
                },
                {
                    "type": "int",
                    "expression": "amount",
                    "statement": "assertEquals(YearQuarter.of(year1, quarter1), HALF_YEARS.addTo(YearQuarter.of(year2, quarter2), amount));",
                    "invocation": "HALF_YEARS.addTo(YearQuarter.of(year2, quarter2), amount)"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearQuarter;org.threeten.extra.YearQuarter.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "test_HALF_YEARS_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "test_HALF_YEARS_IT": "java.lang.NoClassDefFoundError: org/threeten/extra/TestTemporalFields_test_HALF_YEARS"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 5,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 5,
            "num_of_reach_assertion_test_cases": -6,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h0Test1_valid": {
                    "test_HALF_YEARS_h0Test1": "java.lang.NoClassDefFoundError: org/threeten/extra/TestTemporalFields_test_HALF_YEARS"
                },
                "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h1Test3_valid": {
                    "test_HALF_YEARS_h1Test3": "java.lang.NoClassDefFoundError: org/threeten/extra/TestTemporalFields_test_HALF_YEARS"
                },
                "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h2Test3_valid": {
                    "test_HALF_YEARS_h2Test3": "java.lang.NoClassDefFoundError: org/threeten/extra/TestTemporalFields_test_HALF_YEARS"
                },
                "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h3Test1_valid": {
                    "test_HALF_YEARS_h3Test1": "java.lang.NoClassDefFoundError: org/threeten/extra/TestTemporalFields_test_HALF_YEARS"
                },
                "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h3Test3_valid": {
                    "test_HALF_YEARS_h3Test3": "java.lang.NoClassDefFoundError: org/threeten/extra/TestTemporalFields_test_HALF_YEARS"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 4,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 4,
            "num_of_reach_assertion_test_cases": -5,
            "assertionLineNums": [
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h0Test1_valid": {
                    "test_HALF_YEARS_h0Test1": "java.lang.NoClassDefFoundError: org/threeten/extra/TestTemporalFields_test_HALF_YEARS"
                },
                "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h2Test1_valid": {
                    "test_HALF_YEARS_h2Test1": "java.lang.NoClassDefFoundError: org/threeten/extra/TestTemporalFields_test_HALF_YEARS"
                },
                "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h2Test3_valid": {
                    "test_HALF_YEARS_h2Test3": "java.lang.NoClassDefFoundError: org/threeten/extra/TestTemporalFields_test_HALF_YEARS"
                },
                "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h4Test3_valid": {
                    "test_HALF_YEARS_h4Test3": "java.lang.NoClassDefFoundError: org/threeten/extra/TestTemporalFields_test_HALF_YEARS"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "itext__castle__itext7",
            "test_file_path": "./data/ITrans/projects/itext__castle__itext7/commons/src/test/java/com/itextpdf/commons/datastructures/ConcurrentWeakMapTest.java",
            "test_simple_name": "keySetTest",
            "FQS_testMethos": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest.keySetTest()",
            "assertionSTMT": "Assert.assertEquals(anotherMap.keySet(), map.keySet())",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/itext__castle__itext7/com.itextpdf.commons.datastructures.ConcurrentWeakMapTest.keySetTest__castle__0.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "com.itextpdf.commons.datastructures.ConcurrentWeakMap.putAll(java.util.Map<? extends K, ? extends V>)",
                "com.itextpdf.commons.datastructures.ConcurrentWeakMap.keySet()"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Map<Integer, Integer>",
                    "expression": "anotherMap",
                    "statement": "Assert.assertEquals(anotherMap.keySet(), map.keySet());",
                    "invocation": "anotherMap.keySet()"
                }
            ],
            "followUpInput": [
                {
                    "type": "ConcurrentWeakMap<Integer, Integer>",
                    "expression": "map",
                    "statement": "Assert.assertEquals(anotherMap.keySet(), map2.keySet());",
                    "invocation": "map2.keySet()"
                }
            ],
            "comments": "",
            "dependency": "com.itextpdf.commons.datastructures.ConcurrentWeakMap;com.itextpdf.commons.datastructures.ConcurrentWeakMap.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "keySetTest_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 10,
            "num_of_passed_test_cases": 10,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "keySetTest_h0Test0"
                ],
                [
                    "keySetTest_h0Test1"
                ],
                [
                    "keySetTest_h0Test2"
                ],
                [
                    "keySetTest_h0Test3"
                ],
                [
                    "keySetTest_h0Test4"
                ],
                [
                    "keySetTest_h1Test0"
                ],
                [
                    "keySetTest_h2Test1"
                ],
                [
                    "keySetTest_h2Test2"
                ],
                [
                    "keySetTest_h2Test3"
                ],
                [
                    "keySetTest_h2Test4"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 29,
            "num_of_passed_test_cases": 29,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "keySetTest_h0Test0"
                ],
                [
                    "keySetTest_h0Test1"
                ],
                [
                    "keySetTest_h0Test2"
                ],
                [
                    "keySetTest_h0Test3"
                ],
                [
                    "keySetTest_h0Test4"
                ],
                [
                    "keySetTest_h3Test0"
                ],
                [
                    "keySetTest_h3Test1"
                ],
                [
                    "keySetTest_h3Test3"
                ],
                [
                    "keySetTest_h3Test4"
                ],
                [
                    "keySetTest_h5Test0"
                ],
                [
                    "keySetTest_h5Test1"
                ],
                [
                    "keySetTest_h5Test2"
                ],
                [
                    "keySetTest_h5Test3"
                ],
                [
                    "keySetTest_h5Test4"
                ],
                [
                    "keySetTest_h6Test1"
                ],
                [
                    "keySetTest_h6Test2"
                ],
                [
                    "keySetTest_h6Test3"
                ],
                [
                    "keySetTest_h6Test4"
                ],
                [
                    "keySetTest_h7Test1"
                ],
                [
                    "keySetTest_h7Test2"
                ],
                [
                    "keySetTest_h7Test3"
                ],
                [
                    "keySetTest_h7Test4"
                ],
                [
                    "keySetTest_h8Test1"
                ],
                [
                    "keySetTest_h8Test2"
                ],
                [
                    "keySetTest_h8Test3"
                ],
                [
                    "keySetTest_h8Test4"
                ],
                [
                    "keySetTest_h9Test2"
                ],
                [
                    "keySetTest_h9Test3"
                ],
                [
                    "keySetTest_h9Test4"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "ThreeTen__castle__threeten-extra",
            "test_file_path": "./data/ITrans/projects/ThreeTen__castle__threeten-extra/src/test/java/org/threeten/extra/TestYearHalf.java",
            "test_simple_name": "test_from_TemporalAccessor_notLeapYear",
            "FQS_testMethos": "org.threeten.extra.TestYearHalf.test_from_TemporalAccessor_notLeapYear()",
            "assertionSTMT": "assertEquals(YearHalf.of(year, expected), test)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/ThreeTen__castle__threeten-extra/org.threeten.extra.TestYearHalf.test_from_TemporalAccessor_notLeapYear__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.threeten.extra.YearHalf.from(java.time.temporal.TemporalAccessor)",
                "org.threeten.extra.YearHalf.of(int, int)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "LocalDate",
                    "expression": "date",
                    "statement": "YearHalf test = YearHalf.from(date);",
                    "invocation": "test = YearHalf.from(date)"
                }
            ],
            "followUpInput": [
                {
                    "type": "int",
                    "expression": "year",
                    "statement": "assertEquals(YearHalf.of(year, expected), test);",
                    "invocation": "YearHalf.of(year, expected)"
                },
                {
                    "type": "int",
                    "expression": "expected",
                    "statement": "assertEquals(YearHalf.of(year, expected), test);",
                    "invocation": "YearHalf.of(year, expected)"
                }
            ],
            "comments": "",
            "dependency": "org.threeten.extra.YearHalf;org.threeten.extra.YearHalf.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [],
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test_from_TemporalAccessor_notLeapYear_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -2,
            "assertionLineNums": [
                []
            ],
            "reach_assertion_test_cases_list": [
                []
            ],
            "assertion_failed_test_cases_list": [
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_from_TemporalAccessor_notLeapYear_h4Test1"
                ]
            ],
            "failure_info": {}
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 10,
            "num_of_passed_test_cases": 10,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -11,
            "assertionLineNums": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_from_TemporalAccessor_notLeapYear_h2Test2"
                ],
                [
                    "test_from_TemporalAccessor_notLeapYear_h2Test4"
                ],
                [
                    "test_from_TemporalAccessor_notLeapYear_h2Test6"
                ],
                [
                    "test_from_TemporalAccessor_notLeapYear_h2Test8"
                ],
                [
                    "test_from_TemporalAccessor_notLeapYear_h3Test6"
                ],
                [
                    "test_from_TemporalAccessor_notLeapYear_h3Test8"
                ],
                [
                    "test_from_TemporalAccessor_notLeapYear_h4Test2"
                ],
                [
                    "test_from_TemporalAccessor_notLeapYear_h4Test4"
                ],
                [
                    "test_from_TemporalAccessor_notLeapYear_h6Test2"
                ],
                [
                    "test_from_TemporalAccessor_notLeapYear_h6Test8"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "apache__castle__druid",
            "test_file_path": "./data/ITrans/projects/apache__castle__druid/extensions-contrib/kubernetes-overlord-extensions/src/test/java/org/apache/druid/k8s/overlord/common/KubernetesOverlordUtilsTest.java",
            "test_simple_name": "test_stripJobName_avoidDuplicatesWithLongDataSourceName",
            "FQS_testMethos": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest.test_stripJobName_avoidDuplicatesWithLongDataSourceName()",
            "assertionSTMT": "Assert.assertNotEquals(jobName1, jobName2)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__castle__druid/org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest.test_stripJobName_avoidDuplicatesWithLongDataSourceName__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtils.convertTaskIdToJobName(java.lang.String)",
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtils.convertTaskIdToJobName(java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "taskId1",
                    "statement": "String jobName1 = KubernetesOverlordUtils.convertTaskIdToJobName(taskId1);",
                    "invocation": "jobName1 = KubernetesOverlordUtils.convertTaskIdToJobName(taskId1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "String",
                    "expression": "taskId2",
                    "statement": "String jobName2 = KubernetesOverlordUtils.convertTaskIdToJobName(taskId2);",
                    "invocation": "jobName2 = KubernetesOverlordUtils.convertTaskIdToJobName(taskId2)"
                }
            ],
            "comments": "",
            "dependency": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtils;org.apache.druid.k8s.overlord.common.KubernetesOverlordUtils.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 1,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [
                "test_stripJobName_avoidDuplicatesWithLongDataSourceName_IT"
            ],
            "passed_test_cases_list": [],
            "failure_info": {
                "test_stripJobName_avoidDuplicatesWithLongDataSourceName_IT": "java.lang.NumberFormatException, line:None"
            }
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 10,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 10,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h0Test0_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h0Test0": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h1Test1_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h1Test1": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h1Test3_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h1Test3": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h1Test4_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h1Test4": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h2Test2_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h2Test2": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test0_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test0": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test1_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test1": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test2_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test2": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test3_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test3": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test4_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test4": "java.lang.NumberFormatException, line:None"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 21,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 21,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h0Test1_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h0Test1": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h0Test2_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h0Test2": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h0Test3_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h0Test3": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h0Test4_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h0Test4": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test1_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test1": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test2_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test2": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test3_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test3": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test4_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test4": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h4Test2_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h4Test2": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h4Test3_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h4Test3": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h4Test4_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h4Test4": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h5Test8_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h5Test8": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h7Test1_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h7Test1": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h7Test2_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h7Test2": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h7Test3_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h7Test3": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h7Test4_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h7Test4": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test0_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test0": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test1_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test1": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test2_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test2": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test3_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test3": "java.lang.NumberFormatException, line:None"
                },
                "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test4_valid": {
                    "test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test4": "java.lang.NumberFormatException, line:None"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "apache__castle__druid",
            "test_file_path": "./data/ITrans/projects/apache__castle__druid/extensions-core/azure-extensions/src/test/java/org/apache/druid/storage/azure/AzureClientFactoryTest.java",
            "test_simple_name": "test_blobServiceClientBuilder_useCachedClient",
            "FQS_testMethos": "org.apache.druid.storage.azure.AzureClientFactoryTest.test_blobServiceClientBuilder_useCachedClient()",
            "assertionSTMT": "Assert.assertEquals(blobServiceClient, blobServiceClient2)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__castle__druid/org.apache.druid.storage.azure.AzureClientFactoryTest.test_blobServiceClientBuilder_useCachedClient__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.apache.druid.storage.azure.AzureClientFactory.getBlobServiceClient(java.lang.Integer, java.lang.String)",
                "org.apache.druid.storage.azure.AzureClientFactory.getBlobServiceClient(java.lang.Integer, java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Integer",
                    "expression": "retryCount1",
                    "statement": "BlobServiceClient blobServiceClient = factory.getBlobServiceClient(retryCount1, ACCOUNT1);",
                    "invocation": "blobServiceClient = factory.getBlobServiceClient(retryCount1, ACCOUNT1)"
                },
                {
                    "type": "String",
                    "expression": "ACCOUNT1",
                    "statement": "BlobServiceClient blobServiceClient = factory.getBlobServiceClient(retryCount1, ACCOUNT1);",
                    "invocation": "blobServiceClient = factory.getBlobServiceClient(retryCount1, ACCOUNT1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Integer",
                    "expression": "retryCount2",
                    "statement": "BlobServiceClient blobServiceClient2 = factory.getBlobServiceClient(retryCount2, ACCOUNT2);",
                    "invocation": "blobServiceClient2 = factory.getBlobServiceClient(retryCount2, ACCOUNT2)"
                },
                {
                    "type": "String",
                    "expression": "ACCOUNT2",
                    "statement": "BlobServiceClient blobServiceClient2 = factory.getBlobServiceClient(retryCount2, ACCOUNT2);",
                    "invocation": "blobServiceClient2 = factory.getBlobServiceClient(retryCount2, ACCOUNT2)"
                }
            ],
            "comments": "",
            "dependency": "org.apache.druid.storage.azure.AzureClientFactory;org.apache.druid.storage.azure.AzureClientFactory.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test_blobServiceClientBuilder_useCachedClient_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 7,
            "num_of_passed_test_cases": 3,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 4,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_blobServiceClientBuilder_useCachedClient_h0Test0"
                ],
                [
                    "test_blobServiceClientBuilder_useCachedClient_h0Test1"
                ],
                [
                    "test_blobServiceClientBuilder_useCachedClient_h0Test2"
                ],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h0Test3_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h0Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h0Test4_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h0Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h1Test4_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h1Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h3Test4_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h3Test4": "java.lang.NoClassDefFoundError, line:None"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 25,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 25,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h0Test0_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h0Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h0Test1_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h0Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h0Test2_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h0Test2": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h0Test3_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h0Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h0Test4_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h0Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h2Test0_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h2Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h2Test4_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h2Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h3Test3_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h3Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h5Test0_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h5Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h5Test1_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h5Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h5Test2_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h5Test2": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h5Test3_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h5Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h6Test1_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h6Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h6Test3_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h6Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h6Test5_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h6Test5": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h6Test7_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h6Test7": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h6Test9_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h6Test9": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h7Test3_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h7Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h8Test3_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h8Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test1_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h9Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test2_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h9Test2": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test3_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h9Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test4_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h9Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test5_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h9Test5": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test7_valid": {
                    "test_blobServiceClientBuilder_useCachedClient_h9Test7": "java.lang.NoClassDefFoundError, line:None"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "apache__castle__druid",
            "test_file_path": "./data/ITrans/projects/apache__castle__druid/extensions-core/azure-extensions/src/test/java/org/apache/druid/storage/azure/AzureClientFactoryTest.java",
            "test_simple_name": "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount",
            "FQS_testMethos": "org.apache.druid.storage.azure.AzureClientFactoryTest.test_blobServiceClientBuilder_useNewClientForDifferentRetryCount()",
            "assertionSTMT": "Assert.assertNotEquals(blobServiceClient, blobServiceClient2)",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/apache__castle__druid/org.apache.druid.storage.azure.AzureClientFactoryTest.test_blobServiceClientBuilder_useNewClientForDifferentRetryCount__castle__0.json",
            "withInputTransformation": false,
            "invoked_methods_FQS": [
                "org.apache.druid.storage.azure.AzureClientFactory.getBlobServiceClient(java.lang.Integer, java.lang.String)",
                "org.apache.druid.storage.azure.AzureClientFactory.getBlobServiceClient(java.lang.Integer, java.lang.String)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 1,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "Integer",
                    "expression": "retryCount1",
                    "statement": "BlobServiceClient blobServiceClient = factory.getBlobServiceClient(retryCount1, ACCOUNT1);",
                    "invocation": "blobServiceClient = factory.getBlobServiceClient(retryCount1, ACCOUNT1)"
                },
                {
                    "type": "String",
                    "expression": "ACCOUNT1",
                    "statement": "BlobServiceClient blobServiceClient = factory.getBlobServiceClient(retryCount1, ACCOUNT1);",
                    "invocation": "blobServiceClient = factory.getBlobServiceClient(retryCount1, ACCOUNT1)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Integer",
                    "expression": "retryCount2",
                    "statement": "BlobServiceClient blobServiceClient2 = factory.getBlobServiceClient(retryCount2, ACCOUNT2);",
                    "invocation": "blobServiceClient2 = factory.getBlobServiceClient(retryCount2, ACCOUNT2)"
                },
                {
                    "type": "String",
                    "expression": "ACCOUNT2",
                    "statement": "BlobServiceClient blobServiceClient2 = factory.getBlobServiceClient(retryCount2, ACCOUNT2);",
                    "invocation": "blobServiceClient2 = factory.getBlobServiceClient(retryCount2, ACCOUNT2)"
                }
            ],
            "comments": "",
            "dependency": "org.apache.druid.storage.azure.AzureClientFactory;org.apache.druid.storage.azure.AzureClientFactory.*",
            "type": "wo_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": true,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": {
            "num_of_test_cases": 11,
            "num_of_passed_test_cases": 5,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 6,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h0Test0"
                ],
                [
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h0Test1"
                ],
                [
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h0Test4"
                ],
                [
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h1Test0"
                ],
                [
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h1Test1"
                ],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h1Test3_valid": {
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h1Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h1Test4_valid": {
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h1Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test1_valid": {
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test4_valid": {
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h4Test3_valid": {
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h4Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h4Test4_valid": {
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h4Test4": "java.lang.NoClassDefFoundError, line:None"
                }
            }
        },
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 14,
            "num_of_passed_test_cases": 0,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 14,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                [],
                []
            ],
            "failure_info": {
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h0Test0_valid": {
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h0Test0": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h0Test1_valid": {
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h0Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h0Test2_valid": {
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h0Test2": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h0Test3_valid": {
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h0Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h0Test4_valid": {
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h0Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h2Test4_valid": {
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h2Test4": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h2Test6_valid": {
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h2Test6": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test1_valid": {
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test3_valid": {
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test3": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test5_valid": {
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test5": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test6_valid": {
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test6": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test7_valid": {
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test7": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h5Test1_valid": {
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h5Test1": "java.lang.NoClassDefFoundError, line:None"
                },
                "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h7Test3_valid": {
                    "test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h7Test3": "java.lang.NoClassDefFoundError, line:None"
                }
            }
        },
        "Diff_testing_generatedIT_result": null
    },
    {
        "MTC_item": {
            "poj_name": "datageartech__split__datagear",
            "test_file_path": "./data/ITrans/projects/datageartech__split__datagear/datagear-util/src/test/java/org/datagear/util/version/VersionTest.java",
            "test_simple_name": "stringOfTest",
            "FQS_testMethos": "org.datagear.util.version.VersionTest.stringOfTest()",
            "assertionSTMT": "assertEquals(v, Version.stringOf(version))",
            "relationAssertionFilePath": "./data/ITrans/projects_MTidentifier_relationAssertion_outputs/datageartech__split__datagear/org.datagear.util.version.VersionTest.stringOfTest__split__1.json",
            "withInputTransformation": true,
            "invoked_methods_FQS": [
                "org.datagear.util.version.Version.valueOf(java.lang.String)",
                "org.datagear.util.version.Version.stringOf(org.datagear.util.version.Version)"
            ],
            "MI": 2,
            "num_MR_instance_in_this_MTC": 4,
            "compiled": true,
            "executable": true,
            "sourceInput": [
                {
                    "type": "String",
                    "expression": "v",
                    "statement": "Version version = Version.valueOf(v);",
                    "invocation": "version = Version.valueOf(v)"
                }
            ],
            "followUpInput": [
                {
                    "type": "Version",
                    "expression": "version1",
                    "statement": "assertEquals(v, Version.stringOf(version1));",
                    "invocation": "Version.stringOf(version1)"
                }
            ],
            "comments": "",
            "dependency": "org.datagear.util.version.Version;org.datagear.util.version.Version.*",
            "type": "w_ITrans"
        },
        "GTIT_compile_result": null,
        "generatedIT_compile_result": false,
        "OriginalMTC_testing_GTIT_result": null,
        "OriginalMTC_testing_generatedIT_result": {
            "num_of_test_cases": 1,
            "num_of_passed_test_cases": 1,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": 0,
            "assertionLineNums": false,
            "reach_assertion_test_cases_list": [],
            "assertion_failed_test_cases_list": [],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                "stringOfTest_IT"
            ],
            "failure_info": {}
        },
        "ES_testing_GTIT_result": null,
        "ES_testing_generatedIT_result": null,
        "LLMI_testing_GTIT_result": null,
        "LLMI_testing_generatedIT_result": null,
        "LLMI_testing_generatedIT_result_evaluation": {
            "num_of_test_cases": 4,
            "num_of_passed_test_cases": 4,
            "num_of_assertion_failed_test_cases": 0,
            "num_of_exception_thrown_test_cases": 0,
            "num_of_reach_assertion_test_cases": -1,
            "assertionLineNums": [
                false,
                false,
                false,
                false
            ],
            "reach_assertion_test_cases_list": [
                [],
                [],
                [],
                []
            ],
            "assertion_failed_test_cases_list": [
                [],
                [],
                [],
                []
            ],
            "exception_thrown_test_cases_list": [],
            "passed_test_cases_list": [
                [
                    "stringOfTest_h5Test0"
                ],
                [
                    "stringOfTest_h5Test1"
                ],
                [
                    "stringOfTest_h5Test2"
                ],
                [
                    "stringOfTest_h5Test3"
                ]
            ],
            "failure_info": {}
        },
        "Diff_testing_generatedIT_result": null
    }
]