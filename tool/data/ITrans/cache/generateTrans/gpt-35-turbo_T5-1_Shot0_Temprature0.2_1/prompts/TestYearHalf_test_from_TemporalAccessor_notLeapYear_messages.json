[
    {
        "role": "system",
        "content": "As an expert in Java programming, you excel at understanding the intentions behind code and developing functions that convert provided inputs into desired outputs.\nIn metamorphic testing, input transformation functions are crafted to automatically generate additional test inputs (denoted as 'FOLLOW UP INPUT') from initial test inputs (denoted as 'SOURCE INPUT') based on defined metamorphic relations (MRs).\n\nGiven the program under test (denoted as 'METHOD UNDER TEST'), an MR-encoded test case (denoted as 'TEST CASE'),\nand additional pairs of 'SOURCE INPUT' and 'FOLLOW UP INPUT' (denoted as 'OTHER INPUT PAIRS'),\\\nyour task is to analyze the program under test and the provided test case, deduce the relationship between 'SOURCE INPUT' and 'FOLLOW UP INPUT' in the test case, and create a function that transforms 'SOURCE INPUT' into 'FOLLOW UP INPUT'.\n\nThe deduced relation and generated transformation function should be applicable to addtional input pairs and other potentail input pairs with similar characteristics.\nConsidering potential input pairs with boundary values as well.\n"
    },
    {
        "role": "user",
        "content": "# METHOD UNDER TEST\n```java\n// -----------------------------------------------------------------------\n/**\n * Obtains an instance of {@code YearHalf} from a temporal object.\n * <p>\n * This obtains a year-half based on the specified temporal.\n * A {@code TemporalAccessor} represents an arbitrary set of date and time information,\n * which this factory converts to an instance of {@code YearHalf}.\n * <p>\n * The conversion extracts the {@link ChronoField#YEAR YEAR} and\n * {@link TemporalFields#HALF_OF_YEAR HALF_OF_YEAR} fields.\n * The extraction is only permitted if the temporal object has an ISO\n * chronology, or can be converted to a {@code LocalDate}.\n * <p>\n * This method matches the signature of the functional interface {@link TemporalQuery}\n * allowing it to be used in queries via method reference, {@code YearHalf::from}.\n *\n * @param temporal  the temporal object to convert, not null\n * @return the year-half, not null\n * @throws DateTimeException if unable to convert to a {@code YearHalf}\n */\npublic static YearHalf from(TemporalAccessor temporal) {\n    if (temporal instanceof YearHalf) {\n        return (YearHalf) temporal;\n    }\n    Objects.requireNonNull(temporal, \"temporal\");\n    try {\n        TemporalAccessor adjusted = !IsoChronology.INSTANCE.equals(Chronology.from(temporal)) ? LocalDate.from(temporal) : temporal;\n        // need to use getLong() as JDK Parsed class get() doesn't work properly\n        int year = Math.toIntExact(adjusted.getLong(YEAR));\n        int hoy = Math.toIntExact(adjusted.getLong(HALF_OF_YEAR));\n        return of(year, hoy);\n    } catch (DateTimeException ex) {\n        throw new DateTimeException(\"Unable to obtain YearHalf from TemporalAccessor: \" + temporal + \" of type \" + temporal.getClass().getName(), ex);\n    }\n}\n\n/**\n * Obtains an instance of {@code YearHalf} from a year and half.\n *\n * @param year  the year to represent, from MIN_YEAR to MAX_YEAR\n * @param half  the half-of-year to represent, from 1 to 2\n * @return the year-half, not null\n * @throws DateTimeException if either field value is invalid\n */\npublic static YearHalf of(int year, int half) {\n    YEAR.checkValidValue(year);\n    return new YearHalf(year, Half.of(half));\n}\n\n```\n\n\n# TEST CASE\n```java\n@Test\npublic void test_from_TemporalAccessor_notLeapYear() {\n    LocalDate date = LocalDate.of(2007, 1, 1);\n    int year = 2007;\n    int expected = ((date.getMonthValue() - 1) / 6) + 1;\n    YearHalf test = YearHalf.from(date);\n    assertEquals(YearHalf.of(year, expected), test);\n}\n\n```\nSOURCE INPUT: `date`\nFOLLOW UP INPUT: `year`,`expected`\n\n\n# OTHER INPUT PAIRS \n\n\n\n# OUTPUT FORMAT\n```java\npublic class TestYearHalf_test_from_TemporalAccessor_notLeapYear {\n    public static List<Object> inputTransformation_test_from_TemporalAccessor_notLeapYear(LocalDate date)  {\n        // TODO\n        int year = \n\t\tint expected = \n\t\tList<Object> transformed_inputs = Arrays.asList(year, expected);\n\t\treturn transformed_inputs;\n    }\n}\n```\nYour task is to deduce the relationship between 'SOURCE INPUT' and 'FOLLOW UP INPUT' in the test case, and create a function that transforms 'SOURCE INPUT' into 'FOLLOW UP INPUT'.\nThe deduced relation and generated transformation function should be applicable to addtional input pairs and other potentail input pairs with similar characteristics.\nGenerate the transformation function by complementing the above code skeleton in 'OUTPUT FORMAT'."
    }
]