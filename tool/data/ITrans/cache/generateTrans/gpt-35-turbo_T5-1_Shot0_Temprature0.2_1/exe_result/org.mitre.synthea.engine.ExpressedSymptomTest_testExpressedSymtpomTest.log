JUnit version 4.13.2
.
Time: 0.009

OK (1 test)

CMD: cd /ssddata1/cxubl/data/ITrans/projects/synthetichealth__castle__synthea/ ; /ssddata1/cxubl/software/zulu_jdks/zulu11.62.17-ca-jdk11.0.18-linux_x64/bin/java -XX:ActiveProcessorCount=10 -classpath ./:./build/classes/java/main/:./build/classes/java/test/:/ssddata1/cxubl/software/junit/junit-4.13.2.jar:/ssddata1/cxubl/software/junit/junit-jupiter-api-5.8.2.jar:/ssddata1/cxubl/software/junit/hamcrest-core-1.3.jar:/ssddata1/cxubl/.m2/repository/org/slf4j/slf4j-api/2.0.0/slf4j-api-2.0.0.jar:/ssddata1/cxubl/.m2/repository/org/apache/logging/log4j/log4j-api/2.1/log4j-api-2.1.jar:/ssddata1/cxubl/.m2/repository/com/google/guava/guava/33.0.0-jre/guava-33.0.0-jre.jar:/ssddata1/cxubl/.m2/repository/com/fasterxml/jackson/core/jackson-databind/2.4.0/jackson-databind-2.4.0.jar:/ssddata1/cxubl/.m2/repository/com/fasterxml/jackson/core/jackson-core/2.12.1/jackson-core-2.12.1.jar:/ssddata1/cxubl/.m2/repository/org/springframework/spring-test/5.3.26/spring-test-5.3.26.jar:/ssddata1/cxubl/data/ITrans/projects/thingsboard__castle__thingsboard/dao/target/dependency/commons-logging-1.2.jar:/ssddata1/cxubl/.m2/repository/org/springframework/spring-core/5.3.2/spring-core-5.3.26.jar:arex-instrumentation-api/target/dependency/jackson-annotations-2.13.1.jar:arex-instrumentation-api/target/dependency/gson-2.10.1.jar:misc/extra/target/dependency/vecmath-1.5.2.jar:/ssddata1/cxubl/data/ITrans/projects/synthetichealth__castle__synthea/ITrans/processed_GT_only/:/ssddata1/cxubl/data/ITrans/projects/synthetichealth__castle__synthea/ITrans/processed_MTCITrans_only/:/ssddata1/cxubl/data/ITrans/projects/synthetichealth__castle__synthea/ITrans/generated_ITrans/ org.junit.runner.JUnitCore org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpomTest > /ssddata1/cxubl/data/ITrans/cache/generateTrans/gpt-35-turbo_T5-1_Shot0_Temprature0.2_1/exe_result/org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpomTest.log 2>&1
file path: 
/ssddata1/cxubl/data/ITrans/projects/synthetichealth__castle__synthea/ITrans/processed_MTCITrans_only/org/mitre/synthea/engine/ExpressedSymptomTest_testExpressedSymtpomTest.java
file content: 
package org.mitre.synthea.engine;

import org.mitre.synthea.engine.ExpressedSymptom;
import org.mitre.synthea.engine.ExpressedSymptom.*;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertNull;
import static org.junit.Assert.assertTrue;

import java.util.Arrays;
import java.util.List;

import org.junit.Test;
import org.mitre.synthea.engine.ExpressedSymptom.SymptomInfo;
import org.mitre.synthea.engine.ExpressedSymptom.SymptomSource;

public class ExpressedSymptomTest_testExpressedSymtpomTest {

//   @Test
//   public void testExpressedSymtpom_h() {
//     String name = pain;
//     ExpressedSymptom symptom = new ExpressedSymptom(name);
//     String module = testModule; symptom.addressSource(module);
// 
//     ExpressedSymptom symptom2 = symptom;
//     String module2 = testModule; symptom2.addressSource(module2);
// 
// 
//     String cause = testCause;
//     for (long l = 0L; l < 3L; l++) {
//       symptom.onSet(module, cause, l, (int) (100 * l), false);
//       assertEquals(module, symptom.getSourceWithHighValue());
//       assertEquals(Integer.valueOf((int) (100 * l)), symptom.getValueFromSource(module));
//       assertEquals((int) (100 * l), symptom.getSymptom());
//       assertEquals(Long.valueOf(l), symptom2.getSymptomLastUpdatedTime(module2));
//     }
//   }
// 
// //   public static List<Object> inputTransformation_testExpressedSymtpom(ExpressedSymptom symptom, String module) {
// //     ExpressedSymptom symptom2 = symptom;
// //     String module2 = testModule; 
// //     symptom2.addressSource(module2);
// //     List<Object> follow_up_inputs = Arrays.asList(symptom2, module2);
// // 		return follow_up_inputs;
// //   }
// // 
  @Test
  public void testExpressedSymtpom_IT() {
    String name = pain;
    ExpressedSymptom symptom = new ExpressedSymptom(name);
    String module = testModule; symptom.addressSource(module);

    List<Object> transformed_inputs = ExpressedSymptomTest_testExpressedSymtpom.inputTransformation_testExpressedSymtpom(symptom, module);
    ExpressedSymptom symptom2 = (ExpressedSymptom) transformed_inputs.get(0);
    String module2 = (String) transformed_inputs.get(1);

    String cause = testCause;
    for (long l = 0L; l < 3L; l++) {
      symptom.onSet(module, cause, l, (int) (100 * l), false);
      assertEquals(module, symptom.getSourceWithHighValue());
      assertEquals(Integer.valueOf((int) (100 * l)), symptom.getValueFromSource(module));
      assertEquals((int) (100 * l), symptom.getSymptom());
      assertEquals(Long.valueOf(l), symptom2.getSymptomLastUpdatedTime(module2));
    }
  }
}
