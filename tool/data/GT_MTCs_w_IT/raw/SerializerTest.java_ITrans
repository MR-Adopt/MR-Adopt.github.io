package io.arex.inst.runtime.serializer;

import static org.junit.jupiter.api.Assertions.*;

import io.arex.agent.bootstrap.constants.ConfigConstants;
import io.arex.inst.runtime.config.Config;
import io.arex.inst.runtime.config.ConfigBuilder;
import io.arex.inst.runtime.listener.EventProcessorTest.TestJacksonSerializable;
import io.arex.inst.runtime.listener.EventProcessorTest.TestGsonSerializer;
import io.arex.inst.runtime.util.TypeUtil;
import java.lang.reflect.Field;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.TreeSet;
import org.junit.jupiter.api.AfterAll;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.Test;

class SerializerTest {
    @BeforeAll
    static void setUp() {
        List<StringSerializable> list = new ArrayList<>(2);
        list.add(new TestJacksonSerializable());
        list.add(new TestGsonSerializer());
        Serializer.builder(list).build();
    }

    @AfterAll
    static void tearDown() {

    }

    @Test
    void builder() {
        assertNotNull(Serializer.getINSTANCE());
        assertEquals(2, Serializer.getINSTANCE().getSerializers().size());
    }

    @Test
    void testThrowError() {
        List<StringSerializable> list = new ArrayList<>();
        list.add(new TestJacksonSerializable());
        list.add(new TestGsonSerializer());
        Serializer.builder(list).build();
        // serialize throw error
        Assertions.assertDoesNotThrow(() -> Serializer.serialize("test"));

        // deserialize throw error
        Assertions.assertDoesNotThrow(() -> Serializer.deserialize("test", String.class));

        // deserialize throw error type
        Assertions.assertDoesNotThrow(() -> Serializer.deserialize("test", TypeUtil.forName("java.lang.String")));

        // deserialize throw error type name
        Assertions.assertDoesNotThrow(() -> Serializer.deserialize("test", "java.lang.String"));
    }

    @Test
    void testNestedList() {
        List<List<Object>> list = new ArrayList<>();
        List<Object> nestedList1 = new ArrayList<>();
        nestedList1.add("nestList1-1");
        nestedList1.add("nestList1-2");

        List<Object> nestedList2 = new LinkedList<>();
        nestedList2.add("nestList2-1");
        nestedList2.add("nestList2-2");

        list.add(null);
        list.add(new ArrayList<>());
        list.add(nestedList1);
        list.add(nestedList2);

        String json = Serializer.serialize(list, "jackson");
        String typeName = TypeUtil.getName(list);
        System.out.println(typeName);
        System.out.println(json);

        List<List<Object>> actualResult = Serializer.deserialize(json, typeName);
        assertEquals(list, actualResult);

        // empty list
        String emptyListTypeName = TypeUtil.getName(new ArrayList<>());
        List<Object> emptyList = Serializer.deserialize("[]", emptyListTypeName);
        assertEquals(0, emptyList.size());
    }


    @Test
    void testNestedList_h() {
        List<List<Object>> list = new ArrayList<>(); list.add(null); list.add(new ArrayList<>());
        List<Object> nestedList1 = new ArrayList<>();
        nestedList1.add("nestList1-1");
        nestedList1.add("nestList1-2");

        List<Object> nestedList2 = new LinkedList<>();
        nestedList2.add("nestList2-1");
        nestedList2.add("nestList2-2");

        list.add(nestedList1);
        list.add(nestedList2);

        String serializer = "jackson";
        String json = Serializer.serialize(list, serializer);

        String json2 = "nullA@R#E$X[]A@R#E$X[\"nestList1-1\",\"nestList1-2\"]A@R#E$X[\"nestList2-1\",\"nestList2-2\"]";
        String typeName2 = "java.util.ArrayList-java.util.ArrayList,java.lang.String,java.lang.String";

        List<List<Object>> actualResult = Serializer.deserialize(json2, typeName2);
        assertEquals(list, actualResult);

        // empty list
        String emptyListTypeName = TypeUtil.getName(new ArrayList<>());
        List<Object> emptyList = Serializer.deserialize("[]", emptyListTypeName);
        assertEquals(0, emptyList.size());
    }

    public static List<Object> inputTransformation_testNestedList(List<List<Object>> list, String serializer) {
		String json = Serializer.serialize(list, serializer);
        String typeName = TypeUtil.getName(list);
		List<Object> transformed_inputs = Arrays.asList(json, typeName);
		return transformed_inputs;
	}


    @Test
    void testNestedList_IT() {
        List<List<Object>> list = new ArrayList<>(); list.add(null); list.add(new ArrayList<>());
        List<Object> nestedList1 = new ArrayList<>();
        nestedList1.add("nestList1-1");
        nestedList1.add("nestList1-2");

        List<Object> nestedList2 = new LinkedList<>();
        nestedList2.add("nestList2-1");
        nestedList2.add("nestList2-2");

        list.add(nestedList1);
        list.add(nestedList2);

        String serializer = "jackson";
        String json = Serializer.serialize(list, serializer);

        List<Object> transformed_inputs = inputTransformation_testNestedList(list, serializer);
        String json2 = (String) transformed_inputs.get(0);
        String typeName2 = (String) transformed_inputs.get(1);

        List<List<Object>> actualResult = Serializer.deserialize(json2, typeName2);
        assertEquals(list, actualResult);

        // empty list
        String emptyListTypeName = TypeUtil.getName(new ArrayList<>());
        List<Object> emptyList = Serializer.deserialize("[]", emptyListTypeName);
        assertEquals(0, emptyList.size());
    }


    @Test
    void testNestedSet() {
        Set<Set<Object>> set = new HashSet<>();
        Set<Object> nestedSet1 = new HashSet<>();
        nestedSet1.add("nestedSet1-1");
        nestedSet1.add("nestedSet1-2");

        Set<Object> nestedSet2 = new TreeSet<>();
        nestedSet2.add("nestedSet2-1");
        nestedSet2.add("nestedSet2-2");

        set.add(null);
        set.add(new HashSet<>());
        set.add(nestedSet1);
        set.add(nestedSet2);

        String json = Serializer.serialize(set, "jackson");
        String typeName = TypeUtil.getName(set);
        System.out.println(typeName);
        System.out.println(json);

        Set<Set<Object>> actualResult = Serializer.deserialize(json, typeName);
        assertEquals(set, actualResult);
    }

    @Test
    void testNestedSet_h() {
        Set<Set<Object>> set = new HashSet<>(); set.add(null); set.add(new HashSet<>());
        Set<Object> nestedSet1 = new HashSet<>();
        nestedSet1.add("nestedSet1-1");
        nestedSet1.add("nestedSet1-2");

        Set<Object> nestedSet2 = new TreeSet<>();
        nestedSet2.add("nestedSet2-1");
        nestedSet2.add("nestedSet2-2");

        set.add(null);
        set.add(new HashSet<>());
        set.add(nestedSet1);
        set.add(nestedSet2);

        String serializer = "jackson";
        String json = Serializer.serialize(set, serializer);
        
        String json2 = "nullA@R#E$X[]A@R#E$X[\"nestedSet1-1\",\"nestedSet1-2\"]A@R#E$X[\"nestedSet2-1\",\"nestedSet2-2\"]";
        String typeName2 = "java.util.HashSet-java.util.HashSet,java.lang.String,java.lang.String";

        Set<Set<Object>> actualResult = Serializer.deserialize(json2, typeName2);
        assertEquals(set, actualResult);
    }

    public static List<Object> inputTransformation_testNestedSet(Set<Set<Object>> set, String serializer) {
		String json = Serializer.serialize(set, serializer);
        String typeName = TypeUtil.getName(set);
		List<Object> transformed_inputs = Arrays.asList(json, typeName);
		return transformed_inputs;
	}

    @Test
    void testNestedSet_IT() {
        Set<Set<Object>> set = new HashSet<>(); set.add(null); set.add(new HashSet<>());
        Set<Object> nestedSet1 = new HashSet<>();
        nestedSet1.add("nestedSet1-1");
        nestedSet1.add("nestedSet1-2");

        Set<Object> nestedSet2 = new TreeSet<>();
        nestedSet2.add("nestedSet2-1");
        nestedSet2.add("nestedSet2-2");

        
        set.add(nestedSet1);
        set.add(nestedSet2);

        String serializer = "jackson";
        String json = Serializer.serialize(set, serializer);
        
        List<Object> transformed_inputs = inputTransformation_testNestedSet(set, serializer);
        String json2 = (String) transformed_inputs.get(0);
        String typeName2 = (String) transformed_inputs.get(1);

        Set<Set<Object>> actualResult = Serializer.deserialize(json2, typeName2);
        assertEquals(set, actualResult);
    }

    @Test
    void nullObjectOrType() {
        // null
        assertNull(Serializer.serialize(null));
        assertNull(Serializer.deserialize(null, TypeUtil.forName(null)));
        assertNull(Serializer.deserialize(null, (String)null));
        assertNull(Serializer.deserialize(null, (Class<?>)null));

        // serialize Throwable
        Assertions.assertDoesNotThrow(() -> Serializer.serialize(new Throwable()));
    }

    @Test
    void testInitSerializerConfigMap() throws Exception {
        // null config
        Field instance = Config.class.getDeclaredField("INSTANCE");
        instance.setAccessible(true);
        instance.set(null, null);
        Assertions.assertDoesNotThrow(Serializer::initSerializerConfigMap);

        // empty serializer config
        ConfigBuilder builder = new ConfigBuilder("testSerializer");
        builder.build();
        Serializer.initSerializerConfigMap();
        assertNull(Serializer.getSerializerFromType("dubboRequest"));

        // serializer config
        builder = new ConfigBuilder("testSerializer");
        builder.addProperty(ConfigConstants.SERIALIZER_CONFIG, "soa:gson,dubboRequest:jackson,httpRequest");
        builder.build();
        Serializer.initSerializerConfigMap();
        assertEquals("jackson", Serializer.getSerializerFromType("dubboRequest"));
        assertEquals("gson", Serializer.getSerializerFromType("soa"));
        assertNull(Serializer.getSerializerFromType("httpRequest"));
    }

    @Test
    void testTypeIsException() {
        RuntimeException runtimeException = new RuntimeException("test");
        String json = Serializer.serialize(runtimeException);
        String typeName = TypeUtil.getName(runtimeException);
        assertNotNull(json);
        RuntimeException actualResult = Serializer.deserialize(json, TypeUtil.forName(typeName));
        assertEquals(runtimeException.getClass(), actualResult.getClass());
    }


    @Test
    void testTypeIsException_h() {
        RuntimeException runtimeException = new RuntimeException();
        String json = Serializer.serialize(runtimeException);
        String typeName = TypeUtil.getName(runtimeException);
        System.out.println(json);
        System.out.println(typeName);
        
        RuntimeException actualResult = Serializer.deserialize(json, TypeUtil.forName(typeName));
        assertEquals(runtimeException.getClass(), actualResult.getClass());
    }

    // public static List<Object> inputTransformation_testTypeIsException(Set<Set<Object>> set, String serializer) {
	// 	String json = Serializer.serialize(set, serializer);
    //     String typeName = TypeUtil.getName(set);
	// 	List<Object> transformed_inputs = Arrays.asList(json, typeName);
	// 	return transformed_inputs;
	// }

    @Test
    void testTypeIsException_IT() {
        RuntimeException runtimeException = new RuntimeException();
        String json = Serializer.serialize(runtimeException);
        String typeName = TypeUtil.getName(runtimeException);
        assertNotNull(json);
        RuntimeException actualResult = Serializer.deserialize(json, TypeUtil.forName(typeName));
        assertEquals(runtimeException.getClass(), actualResult.getClass());
    }
}