{
    "com.dslplatform.json.DateTest.zonedDateTimeBoundary()": [
        {
            "test_inputs_FQN": "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h0Test0",
            "input_pairs_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[0];\nArrays.fill(lts, now);\nClass<ZonedDateTime[]> manifest = ZonedDateTime[].class;\nbyte[] body = { 91, 93, 0, 0 };\nint size = 5;",
            "Sinput_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[0];\nArrays.fill(lts, now);"
        },
        {
            "test_inputs_FQN": "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h0Test1",
            "input_pairs_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[1];\nArrays.fill(lts, now);\nClass<ZonedDateTime[]> manifest = ZonedDateTime[].class;\nbyte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };\nint size = 23;",
            "Sinput_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[1];\nArrays.fill(lts, now);"
        },
        {
            "test_inputs_FQN": "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h0Test2",
            "input_pairs_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[100];\nArrays.fill(lts, now);\nClass<ZonedDateTime[]> manifest = ZonedDateTime[].class;\nbyte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };\nint size = 115;",
            "Sinput_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[100];\nArrays.fill(lts, now);"
        },
        {
            "test_inputs_FQN": "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h3Test1",
            "input_pairs_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[0];\nArrays.fill(lts, now);\nClass<ZonedDateTime[]> manifest = ZonedDateTime[].class;\nbyte[] body = { 91, 93, 0, 0 };\nint size = 8;",
            "Sinput_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[0];\nArrays.fill(lts, now);"
        },
        {
            "test_inputs_FQN": "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h3Test2",
            "input_pairs_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[1];\nArrays.fill(lts, now);\nClass<ZonedDateTime[]> manifest = ZonedDateTime[].class;\nbyte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };\nint size = 115;",
            "Sinput_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[1];\nArrays.fill(lts, now);"
        },
        {
            "test_inputs_FQN": "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h8Test0",
            "input_pairs_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[3];\nArrays.fill(lts, now.plusDays(1));\nClass<ZonedDateTime[]> manifest = ZonedDateTime[].class;\nbyte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };\nint size = 115;",
            "Sinput_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[3];\nArrays.fill(lts, now.plusDays(1));"
        },
        {
            "test_inputs_FQN": "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h8Test4",
            "input_pairs_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[3];\nArrays.fill(lts, now.plusHours(1));\nClass<ZonedDateTime[]> manifest = ZonedDateTime[].class;\nbyte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };\nint size = 115;",
            "Sinput_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[3];\nArrays.fill(lts, now.plusHours(1));"
        },
        {
            "test_inputs_FQN": "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h8Test6",
            "input_pairs_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[3];\nArrays.fill(lts, now.minusHours(1));\nClass<ZonedDateTime[]> manifest = ZonedDateTime[].class;\nbyte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };\nint size = 115;",
            "Sinput_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[3];\nArrays.fill(lts, now.minusHours(1));"
        },
        {
            "test_inputs_FQN": "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h8Test8",
            "input_pairs_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[3];\nArrays.fill(lts, now.plusMinutes(1));\nClass<ZonedDateTime[]> manifest = ZonedDateTime[].class;\nbyte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };\nint size = 115;",
            "Sinput_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[3];\nArrays.fill(lts, now.plusMinutes(1));"
        },
        {
            "test_inputs_FQN": "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h9Test4",
            "input_pairs_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[3];\nArrays.fill(lts, now.plusMinutes(30));\nClass<ZonedDateTime[]> manifest = ZonedDateTime[].class;\nbyte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };\nint size = 115;",
            "Sinput_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[3];\nArrays.fill(lts, now.plusMinutes(30));"
        },
        {
            "test_inputs_FQN": "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h9Test6",
            "input_pairs_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[3];\nArrays.fill(lts, now.minusSeconds(10));\nClass<ZonedDateTime[]> manifest = ZonedDateTime[].class;\nbyte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };\nint size = 115;",
            "Sinput_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[3];\nArrays.fill(lts, now.minusSeconds(10));"
        },
        {
            "test_inputs_FQN": "com.dslplatform.json.DateTest_zonedDateTimeBoundary_h9Test8",
            "input_pairs_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[3];\nArrays.fill(lts, now.plusNanos(100));\nClass<ZonedDateTime[]> manifest = ZonedDateTime[].class;\nbyte[] body = { 91, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 44, 34, 50, 48, 50, 48, 45, 48, 49, 45, 49, 50, 84, 49, 50, 58, 49, 51, 58, 49, 52, 46, 49, 50, 51, 52, 53, 54, 55, 56, 57, 45, 48, 51, 58, 51, 48, 34, 93, 0, 0 };\nint size = 115;",
            "Sinput_code_block": "ZonedDateTime now = ZonedDateTime.parse(\"2020-01-12T12:13:14.123456789-03:30\");\nJsonWriter jw = dslJson.newWriter(34);\nZonedDateTime[] lts = new ZonedDateTime[3];\nArrays.fill(lts, now.plusNanos(100));"
        }
    ],
    "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest.testInFlightRequestKey()": [
        {
            "test_inputs_FQN": "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h0Test0",
            "input_pairs_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 0);\nInFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 0, 0);",
            "Sinput_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 0);"
        },
        {
            "test_inputs_FQN": "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h0Test1",
            "input_pairs_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", Integer.MAX_VALUE, Integer.MAX_VALUE);\nInFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", Integer.MAX_VALUE, Integer.MAX_VALUE);",
            "Sinput_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", Integer.MAX_VALUE, Integer.MAX_VALUE);"
        },
        {
            "test_inputs_FQN": "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h0Test2",
            "input_pairs_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", Integer.MIN_VALUE, Integer.MIN_VALUE);\nInFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", Integer.MIN_VALUE, Integer.MIN_VALUE);",
            "Sinput_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", Integer.MIN_VALUE, Integer.MIN_VALUE);"
        },
        {
            "test_inputs_FQN": "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h0Test3",
            "input_pairs_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, Integer.MAX_VALUE);\nInFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 0, Integer.MAX_VALUE);",
            "Sinput_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, Integer.MAX_VALUE);"
        },
        {
            "test_inputs_FQN": "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h0Test4",
            "input_pairs_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", Integer.MAX_VALUE, 0);\nInFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", Integer.MAX_VALUE, 0);",
            "Sinput_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", Integer.MAX_VALUE, 0);"
        },
        {
            "test_inputs_FQN": "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test0",
            "input_pairs_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"\", 0, 0);\nInFlightRequestKey requestKey2 = new InFlightRequestKey(\"\", 0, 0);",
            "Sinput_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"\", 0, 0);"
        },
        {
            "test_inputs_FQN": "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test1",
            "input_pairs_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", -1, 0);\nInFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", -1, 0);",
            "Sinput_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", -1, 0);"
        },
        {
            "test_inputs_FQN": "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h3Test2",
            "input_pairs_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, -1);\nInFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 0, -1);",
            "Sinput_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, -1);"
        },
        {
            "test_inputs_FQN": "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h5Test0",
            "input_pairs_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 1);\nInFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 0, 1);",
            "Sinput_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 0, 1);"
        },
        {
            "test_inputs_FQN": "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h5Test1",
            "input_pairs_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 1, 0);\nInFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 1, 0);",
            "Sinput_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 1, 0);"
        },
        {
            "test_inputs_FQN": "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h5Test3",
            "input_pairs_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 1, 1);\nInFlightRequestKey requestKey2 = new InFlightRequestKey(\"group\", 1, 1);",
            "Sinput_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group\", 1, 1);"
        },
        {
            "test_inputs_FQN": "org.apache.rocketmq.tieredstore.common.InFlightRequestFutureTest_testInFlightRequestKey_h6Test3",
            "input_pairs_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group1\", 0, 0);\nInFlightRequestKey requestKey2 = new InFlightRequestKey(\"group1\", 0, 0);",
            "Sinput_code_block": "InFlightRequestKey requestKey1 = new InFlightRequestKey(\"group1\", 0, 0);"
        }
    ],
    "cn.hutool.json.IssueI6SZYBTest.pairTest()": [
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI6SZYBTest_pairTest_h0Test0",
            "input_pairs_code_block": "Pair<Integer, Integer> pair = Pair.of(0, 0);\nString jsonString = \"{\\\"key\\\":0,\\\"value\\\":0}\";\nClass<Pair> beanClass = Pair.class;",
            "Sinput_code_block": "Pair<Integer, Integer> pair = Pair.of(0, 0);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI6SZYBTest_pairTest_h0Test1",
            "input_pairs_code_block": "Pair<Integer, Integer> pair = Pair.of(Integer.MAX_VALUE, Integer.MAX_VALUE);\nString jsonString = \"{\\\"key\\\":2147483647,\\\"value\\\":2147483647}\";\nClass<Pair> beanClass = Pair.class;",
            "Sinput_code_block": "Pair<Integer, Integer> pair = Pair.of(Integer.MAX_VALUE, Integer.MAX_VALUE);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI6SZYBTest_pairTest_h0Test2",
            "input_pairs_code_block": "Pair<Integer, Integer> pair = Pair.of(Integer.MIN_VALUE, Integer.MIN_VALUE);\nString jsonString = \"{\\\"key\\\":-2147483648,\\\"value\\\":-2147483648}\";\nClass<Pair> beanClass = Pair.class;",
            "Sinput_code_block": "Pair<Integer, Integer> pair = Pair.of(Integer.MIN_VALUE, Integer.MIN_VALUE);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI6SZYBTest_pairTest_h0Test3",
            "input_pairs_code_block": "Pair<Integer, Integer> pair = Pair.of(null, null);\nString jsonString = \"{\\\"key\\\":null,\\\"value\\\":null}\";\nClass<Pair> beanClass = Pair.class;",
            "Sinput_code_block": "Pair<Integer, Integer> pair = Pair.of(null, null);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI6SZYBTest_pairTest_h0Test4",
            "input_pairs_code_block": "Pair<Integer, Integer> pair = Pair.of(1, null);\nString jsonString = \"{\\\"key\\\":1,\\\"value\\\":null}\";\nClass<Pair> beanClass = Pair.class;",
            "Sinput_code_block": "Pair<Integer, Integer> pair = Pair.of(1, null);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI6SZYBTest_pairTest_h3Test1",
            "input_pairs_code_block": "Pair<Integer, Integer> pair = Pair.of(-1, -1);\nString jsonString = \"{\\\"key\\\":-1,\\\"value\\\":-1}\";\nClass<Pair> beanClass = Pair.class;",
            "Sinput_code_block": "Pair<Integer, Integer> pair = Pair.of(-1, -1);"
        }
    ],
    "cn.hutool.json.IssueI6SZYBTest.entryTest()": [
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI6SZYBTest_entryTest_h0Test0",
            "input_pairs_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"\", 0);\nString jsonString = \"{\\\"\\\":0}\";\nClass beanClass = AbstractMap.SimpleEntry.class;",
            "Sinput_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"\", 0);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI6SZYBTest_entryTest_h0Test1",
            "input_pairs_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"1234567890\", 1234567890);\nString jsonString = \"{\\\"1234567890\\\":1234567890}\";\nClass beanClass = AbstractMap.SimpleEntry.class;",
            "Sinput_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"1234567890\", 1234567890);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI6SZYBTest_entryTest_h0Test2",
            "input_pairs_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"null\", null);\nString jsonString = \"{\\\"null\\\":null}\";\nClass beanClass = AbstractMap.SimpleEntry.class;",
            "Sinput_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"null\", null);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI6SZYBTest_entryTest_h3Test2",
            "input_pairs_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"a\", Integer.MAX_VALUE);\nString jsonString = \"{\\\"a\\\":2147483647}\";\nClass beanClass = AbstractMap.SimpleEntry.class;",
            "Sinput_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"a\", Integer.MAX_VALUE);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI6SZYBTest_entryTest_h3Test3",
            "input_pairs_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"a\", Integer.MIN_VALUE);\nString jsonString = \"{\\\"a\\\":-2147483648}\";\nClass beanClass = AbstractMap.SimpleEntry.class;",
            "Sinput_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"a\", Integer.MIN_VALUE);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI6SZYBTest_entryTest_h5Test0",
            "input_pairs_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key1\", 100);\nString jsonString = \"{\\\"key1\\\":100}\";\nClass beanClass = AbstractMap.SimpleEntry.class;",
            "Sinput_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key1\", 100);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI6SZYBTest_entryTest_h5Test4",
            "input_pairs_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key2\", -1);\nString jsonString = \"{\\\"key2\\\":-1}\";\nClass beanClass = AbstractMap.SimpleEntry.class;",
            "Sinput_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key2\", -1);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI6SZYBTest_entryTest_h6Test2",
            "input_pairs_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"123\", 456);\nString jsonString = \"{\\\"123\\\":456}\";\nClass beanClass = AbstractMap.SimpleEntry.class;",
            "Sinput_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"123\", 456);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI6SZYBTest_entryTest_h8Test8",
            "input_pairs_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key\", Integer.MAX_VALUE);\nString jsonString = \"{\\\"key\\\":2147483647}\";\nClass beanClass = AbstractMap.SimpleEntry.class;",
            "Sinput_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key\", Integer.MAX_VALUE);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI6SZYBTest_entryTest_h9Test1",
            "input_pairs_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key1\", 100);\nString jsonString = JSONUtil.toJsonStr(pair);\nClass beanClass = AbstractMap.SimpleEntry.class;",
            "Sinput_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key1\", 100);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI6SZYBTest_entryTest_h9Test3",
            "input_pairs_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"\", 0);\nString jsonString = JSONUtil.toJsonStr(pair);\nClass beanClass = AbstractMap.SimpleEntry.class;",
            "Sinput_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"\", 0);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI6SZYBTest_entryTest_h9Test6",
            "input_pairs_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key4\", Integer.MAX_VALUE);\nString jsonString = \"{\\\"key4\\\":2147483647}\";\nClass beanClass = AbstractMap.SimpleEntry.class;",
            "Sinput_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key4\", Integer.MAX_VALUE);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI6SZYBTest_entryTest_h9Test7",
            "input_pairs_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key4\", Integer.MAX_VALUE);\nString jsonString = JSONUtil.toJsonStr(pair);\nClass beanClass = AbstractMap.SimpleEntry.class;",
            "Sinput_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key4\", Integer.MAX_VALUE);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI6SZYBTest_entryTest_h9Test8",
            "input_pairs_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key5\", Integer.MIN_VALUE);\nString jsonString = \"{\\\"key5\\\":-2147483648}\";\nClass beanClass = AbstractMap.SimpleEntry.class;",
            "Sinput_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key5\", Integer.MIN_VALUE);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI6SZYBTest_entryTest_h9Test9",
            "input_pairs_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key5\", Integer.MIN_VALUE);\nString jsonString = JSONUtil.toJsonStr(pair);\nClass beanClass = AbstractMap.SimpleEntry.class;",
            "Sinput_code_block": "Map.Entry<String, Integer> pair = new AbstractMap.SimpleEntry<>(\"key5\", Integer.MIN_VALUE);"
        }
    ],
    "cn.hutool.json.IssueI7GPGXTest.toBeanTest()": [
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h0Test0",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"\", true);\nString jsonString = \"{\\\"key\\\":\\\"\\\",\\\"value\\\":true}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = false;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"\", true);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h0Test1",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test1\", false);\nString jsonString = \"{\\\"key\\\":\\\"test1\\\",\\\"value\\\":false}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = false;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test1\", false);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h0Test3",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(null, true);\nString jsonString = \"{\\\"key\\\":null,\\\"value\\\":true}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = false;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(null, true);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h2Test0",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test2\", false);\nString jsonString = \"{\\\"key\\\":\\\"test2\\\",\\\"value\\\":false}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = false;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test2\", false);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h2Test1",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test3\", true);\nString jsonString = \"{\\\"key\\\":\\\"test3\\\",\\\"value\\\":true}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = true;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test3\", true);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h2Test2",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test4\", false);\nString jsonString = \"{\\\"key\\\":\\\"test4\\\",\\\"value\\\":true}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = true;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test4\", false);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h5Test1",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test2\", false);\nString jsonString = \"{\\\"key\\\":\\\"\" + hutoolPair.getKey() + \"\\\",\\\"value\\\":false}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = false;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test2\", false);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h5Test3",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test3\", true);\nString jsonString = \"{\\\"key\\\":\\\"\" + hutoolPair.getKey() + \"\\\",\\\"value\\\":true}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = false;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test3\", true);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h5Test5",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"\", true);\nString jsonString = \"{\\\"key\\\":\\\"\" + hutoolPair.getKey() + \"\\\",\\\"value\\\":true}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = false;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"\", true);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h6Test1",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test2\", false);\nString jsonString = \"{\\\"key\\\":\\\"\" + hutoolPair.getKey() + \"\\\",\\\"value\\\":\\\"\" + hutoolPair.getValue() + \"\\\"}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = false;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test2\", false);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h6Test3",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test3\", true);\nString jsonString = \"{\\\"key\\\":\\\"\" + hutoolPair.getKey() + \"\\\",\\\"value\\\":\\\"\" + hutoolPair.getValue() + \"\\\"}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = false;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test3\", true);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h6Test4",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test4\", false);\nString jsonString = \"{\\\"key\\\":\\\"test4\\\",\\\"value\\\":false}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = false;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test4\", false);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h6Test5",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test4\", false);\nString jsonString = \"{\\\"key\\\":\\\"\" + hutoolPair.getKey() + \"\\\",\\\"value\\\":\\\"\" + hutoolPair.getValue() + \"\\\"}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = false;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test4\", false);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h6Test6",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test5\", true);\nString jsonString = \"{\\\"key\\\":\\\"test5\\\",\\\"value\\\":true}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = false;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test5\", true);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h6Test7",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test5\", true);\nString jsonString = \"{\\\"key\\\":\\\"\" + hutoolPair.getKey() + \"\\\",\\\"value\\\":\\\"\" + hutoolPair.getValue() + \"\\\"}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = false;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test5\", true);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h6Test9",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"\", true);\nString jsonString = \"{\\\"key\\\":\\\"\" + hutoolPair.getKey() + \"\\\",\\\"value\\\":\\\"\" + hutoolPair.getValue() + \"\\\"}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = false;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"\", true);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h7Test5",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test4\", false);\nString jsonString = \"{\\\"key\\\":\\\"\" + hutoolPair.getKey() + \"\\\",\\\"value\\\":false}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = false;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test4\", false);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h8Test8",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test6\", false);\nString jsonString = \"{\\\"key\\\":\\\"test6\\\",\\\"value\\\":false}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = false;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test6\", false);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h8Test9",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test6\", false);\nString jsonString = \"{\\\"key\\\":\\\"\" + hutoolPair.getKey() + \"\\\",\\\"value\\\":\\\"\" + hutoolPair.getValue() + \"\\\"}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = false;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test6\", false);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h9Test1",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test2\", false);\nString jsonString = \"{\\\"key\\\":\\\"\" + hutoolPair.getValue0() + \"\\\",\\\"value\\\":false}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = false;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test2\", false);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h9Test5",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test1\", false);\nString jsonString = \"{\\\"key\\\":\\\"\" + hutoolPair.getValue0() + \"\\\",\\\"value\\\":\" + hutoolPair.getValue1() + \"}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = false;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"test1\", false);"
        },
        {
            "test_inputs_FQN": "cn.hutool.json.IssueI7GPGXTest_toBeanTest_h9Test7",
            "input_pairs_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"\", true);\nString jsonString = \"{\\\"key\\\":\\\"\" + hutoolPair.getValue0() + \"\\\",\\\"value\\\":\" + hutoolPair.getValue1() + \"}\";\nTypeReference<Pair<String, Boolean>> typeReference = new TypeReference<Pair<String, Boolean>>() {\n};\nboolean ignoreError = false;",
            "Sinput_code_block": "Pair<String, Boolean> hutoolPair = new Pair<>(\"\", true);"
        }
    ],
    "io.bootique.di.KeyTest.equals()": [
        {
            "test_inputs_FQN": "io.bootique.di.KeyTest_equals_h0Test0",
            "input_pairs_code_block": "Class<?> type1 = Integer.class;\nClass<?> type2 = Integer.class;",
            "Sinput_code_block": "Class<?> type1 = Integer.class;"
        },
        {
            "test_inputs_FQN": "io.bootique.di.KeyTest_equals_h0Test2",
            "input_pairs_code_block": "Class<?> type1 = Double.class;\nClass<?> type2 = Double.class;",
            "Sinput_code_block": "Class<?> type1 = Double.class;"
        },
        {
            "test_inputs_FQN": "io.bootique.di.KeyTest_equals_h0Test6",
            "input_pairs_code_block": "Class<?> type1 = Short.class;\nClass<?> type2 = Short.class;",
            "Sinput_code_block": "Class<?> type1 = Short.class;"
        },
        {
            "test_inputs_FQN": "io.bootique.di.KeyTest_equals_h0Test8",
            "input_pairs_code_block": "Class<?> type1 = Byte.class;\nClass<?> type2 = Byte.class;",
            "Sinput_code_block": "Class<?> type1 = Byte.class;"
        },
        {
            "test_inputs_FQN": "io.bootique.di.KeyTest_equals_h2Test4",
            "input_pairs_code_block": "Class<?> type1 = Boolean.class;\nClass<?> type2 = Boolean.class;",
            "Sinput_code_block": "Class<?> type1 = Boolean.class;"
        }
    ],
    "org.quartz.impl.RemoteMBeanSchedulerTest.testJobOperations()": [
        {
            "test_inputs_FQN": "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h0Test0",
            "input_pairs_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().withDescription(\"A durable job\").build();\nJobKey job22 = new JobKey(\"job2\", GROUP_KEY);",
            "Sinput_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().withDescription(\"A durable job\").build();"
        },
        {
            "test_inputs_FQN": "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h3Test2",
            "input_pairs_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably(true).build();\nJobKey job22 = new JobKey(\"job2\", GROUP_KEY);",
            "Sinput_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably(true).build();"
        },
        {
            "test_inputs_FQN": "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h7Test1",
            "input_pairs_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().build();\nJobKey job22 = job2Detail.getKey();",
            "Sinput_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().build();"
        },
        {
            "test_inputs_FQN": "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h7Test4",
            "input_pairs_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().withDescription(\"This is a durable job\").build();\nJobKey job22 = new JobKey(\"job2\", GROUP_KEY);",
            "Sinput_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().withDescription(\"This is a durable job\").build();"
        },
        {
            "test_inputs_FQN": "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h7Test5",
            "input_pairs_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().withDescription(\"This is a durable job\").build();\nJobKey job22 = job2Detail.getKey();",
            "Sinput_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().withDescription(\"This is a durable job\").build();"
        },
        {
            "test_inputs_FQN": "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h8Test0",
            "input_pairs_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).build();\nJobKey job22 = new JobKey(\"job2\", GROUP_KEY);",
            "Sinput_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).build();"
        },
        {
            "test_inputs_FQN": "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h8Test1",
            "input_pairs_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).build();\nJobKey job22 = job2Detail.getKey();",
            "Sinput_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).build();"
        },
        {
            "test_inputs_FQN": "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h8Test3",
            "input_pairs_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably(false).build();\nJobKey job22 = job2Detail.getKey();",
            "Sinput_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably(false).build();"
        },
        {
            "test_inputs_FQN": "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h8Test4",
            "input_pairs_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().requestRecovery().build();\nJobKey job22 = new JobKey(\"job2\", GROUP_KEY);",
            "Sinput_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().requestRecovery().build();"
        },
        {
            "test_inputs_FQN": "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h8Test5",
            "input_pairs_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().requestRecovery().build();\nJobKey job22 = job2Detail.getKey();",
            "Sinput_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().requestRecovery().build();"
        },
        {
            "test_inputs_FQN": "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h8Test6",
            "input_pairs_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().requestRecovery(false).build();\nJobKey job22 = new JobKey(\"job2\", GROUP_KEY);",
            "Sinput_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().requestRecovery(false).build();"
        },
        {
            "test_inputs_FQN": "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h8Test7",
            "input_pairs_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().requestRecovery(false).build();\nJobKey job22 = job2Detail.getKey();",
            "Sinput_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).storeDurably().requestRecovery(false).build();"
        },
        {
            "test_inputs_FQN": "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h8Test8",
            "input_pairs_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).withDescription(\"New job description\").storeDurably().build();\nJobKey job22 = new JobKey(\"job2\", GROUP_KEY);",
            "Sinput_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).withDescription(\"New job description\").storeDurably().build();"
        },
        {
            "test_inputs_FQN": "org.quartz.impl.RemoteMBeanSchedulerTest_testJobOperations_h8Test9",
            "input_pairs_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).withDescription(\"New job description\").storeDurably().build();\nJobKey job22 = job2Detail.getKey();",
            "Sinput_code_block": "JobDetail job2Detail = newJob(HelloJob.class).withIdentity(new JobKey(\"job2\", GROUP_KEY)).withDescription(\"New job description\").storeDurably().build();"
        }
    ],
    "org.jsoup.parser.StreamParserTest.select()": [
        {
            "test_inputs_FQN": "org.jsoup.parser.StreamParserTest_select_h0Test0",
            "input_pairs_code_block": "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");\nString queryTitle = \"p\";\nString queryTitle2 = \"p\";",
            "Sinput_code_block": "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");\nString queryTitle = \"p\";"
        },
        {
            "test_inputs_FQN": "org.jsoup.parser.StreamParserTest_select_h0Test4",
            "input_pairs_code_block": "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");\nString queryTitle = \"title, p\";\nString queryTitle2 = \"title, p\";",
            "Sinput_code_block": "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");\nString queryTitle = \"title, p\";"
        },
        {
            "test_inputs_FQN": "org.jsoup.parser.StreamParserTest_select_h5Test2",
            "input_pairs_code_block": "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");\nString queryTitle = \"p#1\";\nString queryTitle2 = \"p#1\";",
            "Sinput_code_block": "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");\nString queryTitle = \"p#1\";"
        },
        {
            "test_inputs_FQN": "org.jsoup.parser.StreamParserTest_select_h5Test3",
            "input_pairs_code_block": "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");\nString queryTitle = \"p#3\";\nString queryTitle2 = \"p#3\";",
            "Sinput_code_block": "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");\nString queryTitle = \"p#3\";"
        },
        {
            "test_inputs_FQN": "org.jsoup.parser.StreamParserTest_select_h5Test4",
            "input_pairs_code_block": "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");\nString queryTitle = \"p#2\";\nString queryTitle2 = \"p#2\";",
            "Sinput_code_block": "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");\nString queryTitle = \"p#2\";"
        },
        {
            "test_inputs_FQN": "org.jsoup.parser.StreamParserTest_select_h7Test4",
            "input_pairs_code_block": "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");\nString queryTitle = \"nonexistent\";\nString queryTitle2 = \"nonexistent\";",
            "Sinput_code_block": "StreamParser parser = new StreamParser(Parser.htmlParser()).parse(\"<title>One</title><p id=1>P One</p><p id=2>P Two</p>\", \"\");\nString queryTitle = \"nonexistent\";"
        }
    ],
    "com.vladmihalcea.hpjp.util.CryptoUtilsTest.testPerformance()": [
        {
            "test_inputs_FQN": "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h0Test0",
            "input_pairs_code_block": "Long value = 0L;\nString message = encrypt(value);\nClass<?> clazz = Long.class;",
            "Sinput_code_block": "Long value = 0L;"
        },
        {
            "test_inputs_FQN": "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h0Test1",
            "input_pairs_code_block": "Long value = Long.MAX_VALUE;\nString message = encrypt(value);\nClass<?> clazz = Long.class;",
            "Sinput_code_block": "Long value = Long.MAX_VALUE;"
        },
        {
            "test_inputs_FQN": "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h0Test2",
            "input_pairs_code_block": "Long value = -1L;\nString message = encrypt(value);\nClass<?> clazz = Long.class;",
            "Sinput_code_block": "Long value = -1L;"
        },
        {
            "test_inputs_FQN": "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h0Test3",
            "input_pairs_code_block": "Long value = 100_000L;\nString message = encrypt(value);\nClass<?> clazz = Long.class;",
            "Sinput_code_block": "Long value = 100_000L;"
        },
        {
            "test_inputs_FQN": "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h0Test4",
            "input_pairs_code_block": "Long value = null;\nString message = encrypt(value);\nClass<?> clazz = Long.class;",
            "Sinput_code_block": "Long value = null;"
        },
        {
            "test_inputs_FQN": "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h2Test2",
            "input_pairs_code_block": "Long value = Long.MIN_VALUE;\nString message = encrypt(value);\nClass<?> clazz = Long.class;",
            "Sinput_code_block": "Long value = Long.MIN_VALUE;"
        },
        {
            "test_inputs_FQN": "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h2Test4",
            "input_pairs_code_block": "Long value = 100L;\nString message = encrypt(value);\nClass<?> clazz = Long.class;",
            "Sinput_code_block": "Long value = 100L;"
        },
        {
            "test_inputs_FQN": "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h3Test1",
            "input_pairs_code_block": "Long value = 99999L;\nString message = encrypt(value);\nClass<?> clazz = Long.class;",
            "Sinput_code_block": "Long value = 99999L;"
        },
        {
            "test_inputs_FQN": "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformance_h5Test4",
            "input_pairs_code_block": "Long value = 100001L;\nString message = encrypt(value);\nClass<?> clazz = Long.class;",
            "Sinput_code_block": "Long value = 100001L;"
        }
    ],
    "org.matsim.core.config.groups.ScoringConfigGroupTest.testAddActivityParams()": [
        {
            "test_inputs_FQN": "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h0Test0",
            "input_pairs_code_block": "ActivityParams ap = new ActivityParams(\"\");\nString type = \"\";",
            "Sinput_code_block": "ActivityParams ap = new ActivityParams(\"\");"
        },
        {
            "test_inputs_FQN": "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h0Test1",
            "input_pairs_code_block": "ActivityParams ap = new ActivityParams(null);\nString type = null;",
            "Sinput_code_block": "ActivityParams ap = new ActivityParams(null);"
        },
        {
            "test_inputs_FQN": "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h0Test2",
            "input_pairs_code_block": "ActivityParams ap = new ActivityParams(\"1234567890\");\nString type = \"1234567890\";",
            "Sinput_code_block": "ActivityParams ap = new ActivityParams(\"1234567890\");"
        },
        {
            "test_inputs_FQN": "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h0Test3",
            "input_pairs_code_block": "ActivityParams ap = new ActivityParams(\"a\".repeat(1000));\nString type = \"a\".repeat(1000);",
            "Sinput_code_block": "ActivityParams ap = new ActivityParams(\"a\".repeat(1000));"
        },
        {
            "test_inputs_FQN": "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h5Test0",
            "input_pairs_code_block": "ActivityParams ap = new ActivityParams(\"transit\");\nString type = \"transit\";",
            "Sinput_code_block": "ActivityParams ap = new ActivityParams(\"transit\");"
        },
        {
            "test_inputs_FQN": "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h5Test2",
            "input_pairs_code_block": "ActivityParams ap = new ActivityParams(\"walk\");\nString type = \"walk\";",
            "Sinput_code_block": "ActivityParams ap = new ActivityParams(\"walk\");"
        },
        {
            "test_inputs_FQN": "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h5Test4",
            "input_pairs_code_block": "ActivityParams ap = new ActivityParams(\"bike\");\nString type = \"bike\";",
            "Sinput_code_block": "ActivityParams ap = new ActivityParams(\"bike\");"
        },
        {
            "test_inputs_FQN": "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h5Test6",
            "input_pairs_code_block": "ActivityParams ap = new ActivityParams(\"drive\");\nString type = \"drive\";",
            "Sinput_code_block": "ActivityParams ap = new ActivityParams(\"drive\");"
        },
        {
            "test_inputs_FQN": "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h5Test8",
            "input_pairs_code_block": "ActivityParams ap = new ActivityParams(\"unknown\");\nString type = \"unknown\";",
            "Sinput_code_block": "ActivityParams ap = new ActivityParams(\"unknown\");"
        },
        {
            "test_inputs_FQN": "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h6Test0",
            "input_pairs_code_block": "ActivityParams ap = new ActivityParams(\"work\");\nString type = \"work\";",
            "Sinput_code_block": "ActivityParams ap = new ActivityParams(\"work\");"
        },
        {
            "test_inputs_FQN": "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h6Test2",
            "input_pairs_code_block": "ActivityParams ap = new ActivityParams(\"education\");\nString type = \"education\";",
            "Sinput_code_block": "ActivityParams ap = new ActivityParams(\"education\");"
        },
        {
            "test_inputs_FQN": "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h6Test4",
            "input_pairs_code_block": "ActivityParams ap = new ActivityParams(\"leisure\");\nString type = \"leisure\";",
            "Sinput_code_block": "ActivityParams ap = new ActivityParams(\"leisure\");"
        },
        {
            "test_inputs_FQN": "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h6Test6",
            "input_pairs_code_block": "ActivityParams ap = new ActivityParams(\"shopping\");\nString type = \"shopping\";",
            "Sinput_code_block": "ActivityParams ap = new ActivityParams(\"shopping\");"
        },
        {
            "test_inputs_FQN": "org.matsim.core.config.groups.ScoringConfigGroupTest_testAddActivityParams_h9Test0",
            "input_pairs_code_block": "ActivityParams ap = new ActivityParams(\"type2\");\nString type = \"type2\";",
            "Sinput_code_block": "ActivityParams ap = new ActivityParams(\"type2\");"
        }
    ],
    "org.apache.paimon.spark.ConvertBinaryUtilTest.testConvertToLong()": [
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h0Test0",
            "input_pairs_code_block": "String randomString = \"0\";\nbyte[] randomStringBytes = { 48 };",
            "Sinput_code_block": "String randomString = \"0\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h0Test1",
            "input_pairs_code_block": "String randomString = \"9223372036854775807\";\nbyte[] randomStringBytes = { -1, -1, -1, -1, -1, -1, -1, -1 };",
            "Sinput_code_block": "String randomString = \"9223372036854775807\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h0Test2",
            "input_pairs_code_block": "String randomString = \"-9223372036854775808\";\nbyte[] randomStringBytes = { -128, -128, -128, -128, -128, -128, -128, -128 };",
            "Sinput_code_block": "String randomString = \"-9223372036854775808\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h0Test3",
            "input_pairs_code_block": "String randomString = \"1234567890\";\nbyte[] randomStringBytes = { 49, 50, 51, 52, 53, 54, 55, 56, 57, 48 };",
            "Sinput_code_block": "String randomString = \"1234567890\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h0Test4",
            "input_pairs_code_block": "String randomString = \"a\";\nbyte[] randomStringBytes = { 97 };",
            "Sinput_code_block": "String randomString = \"a\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h2Test2",
            "input_pairs_code_block": "String randomString = \"-9223372036854775808\";\nbyte[] randomStringBytes = { 0, 0, 0, 0, 0, 0, 0, -128 };",
            "Sinput_code_block": "String randomString = \"-9223372036854775808\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h2Test4",
            "input_pairs_code_block": "String randomString = \"abc123\";\nbyte[] randomStringBytes = { 97, 98, 99, 49, 50, 51 };",
            "Sinput_code_block": "String randomString = \"abc123\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h4Test3",
            "input_pairs_code_block": "String randomString = \"12345678901234567890\";\nbyte[] randomStringBytes = { 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48 };",
            "Sinput_code_block": "String randomString = \"12345678901234567890\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h4Test4",
            "input_pairs_code_block": "String randomString = \"randomString1234567890\";\nbyte[] randomStringBytes = { 114, 97, 110, 100, 111, 109, 83, 116, 114, 105, 110, 103, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48 };",
            "Sinput_code_block": "String randomString = \"randomString1234567890\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h5Test1",
            "input_pairs_code_block": "String randomString = \"1234567890\";\nbyte[] randomStringBytes = randomString.getBytes(StandardCharsets.UTF_8);",
            "Sinput_code_block": "String randomString = \"1234567890\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h5Test2",
            "input_pairs_code_block": "String randomString = \"abcdefgh\";\nbyte[] randomStringBytes = { 97, 98, 99, 100, 101, 102, 103, 104 };",
            "Sinput_code_block": "String randomString = \"abcdefgh\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h5Test3",
            "input_pairs_code_block": "String randomString = \"abcdefgh\";\nbyte[] randomStringBytes = randomString.getBytes(StandardCharsets.UTF_8);",
            "Sinput_code_block": "String randomString = \"abcdefgh\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h5Test4",
            "input_pairs_code_block": "String randomString = \"1234567890abcdefgh\";\nbyte[] randomStringBytes = { 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 97, 98, 99, 100, 101, 102, 103, 104 };",
            "Sinput_code_block": "String randomString = \"1234567890abcdefgh\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h5Test5",
            "input_pairs_code_block": "String randomString = \"1234567890abcdefgh\";\nbyte[] randomStringBytes = randomString.getBytes(StandardCharsets.UTF_8);",
            "Sinput_code_block": "String randomString = \"1234567890abcdefgh\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h5Test6",
            "input_pairs_code_block": "String randomString = \"1234567890abcdefgh1234567890\";\nbyte[] randomStringBytes = { 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 97, 98, 99, 100, 101, 102, 103, 104, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48 };",
            "Sinput_code_block": "String randomString = \"1234567890abcdefgh1234567890\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h5Test7",
            "input_pairs_code_block": "String randomString = \"1234567890abcdefgh1234567890\";\nbyte[] randomStringBytes = randomString.getBytes(StandardCharsets.UTF_8);",
            "Sinput_code_block": "String randomString = \"1234567890abcdefgh1234567890\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h5Test8",
            "input_pairs_code_block": "String randomString = \"1234567890abcdefgh1234567890abcdefgh\";\nbyte[] randomStringBytes = { 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 97, 98, 99, 100, 101, 102, 103, 104, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 97, 98, 99, 100, 101, 102, 103, 104 };",
            "Sinput_code_block": "String randomString = \"1234567890abcdefgh1234567890abcdefgh\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h5Test9",
            "input_pairs_code_block": "String randomString = \"1234567890abcdefgh1234567890abcdefgh\";\nbyte[] randomStringBytes = randomString.getBytes(StandardCharsets.UTF_8);",
            "Sinput_code_block": "String randomString = \"1234567890abcdefgh1234567890abcdefgh\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h7Test3",
            "input_pairs_code_block": "String randomString = \"ABCDEFGH\";\nbyte[] randomStringBytes = { 65, 66, 67, 68, 69, 70, 71, 72 };",
            "Sinput_code_block": "String randomString = \"ABCDEFGH\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h7Test4",
            "input_pairs_code_block": "String randomString = \"123abc\";\nbyte[] randomStringBytes = { 49, 50, 51, 97, 98, 99 };",
            "Sinput_code_block": "String randomString = \"123abc\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h7Test5",
            "input_pairs_code_block": "String randomString = \"!@#$%^&*()\";\nbyte[] randomStringBytes = { 33, 64, 35, 36, 37, 94, 38, 42, 40, 41 };",
            "Sinput_code_block": "String randomString = \"!@#$%^&*()\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h8Test1",
            "input_pairs_code_block": "String randomString = \"12345678901234567890\";\nbyte[] randomStringBytes = utf8To8Byte(randomString);",
            "Sinput_code_block": "String randomString = \"12345678901234567890\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h8Test2",
            "input_pairs_code_block": "String randomString = \"9223372036854775807\";\nbyte[] randomStringBytes = { 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48 };",
            "Sinput_code_block": "String randomString = \"9223372036854775807\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h8Test3",
            "input_pairs_code_block": "String randomString = \"9223372036854775807\";\nbyte[] randomStringBytes = utf8To8Byte(randomString);",
            "Sinput_code_block": "String randomString = \"9223372036854775807\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h8Test4",
            "input_pairs_code_block": "String randomString = \"-9223372036854775808\";\nbyte[] randomStringBytes = { 49, 50, 51, 52, 53, 54, 55, 56, 57, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 48 };",
            "Sinput_code_block": "String randomString = \"-9223372036854775808\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h8Test5",
            "input_pairs_code_block": "String randomString = \"-9223372036854775808\";\nbyte[] randomStringBytes = utf8To8Byte(randomString);",
            "Sinput_code_block": "String randomString = \"-9223372036854775808\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h8Test7",
            "input_pairs_code_block": "String randomString = \"0\";\nbyte[] randomStringBytes = utf8To8Byte(randomString);",
            "Sinput_code_block": "String randomString = \"0\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h8Test8",
            "input_pairs_code_block": "String randomString = \"abcdefghijklmnopqrstuvwxyz\";\nbyte[] randomStringBytes = { 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122 };",
            "Sinput_code_block": "String randomString = \"abcdefghijklmnopqrstuvwxyz\";"
        },
        {
            "test_inputs_FQN": "org.apache.paimon.spark.ConvertBinaryUtilTest_testConvertToLong_h8Test9",
            "input_pairs_code_block": "String randomString = \"abcdefghijklmnopqrstuvwxyz\";\nbyte[] randomStringBytes = utf8To8Byte(randomString);",
            "Sinput_code_block": "String randomString = \"abcdefghijklmnopqrstuvwxyz\";"
        }
    ],
    "org.mitre.synthea.engine.ExpressedSymptomTest.testExpressedSymtpom()": [
        {
            "test_inputs_FQN": "org.mitre.synthea.engine.ExpressedSymptomTest_testExpressedSymtpom_h0Test0",
            "input_pairs_code_block": "String name = \"fever\";\nExpressedSymptom symptom = new ExpressedSymptom(name);\nString module = \"testModule\";\nsymptom.addressSource(module);\nExpressedSymptom symptom2 = symptom;\nString module2 = \"testModule\";\nsymptom2.addressSource(module2);",
            "Sinput_code_block": "String name = \"fever\";\nExpressedSymptom symptom = new ExpressedSymptom(name);\nString module = \"testModule\";\nsymptom.addressSource(module);"
        }
    ],
    "org.apache.sysds.test.component.compress.util.ArrayListTest.extract()": [
        {
            "test_inputs_FQN": "org.apache.sysds.test.component.compress.util.ArrayListTest_extract_h0Test1",
            "input_pairs_code_block": "IntArrayList a = new IntArrayList();\nboolean trimFlag = false;\nboolean trimFlag2 = false;",
            "Sinput_code_block": "IntArrayList a = new IntArrayList();\nboolean trimFlag = false;"
        }
    ],
    "io.arex.inst.runtime.model.SerializeSkipInfoTest.testToString()": [
        {
            "test_inputs_FQN": "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h0Test0",
            "input_pairs_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"\");\nserializeSkipInfo.setFullClassName(\"testFullClassName\");\nSerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();\nserializeSkipInfo2.setFieldName(\"\");\nserializeSkipInfo2.setFullClassName(\"testFullClassName\");",
            "Sinput_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"\");\nserializeSkipInfo.setFullClassName(\"testFullClassName\");"
        },
        {
            "test_inputs_FQN": "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h0Test1",
            "input_pairs_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(\"\");\nSerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();\nserializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo2.setFullClassName(\"\");",
            "Sinput_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(\"\");"
        },
        {
            "test_inputs_FQN": "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h4Test2",
            "input_pairs_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(null);\nserializeSkipInfo.setFullClassName(\"testFullClassName\");\nSerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();\nserializeSkipInfo2.setFieldName(null);\nserializeSkipInfo2.setFullClassName(\"testFullClassName\");",
            "Sinput_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(null);\nserializeSkipInfo.setFullClassName(\"testFullClassName\");"
        },
        {
            "test_inputs_FQN": "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h4Test3",
            "input_pairs_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(null);\nSerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();\nserializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo2.setFullClassName(null);",
            "Sinput_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(null);"
        },
        {
            "test_inputs_FQN": "io.arex.inst.runtime.model.SerializeSkipInfoTest_testToString_h4Test4",
            "input_pairs_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(\"testFullClassName,testFullClassName2\");\nSerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();\nserializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo2.setFullClassName(\"testFullClassName,testFullClassName2\");",
            "Sinput_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(\"testFullClassName,testFullClassName2\");"
        }
    ],
    "org.ethereum.rpc.FilterTest.testGetEventsInternal()": [
        {
            "test_inputs_FQN": "org.ethereum.rpc.FilterTest_testGetEventsInternal_h0Test0",
            "input_pairs_code_block": "Filter filter = new Filter();\nfilter.add(mockEvent1);\nfilter.add(mockEvent2);\nfilter.add(new FilterEventMock());\nFilter filter2 = new Filter();\nfilter2.add(mockEvent1);\nfilter2.add(mockEvent2);\nfilter2.add(new FilterEventMock());",
            "Sinput_code_block": "Filter filter = new Filter();\nfilter.add(mockEvent1);\nfilter.add(mockEvent2);\nfilter.add(new FilterEventMock());"
        },
        {
            "test_inputs_FQN": "org.ethereum.rpc.FilterTest_testGetEventsInternal_h0Test2",
            "input_pairs_code_block": "Filter filter = new Filter();\nfilter.add(mockEvent1);\nfilter.add(mockEvent2);\nfilter.add(mockEvent1);\nFilter filter2 = new Filter();\nfilter2.add(mockEvent1);\nfilter2.add(mockEvent2);\nfilter2.add(mockEvent1);",
            "Sinput_code_block": "Filter filter = new Filter();\nfilter.add(mockEvent1);\nfilter.add(mockEvent2);\nfilter.add(mockEvent1);"
        },
        {
            "test_inputs_FQN": "org.ethereum.rpc.FilterTest_testGetEventsInternal_h0Test4",
            "input_pairs_code_block": "Filter filter = new Filter();\nfilter.add(mockEvent1);\nfilter.add(mockEvent2);\nfilter.add(mockEvent1);\nfilter.add(new FilterEventMock());\nFilter filter2 = new Filter();\nfilter2.add(mockEvent1);\nfilter2.add(mockEvent2);\nfilter2.add(mockEvent1);\nfilter2.add(new FilterEventMock());",
            "Sinput_code_block": "Filter filter = new Filter();\nfilter.add(mockEvent1);\nfilter.add(mockEvent2);\nfilter.add(mockEvent1);\nfilter.add(new FilterEventMock());"
        },
        {
            "test_inputs_FQN": "org.ethereum.rpc.FilterTest_testGetEventsInternal_h2Test1",
            "input_pairs_code_block": "Filter filter = new Filter();\nfilter.add(mockEvent2);\nFilter filter2 = new Filter();\nfilter2.add(mockEvent2);",
            "Sinput_code_block": "Filter filter = new Filter();\nfilter.add(mockEvent2);"
        },
        {
            "test_inputs_FQN": "org.ethereum.rpc.FilterTest_testGetEventsInternal_h2Test3",
            "input_pairs_code_block": "Filter filter = new Filter();\nfilter.add(mockEvent1);\nfilter.add(mockEvent2);\nfilter.add(mockEvent1);\nfilter.add(mockEvent2);\nFilter filter2 = new Filter();\nfilter2.add(mockEvent1);\nfilter2.add(mockEvent2);\nfilter2.add(mockEvent1);\nfilter2.add(mockEvent2);",
            "Sinput_code_block": "Filter filter = new Filter();\nfilter.add(mockEvent1);\nfilter.add(mockEvent2);\nfilter.add(mockEvent1);\nfilter.add(mockEvent2);"
        },
        {
            "test_inputs_FQN": "org.ethereum.rpc.FilterTest_testGetEventsInternal_h5Test3",
            "input_pairs_code_block": "Filter filter = new Filter();\nfilter.add(mockEvent1);\nfilter.add(mockEvent1);\nFilter filter2 = new Filter();\nfilter2.add(mockEvent1);\nfilter2.add(mockEvent1);",
            "Sinput_code_block": "Filter filter = new Filter();\nfilter.add(mockEvent1);\nfilter.add(mockEvent1);"
        },
        {
            "test_inputs_FQN": "org.ethereum.rpc.FilterTest_testGetEventsInternal_h5Test4",
            "input_pairs_code_block": "Filter filter = new Filter();\nfilter.add(mockEvent2);\nfilter.add(mockEvent2);\nFilter filter2 = new Filter();\nfilter2.add(mockEvent2);\nfilter2.add(mockEvent2);",
            "Sinput_code_block": "Filter filter = new Filter();\nfilter.add(mockEvent2);\nfilter.add(mockEvent2);"
        },
        {
            "test_inputs_FQN": "org.ethereum.rpc.FilterTest_testGetEventsInternal_h6Test3",
            "input_pairs_code_block": "Filter filter = new Filter();\nfilter.add(mockEvent1);\nfilter.add(mockEvent2);\nfilter.add(mockEvent2);\nFilter filter2 = new Filter();\nfilter2.add(mockEvent1);\nfilter2.add(mockEvent2);\nfilter2.add(mockEvent2);",
            "Sinput_code_block": "Filter filter = new Filter();\nfilter.add(mockEvent1);\nfilter.add(mockEvent2);\nfilter.add(mockEvent2);"
        }
    ],
    "org.threeten.extra.TestYearHalf.test_with_TemporalAdjuster_Year()": [
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h0Test0",
            "input_pairs_code_block": "int year1 = 2100;\nint half1 = 1;\nint year2 = 2100;\nint year3 = 2100;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2100;\nint half1 = 1;\nint year2 = 2100;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h0Test1",
            "input_pairs_code_block": "int year1 = 1900;\nint half1 = 2;\nint year2 = 1900;\nint year3 = 1900;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 1900;\nint half1 = 2;\nint year2 = 1900;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h0Test2",
            "input_pairs_code_block": "int year1 = 2000;\nint half1 = 1;\nint year2 = 2000;\nint year3 = 2000;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2000;\nint half1 = 1;\nint year2 = 2000;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h0Test3",
            "input_pairs_code_block": "int year1 = 1800;\nint half1 = 2;\nint year2 = 1800;\nint year3 = 1800;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 1800;\nint half1 = 2;\nint year2 = 1800;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h0Test4",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2020;\nint year3 = 2020;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2020;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h2Test2",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 2;\nint year2 = 2020;\nint year3 = 2020;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 2;\nint year2 = 2020;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h2Test3",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 2;\nint year2 = year1;\nint year3 = year1;\nint half3 = half1;",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 2;\nint year2 = year1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h2Test5",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = year1;\nint year3 = year1;\nint half3 = half1;",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = year1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h2Test6",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 2;\nint year2 = 2021;\nint year3 = 2021;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 2;\nint year2 = 2021;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h2Test7",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 2;\nint year2 = year1 + 1;\nint year3 = year2;\nint half3 = half1;",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 2;\nint year2 = year1 + 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h2Test8",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2022;\nint year3 = 2022;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2022;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h2Test9",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = year1 + 2;\nint year3 = year2;\nint half3 = half1;",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = year1 + 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test0",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2024;\nint year3 = 2024;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2024;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test1",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2024;\nint year3 = YearHalf.of(year1, half1).with(Year.of(year2)).getYear();\nint half3 = YearHalf.of(year1, half1).with(Year.of(year2)).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2024;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test2",
            "input_pairs_code_block": "int year1 = 1900;\nint half1 = 2;\nint year2 = 1904;\nint year3 = 1904;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 1900;\nint half1 = 2;\nint year2 = 1904;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test3",
            "input_pairs_code_block": "int year1 = 1900;\nint half1 = 2;\nint year2 = 1904;\nint year3 = YearHalf.of(year1, half1).with(Year.of(year2)).getYear();\nint half3 = YearHalf.of(year1, half1).with(Year.of(year2)).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 1900;\nint half1 = 2;\nint year2 = 1904;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test4",
            "input_pairs_code_block": "int year1 = 2000;\nint half1 = 1;\nint year2 = 2004;\nint year3 = 2004;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2000;\nint half1 = 1;\nint year2 = 2004;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test5",
            "input_pairs_code_block": "int year1 = 2000;\nint half1 = 1;\nint year2 = 2004;\nint year3 = YearHalf.of(year1, half1).with(Year.of(year2)).getYear();\nint half3 = YearHalf.of(year1, half1).with(Year.of(year2)).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2000;\nint half1 = 1;\nint year2 = 2004;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test6",
            "input_pairs_code_block": "int year1 = 2100;\nint half1 = 2;\nint year2 = 2104;\nint year3 = 2104;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 2100;\nint half1 = 2;\nint year2 = 2104;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test7",
            "input_pairs_code_block": "int year1 = 2100;\nint half1 = 2;\nint year2 = 2104;\nint year3 = YearHalf.of(year1, half1).with(Year.of(year2)).getYear();\nint half3 = YearHalf.of(year1, half1).with(Year.of(year2)).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2100;\nint half1 = 2;\nint year2 = 2104;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test8",
            "input_pairs_code_block": "int year1 = 1800;\nint half1 = 1;\nint year2 = 1804;\nint year3 = 1804;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 1800;\nint half1 = 1;\nint year2 = 1804;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h3Test9",
            "input_pairs_code_block": "int year1 = 1800;\nint half1 = 1;\nint year2 = 1804;\nint year3 = YearHalf.of(year1, half1).with(Year.of(year2)).getYear();\nint half3 = YearHalf.of(year1, half1).with(Year.of(year2)).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 1800;\nint half1 = 1;\nint year2 = 1804;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h4Test1",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2025;\nint year3 = YearHalf.of(year1, half1).with(Year.of(year2)).getYear();\nint half3 = YearHalf.of(year1, half1).with(Year.of(year2)).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2025;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h4Test2",
            "input_pairs_code_block": "int year1 = 1900;\nint half1 = 2;\nint year2 = 1905;\nint year3 = 1905;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 1900;\nint half1 = 2;\nint year2 = 1905;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h4Test3",
            "input_pairs_code_block": "int year1 = 1900;\nint half1 = 2;\nint year2 = 1905;\nint year3 = YearHalf.of(year1, half1).with(Year.of(year2)).getYear();\nint half3 = YearHalf.of(year1, half1).with(Year.of(year2)).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 1900;\nint half1 = 2;\nint year2 = 1905;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h4Test4",
            "input_pairs_code_block": "int year1 = 2100;\nint half1 = 1;\nint year2 = 2105;\nint year3 = 2105;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2100;\nint half1 = 1;\nint year2 = 2105;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h4Test5",
            "input_pairs_code_block": "int year1 = 2100;\nint half1 = 1;\nint year2 = 2105;\nint year3 = YearHalf.of(year1, half1).with(Year.of(year2)).getYear();\nint half3 = YearHalf.of(year1, half1).with(Year.of(year2)).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2100;\nint half1 = 1;\nint year2 = 2105;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h4Test6",
            "input_pairs_code_block": "int year1 = 2000;\nint half1 = 2;\nint year2 = 2005;\nint year3 = 2005;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 2000;\nint half1 = 2;\nint year2 = 2005;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h4Test7",
            "input_pairs_code_block": "int year1 = 2000;\nint half1 = 2;\nint year2 = 2005;\nint year3 = YearHalf.of(year1, half1).with(Year.of(year2)).getYear();\nint half3 = YearHalf.of(year1, half1).with(Year.of(year2)).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2000;\nint half1 = 2;\nint year2 = 2005;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h4Test8",
            "input_pairs_code_block": "int year1 = 1800;\nint half1 = 1;\nint year2 = 1805;\nint year3 = 1805;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 1800;\nint half1 = 1;\nint year2 = 1805;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h4Test9",
            "input_pairs_code_block": "int year1 = 1800;\nint half1 = 1;\nint year2 = 1805;\nint year3 = YearHalf.of(year1, half1).with(Year.of(year2)).getYear();\nint half3 = YearHalf.of(year1, half1).with(Year.of(year2)).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 1800;\nint half1 = 1;\nint year2 = 1805;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h5Test0",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2025;\nint year3 = 2020;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2025;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h5Test1",
            "input_pairs_code_block": "int year1 = 1900;\nint half1 = 2;\nint year2 = 2000;\nint year3 = 1900;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 1900;\nint half1 = 2;\nint year2 = 2000;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h5Test2",
            "input_pairs_code_block": "int year1 = 2100;\nint half1 = 1;\nint year2 = 2200;\nint year3 = 2100;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2100;\nint half1 = 1;\nint year2 = 2200;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h5Test3",
            "input_pairs_code_block": "int year1 = 1800;\nint half1 = 2;\nint year2 = 1900;\nint year3 = 1800;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 1800;\nint half1 = 2;\nint year2 = 1900;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h5Test4",
            "input_pairs_code_block": "int year1 = 3000;\nint half1 = 1;\nint year2 = 3050;\nint year3 = 3000;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 3000;\nint half1 = 1;\nint year2 = 3050;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h6Test0",
            "input_pairs_code_block": "int year1 = 0;\nint half1 = 1;\nint year2 = 1;\nint year3 = 1;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 0;\nint half1 = 1;\nint year2 = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h6Test1",
            "input_pairs_code_block": "int year1 = 0;\nint half1 = 1;\nint year2 = 1;\nint year3 = YearHalf.of(year1, half1).with(Year.of(year2)).getYear();\nint half3 = YearHalf.of(year1, half1).with(Year.of(year2)).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 0;\nint half1 = 1;\nint year2 = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h6Test2",
            "input_pairs_code_block": "int year1 = 9999;\nint half1 = 2;\nint year2 = 10000;\nint year3 = 10000;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 9999;\nint half1 = 2;\nint year2 = 10000;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h6Test3",
            "input_pairs_code_block": "int year1 = 9999;\nint half1 = 2;\nint year2 = 10000;\nint year3 = YearHalf.of(year1, half1).with(Year.of(year2)).getYear();\nint half3 = YearHalf.of(year1, half1).with(Year.of(year2)).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 9999;\nint half1 = 2;\nint year2 = 10000;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h6Test4",
            "input_pairs_code_block": "int year1 = 5000;\nint half1 = 1;\nint year2 = 5000;\nint year3 = 5000;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 5000;\nint half1 = 1;\nint year2 = 5000;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h6Test5",
            "input_pairs_code_block": "int year1 = 5000;\nint half1 = 1;\nint year2 = 5000;\nint year3 = YearHalf.of(year1, half1).with(Year.of(year2)).getYear();\nint half3 = YearHalf.of(year1, half1).with(Year.of(year2)).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 5000;\nint half1 = 1;\nint year2 = 5000;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h6Test6",
            "input_pairs_code_block": "int year1 = -1;\nint half1 = 2;\nint year2 = -2;\nint year3 = -2;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = -1;\nint half1 = 2;\nint year2 = -2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h6Test7",
            "input_pairs_code_block": "int year1 = -1;\nint half1 = 2;\nint year2 = -2;\nint year3 = YearHalf.of(year1, half1).with(Year.of(year2)).getYear();\nint half3 = YearHalf.of(year1, half1).with(Year.of(year2)).getHalf().getValue();",
            "Sinput_code_block": "int year1 = -1;\nint half1 = 2;\nint year2 = -2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h6Test8",
            "input_pairs_code_block": "int year1 = 3000;\nint half1 = 1;\nint year2 = 3001;\nint year3 = 3001;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 3000;\nint half1 = 1;\nint year2 = 3001;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h6Test9",
            "input_pairs_code_block": "int year1 = 3000;\nint half1 = 1;\nint year2 = 3001;\nint year3 = YearHalf.of(year1, half1).with(Year.of(year2)).getYear();\nint half3 = YearHalf.of(year1, half1).with(Year.of(year2)).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 3000;\nint half1 = 1;\nint year2 = 3001;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h7Test2",
            "input_pairs_code_block": "int year1 = 1990;\nint half1 = 2;\nint year2 = 1995;\nint year3 = 1995;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 1990;\nint half1 = 2;\nint year2 = 1995;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h7Test3",
            "input_pairs_code_block": "int year1 = 1990;\nint half1 = 2;\nint year2 = 1995;\nint year3 = year1;\nint half3 = half1;",
            "Sinput_code_block": "int year1 = 1990;\nint half1 = 2;\nint year2 = 1995;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h7Test4",
            "input_pairs_code_block": "int year1 = 2050;\nint half1 = 1;\nint year2 = 2055;\nint year3 = 2055;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2050;\nint half1 = 1;\nint year2 = 2055;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h7Test5",
            "input_pairs_code_block": "int year1 = 2050;\nint half1 = 1;\nint year2 = 2055;\nint year3 = year1;\nint half3 = half1;",
            "Sinput_code_block": "int year1 = 2050;\nint half1 = 1;\nint year2 = 2055;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h7Test6",
            "input_pairs_code_block": "int year1 = 2100;\nint half1 = 2;\nint year2 = 2105;\nint year3 = 2105;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 2100;\nint half1 = 2;\nint year2 = 2105;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h7Test7",
            "input_pairs_code_block": "int year1 = 2100;\nint half1 = 2;\nint year2 = 2105;\nint year3 = year1;\nint half3 = half1;",
            "Sinput_code_block": "int year1 = 2100;\nint half1 = 2;\nint year2 = 2105;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h7Test9",
            "input_pairs_code_block": "int year1 = 2000;\nint half1 = 1;\nint year2 = 2000;\nint year3 = year1;\nint half3 = half1;",
            "Sinput_code_block": "int year1 = 2000;\nint half1 = 1;\nint year2 = 2000;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h8Test3",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 2;\nint year2 = 2021;\nint year3 = year1;\nint half3 = half1;",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 2;\nint year2 = 2021;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h8Test5",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2022;\nint year3 = year1;\nint half3 = half1;",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2022;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h9Test1",
            "input_pairs_code_block": "int year1 = 2021;\nint half1 = 2;\nint year2 = 2021;\nint year3 = 2021;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 2021;\nint half1 = 2;\nint year2 = 2021;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h9Test2",
            "input_pairs_code_block": "int year1 = 1900;\nint half1 = 1;\nint year2 = 1900;\nint year3 = 1900;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 1900;\nint half1 = 1;\nint year2 = 1900;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h9Test3",
            "input_pairs_code_block": "int year1 = 2100;\nint half1 = 2;\nint year2 = 2100;\nint year3 = 2100;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 2100;\nint half1 = 2;\nint year2 = 2100;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_with_TemporalAdjuster_Year_h9Test4",
            "input_pairs_code_block": "int year1 = 9999;\nint half1 = 1;\nint year2 = 9999;\nint year3 = 9999;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 9999;\nint half1 = 1;\nint year2 = 9999;"
        }
    ],
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test7()": [
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h0Test0",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(0));\nv01.put(\"102\", BigInteger.valueOf(0));",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(0));\nv01.put(\"102\", BigInteger.valueOf(0));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h0Test2",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Long.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Long.MIN_VALUE));",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Long.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Long.MIN_VALUE));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h0Test3",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(-1));\nv01.put(\"102\", BigInteger.valueOf(1));",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(-1));\nv01.put(\"102\", BigInteger.valueOf(1));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h0Test4",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Integer.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Integer.MIN_VALUE));",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Integer.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Integer.MIN_VALUE));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h0Test5",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(999999999999999999L));\nv01.put(\"102\", BigInteger.valueOf(1000000000000000000L));",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(999999999999999999L));\nv01.put(\"102\", BigInteger.valueOf(1000000000000000000L));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h2Test3",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Long.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Long.MAX_VALUE));",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Long.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Long.MAX_VALUE));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h2Test4",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Long.MIN_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Long.MIN_VALUE));",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Long.MIN_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Long.MIN_VALUE));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h2Test5",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Long.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Long.MIN_VALUE));\nv01.put(\"103\", BigInteger.valueOf(0));",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Long.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Long.MIN_VALUE));\nv01.put(\"103\", BigInteger.valueOf(0));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h3Test0",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"103\", BigInteger.valueOf(103));",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"103\", BigInteger.valueOf(103));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h3Test3",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"101\", BigInteger.valueOf(104));",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"101\", BigInteger.valueOf(104));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h3Test4",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"101\", BigInteger.valueOf(104));\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"101\", BigInteger.valueOf(104));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h3Test5",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"103\", BigInteger.valueOf(103));\nv01.put(\"104\", BigInteger.valueOf(104));",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"103\", BigInteger.valueOf(103));\nv01.put(\"104\", BigInteger.valueOf(104));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h3Test7",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"103\", BigInteger.valueOf(103));\nv01.put(\"101\", BigInteger.valueOf(104));\nv01.put(\"104\", BigInteger.valueOf(105));",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"103\", BigInteger.valueOf(103));\nv01.put(\"101\", BigInteger.valueOf(104));\nv01.put(\"104\", BigInteger.valueOf(105));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h3Test8",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"103\", BigInteger.valueOf(103));\nv01.put(\"101\", BigInteger.valueOf(104));\nv01.put(\"104\", BigInteger.valueOf(105));\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"103\", BigInteger.valueOf(103));\nv01.put(\"101\", BigInteger.valueOf(104));\nv01.put(\"104\", BigInteger.valueOf(105));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h3Test9",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"103\", BigInteger.valueOf(103));\nv01.put(\"104\", BigInteger.valueOf(104));\nv01.put(\"105\", BigInteger.valueOf(105));",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"103\", BigInteger.valueOf(103));\nv01.put(\"104\", BigInteger.valueOf(104));\nv01.put(\"105\", BigInteger.valueOf(105));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h4Test0",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(0));\nv01.put(\"102\", BigInteger.valueOf(0));\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(0));\nv01.put(\"102\", BigInteger.valueOf(0));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h4Test1",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Long.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Long.MIN_VALUE));\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Long.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Long.MIN_VALUE));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h4Test2",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Integer.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Integer.MIN_VALUE));\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Integer.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Integer.MIN_VALUE));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h4Test3",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Short.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Short.MIN_VALUE));\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Short.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Short.MIN_VALUE));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h4Test4",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Byte.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Byte.MIN_VALUE));\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Byte.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Byte.MIN_VALUE));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h5Test0",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(0));\nv01.put(\"102\", BigInteger.valueOf(0));\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, BigInteger>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(0));\nv01.put(\"102\", BigInteger.valueOf(0));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h5Test1",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Long.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Long.MIN_VALUE));\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, BigInteger>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Long.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Long.MIN_VALUE));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h5Test2",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(1));\nv01.put(\"102\", BigInteger.valueOf(-1));\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, BigInteger>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(1));\nv01.put(\"102\", BigInteger.valueOf(-1));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h5Test3",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(100));\nv01.put(\"102\", BigInteger.valueOf(200));\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, BigInteger>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(100));\nv01.put(\"102\", BigInteger.valueOf(200));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h5Test4",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Integer.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Integer.MIN_VALUE));\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, BigInteger>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Integer.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Integer.MIN_VALUE));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h6Test3",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(1234567890));\nv01.put(\"102\", BigInteger.valueOf(-987654321));",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(1234567890));\nv01.put(\"102\", BigInteger.valueOf(-987654321));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h6Test4",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(0));\nv01.put(\"102\", BigInteger.valueOf(0));\nv01.put(\"103\", BigInteger.valueOf(0));",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(0));\nv01.put(\"102\", BigInteger.valueOf(0));\nv01.put(\"103\", BigInteger.valueOf(0));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h6Test5",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Integer.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Integer.MIN_VALUE));\nv01.put(\"103\", BigInteger.valueOf(Integer.MAX_VALUE));",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(Integer.MAX_VALUE));\nv01.put(\"102\", BigInteger.valueOf(Integer.MIN_VALUE));\nv01.put(\"103\", BigInteger.valueOf(Integer.MAX_VALUE));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h7Test2",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"\", BigInteger.valueOf(0));",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"\", BigInteger.valueOf(0));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h7Test3",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"null\", BigInteger.valueOf(0));",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"null\", BigInteger.valueOf(0));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h7Test4",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"NaN\", BigInteger.valueOf(0));",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"NaN\", BigInteger.valueOf(0));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h7Test5",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"Infinity\", BigInteger.valueOf(0));",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"Infinity\", BigInteger.valueOf(0));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test7_h8Test3",
            "input_pairs_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"\", BigInteger.valueOf(103));",
            "Sinput_code_block": "Map<String, BigInteger> v01 = new HashMap<>();\nv01.put(\"101\", BigInteger.valueOf(101));\nv01.put(\"102\", BigInteger.valueOf(102));\nv01.put(\"\", BigInteger.valueOf(103));"
        }
    ],
    "org.threeten.extra.TestYearHalf.test_withYear()": [
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h0Test0",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2020;\nint year3 = 2020;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2020;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h0Test1",
            "input_pairs_code_block": "int year1 = 1900;\nint half1 = 2;\nint year2 = 1900;\nint year3 = 1900;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 1900;\nint half1 = 2;\nint year2 = 1900;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h0Test2",
            "input_pairs_code_block": "int year1 = 2100;\nint half1 = 1;\nint year2 = 2100;\nint year3 = 2100;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2100;\nint half1 = 1;\nint year2 = 2100;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h0Test3",
            "input_pairs_code_block": "int year1 = 2000;\nint half1 = 2;\nint year2 = 2000;\nint year3 = 2000;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 2000;\nint half1 = 2;\nint year2 = 2000;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h0Test4",
            "input_pairs_code_block": "int year1 = 1700;\nint half1 = 1;\nint year2 = 1700;\nint year3 = 1700;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 1700;\nint half1 = 1;\nint year2 = 1700;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h2Test0",
            "input_pairs_code_block": "int year1 = 1900;\nint half1 = 1;\nint year2 = 2000;\nint year3 = 2000;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 1900;\nint half1 = 1;\nint year2 = 2000;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h2Test1",
            "input_pairs_code_block": "int year1 = 1900;\nint half1 = 1;\nint year2 = 2000;\nint year3 = year1;\nint half3 = half1;",
            "Sinput_code_block": "int year1 = 1900;\nint half1 = 1;\nint year2 = 2000;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h2Test2",
            "input_pairs_code_block": "int year1 = 2100;\nint half1 = 2;\nint year2 = 2200;\nint year3 = 2200;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 2100;\nint half1 = 2;\nint year2 = 2200;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h2Test3",
            "input_pairs_code_block": "int year1 = 2100;\nint half1 = 2;\nint year2 = 2200;\nint year3 = year2;\nint half3 = half1;",
            "Sinput_code_block": "int year1 = 2100;\nint half1 = 2;\nint year2 = 2200;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h2Test4",
            "input_pairs_code_block": "int year1 = 1800;\nint half1 = 1;\nint year2 = 1900;\nint year3 = 1900;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 1800;\nint half1 = 1;\nint year2 = 1900;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h2Test5",
            "input_pairs_code_block": "int year1 = 1800;\nint half1 = 1;\nint year2 = 1900;\nint year3 = year2;\nint half3 = half1;",
            "Sinput_code_block": "int year1 = 1800;\nint half1 = 1;\nint year2 = 1900;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h2Test6",
            "input_pairs_code_block": "int year1 = 2200;\nint half1 = 2;\nint year2 = 2300;\nint year3 = 2300;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 2200;\nint half1 = 2;\nint year2 = 2300;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h2Test7",
            "input_pairs_code_block": "int year1 = 2200;\nint half1 = 2;\nint year2 = 2300;\nint year3 = year2;\nint half3 = half1;",
            "Sinput_code_block": "int year1 = 2200;\nint half1 = 2;\nint year2 = 2300;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h2Test9",
            "input_pairs_code_block": "int year1 = 2000;\nint half1 = 2;\nint year2 = 2000;\nint year3 = year2;\nint half3 = half1;",
            "Sinput_code_block": "int year1 = 2000;\nint half1 = 2;\nint year2 = 2000;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h3Test0",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2022;\nint year3 = 2022;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2022;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h3Test2",
            "input_pairs_code_block": "int year1 = 1990;\nint half1 = 2;\nint year2 = 1988;\nint year3 = 1988;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 1990;\nint half1 = 2;\nint year2 = 1988;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h3Test4",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 2;\nint year2 = 2020;\nint year3 = 2020;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 2;\nint year2 = 2020;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h3Test8",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2021;\nint year3 = 2021;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2021;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h4Test4",
            "input_pairs_code_block": "int year1 = 1800;\nint half1 = 1;\nint year2 = 1800;\nint year3 = 1800;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 1800;\nint half1 = 1;\nint year2 = 1800;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h5Test0",
            "input_pairs_code_block": "int year1 = 0;\nint half1 = 1;\nint year2 = 0;\nint year3 = 0;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 0;\nint half1 = 1;\nint year2 = 0;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h5Test1",
            "input_pairs_code_block": "int year1 = 999999999;\nint half1 = 2;\nint year2 = 999999999;\nint year3 = 999999999;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 999999999;\nint half1 = 2;\nint year2 = 999999999;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h5Test2",
            "input_pairs_code_block": "int year1 = 2000;\nint half1 = 1;\nint year2 = 2000;\nint year3 = 2000;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2000;\nint half1 = 1;\nint year2 = 2000;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h6Test0",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2025;\nint year3 = 2025;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2025;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h6Test1",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2025;\nint year3 = YearHalf.of(year1, half1).withYear(year2).getYear();\nint half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 1;\nint year2 = 2025;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h6Test2",
            "input_pairs_code_block": "int year1 = 1990;\nint half1 = 2;\nint year2 = 1995;\nint year3 = 1995;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 1990;\nint half1 = 2;\nint year2 = 1995;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h6Test3",
            "input_pairs_code_block": "int year1 = 1990;\nint half1 = 2;\nint year2 = 1995;\nint year3 = YearHalf.of(year1, half1).withYear(year2).getYear();\nint half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 1990;\nint half1 = 2;\nint year2 = 1995;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h6Test4",
            "input_pairs_code_block": "int year1 = 2100;\nint half1 = 1;\nint year2 = 2105;\nint year3 = 2105;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2100;\nint half1 = 1;\nint year2 = 2105;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h6Test5",
            "input_pairs_code_block": "int year1 = 2100;\nint half1 = 1;\nint year2 = 2105;\nint year3 = YearHalf.of(year1, half1).withYear(year2).getYear();\nint half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2100;\nint half1 = 1;\nint year2 = 2105;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h6Test6",
            "input_pairs_code_block": "int year1 = 1800;\nint half1 = 2;\nint year2 = 1805;\nint year3 = 1805;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 1800;\nint half1 = 2;\nint year2 = 1805;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h6Test7",
            "input_pairs_code_block": "int year1 = 1800;\nint half1 = 2;\nint year2 = 1805;\nint year3 = YearHalf.of(year1, half1).withYear(year2).getYear();\nint half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 1800;\nint half1 = 2;\nint year2 = 1805;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h6Test8",
            "input_pairs_code_block": "int year1 = 2000;\nint half1 = 1;\nint year2 = 2005;\nint year3 = 2005;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2000;\nint half1 = 1;\nint year2 = 2005;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h6Test9",
            "input_pairs_code_block": "int year1 = 2000;\nint half1 = 1;\nint year2 = 2005;\nint year3 = YearHalf.of(year1, half1).withYear(year2).getYear();\nint half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2000;\nint half1 = 1;\nint year2 = 2005;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h7Test3",
            "input_pairs_code_block": "int year1 = 1800;\nint half1 = 2;\nint year2 = 1800;\nint year3 = 1800;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 1800;\nint half1 = 2;\nint year2 = 1800;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h7Test4",
            "input_pairs_code_block": "int year1 = 2050;\nint half1 = 1;\nint year2 = 2050;\nint year3 = 2050;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2050;\nint half1 = 1;\nint year2 = 2050;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h8Test5",
            "input_pairs_code_block": "int year1 = 9999;\nint half1 = 1;\nint year2 = 9999;\nint year3 = 9999;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 9999;\nint half1 = 1;\nint year2 = 9999;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h9Test0",
            "input_pairs_code_block": "int year1 = 2007;\nint half1 = 1;\nint year2 = 2012;\nint year3 = 2007;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2007;\nint half1 = 1;\nint year2 = 2012;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h9Test1",
            "input_pairs_code_block": "int year1 = 2007;\nint half1 = 1;\nint year2 = 2012;\nint year3 = YearHalf.of(year1, half1).withYear(year2).getYear();\nint half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2007;\nint half1 = 1;\nint year2 = 2012;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h9Test4",
            "input_pairs_code_block": "int year1 = 2007;\nint half1 = 2;\nint year2 = 2012;\nint year3 = 2007;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 2007;\nint half1 = 2;\nint year2 = 2012;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h9Test5",
            "input_pairs_code_block": "int year1 = 2007;\nint half1 = 2;\nint year2 = 2012;\nint year3 = YearHalf.of(year1, half1).withYear(year2).getYear();\nint half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2007;\nint half1 = 2;\nint year2 = 2012;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h9Test6",
            "input_pairs_code_block": "int year1 = 2007;\nint half1 = 2;\nint year2 = 2100;\nint year3 = 2007;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 2007;\nint half1 = 2;\nint year2 = 2100;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h9Test7",
            "input_pairs_code_block": "int year1 = 2007;\nint half1 = 2;\nint year2 = 2100;\nint year3 = YearHalf.of(year1, half1).withYear(year2).getYear();\nint half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2007;\nint half1 = 2;\nint year2 = 2100;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h9Test8",
            "input_pairs_code_block": "int year1 = 2007;\nint half1 = 2;\nint year2 = 1900;\nint year3 = 2007;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 2007;\nint half1 = 2;\nint year2 = 1900;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withYear_h9Test9",
            "input_pairs_code_block": "int year1 = 2007;\nint half1 = 2;\nint year2 = 1900;\nint year3 = YearHalf.of(year1, half1).withYear(year2).getYear();\nint half3 = YearHalf.of(year1, half1).withYear(year2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2007;\nint half1 = 2;\nint year2 = 1900;"
        }
    ],
    "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase.startupListeners()": [
        {
            "test_inputs_FQN": "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h8Test2",
            "input_pairs_code_block": "StartupListener startUpListener1 = mock(StartupListener.class);\nStartupListener startUpListener2 = new StartupListener() {\n@Override\npublic void onStartup() {\n// Implementation that throws an exception\nthrow new RuntimeException(\"Test exception\");",
            "Sinput_code_block": "StartupListener startUpListener1 = mock(StartupListener.class);"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.deployment.test.internal.singleapp.SingleAppDeploymentServiceTestCase_startupListeners_h8Test4",
            "input_pairs_code_block": "StartupListener startUpListener1 = mock(StartupListener.class);\nStartupListener startUpListener2 = new StartupListener() {\n@Override\npublic void onStartup() {\n// Implementation that logs a message\nSystem.out.println(\"Startup event received\");",
            "Sinput_code_block": "StartupListener startUpListener1 = mock(StartupListener.class);"
        }
    ],
    "org.threeten.extra.TestYearHalf.test_withHalf_int()": [
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h0Test0",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 1;\nint half2 = 2;\nint year3 = 2020;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 1;\nint half2 = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h0Test1",
            "input_pairs_code_block": "int year1 = 1900;\nint half1 = 2;\nint half2 = 1;\nint year3 = 1900;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 1900;\nint half1 = 2;\nint half2 = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h0Test2",
            "input_pairs_code_block": "int year1 = 2100;\nint half1 = 1;\nint half2 = 2;\nint year3 = 2100;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 2100;\nint half1 = 1;\nint half2 = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h0Test3",
            "input_pairs_code_block": "int year1 = 2000;\nint half1 = 2;\nint half2 = 1;\nint year3 = 2000;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2000;\nint half1 = 2;\nint half2 = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h0Test4",
            "input_pairs_code_block": "int year1 = 2100;\nint half1 = 2;\nint half2 = 1;\nint year3 = 2100;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2100;\nint half1 = 2;\nint half2 = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h2Test1",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 1;\nint half2 = 2;\nint year3 = year1;\nint half3 = half1 + half2;",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 1;\nint half2 = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h2Test3",
            "input_pairs_code_block": "int year1 = 1900;\nint half1 = 2;\nint half2 = 1;\nint year3 = year1;\nint half3 = half1 - half2;",
            "Sinput_code_block": "int year1 = 1900;\nint half1 = 2;\nint half2 = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h2Test4",
            "input_pairs_code_block": "int year1 = 2100;\nint half1 = 1;\nint half2 = 2;\nint year3 = 2100;\nint half3 = 3;",
            "Sinput_code_block": "int year1 = 2100;\nint half1 = 1;\nint half2 = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h2Test5",
            "input_pairs_code_block": "int year1 = 2100;\nint half1 = 1;\nint half2 = 2;\nint year3 = year1;\nint half3 = half1 + half2;",
            "Sinput_code_block": "int year1 = 2100;\nint half1 = 1;\nint half2 = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h2Test6",
            "input_pairs_code_block": "int year1 = 1800;\nint half1 = 2;\nint half2 = 1;\nint year3 = 1800;\nint half3 = 3;",
            "Sinput_code_block": "int year1 = 1800;\nint half1 = 2;\nint half2 = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h2Test7",
            "input_pairs_code_block": "int year1 = 1800;\nint half1 = 2;\nint half2 = 1;\nint year3 = year1;\nint half3 = half1 + half2;",
            "Sinput_code_block": "int year1 = 1800;\nint half1 = 2;\nint half2 = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h2Test8",
            "input_pairs_code_block": "int year1 = 2000;\nint half1 = 1;\nint half2 = 2;\nint year3 = 2000;\nint half3 = 3;",
            "Sinput_code_block": "int year1 = 2000;\nint half1 = 1;\nint half2 = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h2Test9",
            "input_pairs_code_block": "int year1 = 2000;\nint half1 = 1;\nint half2 = 2;\nint year3 = year1;\nint half3 = half1 + half2;",
            "Sinput_code_block": "int year1 = 2000;\nint half1 = 1;\nint half2 = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h3Test7",
            "input_pairs_code_block": "int year1 = 2000;\nint half1 = 2;\nint half2 = 1;\nint year3 = year1;\nint half3 = half1 - half2;",
            "Sinput_code_block": "int year1 = 2000;\nint half1 = 2;\nint half2 = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h3Test8",
            "input_pairs_code_block": "int year1 = 1800;\nint half1 = 1;\nint half2 = 2;\nint year3 = 1800;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 1800;\nint half1 = 1;\nint half2 = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h3Test9",
            "input_pairs_code_block": "int year1 = 1800;\nint half1 = 1;\nint half2 = 2;\nint year3 = year1;\nint half3 = half1 + half2;",
            "Sinput_code_block": "int year1 = 1800;\nint half1 = 1;\nint half2 = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h4Test0",
            "input_pairs_code_block": "int year1 = 1900;\nint half1 = 1;\nint half2 = 2;\nint year3 = 1900;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 1900;\nint half1 = 1;\nint half2 = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h4Test1",
            "input_pairs_code_block": "int year1 = 1900;\nint half1 = 1;\nint half2 = 2;\nint year3 = YearHalf.of(year1, half1).withHalf(half2).getYear();\nint half3 = YearHalf.of(year1, half1).withHalf(half2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 1900;\nint half1 = 1;\nint half2 = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h4Test3",
            "input_pairs_code_block": "int year1 = 2100;\nint half1 = 2;\nint half2 = 1;\nint year3 = YearHalf.of(year1, half1).withHalf(half2).getYear();\nint half3 = YearHalf.of(year1, half1).withHalf(half2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2100;\nint half1 = 2;\nint half2 = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h4Test4",
            "input_pairs_code_block": "int year1 = 2000;\nint half1 = 1;\nint half2 = 2;\nint year3 = 2000;\nint half3 = 2;",
            "Sinput_code_block": "int year1 = 2000;\nint half1 = 1;\nint half2 = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h4Test5",
            "input_pairs_code_block": "int year1 = 2000;\nint half1 = 1;\nint half2 = 2;\nint year3 = YearHalf.of(year1, half1).withHalf(half2).getYear();\nint half3 = YearHalf.of(year1, half1).withHalf(half2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2000;\nint half1 = 1;\nint half2 = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h4Test7",
            "input_pairs_code_block": "int year1 = 2000;\nint half1 = 2;\nint half2 = 1;\nint year3 = YearHalf.of(year1, half1).withHalf(half2).getYear();\nint half3 = YearHalf.of(year1, half1).withHalf(half2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2000;\nint half1 = 2;\nint half2 = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h4Test9",
            "input_pairs_code_block": "int year1 = 1800;\nint half1 = 1;\nint half2 = 2;\nint year3 = YearHalf.of(year1, half1).withHalf(half2).getYear();\nint half3 = YearHalf.of(year1, half1).withHalf(half2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 1800;\nint half1 = 1;\nint half2 = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h6Test1",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 1;\nint half2 = 2;\nint year3 = YearHalf.of(year1, half1).withHalf(half2).getYear();\nint half3 = YearHalf.of(year1, half1).withHalf(half2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 1;\nint half2 = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h6Test3",
            "input_pairs_code_block": "int year1 = 1900;\nint half1 = 2;\nint half2 = 1;\nint year3 = YearHalf.of(year1, half1).withHalf(half2).getYear();\nint half3 = YearHalf.of(year1, half1).withHalf(half2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 1900;\nint half1 = 2;\nint half2 = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h6Test5",
            "input_pairs_code_block": "int year1 = 2100;\nint half1 = 1;\nint half2 = 2;\nint year3 = YearHalf.of(year1, half1).withHalf(half2).getYear();\nint half3 = YearHalf.of(year1, half1).withHalf(half2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2100;\nint half1 = 1;\nint half2 = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h6Test8",
            "input_pairs_code_block": "int year1 = 2007;\nint half1 = 1;\nint half2 = 1;\nint year3 = 2007;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 2007;\nint half1 = 1;\nint half2 = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h6Test9",
            "input_pairs_code_block": "int year1 = 2007;\nint half1 = 1;\nint half2 = 1;\nint year3 = YearHalf.of(year1, half1).withHalf(half2).getYear();\nint half3 = YearHalf.of(year1, half1).withHalf(half2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2007;\nint half1 = 1;\nint half2 = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h7Test3",
            "input_pairs_code_block": "int year1 = 1900;\nint half1 = 1;\nint half2 = 2;\nint year3 = year1;\nint half3 = half1 + half2;",
            "Sinput_code_block": "int year1 = 1900;\nint half1 = 1;\nint half2 = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h8Test6",
            "input_pairs_code_block": "int year1 = 1800;\nint half1 = 2;\nint half2 = 1;\nint year3 = 1800;\nint half3 = 1;",
            "Sinput_code_block": "int year1 = 1800;\nint half1 = 2;\nint half2 = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h8Test7",
            "input_pairs_code_block": "int year1 = 1800;\nint half1 = 2;\nint half2 = 1;\nint year3 = YearHalf.of(year1, half1).withHalf(half2).getYear();\nint half3 = YearHalf.of(year1, half1).withHalf(half2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 1800;\nint half1 = 2;\nint half2 = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h9Test3",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 2;\nint half2 = 1;\nint year3 = YearHalf.of(year1, half1).withHalf(half2).getYear();\nint half3 = YearHalf.of(year1, half1).withHalf(half2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 2;\nint half2 = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h9Test5",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 1;\nint half2 = 1;\nint year3 = YearHalf.of(year1, half1).withHalf(half2).getYear();\nint half3 = YearHalf.of(year1, half1).withHalf(half2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 1;\nint half2 = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_withHalf_int_h9Test7",
            "input_pairs_code_block": "int year1 = 2020;\nint half1 = 2;\nint half2 = 2;\nint year3 = YearHalf.of(year1, half1).withHalf(half2).getYear();\nint half3 = YearHalf.of(year1, half1).withHalf(half2).getHalf().getValue();",
            "Sinput_code_block": "int year1 = 2020;\nint half1 = 2;\nint half2 = 2;"
        }
    ],
    "org.myrobotlab.service.I2cMuxTest.testSetDeviceBus()": [
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h0Test0",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceBus = \"0\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\ni2cMux.setDeviceBus(deviceBus);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceBus = \"0\";\ni2cMux.setDeviceBus(deviceBus);"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h0Test1",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceBus = \"7\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\ni2cMux.setDeviceBus(deviceBus);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceBus = \"7\";\ni2cMux.setDeviceBus(deviceBus);"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h0Test2",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceBus = \"8\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\ni2cMux.setDeviceBus(deviceBus);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceBus = \"8\";\ni2cMux.setDeviceBus(deviceBus);"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h0Test3",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceBus = \"\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\ni2cMux.setDeviceBus(deviceBus);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceBus = \"\";\ni2cMux.setDeviceBus(deviceBus);"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h0Test4",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceBus = \"a\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\ni2cMux.setDeviceBus(deviceBus);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceBus = \"a\";\ni2cMux.setDeviceBus(deviceBus);"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h3Test4",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceBus = \"null\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\ni2cMux.setDeviceBus(deviceBus);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceBus = \"null\";\ni2cMux.setDeviceBus(deviceBus);"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h4Test2",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceBus = \"3\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\ni2cMux.setDeviceBus(deviceBus);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceBus = \"3\";\ni2cMux.setDeviceBus(deviceBus);"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h5Test3",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceBus = \"2\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\ni2cMux.setDeviceBus(deviceBus);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceBus = \"2\";\ni2cMux.setDeviceBus(deviceBus);"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h6Test6",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceBus = \"5\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\ni2cMux.setDeviceBus(deviceBus);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceBus = \"5\";\ni2cMux.setDeviceBus(deviceBus);"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceBus_h7Test4",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceBus = \"6\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\ni2cMux.setDeviceBus(deviceBus);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceBus = \"6\";\ni2cMux.setDeviceBus(deviceBus);"
        }
    ],
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test8()": [
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h0Test0",
            "input_pairs_code_block": "Map<String, UUID> v01 = new HashMap<>();\nv01.put(\"101\", UUID.randomUUID());\nv01.put(\"102\", UUID.randomUUID());\nv01.put(\"103\", UUID.randomUUID());",
            "Sinput_code_block": "Map<String, UUID> v01 = new HashMap<>();\nv01.put(\"101\", UUID.randomUUID());\nv01.put(\"102\", UUID.randomUUID());\nv01.put(\"103\", UUID.randomUUID());"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h0Test2",
            "input_pairs_code_block": "Map<String, UUID> v01 = new HashMap<>();\nv01.put(\"101\", UUID.randomUUID());\nv01.put(\"102\", UUID.randomUUID());\nv01.put(\"101\", UUID.randomUUID());",
            "Sinput_code_block": "Map<String, UUID> v01 = new HashMap<>();\nv01.put(\"101\", UUID.randomUUID());\nv01.put(\"102\", UUID.randomUUID());\nv01.put(\"101\", UUID.randomUUID());"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h0Test3",
            "input_pairs_code_block": "Map<String, UUID> v01 = new HashMap<>();\nv01.put(\"101\", UUID.randomUUID());\nv01.put(\"102\", UUID.randomUUID());\nv01.put(\"\", UUID.randomUUID());",
            "Sinput_code_block": "Map<String, UUID> v01 = new HashMap<>();\nv01.put(\"101\", UUID.randomUUID());\nv01.put(\"102\", UUID.randomUUID());\nv01.put(\"\", UUID.randomUUID());"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h2Test1",
            "input_pairs_code_block": "Map<String, UUID> v01 = new HashMap<>();\nv01.put(\"101\", UUID.randomUUID());\nv01.put(\"\", UUID.randomUUID());",
            "Sinput_code_block": "Map<String, UUID> v01 = new HashMap<>();\nv01.put(\"101\", UUID.randomUUID());\nv01.put(\"\", UUID.randomUUID());"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h2Test3",
            "input_pairs_code_block": "Map<String, UUID> v01 = new HashMap<>();\nv01.put(\"101\", UUID.randomUUID());\nv01.put(\"102\", UUID.fromString(\"00000000-0000-0000-0000-000000000000\"));",
            "Sinput_code_block": "Map<String, UUID> v01 = new HashMap<>();\nv01.put(\"101\", UUID.randomUUID());\nv01.put(\"102\", UUID.fromString(\"00000000-0000-0000-0000-000000000000\"));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test8_h2Test4",
            "input_pairs_code_block": "Map<String, UUID> v01 = new HashMap<>();\nv01.put(\"101\", UUID.randomUUID());\nv01.put(\"102\", UUID.randomUUID());\nv01.put(\"103\", UUID.randomUUID());\nv01.put(\"104\", UUID.randomUUID());\nv01.put(\"105\", UUID.randomUUID());",
            "Sinput_code_block": "Map<String, UUID> v01 = new HashMap<>();\nv01.put(\"101\", UUID.randomUUID());\nv01.put(\"102\", UUID.randomUUID());\nv01.put(\"103\", UUID.randomUUID());\nv01.put(\"104\", UUID.randomUUID());\nv01.put(\"105\", UUID.randomUUID());"
        }
    ],
    "org.openscience.cdk.AssociationTest.testGetAtomAt()": [
        {
            "test_inputs_FQN": "org.openscience.cdk.AssociationTest_testGetAtomAt_h0Test0",
            "input_pairs_code_block": "Atom c = new Atom(\"C\");\nAtom o = new Atom(\"O\");\nAtom n = new Atom(\"N\");\nAssociation association = new Association(c, o);\nint position = 1;\nAssociation association2 = new Association(n, o);\nint position2 = 1;",
            "Sinput_code_block": "Atom c = new Atom(\"C\");\nAtom o = new Atom(\"O\");\nAtom n = new Atom(\"N\");\nAssociation association = new Association(c, o);\nint position = 1;"
        },
        {
            "test_inputs_FQN": "org.openscience.cdk.AssociationTest_testGetAtomAt_h2Test3",
            "input_pairs_code_block": "Atom c = new Atom(\"C\");\nAtom o = new Atom(\"O\");\nAtom n = new Atom(\"N\");\nAssociation association = new Association(c, o);\nint position = 0;\nAssociation association2 = new Association(c, o);\nint position2 = 0;",
            "Sinput_code_block": "Atom c = new Atom(\"C\");\nAtom o = new Atom(\"O\");\nAtom n = new Atom(\"N\");\nAssociation association = new Association(c, o);\nint position = 0;"
        },
        {
            "test_inputs_FQN": "org.openscience.cdk.AssociationTest_testGetAtomAt_h3Test0",
            "input_pairs_code_block": "Atom c = new Atom(\"C\");\nAtom o = new Atom(\"O\");\nAtom n = new Atom(\"N\");\nAssociation association = new Association(c, o);\nint position = 0;\nassociation.setAtomAt(n, position);\nAssociation association2 = new Association(n, o);\nint position2 = 0;",
            "Sinput_code_block": "Atom c = new Atom(\"C\");\nAtom o = new Atom(\"O\");\nAtom n = new Atom(\"N\");\nAssociation association = new Association(c, o);\nint position = 0;\nassociation.setAtomAt(n, position);"
        },
        {
            "test_inputs_FQN": "org.openscience.cdk.AssociationTest_testGetAtomAt_h3Test2",
            "input_pairs_code_block": "Atom c = new Atom(\"C\");\nAtom o = new Atom(\"O\");\nAtom n = new Atom(\"N\");\nAssociation association = new Association(c, o);\nint position = 1;\nassociation.setAtomAt(n, position);\nAssociation association2 = new Association(c, n);\nint position2 = 1;",
            "Sinput_code_block": "Atom c = new Atom(\"C\");\nAtom o = new Atom(\"O\");\nAtom n = new Atom(\"N\");\nAssociation association = new Association(c, o);\nint position = 1;\nassociation.setAtomAt(n, position);"
        },
        {
            "test_inputs_FQN": "org.openscience.cdk.AssociationTest_testGetAtomAt_h6Test0",
            "input_pairs_code_block": "Atom c = new Atom(\"C\");\nAtom o = new Atom(\"O\");\nAtom n = new Atom(\"N\");\nAssociation association = new Association(c, o);\nint position = 1;\nAssociation association2 = new Association(c, n);\nint position2 = 1;",
            "Sinput_code_block": "Atom c = new Atom(\"C\");\nAtom o = new Atom(\"O\");\nAtom n = new Atom(\"N\");\nAssociation association = new Association(c, o);\nint position = 1;"
        }
    ],
    "org.myrobotlab.service.I2cMuxTest.testSetDeviceAddress()": [
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h0Test0",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x7F\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\ni2cMux.setDeviceAddress(deviceAddress);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x7F\";\ni2cMux.setDeviceAddress(deviceAddress);"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h0Test1",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x00\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\ni2cMux.setDeviceAddress(deviceAddress);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x00\";\ni2cMux.setDeviceAddress(deviceAddress);"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h0Test2",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0xFF\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\ni2cMux.setDeviceAddress(deviceAddress);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0xFF\";\ni2cMux.setDeviceAddress(deviceAddress);"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h0Test3",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x71\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\ni2cMux.setDeviceAddress(deviceAddress);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x71\";\ni2cMux.setDeviceAddress(deviceAddress);"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h0Test4",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x72\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\ni2cMux.setDeviceAddress(deviceAddress);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x72\";\ni2cMux.setDeviceAddress(deviceAddress);"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h2Test0",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x07\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\ni2cMux.setDeviceAddress(deviceAddress);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x07\";\ni2cMux.setDeviceAddress(deviceAddress);"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h2Test4",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x70\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\ni2cMux.setDeviceAddress(deviceAddress);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x70\";\ni2cMux.setDeviceAddress(deviceAddress);"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h4Test0",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x78\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux2\", \"I2cMux\");\ni2cMux2.setDeviceAddress(deviceAddress);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x78\";"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h4Test1",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x6F\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux2\", \"I2cMux\");\ni2cMux2.setDeviceAddress(deviceAddress);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x6F\";"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h4Test2",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x70\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux2\", \"I2cMux\");\ni2cMux2.setDeviceAddress(deviceAddress);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x70\";"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h4Test3",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x77\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux2\", \"I2cMux\");\ni2cMux2.setDeviceAddress(deviceAddress);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x77\";"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h4Test4",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x00\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux2\", \"I2cMux\");\ni2cMux2.setDeviceAddress(deviceAddress);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x00\";"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h7Test2",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x7F\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux2\", \"I2cMux\");\ni2cMux2.setDeviceAddress(deviceAddress);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x7F\";"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h7Test3",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x7E\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux2\", \"I2cMux\");\ni2cMux2.setDeviceAddress(deviceAddress);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x7E\";"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h8Test0",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x3F\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\ni2cMux.setDeviceAddress(deviceAddress);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x3F\";\ni2cMux.setDeviceAddress(deviceAddress);"
        },
        {
            "test_inputs_FQN": "org.myrobotlab.service.I2cMuxTest_testSetDeviceAddress_h8Test4",
            "input_pairs_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x80\";\nI2cMux i2cMux2 = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\ni2cMux.setDeviceAddress(deviceAddress);",
            "Sinput_code_block": "I2cMux i2cMux = (I2cMux) Runtime.start(\"i2cMux\", \"I2cMux\");\nString deviceAddress = \"0x80\";\ni2cMux.setDeviceAddress(deviceAddress);"
        }
    ],
    "com.networknt.schema.JsonNodePathTest.equalsEquals()": [
        {
            "test_inputs_FQN": "com.networknt.schema.JsonNodePathTest_equalsEquals_h0Test0",
            "input_pairs_code_block": "String token1 = \"b\";\nString token2 = \"b\";",
            "Sinput_code_block": "String token1 = \"b\";"
        },
        {
            "test_inputs_FQN": "com.networknt.schema.JsonNodePathTest_equalsEquals_h0Test2",
            "input_pairs_code_block": "String token1 = \"123\";\nString token2 = \"123\";",
            "Sinput_code_block": "String token1 = \"123\";"
        },
        {
            "test_inputs_FQN": "com.networknt.schema.JsonNodePathTest_equalsEquals_h0Test3",
            "input_pairs_code_block": "String token1 = \"a/b\";\nString token2 = \"a/b\";",
            "Sinput_code_block": "String token1 = \"a/b\";"
        },
        {
            "test_inputs_FQN": "com.networknt.schema.JsonNodePathTest_equalsEquals_h0Test4",
            "input_pairs_code_block": "String token1 = \"\";\nString token2 = \"\";",
            "Sinput_code_block": "String token1 = \"\";"
        },
        {
            "test_inputs_FQN": "com.networknt.schema.JsonNodePathTest_equalsEquals_h0Test5",
            "input_pairs_code_block": "String token1 = \"a#b\";\nString token2 = \"a#b\";",
            "Sinput_code_block": "String token1 = \"a#b\";"
        },
        {
            "test_inputs_FQN": "com.networknt.schema.JsonNodePathTest_equalsEquals_h2Test2",
            "input_pairs_code_block": "String token1 = \"c\";\nString token2 = \"c\";",
            "Sinput_code_block": "String token1 = \"c\";"
        },
        {
            "test_inputs_FQN": "com.networknt.schema.JsonNodePathTest_equalsEquals_h2Test4",
            "input_pairs_code_block": "String token1 = \"d\";\nString token2 = \"d\";",
            "Sinput_code_block": "String token1 = \"d\";"
        },
        {
            "test_inputs_FQN": "com.networknt.schema.JsonNodePathTest_equalsEquals_h2Test6",
            "input_pairs_code_block": "String token1 = \"e\";\nString token2 = \"e\";",
            "Sinput_code_block": "String token1 = \"e\";"
        },
        {
            "test_inputs_FQN": "com.networknt.schema.JsonNodePathTest_equalsEquals_h2Test8",
            "input_pairs_code_block": "String token1 = \"f\";\nString token2 = \"f\";",
            "Sinput_code_block": "String token1 = \"f\";"
        },
        {
            "test_inputs_FQN": "com.networknt.schema.JsonNodePathTest_equalsEquals_h3Test4",
            "input_pairs_code_block": "String token1 = \"a1\";\nString token2 = \"a1\";",
            "Sinput_code_block": "String token1 = \"a1\";"
        },
        {
            "test_inputs_FQN": "com.networknt.schema.JsonNodePathTest_equalsEquals_h3Test6",
            "input_pairs_code_block": "String token1 = \"a_\";\nString token2 = \"a_\";",
            "Sinput_code_block": "String token1 = \"a_\";"
        },
        {
            "test_inputs_FQN": "com.networknt.schema.JsonNodePathTest_equalsEquals_h3Test8",
            "input_pairs_code_block": "String token1 = \"a \";\nString token2 = \"a \";",
            "Sinput_code_block": "String token1 = \"a \";"
        },
        {
            "test_inputs_FQN": "com.networknt.schema.JsonNodePathTest_equalsEquals_h7Test6",
            "input_pairs_code_block": "String token1 = \"a%20b\";\nString token2 = \"a%20b\";",
            "Sinput_code_block": "String token1 = \"a%20b\";"
        }
    ],
    "com.alibaba.fastjson2.internal.processor.maps.MapTest.test1()": [
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h0Test0",
            "input_pairs_code_block": "v01.put(\"123\", 456);\nv01.put(\"12x\", 456);",
            "Sinput_code_block": "v01.put(\"123\", 456);\nv01.put(\"12x\", 456);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h0Test1",
            "input_pairs_code_block": "String str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, Integer>>() {}.getType();",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h0Test2",
            "input_pairs_code_block": "v01.put(\"123\", 789);\nv01.put(\"12x\", 789);",
            "Sinput_code_block": "v01.put(\"123\", 789);\nv01.put(\"12x\", 789);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h0Test3",
            "input_pairs_code_block": "v01.put(\"123\", 0);\nv01.put(\"12x\", 0);",
            "Sinput_code_block": "v01.put(\"123\", 0);\nv01.put(\"12x\", 0);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h0Test4",
            "input_pairs_code_block": "v01.put(\"123\", -123);\nv01.put(\"12x\", -123);",
            "Sinput_code_block": "v01.put(\"123\", -123);\nv01.put(\"12x\", -123);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h2Test2",
            "input_pairs_code_block": "v01.put(\"negative\", -123);\nv01.put(\"positive\", 123);",
            "Sinput_code_block": "v01.put(\"negative\", -123);\nv01.put(\"positive\", 123);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h3Test2",
            "input_pairs_code_block": "v01.put(\"large\", 1234567890);\nv01.put(\"small\", -123456789);",
            "Sinput_code_block": "v01.put(\"large\", 1234567890);\nv01.put(\"small\", -123456789);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h4Test1",
            "input_pairs_code_block": "String str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h4Test2",
            "input_pairs_code_block": "v01.put(\"123\", 456);\nv01.put(\"12x\", 456);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "v01.put(\"123\", 456);\nv01.put(\"12x\", 456);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h4Test3",
            "input_pairs_code_block": "v01.put(\"123\", 123);\nv01.put(\"12x\", 456);",
            "Sinput_code_block": "v01.put(\"123\", 123);\nv01.put(\"12x\", 456);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h4Test4",
            "input_pairs_code_block": "v01.put(\"123\", 123);\nv01.put(\"12x\", 456);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "v01.put(\"123\", 123);\nv01.put(\"12x\", 456);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h4Test9",
            "input_pairs_code_block": "v01.put(\"123\", 123);\nv01.put(\"12x\", 123);\nv01.put(\"12y\", 123);",
            "Sinput_code_block": "v01.put(\"123\", 123);\nv01.put(\"12x\", 123);\nv01.put(\"12y\", 123);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h4Test10",
            "input_pairs_code_block": "v01.put(\"123\", 123);\nv01.put(\"12x\", 123);\nv01.put(\"12y\", 123);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "v01.put(\"123\", 123);\nv01.put(\"12x\", 123);\nv01.put(\"12y\", 123);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h5Test2",
            "input_pairs_code_block": "v01.put(\"123\", 123);\nv01.put(\"12x\", 123);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "v01.put(\"123\", 123);\nv01.put(\"12x\", 123);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h5Test6",
            "input_pairs_code_block": "v01.put(\"negative\", -123);\nv01.put(\"positive\", 456);",
            "Sinput_code_block": "v01.put(\"negative\", -123);\nv01.put(\"positive\", 456);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h5Test7",
            "input_pairs_code_block": "v01.put(\"negative\", -123);\nv01.put(\"positive\", 456);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "v01.put(\"negative\", -123);\nv01.put(\"positive\", 456);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h5Test10",
            "input_pairs_code_block": "v01.put(\"large\", 1234567890);\nv01.put(\"small\", -123456789);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "v01.put(\"large\", 1234567890);\nv01.put(\"small\", -123456789);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h6Test2",
            "input_pairs_code_block": "v01.put(\"\", 0);\nv01.put(\" \", 0);",
            "Sinput_code_block": "v01.put(\"\", 0);\nv01.put(\" \", 0);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h6Test6",
            "input_pairs_code_block": "v01.put(\"123\", 123);\nv01.put(\"123\", 123);",
            "Sinput_code_block": "v01.put(\"123\", 123);\nv01.put(\"123\", 123);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h6Test8",
            "input_pairs_code_block": "v01.put(\"123\", 123);\nv01.put(\"123\", 456);",
            "Sinput_code_block": "v01.put(\"123\", 123);\nv01.put(\"123\", 456);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h7Test0",
            "input_pairs_code_block": "v01.put(\"123\", 456);\nv01.put(\"12x\", 789);",
            "Sinput_code_block": "v01.put(\"123\", 456);\nv01.put(\"12x\", 789);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h7Test2",
            "input_pairs_code_block": "v01.put(\"123\", 789);\nv01.put(\"12x\", 123);",
            "Sinput_code_block": "v01.put(\"123\", 789);\nv01.put(\"12x\", 123);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h7Test3",
            "input_pairs_code_block": "v01.put(\"123\", 789);\nv01.put(\"12x\", 456);",
            "Sinput_code_block": "v01.put(\"123\", 789);\nv01.put(\"12x\", 456);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.MapTest_test1_h9Test3",
            "input_pairs_code_block": "v01.put(\"negativeKey\", -123);\nv01.put(\"positiveKey\", 123);",
            "Sinput_code_block": "v01.put(\"negativeKey\", -123);\nv01.put(\"positiveKey\", 123);"
        }
    ],
    "com.networknt.schema.JsonNodePathTest.hashCodeEquals()": [
        {
            "test_inputs_FQN": "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h0Test0",
            "input_pairs_code_block": "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);\nJsonNodePath a1 = root.append(\"a1\");\nJsonNodePath a2 = root.append(\"a1\");",
            "Sinput_code_block": "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);\nJsonNodePath a1 = root.append(\"a1\");"
        },
        {
            "test_inputs_FQN": "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h0Test1",
            "input_pairs_code_block": "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);\nJsonNodePath a1 = root.append(\"a\").append(\"b\");\nJsonNodePath a2 = root.append(\"a\").append(\"b\");",
            "Sinput_code_block": "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);\nJsonNodePath a1 = root.append(\"a\").append(\"b\");"
        },
        {
            "test_inputs_FQN": "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h0Test2",
            "input_pairs_code_block": "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);\nJsonNodePath a1 = root.append(\"a\").append(\"b\").append(\"c\");\nJsonNodePath a2 = root.append(\"a\").append(\"b\").append(\"c\");",
            "Sinput_code_block": "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);\nJsonNodePath a1 = root.append(\"a\").append(\"b\").append(\"c\");"
        },
        {
            "test_inputs_FQN": "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h0Test3",
            "input_pairs_code_block": "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);\nJsonNodePath a1 = root.append(\"a\").append(\"b\").append(\"c\").append(\"d\");\nJsonNodePath a2 = root.append(\"a\").append(\"b\").append(\"c\").append(\"d\");",
            "Sinput_code_block": "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);\nJsonNodePath a1 = root.append(\"a\").append(\"b\").append(\"c\").append(\"d\");"
        },
        {
            "test_inputs_FQN": "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h0Test4",
            "input_pairs_code_block": "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);\nJsonNodePath a1 = root.append(\"a\").append(\"b\").append(\"c\").append(\"d\").append(\"e\");\nJsonNodePath a2 = root.append(\"a\").append(\"b\").append(\"c\").append(\"d\").append(\"e\");",
            "Sinput_code_block": "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);\nJsonNodePath a1 = root.append(\"a\").append(\"b\").append(\"c\").append(\"d\").append(\"e\");"
        },
        {
            "test_inputs_FQN": "com.networknt.schema.JsonNodePathTest_hashCodeEquals_h2Test1",
            "input_pairs_code_block": "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);\nJsonNodePath a1 = root.append(\"b\");\nJsonNodePath a2 = root.append(\"b\");",
            "Sinput_code_block": "JsonNodePath root = new JsonNodePath(PathType.JSON_POINTER);\nJsonNodePath a1 = root.append(\"b\");"
        }
    ],
    "software.amazon.event.ruler.NameStateTest.testNextNameStateWithAdditionalNameStateReuse()": [
        {
            "test_inputs_FQN": "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h0Test0",
            "input_pairs_code_block": "NameState nameState = new NameState();\nNameState nextNameState = new NameState();\nString key = \"key1\";\nString key2 = \"key1\";\nNameState nameState2 = nameState;\nnameState.addNextNameState(key, nextNameState);",
            "Sinput_code_block": "NameState nextNameState = new NameState();\nString key = \"key1\";"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h0Test1",
            "input_pairs_code_block": "NameState nameState = new NameState();\nNameState nextNameState = new NameState();\nString key = \"\";\nString key2 = \"\";\nNameState nameState2 = nameState;\nnameState.addNextNameState(key, nextNameState);",
            "Sinput_code_block": "NameState nextNameState = new NameState();\nString key = \"\";"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h0Test3",
            "input_pairs_code_block": "NameState nameState = new NameState();\nNameState nextNameState = new NameState();\nString key = \"key\";\nString key2 = \"key\";\nNameState nameState2 = nameState;\nnextNameState.addNextNameState(key, nextNameState);\nnameState.addNextNameState(key, nextNameState);",
            "Sinput_code_block": "NameState nextNameState = new NameState();\nString key = \"key\";\nnextNameState.addNextNameState(key, nextNameState);"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h2Test1",
            "input_pairs_code_block": "NameState nameState = new NameState();\nNameState nextNameState = new NameState();\nString key = \"key2\";\nString key2 = \"key2\";\nNameState nameState2 = nameState;\nnameState.addNextNameState(key, nextNameState);",
            "Sinput_code_block": "NameState nextNameState = new NameState();\nString key = \"key2\";"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h4Test4",
            "input_pairs_code_block": "NameState nameState = new NameState();\nNameState nextNameState = new NameState();\nString key = \"\";\nString key2 = \"\";\nNameState nameState2 = nameState;",
            "Sinput_code_block": "NameState nextNameState = new NameState();\nString key = \"\";"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h5Test4",
            "input_pairs_code_block": "NameState nameState = new NameState();\nNameState nextNameState = new NameState();\nString key = \"key\";\nString key2 = \"key\";\nNameState nameState2 = nameState;\nnextNameState.addNextNameState(\"nestedKey\", new NameState());\nnameState.addNextNameState(key, nextNameState);",
            "Sinput_code_block": "NameState nextNameState = new NameState();\nString key = \"key\";\nnextNameState.addNextNameState(\"nestedKey\", new NameState());"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.NameStateTest_testNextNameStateWithAdditionalNameStateReuse_h6Test8",
            "input_pairs_code_block": "NameState nameState = new NameState();\nNameState nextNameState = new NameState();\nString key = \"key with spaces\";\nString key2 = \"key with spaces\";\nNameState nameState2 = nameState;",
            "Sinput_code_block": "NameState nextNameState = new NameState();\nString key = \"key with spaces\";"
        }
    ],
    "software.amazon.event.ruler.SubRuleContextTest.testEquals()": [
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testEquals_h0Test0",
            "input_pairs_code_block": "String NAME = \"name1\";\nSubRuleContext.Generator generatorA = new SubRuleContext.Generator();\nString NAME2 = \"name1\";\nSubRuleContext.Generator generatorB = new SubRuleContext.Generator();",
            "Sinput_code_block": "String NAME = \"name1\";\nSubRuleContext.Generator generatorA = new SubRuleContext.Generator();"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testEquals_h0Test1",
            "input_pairs_code_block": "String NAME = \"name2\";\nSubRuleContext.Generator generatorA = new SubRuleContext.Generator();\nString NAME2 = \"name2\";\nSubRuleContext.Generator generatorB = new SubRuleContext.Generator();",
            "Sinput_code_block": "String NAME = \"name2\";\nSubRuleContext.Generator generatorA = new SubRuleContext.Generator();"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testEquals_h0Test2",
            "input_pairs_code_block": "String NAME = \"name3\";\nSubRuleContext.Generator generatorA = new SubRuleContext.Generator();\nString NAME2 = \"name3\";\nSubRuleContext.Generator generatorB = new SubRuleContext.Generator();",
            "Sinput_code_block": "String NAME = \"name3\";\nSubRuleContext.Generator generatorA = new SubRuleContext.Generator();"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testEquals_h0Test3",
            "input_pairs_code_block": "String NAME = \"name4\";\nSubRuleContext.Generator generatorA = new SubRuleContext.Generator();\nString NAME2 = \"name4\";\nSubRuleContext.Generator generatorB = new SubRuleContext.Generator();",
            "Sinput_code_block": "String NAME = \"name4\";\nSubRuleContext.Generator generatorA = new SubRuleContext.Generator();"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testEquals_h0Test4",
            "input_pairs_code_block": "String NAME = \"name5\";\nSubRuleContext.Generator generatorA = new SubRuleContext.Generator();\nString NAME2 = \"name5\";\nSubRuleContext.Generator generatorB = new SubRuleContext.Generator();",
            "Sinput_code_block": "String NAME = \"name5\";\nSubRuleContext.Generator generatorA = new SubRuleContext.Generator();"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testEquals_h3Test1",
            "input_pairs_code_block": "String NAME = \"anotherName\";\nSubRuleContext.Generator generatorA = new SubRuleContext.Generator();\nString NAME2 = \"anotherName\";\nSubRuleContext.Generator generatorB = new SubRuleContext.Generator();",
            "Sinput_code_block": "String NAME = \"anotherName\";\nSubRuleContext.Generator generatorA = new SubRuleContext.Generator();"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testEquals_h3Test3",
            "input_pairs_code_block": "String NAME = \"\";\nSubRuleContext.Generator generatorA = new SubRuleContext.Generator();\nString NAME2 = \"\";\nSubRuleContext.Generator generatorB = new SubRuleContext.Generator();",
            "Sinput_code_block": "String NAME = \"\";\nSubRuleContext.Generator generatorA = new SubRuleContext.Generator();"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testEquals_h3Test4",
            "input_pairs_code_block": "String NAME = \"name\" + System.currentTimeMillis();\nSubRuleContext.Generator generatorA = new SubRuleContext.Generator();\nString NAME2 = \"name\" + System.currentTimeMillis();\nSubRuleContext.Generator generatorB = new SubRuleContext.Generator();",
            "Sinput_code_block": "String NAME = \"name\" + System.currentTimeMillis();\nSubRuleContext.Generator generatorA = new SubRuleContext.Generator();"
        }
    ],
    "com.alibaba.fastjson2.internal.processor.primitives.IntTest.test1()": [
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h0Test0",
            "input_pairs_code_block": "Integer v01 = 0;",
            "Sinput_code_block": "Integer v01 = 0;"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h0Test1",
            "input_pairs_code_block": "Integer v01 = Integer.MAX_VALUE;",
            "Sinput_code_block": "Integer v01 = Integer.MAX_VALUE;"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h0Test2",
            "input_pairs_code_block": "Integer v01 = Integer.MIN_VALUE;",
            "Sinput_code_block": "Integer v01 = Integer.MIN_VALUE;"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h0Test3",
            "input_pairs_code_block": "Integer v01 = null;",
            "Sinput_code_block": "Integer v01 = null;"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h0Test4",
            "input_pairs_code_block": "Integer v01 = 999999999;",
            "Sinput_code_block": "Integer v01 = 999999999;"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h2Test1",
            "input_pairs_code_block": "Integer v01 = -1;",
            "Sinput_code_block": "Integer v01 = -1;"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h8Test0",
            "input_pairs_code_block": "Integer v01 = 0;\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Integer v01 = 0;"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h8Test1",
            "input_pairs_code_block": "Integer v01 = null;\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Integer v01 = null;"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h8Test2",
            "input_pairs_code_block": "Integer v01 = Integer.MAX_VALUE;\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Integer v01 = Integer.MAX_VALUE;"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h8Test3",
            "input_pairs_code_block": "Integer v01 = Integer.MIN_VALUE;\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Integer v01 = Integer.MIN_VALUE;"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h8Test4",
            "input_pairs_code_block": "Integer v01 = -1;\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Integer v01 = -1;"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.primitives.IntTest_test1_h9Test5",
            "input_pairs_code_block": "Integer v01 = 5000;",
            "Sinput_code_block": "Integer v01 = 5000;"
        }
    ],
    "io.arex.inst.runtime.serializer.SerializerTest.testNestedSet()": [
        {
            "test_inputs_FQN": "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h0Test1",
            "input_pairs_code_block": "Set<Set<Object>> set = new HashSet<>();\nset.add(new HashSet<>());\nset.add(new HashSet<>());\nset.add(new HashSet<>());\nset.add(new HashSet<>());\nString serializer = \"jackson\";\nString json2 = \"nullA@R#E$X[]A@R#E$X[]A@R#E$X[]\";\nString typeName2 = \"java.util.HashSet-java.util.HashSet\";",
            "Sinput_code_block": "Set<Set<Object>> set = new HashSet<>();\nset.add(new HashSet<>());\nset.add(new HashSet<>());\nset.add(new HashSet<>());\nset.add(new HashSet<>());\nString serializer = \"jackson\";"
        },
        {
            "test_inputs_FQN": "io.arex.inst.runtime.serializer.SerializerTest_testNestedSet_h0Test3",
            "input_pairs_code_block": "Set<Set<Object>> set = new HashSet<>();\nset.add(new HashSet<>());\nset.add(new HashSet<>());\nset.add(new HashSet<>());\nset.add(new HashSet<>());\nset.add(new HashSet<>());\nString serializer = \"jackson\";\nString json2 = \"nullA@R#E$X[]A@R#E$X[]A@R#E$X[]\";\nString typeName2 = \"java.util.HashSet-java.util.HashSet\";",
            "Sinput_code_block": "Set<Set<Object>> set = new HashSet<>();\nset.add(new HashSet<>());\nset.add(new HashSet<>());\nset.add(new HashSet<>());\nset.add(new HashSet<>());\nset.add(new HashSet<>());\nString serializer = \"jackson\";"
        }
    ],
    "org.tsugi.util.Base64DoubleUrlEncodeSafeTest.testEncodeAndDecode()": [
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h0Test0",
            "input_pairs_code_block": "String input = \"A\";\nString encoded2 = \"QQ==\";",
            "Sinput_code_block": "String input = \"A\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h0Test1",
            "input_pairs_code_block": "String input = \"AB\";\nString encoded2 = \"QUJD\";",
            "Sinput_code_block": "String input = \"AB\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h0Test2",
            "input_pairs_code_block": "String input = \"ABC\";\nString encoded2 = \"QUJDRA==\";",
            "Sinput_code_block": "String input = \"ABC\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h0Test3",
            "input_pairs_code_block": "String input = \"ABCDE\";\nString encoded2 = \"QUJDREVG\";",
            "Sinput_code_block": "String input = \"ABCDE\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h0Test4",
            "input_pairs_code_block": "String input = \"1234567890\";\nString encoded2 = \"MTIzNDU2Nzg5MA==\";",
            "Sinput_code_block": "String input = \"1234567890\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h2Test3",
            "input_pairs_code_block": "String input = \"ABCD\";\nString encoded2 = \"QUJDRAU=\";",
            "Sinput_code_block": "String input = \"ABCD\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h2Test4",
            "input_pairs_code_block": "String input = \"ABCDE\";\nString encoded2 = \"QUJDRAUQ=\";",
            "Sinput_code_block": "String input = \"ABCDE\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h3Test2",
            "input_pairs_code_block": "String input = \"\";\nString encoded2 = \"\";",
            "Sinput_code_block": "String input = \"\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h3Test4",
            "input_pairs_code_block": "String input = \"!@#$%^&*()_+\";\nString encoded2 = \"IUAjJCVmKiYqKCgpX18=\";",
            "Sinput_code_block": "String input = \"!@#$%^&*()_+\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h4Test4",
            "input_pairs_code_block": "String input = \"ABCDEF\";\nString encoded2 = \"QUJDREVGQg==\";",
            "Sinput_code_block": "String input = \"ABCDEF\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h5Test0",
            "input_pairs_code_block": "String input = \"Base64DoubleUrlEncodeSafe\";\nString encoded2 = \"QmFzZTY0RHJvdWJsZVVybEVuY29kZVNhZmU=\";",
            "Sinput_code_block": "String input = \"Base64DoubleUrlEncodeSafe\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h5Test2",
            "input_pairs_code_block": "String input = \"SpecialCharacters!@#$%^&*()_+=-[]{}|;:,.<>?/\";\nString encoded2 = \"U3BlY2lhbENhY2hlcnRzIUAjJCVcQi0oKSlfXy0+W1t9fDt+Oj0sLjw+P1wv\";",
            "Sinput_code_block": "String input = \"SpecialCharacters!@#$%^&*()_+=-[]{}|;:,.<>?/\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h5Test3",
            "input_pairs_code_block": "String input = \"LongStringWithManyCharactersToEncodeAndDecode\";\nString encoded2 = \"TG9uZFN0cmluZ1dpdGhNeW1hbkNoYXJzZXRzVG9FbmNvZGVBbmRDb2RlZFNhZmU=\";",
            "Sinput_code_block": "String input = \"LongStringWithManyCharactersToEncodeAndDecode\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h6Test0",
            "input_pairs_code_block": "String input = \"Base64DoubleUrlEncodeSafe\";\nString encoded2 = \"QmFzZTY0RHJpdmVyVXJiZVVybEVuY29kZVNhZmU=\";",
            "Sinput_code_block": "String input = \"Base64DoubleUrlEncodeSafe\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h6Test3",
            "input_pairs_code_block": "String input = \"SpecialCharacters!@#$%^&*()\";\nString encoded2 = \"U3BlY2lhbENhY2hlcnRzIUAjJCVGJyZ0RlY2VzJCVGc2V0JCVGc3RheS1hcmVhJCVGc3RheS1hcmVhJCVGc3RheS1hcmVhJCVGc3RheS1hcmVhJCVGc3RheS1hcmVh\";",
            "Sinput_code_block": "String input = \"SpecialCharacters!@#$%^&*()\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h6Test4",
            "input_pairs_code_block": "String input = \"Spaces are important!\";\nString encoded2 = \"U3BhY2VzIHJlYWQgYW5kIG1hcmtldHQh\";",
            "Sinput_code_block": "String input = \"Spaces are important!\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h6Test5",
            "input_pairs_code_block": "String input = \"EmptyString\";\nString encoded2 = \"\";",
            "Sinput_code_block": "String input = \"EmptyString\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h7Test0",
            "input_pairs_code_block": "String input = \"Base64DoubleUrlEncodeSafeTest\";\nString encoded2 = \"QmFzZTY0RHJpdmUgVmVyZ2xlQm9va2luZ1NhZmU=\";",
            "Sinput_code_block": "String input = \"Base64DoubleUrlEncodeSafeTest\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h7Test4",
            "input_pairs_code_block": "String input = \"SpecialCharacters!@#$%^&*()_+=-\";\nString encoded2 = \"U3BlY2lhbENhYm9va2luZ1NhZmU=\";",
            "Sinput_code_block": "String input = \"SpecialCharacters!@#$%^&*()_+=-\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h7Test8",
            "input_pairs_code_block": "String input = \"LongStringWithSpecialCharacters!@#$%^&*()_+=-\";\nString encoded2 = \"TG9uZ1N0cmluZ1dpdGhTaXRlQm9va2luZ1NhZmU=\";",
            "Sinput_code_block": "String input = \"LongStringWithSpecialCharacters!@#$%^&*()_+=-\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h8Test0",
            "input_pairs_code_block": "String input = \"Base64DoubleUrlEncodeSafe\";\nString encoded2 = \"QmFzZTY0RHJpdmVyVXJiRW5jb2RlRm9yZFNhZmU=\";",
            "Sinput_code_block": "String input = \"Base64DoubleUrlEncodeSafe\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h8Test1",
            "input_pairs_code_block": "String input = \"Base64DoubleUrlEncodeSafe\";\nString encoded2 = java.util.Base64.getUrlEncoder().encodeToString(input.getBytes(\"UTF-8\"));",
            "Sinput_code_block": "String input = \"Base64DoubleUrlEncodeSafe\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h8Test3",
            "input_pairs_code_block": "String input = \"1234567890\";\nString encoded2 = java.util.Base64.getUrlEncoder().encodeToString(input.getBytes(\"UTF-8\"));",
            "Sinput_code_block": "String input = \"1234567890\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h8Test4",
            "input_pairs_code_block": "String input = \"SpecialCharacters!@#$%^&*()_+=-[]{}|;:',.<>?/\";\nString encoded2 = \"U3BlY2lhbENhY2hlcnRzIUAjJCVcQi4kKCkqKSAvPz48L3A+\";",
            "Sinput_code_block": "String input = \"SpecialCharacters!@#$%^&*()_+=-[]{}|;:',.<>?/\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h8Test5",
            "input_pairs_code_block": "String input = \"SpecialCharacters!@#$%^&*()_+=-[]{}|;:',.<>?/\";\nString encoded2 = java.util.Base64.getUrlEncoder().encodeToString(input.getBytes(\"UTF-8\"));",
            "Sinput_code_block": "String input = \"SpecialCharacters!@#$%^&*()_+=-[]{}|;:',.<>?/\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h8Test6",
            "input_pairs_code_block": "String input = \"LongStringWithManyCharactersToEncodeAndDecode\";\nString encoded2 = \"TG9uZFN0cmluZ1dpdGhNeWJyZXN0Q2hhbmNlcnN0aXR1Z2VzVG9FZG9jZFNhZmU=\";",
            "Sinput_code_block": "String input = \"LongStringWithManyCharactersToEncodeAndDecode\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h8Test7",
            "input_pairs_code_block": "String input = \"LongStringWithManyCharactersToEncodeAndDecode\";\nString encoded2 = java.util.Base64.getUrlEncoder().encodeToString(input.getBytes(\"UTF-8\"));",
            "Sinput_code_block": "String input = \"LongStringWithManyCharactersToEncodeAndDecode\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h8Test8",
            "input_pairs_code_block": "String input = \"\";\nString encoded2 = \"PQ==\";",
            "Sinput_code_block": "String input = \"\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h8Test9",
            "input_pairs_code_block": "String input = \"\";\nString encoded2 = java.util.Base64.getUrlEncoder().encodeToString(input.getBytes(\"UTF-8\"));",
            "Sinput_code_block": "String input = \"\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test0",
            "input_pairs_code_block": "String input = \"Base64DoubleUrlEncodeSafe\";\nString encoded2 = \"QmFzZTY0RHVtbXBUcmVhZFNlZ2VuY2U=\";",
            "Sinput_code_block": "String input = \"Base64DoubleUrlEncodeSafe\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test2",
            "input_pairs_code_block": "String input = \"SpecialCharacters!@#$%^&*()\";\nString encoded2 = \"U3BlY2lhbENhY2hlcnRzIUAjJCVGJyQlKiQl\";",
            "Sinput_code_block": "String input = \"SpecialCharacters!@#$%^&*()\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test3",
            "input_pairs_code_block": "String input = \"LongStringWithManyCharactersToEncodeAndDecode\";\nString encoded2 = \"TG9uZFN0cmluZ1dpdGhNeW1hbkNoYXJzZXRzVG9FbmNvZGVBbmRDb2RlZFNlZ2VuY2U=\";",
            "Sinput_code_block": "String input = \"LongStringWithManyCharactersToEncodeAndDecode\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test5",
            "input_pairs_code_block": "String input = \"Base64DoubleUrlEncodeSafe\";\nString encoded2 = Base64DoubleUrlEncodeSafe.encode(input);",
            "Sinput_code_block": "String input = \"Base64DoubleUrlEncodeSafe\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test6",
            "input_pairs_code_block": "String input = \"1234567890\";\nString encoded2 = Base64DoubleUrlEncodeSafe.encode(input);",
            "Sinput_code_block": "String input = \"1234567890\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test7",
            "input_pairs_code_block": "String input = \"SpecialCharacters!@#$%^&*()\";\nString encoded2 = Base64DoubleUrlEncodeSafe.encode(input);",
            "Sinput_code_block": "String input = \"SpecialCharacters!@#$%^&*()\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test8",
            "input_pairs_code_block": "String input = \"LongStringWithManyCharactersToEncodeAndDecode\";\nString encoded2 = Base64DoubleUrlEncodeSafe.encode(input);",
            "Sinput_code_block": "String input = \"LongStringWithManyCharactersToEncodeAndDecode\";"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testEncodeAndDecode_h9Test9",
            "input_pairs_code_block": "String input = \"EmptyString\";\nString encoded2 = Base64DoubleUrlEncodeSafe.encode(input);",
            "Sinput_code_block": "String input = \"EmptyString\";"
        }
    ],
    "io.cucumber.core.eventbus.RandomUuidGeneratorTest.generates_different_non_null_uuids()": [
        {
            "test_inputs_FQN": "io.cucumber.core.eventbus.RandomUuidGeneratorTest_generates_different_non_null_uuids_h7Test3",
            "input_pairs_code_block": "UuidGenerator generator = new RandomUuidGenerator();\nUuidGenerator generator2 = new FixedUuidGenerator(UUID.randomUUID());",
            "Sinput_code_block": "UuidGenerator generator = new RandomUuidGenerator();"
        }
    ],
    "org.apache.druid.collections.CloseableResourceHolderTest.testCloseableResourceHolder()": [
        {
            "test_inputs_FQN": "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h0Test0",
            "input_pairs_code_block": "Closeable closeable = () -> {};\nResourceHolder<Closeable> holder2 = ResourceHolder.fromCloseable(closeable);",
            "Sinput_code_block": "Closeable closeable = () -> {};"
        },
        {
            "test_inputs_FQN": "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h4Test0",
            "input_pairs_code_block": "Closeable closeable = () -> {};\nResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);",
            "Sinput_code_block": "Closeable closeable = () -> {};"
        },
        {
            "test_inputs_FQN": "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h4Test1",
            "input_pairs_code_block": "Closeable closeable = System.out::close;\nResourceHolder<Closeable> holder2 = new CloseableResourceHolder<Closeable>(closeable);",
            "Sinput_code_block": "Closeable closeable = System.out::close;"
        },
        {
            "test_inputs_FQN": "org.apache.druid.collections.CloseableResourceHolderTest_testCloseableResourceHolder_h5Test3",
            "input_pairs_code_block": "Closeable closeable = System.out::close;\nResourceHolder<Closeable> holder2 = ResourceHolder.fromCloseable(closeable);",
            "Sinput_code_block": "Closeable closeable = System.out::close;"
        }
    ],
    "io.bootique.di.TypeLiteralTest.normalize()": [
        {
            "test_inputs_FQN": "io.bootique.di.TypeLiteralTest_normalize_h0Test1",
            "input_pairs_code_block": "Class input = String.class;",
            "Sinput_code_block": "Class input = String.class;"
        },
        {
            "test_inputs_FQN": "io.bootique.di.TypeLiteralTest_normalize_h0Test2",
            "input_pairs_code_block": "Class input = List.class;",
            "Sinput_code_block": "Class input = List.class;"
        },
        {
            "test_inputs_FQN": "io.bootique.di.TypeLiteralTest_normalize_h5Test2",
            "input_pairs_code_block": "Class input = Double.class;",
            "Sinput_code_block": "Class input = Double.class;"
        },
        {
            "test_inputs_FQN": "io.bootique.di.TypeLiteralTest_normalize_h6Test3",
            "input_pairs_code_block": "Class input = Integer[].class;",
            "Sinput_code_block": "Class input = Integer[].class;"
        },
        {
            "test_inputs_FQN": "io.bootique.di.TypeLiteralTest_normalize_h7Test3",
            "input_pairs_code_block": "Class input = new TypeLiteral<List<String>>() {}.getRawType();",
            "Sinput_code_block": "Class input = new TypeLiteral<List<String>>() {}.getRawType();"
        },
        {
            "test_inputs_FQN": "io.bootique.di.TypeLiteralTest_normalize_h7Test4",
            "input_pairs_code_block": "Class input = new TypeLiteral<List<String>>() {}.getClass();",
            "Sinput_code_block": "Class input = new TypeLiteral<List<String>>() {}.getClass();"
        }
    ],
    "org.threeten.extra.TestYearHalf.test_lengthOfYear()": [
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_lengthOfYear_h0Test0",
            "input_pairs_code_block": "int year = 2020;\nHalf half = Half.H2;",
            "Sinput_code_block": "int year = 2020;\nHalf half = Half.H2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_lengthOfYear_h0Test2",
            "input_pairs_code_block": "int year = 1900;\nHalf half = Half.H1;",
            "Sinput_code_block": "int year = 1900;\nHalf half = Half.H1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_lengthOfYear_h0Test4",
            "input_pairs_code_block": "int year = 2000;\nHalf half = Half.H2;",
            "Sinput_code_block": "int year = 2000;\nHalf half = Half.H2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_lengthOfYear_h0Test6",
            "input_pairs_code_block": "int year = 1600;\nHalf half = Half.H1;",
            "Sinput_code_block": "int year = 1600;\nHalf half = Half.H1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_lengthOfYear_h0Test8",
            "input_pairs_code_block": "int year = 1800;\nHalf half = Half.H2;",
            "Sinput_code_block": "int year = 1800;\nHalf half = Half.H2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_lengthOfYear_h3Test0",
            "input_pairs_code_block": "int year = 2020;\nHalf half = Half.H1;",
            "Sinput_code_block": "int year = 2020;\nHalf half = Half.H1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_lengthOfYear_h3Test6",
            "input_pairs_code_block": "int year = 1900;\nHalf half = Half.H2;",
            "Sinput_code_block": "int year = 1900;\nHalf half = Half.H2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_lengthOfYear_h3Test8",
            "input_pairs_code_block": "int year = 2000;\nHalf half = Half.H1;",
            "Sinput_code_block": "int year = 2000;\nHalf half = Half.H1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_lengthOfYear_h6Test6",
            "input_pairs_code_block": "int year = 2100;\nHalf half = Half.H1;",
            "Sinput_code_block": "int year = 2100;\nHalf half = Half.H1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_lengthOfYear_h8Test2",
            "input_pairs_code_block": "int year = 2021;\nHalf half = Half.H2;",
            "Sinput_code_block": "int year = 2021;\nHalf half = Half.H2;"
        }
    ],
    "com.alibaba.fastjson2.internal.processor.collections.ListTest1.test()": [
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h0Test0",
            "input_pairs_code_block": "List<Integer> v01 = new ArrayList<>();\nint id = 0;\nv01.add(id);",
            "Sinput_code_block": "List<Integer> v01 = new ArrayList<>();\nint id = 0;\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h0Test1",
            "input_pairs_code_block": "List<Integer> v01 = new ArrayList<>();\nint id = -123;\nv01.add(id);",
            "Sinput_code_block": "List<Integer> v01 = new ArrayList<>();\nint id = -123;\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h0Test2",
            "input_pairs_code_block": "List<Integer> v01 = new ArrayList<>();\nint id = Integer.MAX_VALUE;\nv01.add(id);",
            "Sinput_code_block": "List<Integer> v01 = new ArrayList<>();\nint id = Integer.MAX_VALUE;\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h0Test3",
            "input_pairs_code_block": "List<Integer> v01 = new ArrayList<>();\nint id = Integer.MIN_VALUE;\nv01.add(id);",
            "Sinput_code_block": "List<Integer> v01 = new ArrayList<>();\nint id = Integer.MIN_VALUE;\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h0Test4",
            "input_pairs_code_block": "List<Integer> v01 = new ArrayList<>();\nint id = Integer.parseInt(\"123\");\nv01.add(id);",
            "Sinput_code_block": "List<Integer> v01 = new ArrayList<>();\nint id = Integer.parseInt(\"123\");\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h3Test4",
            "input_pairs_code_block": "List<Integer> v01 = new ArrayList<>();\nint id = 123456789;\nv01.add(id);",
            "Sinput_code_block": "List<Integer> v01 = new ArrayList<>();\nint id = 123456789;\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test_h6Test4",
            "input_pairs_code_block": "List<Integer> v01 = new ArrayList<>();\nint id = Integer.parseInt(\"12345\");\nv01.add(id);",
            "Sinput_code_block": "List<Integer> v01 = new ArrayList<>();\nint id = Integer.parseInt(\"12345\");\nv01.add(id);"
        }
    ],
    "se.michaelthelin.spotify.Base64Test.testCustomBase64()": [
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h0Test0",
            "input_pairs_code_block": "byte[] testDataBytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};\nString input2 = \"AAECAwQFBgcICQoLDA0ODxA=\";",
            "Sinput_code_block": "byte[] testDataBytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31};"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h0Test1",
            "input_pairs_code_block": "byte[] testDataBytes = new byte[]{-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31};\nString input2 = \"/////w==\";",
            "Sinput_code_block": "byte[] testDataBytes = new byte[]{-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -21, -22, -23, -24, -25, -26, -27, -28, -29, -30, -31};"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h0Test2",
            "input_pairs_code_block": "byte[] testDataBytes = new byte[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\nString input2 = \"AAAAAAAAAAAAAAAAAAAAAA==\";",
            "Sinput_code_block": "byte[] testDataBytes = new byte[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h0Test3",
            "input_pairs_code_block": "byte[] testDataBytes = new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};\nString input2 = \"/////w==\";",
            "Sinput_code_block": "byte[] testDataBytes = new byte[]{-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1};"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h2Test0",
            "input_pairs_code_block": "byte[] testDataBytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\nString input2 = \"AAECAwQFBgc=\";",
            "Sinput_code_block": "byte[] testDataBytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h2Test1",
            "input_pairs_code_block": "byte[] testDataBytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};\nString input2 = \"AAECAwQFBg==\";",
            "Sinput_code_block": "byte[] testDataBytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10};"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h2Test2",
            "input_pairs_code_block": "byte[] testDataBytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};\nString input2 = \"AAECAwQFBg=\";",
            "Sinput_code_block": "byte[] testDataBytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11};"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h2Test3",
            "input_pairs_code_block": "byte[] testDataBytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};\nString input2 = \"AAECAwQFBg==\";",
            "Sinput_code_block": "byte[] testDataBytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12};"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h2Test4",
            "input_pairs_code_block": "byte[] testDataBytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};\nString input2 = \"AAECAwQFBg==\";",
            "Sinput_code_block": "byte[] testDataBytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13};"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test0",
            "input_pairs_code_block": "byte[] testDataBytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};\nString input2 = \"AAECAwQFBgcICQoLDA0ODxA=\";",
            "Sinput_code_block": "byte[] testDataBytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9};"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test1",
            "input_pairs_code_block": "byte[] testDataBytes = new byte[]{-1, -2, -3, -4, -5, -6, -7, -8, -9, -10};\nString input2 = \"/////w==\";",
            "Sinput_code_block": "byte[] testDataBytes = new byte[]{-1, -2, -3, -4, -5, -6, -7, -8, -9, -10};"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test3",
            "input_pairs_code_block": "byte[] testDataBytes = new byte[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0};\nString input2 = \"AAAAAAAAAA==\";",
            "Sinput_code_block": "byte[] testDataBytes = new byte[]{0, 0, 0, 0, 0, 0, 0, 0, 0, 0};"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h3Test4",
            "input_pairs_code_block": "byte[] testDataBytes = new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};\nString input2 = \"////////\";",
            "Sinput_code_block": "byte[] testDataBytes = new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h4Test3",
            "input_pairs_code_block": "byte[] testDataBytes = new byte[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};\nString input2 = \"AAAAAAAAAAAAAAAAAAAAAA==\";",
            "Sinput_code_block": "byte[] testDataBytes = new byte[]{1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h4Test4",
            "input_pairs_code_block": "byte[] testDataBytes = new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};\nString input2 = \"/////w==\";",
            "Sinput_code_block": "byte[] testDataBytes = new byte[]{(byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF, (byte) 0xFF};"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h5Test0",
            "input_pairs_code_block": "byte[] testDataBytes = \"Hello World\".getBytes();\nString input2 = Base64.encode(testDataBytes);",
            "Sinput_code_block": "byte[] testDataBytes = \"Hello World\".getBytes();"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h5Test1",
            "input_pairs_code_block": "byte[] testDataBytes = \"1234567890\".getBytes();\nString input2 = Base64.encode(testDataBytes);",
            "Sinput_code_block": "byte[] testDataBytes = \"1234567890\".getBytes();"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h5Test2",
            "input_pairs_code_block": "byte[] testDataBytes = \"!@#$%^&*()\".getBytes();\nString input2 = Base64.encode(testDataBytes);",
            "Sinput_code_block": "byte[] testDataBytes = \"!@#$%^&*()\".getBytes();"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h5Test3",
            "input_pairs_code_block": "byte[] testDataBytes = \"\".getBytes();\nString input2 = Base64.encode(testDataBytes);",
            "Sinput_code_block": "byte[] testDataBytes = \"\".getBytes();"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h5Test4",
            "input_pairs_code_block": "byte[] testDataBytes = \"a\".getBytes();\nString input2 = Base64.encode(testDataBytes);",
            "Sinput_code_block": "byte[] testDataBytes = \"a\".getBytes();"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h6Test0",
            "input_pairs_code_block": "byte[] testDataBytes = \"Hello World\".getBytes();\nString input2 = \"SGVsbG8gV29ybGQ=\";",
            "Sinput_code_block": "byte[] testDataBytes = \"Hello World\".getBytes();"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h6Test2",
            "input_pairs_code_block": "byte[] testDataBytes = \"1234567890\".getBytes();\nString input2 = \"MTIzNDU2Nzg5MA==\";",
            "Sinput_code_block": "byte[] testDataBytes = \"1234567890\".getBytes();"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h6Test3",
            "input_pairs_code_block": "byte[] testDataBytes = \"!@#$%^&*()\".getBytes();\nString input2 = \"IUAjJCVmJygpKQ==\";",
            "Sinput_code_block": "byte[] testDataBytes = \"!@#$%^&*()\".getBytes();"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h6Test4",
            "input_pairs_code_block": "byte[] testDataBytes = \"AaBbCcDdEeFfGg\".getBytes();\nString input2 = \"QWFCYmNCQ0RkRWVmRmdo\";",
            "Sinput_code_block": "byte[] testDataBytes = \"AaBbCcDdEeFfGg\".getBytes();"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h6Test5",
            "input_pairs_code_block": "byte[] testDataBytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};\nString input2 = \"AAECAwQFBgcICQoLDA0ODw==\";",
            "Sinput_code_block": "byte[] testDataBytes = new byte[]{0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15};"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h7Test0",
            "input_pairs_code_block": "byte[] testDataBytes = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};\nString input2 = \"AAECAwQFBgcICQoLDA0ODw==\";",
            "Sinput_code_block": "byte[] testDataBytes = {0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E, 0x0F};"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h7Test3",
            "input_pairs_code_block": "byte[] testDataBytes = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};\nString input2 = \"AAAAAAAAAAAAAA==\";",
            "Sinput_code_block": "byte[] testDataBytes = {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h8Test6",
            "input_pairs_code_block": "byte[] testDataBytes = \"\".getBytes();\nString input2 = \"\";",
            "Sinput_code_block": "byte[] testDataBytes = \"\".getBytes();"
        },
        {
            "test_inputs_FQN": "se.michaelthelin.spotify.Base64Test_testCustomBase64_h8Test8",
            "input_pairs_code_block": "byte[] testDataBytes = \" \".getBytes();\nString input2 = \"IA==\";",
            "Sinput_code_block": "byte[] testDataBytes = \" \".getBytes();"
        }
    ],
    "com.alibaba.fastjson2.internal.processor.collections.ListTest1.test1()": [
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h0Test0",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"456\";\nv01.add(id);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"456\";\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h0Test1",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"789\";\nv01.add(id);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"789\";\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h0Test2",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"\";\nv01.add(id);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"\";\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h0Test3",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"123\";\nv01.add(id);\nv01.add(id);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"123\";\nv01.add(id);\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h0Test4",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = null;\nv01.add(id);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = null;\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h2Test2",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"1234567890\";\nv01.add(id);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"1234567890\";\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h2Test3",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"123\\n456\";\nv01.add(id);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"123\\n456\";\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h3Test0",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"456\";\nv01.add(id);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"456\";\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h3Test1",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"789\";\nv01.add(id);\nv01.add(id);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"789\";\nv01.add(id);\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h3Test2",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"131415\";\nv01.add(id);\nv01.add(id);\nv01.add(id);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"131415\";\nv01.add(id);\nv01.add(id);\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h3Test3",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"232425\";\nv01.add(id);\nv01.add(id);\nv01.add(id);\nv01.add(id);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"232425\";\nv01.add(id);\nv01.add(id);\nv01.add(id);\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h3Test4",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"343536\";\nv01.add(id);\nv01.add(id);\nv01.add(id);\nv01.add(id);\nv01.add(id);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"343536\";\nv01.add(id);\nv01.add(id);\nv01.add(id);\nv01.add(id);\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h4Test1",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"789\";\nv01.add(id);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"789\";\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h4Test2",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"000\";\nv01.add(id);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"000\";\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h4Test3",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"111\";\nv01.add(id);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"111\";\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h4Test4",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"222\";\nv01.add(id);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"222\";\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h6Test3",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"123\";\nv01.add(id);\nString id2 = \"456\";\nv01.add(id2);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"123\";\nv01.add(id);\nString id2 = \"456\";\nv01.add(id2);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h7Test1",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"789\";\nv01.add(id);\nv01.add(id);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"789\";\nv01.add(id);\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h8Test1",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"\";\nv01.add(id);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"\";\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h8Test2",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"1234567890\";\nv01.add(id);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"1234567890\";\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h8Test3",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"123\\n456\";\nv01.add(id);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"123\\n456\";\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h8Test4",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"123\\t456\";\nv01.add(id);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"123\\t456\";\nv01.add(id);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.ListTest1_test1_h9Test4",
            "input_pairs_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"abcdef\";\nv01.add(id);",
            "Sinput_code_block": "List<String> v01 = new ArrayList<>();\nString id = \"abcdef\";\nv01.add(id);"
        }
    ],
    "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest.entrySetTest()": [
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h0Test0",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(1, 2);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(1, 2);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(1, 2);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h0Test1",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, 2);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(null, 2);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, 2);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h0Test2",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, null);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(5, null);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, null);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h0Test3",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(0, 0);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(0, 0);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(0, 0);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h0Test4",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(Integer.MAX_VALUE, Integer.MAX_VALUE);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(Integer.MAX_VALUE, Integer.MAX_VALUE);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(Integer.MAX_VALUE, Integer.MAX_VALUE);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h2Test0",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(2, 5);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(2, 5);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(2, 5);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h2Test1",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 15);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(5, 15);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 15);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h2Test2",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, 5);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(null, 5);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, 5);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h3Test0",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(2, 1);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(2, 1);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(2, 1);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h3Test4",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, null);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(null, null);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, null);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h4Test1",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 6);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(5, 6);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 6);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h4Test2",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, 1);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(null, 1);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, 1);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h5Test0",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(1, 1);\nanotherMap.put(2, 2);\nanotherMap.put(3, 3);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(1, 1);\nmap.put(2, 2);\nmap.put(3, 3);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(1, 1);\nanotherMap.put(2, 2);\nanotherMap.put(3, 3);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h5Test1",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(6, 6);\nanotherMap.put(7, 7);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(6, 6);\nmap.put(7, 7);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(6, 6);\nanotherMap.put(7, 7);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h5Test2",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 6);\nanotherMap.put(4, 2);\nanotherMap.put(3, 1);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(5, 6);\nmap.put(4, 2);\nmap.put(3, 1);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 6);\nanotherMap.put(4, 2);\nanotherMap.put(3, 1);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h5Test3",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, 10);\nanotherMap.put(null, 3);\nanotherMap.put(null, 7);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(null, 10);\nmap.put(null, 3);\nmap.put(null, 7);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, 10);\nanotherMap.put(null, 3);\nanotherMap.put(null, 7);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h5Test4",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, null);\nanotherMap.put(4, null);\nanotherMap.put(3, null);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(5, null);\nmap.put(4, null);\nmap.put(3, null);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, null);\nanotherMap.put(4, null);\nanotherMap.put(3, null);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h6Test0",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(1, 2);\nanotherMap.put(2, 3);\nanotherMap.put(3, 4);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(1, 2);\nmap.put(2, 3);\nmap.put(3, 4);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(1, 2);\nanotherMap.put(2, 3);\nanotherMap.put(3, 4);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h6Test1",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(6, 15);\nanotherMap.put(7, 20);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(6, 15);\nmap.put(7, 20);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(6, 15);\nanotherMap.put(7, 20);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h6Test2",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(2, 2);\nanotherMap.put(1, 1);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(2, 2);\nmap.put(1, 1);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(2, 2);\nanotherMap.put(1, 1);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h6Test3",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(2, 2);\nanotherMap.put(1, 1);\nanotherMap.put(6, 15);\nanotherMap.put(7, 20);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(2, 2);\nmap.put(1, 1);\nmap.put(6, 15);\nmap.put(7, 20);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(2, 2);\nanotherMap.put(1, 1);\nanotherMap.put(6, 15);\nanotherMap.put(7, 20);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h6Test4",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(2, 2);\nanotherMap.put(1, 1);\nanotherMap.put(6, 15);\nanotherMap.put(7, 20);\nanotherMap.put(8, 25);\nanotherMap.put(9, 30);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(2, 2);\nmap.put(1, 1);\nmap.put(6, 15);\nmap.put(7, 20);\nmap.put(8, 25);\nmap.put(9, 30);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(2, 2);\nanotherMap.put(1, 1);\nanotherMap.put(6, 15);\nanotherMap.put(7, 20);\nanotherMap.put(8, 25);\nanotherMap.put(9, 30);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h7Test1",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(6, 8);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(6, 8);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(6, 8);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h7Test2",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 6);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(5, 6);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 6);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h7Test3",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, 10);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(null, 10);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, 10);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h7Test4",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, null);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(5, null);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, null);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h8Test3",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h8Test4",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(null, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, null);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(null, 10);\nmap.put(4, 3);\nmap.put(3, null);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(null, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, null);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h9Test1",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(2, 1);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(2, 1);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(2, 1);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_entrySetTest_h9Test4",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, null);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(null, null);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, null);"
        }
    ],
    "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest.test()": [
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h0Test1",
            "input_pairs_code_block": "JSONObject v01 = JSONObject.of(\"name\", \"John Doe\");",
            "Sinput_code_block": "JSONObject v01 = JSONObject.of(\"name\", \"John Doe\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h0Test2",
            "input_pairs_code_block": "JSONObject v01 = JSONObject.of(\"age\", 30);",
            "Sinput_code_block": "JSONObject v01 = JSONObject.of(\"age\", 30);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h0Test3",
            "input_pairs_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"name\", \"John Doe\", \"age\", 30, \"city\", \"New York\");",
            "Sinput_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"name\", \"John Doe\", \"age\", 30, \"city\", \"New York\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h0Test4",
            "input_pairs_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"name\", \"John Doe\", \"age\", 30, \"city\", \"New York\", \"country\", \"USA\");",
            "Sinput_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"name\", \"John Doe\", \"age\", 30, \"city\", \"New York\", \"country\", \"USA\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h7Test4",
            "input_pairs_code_block": "JSONObject v01 = JSONObject.of(\"isStudent\", true);",
            "Sinput_code_block": "JSONObject v01 = JSONObject.of(\"isStudent\", true);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h7Test6",
            "input_pairs_code_block": "JSONObject v01 = JSONObject.of(\"address\", JSONObject.of(\"street\", \"123 Main St\", \"city\", \"New York\", \"state\", \"NY\", \"zip\", \"10001\"));",
            "Sinput_code_block": "JSONObject v01 = JSONObject.of(\"address\", JSONObject.of(\"street\", \"123 Main St\", \"city\", \"New York\", \"state\", \"NY\", \"zip\", \"10001\"));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h7Test8",
            "input_pairs_code_block": "JSONObject v01 = JSONObject.of(\"hobbies\", Arrays.asList(\"reading\", \"coding\", \"traveling\"));",
            "Sinput_code_block": "JSONObject v01 = JSONObject.of(\"hobbies\", Arrays.asList(\"reading\", \"coding\", \"traveling\"));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h8Test2",
            "input_pairs_code_block": "JSONObject v01 = JSONObject.of(\"age\", 25);",
            "Sinput_code_block": "JSONObject v01 = JSONObject.of(\"age\", 25);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h8Test3",
            "input_pairs_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"name\", \"John Doe\", \"age\", 25);",
            "Sinput_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"name\", \"John Doe\", \"age\", 25);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h8Test4",
            "input_pairs_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"name\", \"John Doe\", \"age\", 25, \"address\", \"123 Main St\");",
            "Sinput_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"name\", \"John Doe\", \"age\", 25, \"address\", \"123 Main St\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test_h8Test5",
            "input_pairs_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"name\", \"John Doe\", \"age\", 25, \"address\", \"123 Main St\", \"phone\", \"555-555-5555\");",
            "Sinput_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"name\", \"John Doe\", \"age\", 25, \"address\", \"123 Main St\", \"phone\", \"555-555-5555\");"
        }
    ],
    "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest.test1()": [
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h2Test1",
            "input_pairs_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"name\", \"John Doe\");",
            "Sinput_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"name\", \"John Doe\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h2Test2",
            "input_pairs_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"age\", 30);",
            "Sinput_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"age\", 30);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h2Test3",
            "input_pairs_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"address\", \"123 Main St\");",
            "Sinput_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"address\", \"123 Main St\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h2Test4",
            "input_pairs_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"email\", \"johndoe@example.com\");",
            "Sinput_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"email\", \"johndoe@example.com\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h3Test3",
            "input_pairs_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"isActive\", true);",
            "Sinput_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"isActive\", true);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h3Test4",
            "input_pairs_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"address\", JSONObject.of(\"street\", \"123 Main St\", \"city\", \"New York\"));",
            "Sinput_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"address\", JSONObject.of(\"street\", \"123 Main St\", \"city\", \"New York\"));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.JSONObjectTest_test1_h3Test5",
            "input_pairs_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"hobbies\", Arrays.asList(\"reading\", \"coding\"));",
            "Sinput_code_block": "JSONObject v01 = JSONObject.of(\"id\", 1001, \"hobbies\", Arrays.asList(\"reading\", \"coding\"));"
        }
    ],
    "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest.keySetTest()": [
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h0Test0",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(1, 1);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(3, 6);\nmap.put(4, 6);\nmap.put(1, 1);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(1, 1);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h0Test1",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(0, 0);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(3, 6);\nmap.put(4, 6);\nmap.put(0, 0);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(0, 0);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h0Test2",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(Integer.MAX_VALUE, Integer.MAX_VALUE);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(3, 6);\nmap.put(4, 6);\nmap.put(Integer.MAX_VALUE, Integer.MAX_VALUE);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(Integer.MAX_VALUE, Integer.MAX_VALUE);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h0Test3",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, null);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(3, 6);\nmap.put(4, 6);\nmap.put(null, null);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, null);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h0Test4",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(Integer.MIN_VALUE, Integer.MIN_VALUE);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(3, 6);\nmap.put(4, 6);\nmap.put(Integer.MIN_VALUE, Integer.MIN_VALUE);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(Integer.MIN_VALUE, Integer.MIN_VALUE);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h3Test0",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(2, 1);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(3, 6);\nmap.put(4, 6);\nmap.put(2, 1);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(2, 1);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h3Test1",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(1, 2);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(3, 6);\nmap.put(4, 6);\nmap.put(1, 2);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(1, 2);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h3Test3",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(6, 6);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(3, 6);\nmap.put(4, 6);\nmap.put(6, 6);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(6, 6);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h3Test4",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, 5);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(3, 6);\nmap.put(4, 6);\nmap.put(null, 5);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, 5);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h5Test0",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(1, 2);\nanotherMap.put(2, 3);\nanotherMap.put(3, 4);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(1, 2);\nmap.put(2, 3);\nmap.put(3, 4);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(1, 2);\nanotherMap.put(2, 3);\nanotherMap.put(3, 4);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h5Test1",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(6, 8);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(6, 8);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(6, 8);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h5Test2",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 8);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(5, 8);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 8);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h5Test3",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, 8);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(null, 8);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, 8);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h5Test4",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, null);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(5, null);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, null);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h6Test1",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(6, 8);\nanotherMap.put(7, 9);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(6, 8);\nmap.put(7, 9);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(6, 8);\nanotherMap.put(7, 9);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h6Test2",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 6);\nanotherMap.put(4, 5);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(3, 6);\nmap.put(4, 5);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 6);\nanotherMap.put(4, 5);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h6Test3",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, 10);\nanotherMap.put(null, 3);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(null, 10);\nmap.put(null, 3);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, 10);\nanotherMap.put(null, 3);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h6Test4",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h7Test1",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(6, 3);\nanotherMap.put(7, 7);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(6, 3);\nmap.put(7, 7);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(6, 3);\nanotherMap.put(7, 7);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h7Test2",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(8, 9);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(8, 9);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(8, 9);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h7Test3",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 6);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(5, 6);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 6);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h7Test4",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h8Test1",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(6, 8);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(3, 6);\nmap.put(4, 6);\nmap.put(6, 8);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(6, 8);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h8Test2",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 8);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(3, 6);\nmap.put(4, 6);\nmap.put(5, 8);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 8);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h8Test3",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, 8);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(3, 6);\nmap.put(4, 6);\nmap.put(null, 8);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, 8);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h8Test4",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, null);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 6);\nmap.put(3, 6);\nmap.put(4, 6);\nmap.put(5, null);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, null);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h9Test2",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(8, 1);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(8, 1);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(8, 1);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h9Test3",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 1);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(5, 1);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(5, 1);"
        },
        {
            "test_inputs_FQN": "com.itextpdf.commons.datastructures.ConcurrentWeakMapTest_keySetTest_h9Test4",
            "input_pairs_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, 1);\nConcurrentWeakMap<Integer, Integer> map = new ConcurrentWeakMap<>();\nmap.put(5, 10);\nmap.put(4, 3);\nmap.put(3, 7);\nmap.put(null, 1);",
            "Sinput_code_block": "Map<Integer, Integer> anotherMap = new HashMap<>();\nanotherMap.put(5, 10);\nanotherMap.put(4, 3);\nanotherMap.put(3, 7);\nanotherMap.put(null, 1);"
        }
    ],
    "software.amazon.event.ruler.SubRuleContextTest.testGetters()": [
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testGetters_h0Test0",
            "input_pairs_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"\";\nDouble id = -1.7976931348623157E308;\nSubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
            "Sinput_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"\";"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testGetters_h0Test1",
            "input_pairs_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"a\".repeat(1000);\nDouble id = -1.7976931348623157E308;\nSubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
            "Sinput_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"a\".repeat(1000);"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testGetters_h0Test4",
            "input_pairs_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"1234567890\";\nDouble id = -1.7976931348623157E308;\nSubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
            "Sinput_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"1234567890\";"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testGetters_h2Test1",
            "input_pairs_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"a\";\nDouble id = -1.7976931348623157E308;\nSubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
            "Sinput_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"a\";"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testGetters_h2Test2",
            "input_pairs_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"ab\";\nDouble id = -1.7976931348623157E308;\nSubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
            "Sinput_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"ab\";"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testGetters_h2Test3",
            "input_pairs_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"abc\";\nDouble id = -1.7976931348623157E308;\nSubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
            "Sinput_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"abc\";"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testGetters_h3Test4",
            "input_pairs_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"123\";\nDouble id = -1.7976931348623157E308;\nSubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
            "Sinput_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"123\";"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testGetters_h4Test3",
            "input_pairs_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"name@example.com\";\nDouble id = -1.7976931348623157E308;\nSubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
            "Sinput_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"name@example.com\";"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testGetters_h5Test0",
            "input_pairs_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"newName\";\nDouble id = generator.generate(NAME).getId();\nSubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
            "Sinput_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"newName\";"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testGetters_h5Test1",
            "input_pairs_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"\";\nDouble id = generator.generate(NAME).getId();\nSubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
            "Sinput_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"\";"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testGetters_h5Test3",
            "input_pairs_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"12345\";\nDouble id = generator.generate(NAME).getId();\nSubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
            "Sinput_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"12345\";"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testGetters_h5Test4",
            "input_pairs_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"name@example.com\";\nDouble id = generator.generate(NAME).getId();\nSubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
            "Sinput_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"name@example.com\";"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testGetters_h6Test3",
            "input_pairs_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"123\";\nDouble id = generator.generate(NAME).getId();\nSubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
            "Sinput_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"123\";"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testGetters_h6Test4",
            "input_pairs_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"name123\";\nDouble id = generator.generate(NAME).getId();\nSubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
            "Sinput_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"name123\";"
        },
        {
            "test_inputs_FQN": "software.amazon.event.ruler.SubRuleContextTest_testGetters_h7Test4",
            "input_pairs_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"name\" + System.currentTimeMillis();\nDouble id = generator.generate(NAME).getId();\nSubRuleContext.Generator generator2 = new SubRuleContext.Generator();",
            "Sinput_code_block": "SubRuleContext.Generator generator = new SubRuleContext.Generator();\nString NAME = \"name\" + System.currentTimeMillis();"
        }
    ],
    "org.datagear.util.version.VersionTest.stringOfTest()": [
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_stringOfTest_h5Test0",
            "input_pairs_code_block": "String v = \"2.0.0\";",
            "Sinput_code_block": "String v = \"2.0.0\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_stringOfTest_h5Test1",
            "input_pairs_code_block": "String v = \"1.1.0\";",
            "Sinput_code_block": "String v = \"1.1.0\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_stringOfTest_h5Test2",
            "input_pairs_code_block": "String v = \"1.0.1\";",
            "Sinput_code_block": "String v = \"1.0.1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_stringOfTest_h5Test3",
            "input_pairs_code_block": "String v = \"1.0.0-A1\";",
            "Sinput_code_block": "String v = \"1.0.0-A1\";"
        }
    ],
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test()": [
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h0Test0",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"456\", \"def\");",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"456\", \"def\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h0Test1",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"xyz\");",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"xyz\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h0Test2",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"789\", \"ghi\");\nv01.put(\"123\", \"jkl\");",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"789\", \"ghi\");\nv01.put(\"123\", \"jkl\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h0Test3",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"mno\");\nv01.put(\"456\", \"pqr\");\nv01.put(\"789\", \"stu\");",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"mno\");\nv01.put(\"456\", \"pqr\");\nv01.put(\"789\", \"stu\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h0Test4",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"vwx\");\nv01.put(\"456\", \"yza\");\nv01.put(\"789\", \"bcd\");\nv01.put(\"101112\", \"efg\");",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"vwx\");\nv01.put(\"456\", \"yza\");\nv01.put(\"789\", \"bcd\");\nv01.put(\"101112\", \"efg\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h2Test1",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"xyz\");\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, String>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"xyz\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h2Test2",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"789\", \"ghi\");\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, String>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"789\", \"ghi\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h2Test4",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"\");\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, String>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h3Test0",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"456\", \"def\");\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);\nType mapType = new TypeReference<Map<String, String>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"456\", \"def\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h3Test1",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"def\");\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);\nType mapType = new TypeReference<Map<String, String>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"def\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h3Test2",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"789\", \"ghi\");\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);\nType mapType = new TypeReference<Map<String, String>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"789\", \"ghi\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h3Test3",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"jkl\");\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);\nType mapType = new TypeReference<Map<String, String>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"jkl\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h3Test4",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"mno\");\nv01.put(\"456\", \"pqr\");\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);\nType mapType = new TypeReference<Map<String, String>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"mno\");\nv01.put(\"456\", \"pqr\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h4Test0",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"456\", \"def\");\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"456\", \"def\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h4Test1",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"def\");\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"def\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h4Test3",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"\", \"abc\");\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"\", \"abc\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h4Test4",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"abc\");\nv01.put(\"456\", \"def\");\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"abc\");\nv01.put(\"456\", \"def\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h5Test0",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"456\", \"def\");\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"456\", \"def\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h5Test1",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"xyz\");\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"xyz\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h5Test2",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"789\", \"ghi\");\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"789\", \"ghi\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h5Test3",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"jkl\");\nv01.put(\"456\", \"mno\");\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"jkl\");\nv01.put(\"456\", \"mno\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h5Test4",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h6Test2",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"jkl\");\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, String>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"jkl\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h6Test3",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"mno\");\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, String>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"mno\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h6Test4",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"pqr\");\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, String>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"pqr\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h7Test1",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"ghi\");\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"ghi\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h7Test2",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"789\", \"jkl\");\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"789\", \"jkl\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h7Test3",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"mno\");\nv01.put(\"456\", \"pqr\");\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"mno\");\nv01.put(\"456\", \"pqr\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h7Test4",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"abc\");\nv01.put(\"456\", \"def\");\nv01.put(\"789\", \"ghi\");\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"abc\");\nv01.put(\"456\", \"def\");\nv01.put(\"789\", \"ghi\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h8Test1",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"789\", \"ghi\");\nv01.put(\"123\", \"jkl\");\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, String>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"789\", \"ghi\");\nv01.put(\"123\", \"jkl\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h8Test2",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"\", \"\");\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, String>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"\", \"\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h9Test0",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"456\", \"def\");\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, String>>() {}.getType();",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"456\", \"def\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h9Test1",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"789\", \"ghi\");\nv01.put(\"123\", \"jkl\");\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, String>>() {}.getType();",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"789\", \"ghi\");\nv01.put(\"123\", \"jkl\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h9Test2",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"\", \"\");\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, String>>() {}.getType();",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"\", \"\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test_h9Test4",
            "input_pairs_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"abc\");\nv01.put(\"123\", \"def\");\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, String>>() {}.getType();",
            "Sinput_code_block": "Map<String, String> v01 = new HashMap<>();\nv01.put(\"123\", \"abc\");\nv01.put(\"123\", \"def\");"
        }
    ],
    "org.ojalgo.data.transform.DiscreteFourierTransformTest.testNonPowerOf2()": [
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h0Test0",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(1, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(1);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(1, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(1);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h0Test1",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(16, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(16);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(16, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(16);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h0Test2",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(2, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(2);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(2, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(2);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h0Test3",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(32, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(32);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(32, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(32);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h2Test0",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(5, 1, Uniform.of(-10, 10));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(5);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(5, 1, Uniform.of(-10, 10));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(5);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h2Test1",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(8, 1, Uniform.of(-100, 100));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(8);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(8, 1, Uniform.of(-100, 100));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(8);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h2Test2",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(11, 1, Uniform.of(-1, 1));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(11);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(11, 1, Uniform.of(-1, 1));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(11);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h2Test3",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(1, 1, Uniform.of(-5, 5));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(1);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(1, 1, Uniform.of(-5, 5));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(1);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h2Test4",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(15, 1, Uniform.of(-50, 50));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(15);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(15, 1, Uniform.of(-50, 50));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(15);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h3Test2",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(17, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(17);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(17, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(17);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h3Test4",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(33, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(33);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(33, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(33);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h4Test0",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(3, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(3);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(3, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(3);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h4Test1",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(5, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(5);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(5, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(5);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h5Test0",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(8, 1, Uniform.of(-10, 20));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(8);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(8, 1, Uniform.of(-10, 20));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(8);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h5Test1",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(16, 1, Uniform.of(-100, 200));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(16);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(16, 1, Uniform.of(-100, 200));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(16);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h5Test2",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(32, 1, Uniform.of(-1000, 2000));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(32);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(32, 1, Uniform.of(-1000, 2000));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(32);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h5Test3",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(64, 1, Uniform.of(-10000, 20000));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(64);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(64, 1, Uniform.of(-10000, 20000));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(64);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h5Test4",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(128, 1, Uniform.of(-100000, 200000));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(128);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(128, 1, Uniform.of(-100000, 200000));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(128);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h6Test0",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(5, 1, Uniform.of(-10, 20));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(5);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(5, 1, Uniform.of(-10, 20));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(5);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h6Test1",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(8, 1, Uniform.of(-5, 15));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(8);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(8, 1, Uniform.of(-5, 15));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(8);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h6Test2",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(10, 1, Uniform.of(-3, 7));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(10);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(10, 1, Uniform.of(-3, 7));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(10);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h6Test3",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(12, 1, Uniform.of(-8, 24));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(12);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(12, 1, Uniform.of(-8, 24));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(12);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h6Test4",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(15, 1, Uniform.of(-2, 6));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(15);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(15, 1, Uniform.of(-2, 6));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(15);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h7Test1",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(7, 1, Uniform.of(-5, 15));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(7);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(7, 1, Uniform.of(-5, 15));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(7);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h7Test2",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(3, 1, Uniform.of(-8, 12));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(3);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(3, 1, Uniform.of(-8, 12));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(3);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h7Test3",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(2, 1, Uniform.of(-3, 7));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(2);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(2, 1, Uniform.of(-3, 7));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(2);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h7Test4",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(1, 1, Uniform.of(-1, 1));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(1);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(1, 1, Uniform.of(-1, 1));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(1);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h8Test1",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(10, 1, Uniform.of(-100, 200));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(10);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(10, 1, Uniform.of(-100, 200));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(10);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h8Test2",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(15, 1, Uniform.of(-1000, 2000));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(15);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(15, 1, Uniform.of(-1000, 2000));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(15);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h8Test3",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(20, 1, Uniform.of(-10000, 20000));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(20);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(20, 1, Uniform.of(-10000, 20000));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(20);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h8Test4",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(25, 1, Uniform.of(-100000, 200000));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(25);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(25, 1, Uniform.of(-100000, 200000));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(25);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h9Test1",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(10, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(10);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(10, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(10);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h9Test2",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(15, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(15);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(15, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(15);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h9Test3",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(20, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(20);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(20, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(20);"
        },
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testNonPowerOf2_h9Test4",
            "input_pairs_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(25, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(25);\nMatrixStore<ComplexNumber> transformed2 = GenericStore.C128.makeDense(input.size(), 1);",
            "Sinput_code_block": "PhysicalStore<Double> input = Primitive64Store.FACTORY.makeFilled(25, 1, Uniform.of(-2, 4));\nDiscreteFourierTransform transformer = DiscreteFourierTransform.newInstance(25);"
        }
    ],
    "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest.testGetThreadPoolId()": [
        {
            "test_inputs_FQN": "cn.hippo4j.core.executor.plugin.manager.ThreadPoolPluginSupportTest_testGetThreadPoolId_h0Test0",
            "input_pairs_code_block": "ExtensibleThreadPoolExecutor executor = new ExtensibleThreadPoolExecutor(\"test\", manager, 5, 5, 1000L, TimeUnit.MILLISECONDS, new ArrayBlockingQueue<>(1), Thread::new, new ThreadPoolExecutor.AbortPolicy());\nThreadPoolPluginSupport support = new TestSupport(executor.getThreadPoolId(), executor, manager);",
            "Sinput_code_block": ""
        }
    ],
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test1()": [
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h0Test0",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"456\", 456);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"456\", 456);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h0Test1",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"123\", 456);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"123\", 456);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h0Test2",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"789\", 789);\nv01.put(\"101\", 101);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"789\", 789);\nv01.put(\"101\", 101);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h0Test3",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"123\", 123);\nv01.put(\"456\", 456);\nv01.put(\"789\", 789);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"123\", 123);\nv01.put(\"456\", 456);\nv01.put(\"789\", 789);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h0Test4",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"123\", 123);\nv01.put(\"456\", 456);\nv01.put(\"789\", 789);\nv01.put(\"101\", 101);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"123\", 123);\nv01.put(\"456\", 456);\nv01.put(\"789\", 789);\nv01.put(\"101\", 101);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h2Test2",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"789\", 789);\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, Integer>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"789\", 789);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h2Test3",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"123\", 789);\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, Integer>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"123\", 789);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h3Test0",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"456\", 456);\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);\nType mapType = new TypeReference<Map<String, Integer>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"456\", 456);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h3Test1",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"789\", 789);\nv01.put(\"101112\", 101112);\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);\nType mapType = new TypeReference<Map<String, Integer>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"789\", 789);\nv01.put(\"101112\", 101112);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h3Test2",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"131415\", 131415);\nv01.put(\"161718\", 161718);\nv01.put(\"192021\", 192021);\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);\nType mapType = new TypeReference<Map<String, Integer>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"131415\", 131415);\nv01.put(\"161718\", 161718);\nv01.put(\"192021\", 192021);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h3Test3",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"232425\", 232425);\nv01.put(\"262728\", 262728);\nv01.put(\"292930\", 292930);\nv01.put(\"313233\", 313233);\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);\nType mapType = new TypeReference<Map<String, Integer>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"232425\", 232425);\nv01.put(\"262728\", 262728);\nv01.put(\"292930\", 292930);\nv01.put(\"313233\", 313233);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h3Test4",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"343536\", 343536);\nv01.put(\"363738\", 363738);\nv01.put(\"383940\", 383940);\nv01.put(\"404142\", 404142);\nv01.put(\"424344\", 424344);\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);\nType mapType = new TypeReference<Map<String, Integer>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"343536\", 343536);\nv01.put(\"363738\", 363738);\nv01.put(\"383940\", 383940);\nv01.put(\"404142\", 404142);\nv01.put(\"424344\", 424344);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h4Test1",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"789\", 789);\nv01.put(\"101112\", 101112);\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, Integer>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"789\", 789);\nv01.put(\"101112\", 101112);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h4Test2",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"131415\", 131415);\nv01.put(\"161718\", 161718);\nv01.put(\"192021\", 192021);\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, Integer>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"131415\", 131415);\nv01.put(\"161718\", 161718);\nv01.put(\"192021\", 192021);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h4Test3",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"232425\", 232425);\nv01.put(\"262728\", 262728);\nv01.put(\"292930\", 292930);\nv01.put(\"313233\", 313233);\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, Integer>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"232425\", 232425);\nv01.put(\"262728\", 262728);\nv01.put(\"292930\", 292930);\nv01.put(\"313233\", 313233);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h4Test4",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"343536\", 343536);\nv01.put(\"363738\", 363738);\nv01.put(\"383940\", 383940);\nv01.put(\"404142\", 404142);\nv01.put(\"424344\", 424344);\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, Integer>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"343536\", 343536);\nv01.put(\"363738\", 363738);\nv01.put(\"383940\", 383940);\nv01.put(\"404142\", 404142);\nv01.put(\"424344\", 424344);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h4Test5",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, Integer>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h5Test2",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"123\", 123);\nv01.put(\"456\", 456);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"123\", 123);\nv01.put(\"456\", 456);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h5Test3",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"123\", 123);\nv01.put(\"456\", 789);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"123\", 123);\nv01.put(\"456\", 789);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h7Test2",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"789\", 789);\nv01.put(\"101\", 101);\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, Integer>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"789\", 789);\nv01.put(\"101\", 101);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h7Test4",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"123\", 123);\nv01.put(\"456\", 456);\nv01.put(\"789\", 789);\nv01.put(\"101\", 101);\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, Integer>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"123\", 123);\nv01.put(\"456\", 456);\nv01.put(\"789\", 789);\nv01.put(\"101\", 101);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h8Test0",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"456\", 456);",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"456\", 456);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h8Test3",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"123\", 456);",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"123\", 456);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h8Test5",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"789\", 789);\nv01.put(\"101\", 101);",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"789\", 789);\nv01.put(\"101\", 101);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h8Test7",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"123\", 123);\nv01.put(\"456\", 456);\nv01.put(\"789\", 789);",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"123\", 123);\nv01.put(\"456\", 456);\nv01.put(\"789\", 789);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test1_h8Test9",
            "input_pairs_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"123\", 123);\nv01.put(\"456\", 456);\nv01.put(\"789\", 789);\nv01.put(\"101\", 101);",
            "Sinput_code_block": "Map<String, Integer> v01 = new HashMap<>();\nv01.put(\"123\", 123);\nv01.put(\"456\", 456);\nv01.put(\"789\", 789);\nv01.put(\"101\", 101);"
        }
    ],
    "org.opentripplanner.framework.model.CostTest.testHashCodeAndEquals()": [
        {
            "test_inputs_FQN": "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h0Test4",
            "input_pairs_code_block": "Cost subject = Cost.costOfSeconds(5);\nCost other = Cost.costOfSeconds(5);",
            "Sinput_code_block": "Cost subject = Cost.costOfSeconds(5);"
        },
        {
            "test_inputs_FQN": "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h2Test4",
            "input_pairs_code_block": "Cost subject = Cost.costOfSeconds(100);\nCost other = Cost.costOfSeconds(100);",
            "Sinput_code_block": "Cost subject = Cost.costOfSeconds(100);"
        },
        {
            "test_inputs_FQN": "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h3Test3",
            "input_pairs_code_block": "Cost subject = Cost.costOfSeconds(999999999);\nCost other = Cost.costOfSeconds(1000000000);",
            "Sinput_code_block": "Cost subject = Cost.costOfSeconds(999999999);"
        },
        {
            "test_inputs_FQN": "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h6Test3",
            "input_pairs_code_block": "Cost subject = Cost.costOfSeconds(1000000);\nCost other = Cost.costOfSeconds(1000000);",
            "Sinput_code_block": "Cost subject = Cost.costOfSeconds(1000000);"
        },
        {
            "test_inputs_FQN": "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h7Test2",
            "input_pairs_code_block": "Cost subject = Cost.costOfSeconds(999);\nCost other = Cost.costOfSeconds(999);",
            "Sinput_code_block": "Cost subject = Cost.costOfSeconds(999);"
        },
        {
            "test_inputs_FQN": "org.opentripplanner.framework.model.CostTest_testHashCodeAndEquals_h7Test3",
            "input_pairs_code_block": "Cost subject = Cost.costOfSeconds(1000);\nCost other = Cost.costOfSeconds(1000);",
            "Sinput_code_block": "Cost subject = Cost.costOfSeconds(1000);"
        }
    ],
    "org.opentripplanner.framework.token.FieldDefinitionTest.testEqualsAndHashCode()": [
        {
            "test_inputs_FQN": "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h0Test0",
            "input_pairs_code_block": "FieldDefinition subject = new FieldDefinition(\"\", TokenType.STRING);\nFieldDefinition other3 = new FieldDefinition(\"\", TokenType.STRING).deprecate();",
            "Sinput_code_block": "FieldDefinition subject = new FieldDefinition(\"\", TokenType.STRING);"
        },
        {
            "test_inputs_FQN": "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h5Test0",
            "input_pairs_code_block": "FieldDefinition subject = new FieldDefinition(\"bar\", TokenType.STRING);\nFieldDefinition other3 = new FieldDefinition(\"bar\", TokenType.STRING).deprecate();",
            "Sinput_code_block": "FieldDefinition subject = new FieldDefinition(\"bar\", TokenType.STRING);"
        },
        {
            "test_inputs_FQN": "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h5Test1",
            "input_pairs_code_block": "FieldDefinition subject = new FieldDefinition(\"foo\", TokenType.INT);\nFieldDefinition other3 = new FieldDefinition(\"foo\", TokenType.INT).deprecate();",
            "Sinput_code_block": "FieldDefinition subject = new FieldDefinition(\"foo\", TokenType.INT);"
        },
        {
            "test_inputs_FQN": "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h6Test1",
            "input_pairs_code_block": "FieldDefinition other3 = new FieldDefinition(\"\", TokenType.STRING).deprecate();",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h6Test2",
            "input_pairs_code_block": "FieldDefinition subject = new FieldDefinition(\"123\", TokenType.STRING);\nFieldDefinition other3 = new FieldDefinition(\"123\", TokenType.STRING).deprecate();",
            "Sinput_code_block": "FieldDefinition subject = new FieldDefinition(\"123\", TokenType.STRING);"
        },
        {
            "test_inputs_FQN": "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h6Test3",
            "input_pairs_code_block": "FieldDefinition other3 = new FieldDefinition(\"123\", TokenType.STRING).deprecate();",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h6Test4",
            "input_pairs_code_block": "FieldDefinition subject = new FieldDefinition(\"foo123\", TokenType.STRING);\nFieldDefinition other3 = new FieldDefinition(\"foo123\", TokenType.STRING).deprecate();",
            "Sinput_code_block": "FieldDefinition subject = new FieldDefinition(\"foo123\", TokenType.STRING);"
        },
        {
            "test_inputs_FQN": "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h6Test5",
            "input_pairs_code_block": "FieldDefinition other3 = new FieldDefinition(\"foo123\", TokenType.STRING).deprecate();",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h6Test6",
            "input_pairs_code_block": "FieldDefinition subject = new FieldDefinition(\"foo_bar\", TokenType.STRING);\nFieldDefinition other3 = new FieldDefinition(\"foo_bar\", TokenType.STRING).deprecate();",
            "Sinput_code_block": "FieldDefinition subject = new FieldDefinition(\"foo_bar\", TokenType.STRING);"
        },
        {
            "test_inputs_FQN": "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h6Test7",
            "input_pairs_code_block": "FieldDefinition other3 = new FieldDefinition(\"foo_bar\", TokenType.STRING).deprecate();",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h6Test8",
            "input_pairs_code_block": "FieldDefinition subject = new FieldDefinition(\"FOO\", TokenType.STRING);\nFieldDefinition other3 = new FieldDefinition(\"FOO\", TokenType.STRING).deprecate();",
            "Sinput_code_block": "FieldDefinition subject = new FieldDefinition(\"FOO\", TokenType.STRING);"
        },
        {
            "test_inputs_FQN": "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h6Test9",
            "input_pairs_code_block": "FieldDefinition other3 = new FieldDefinition(\"FOO\", TokenType.STRING).deprecate();",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "org.opentripplanner.framework.token.FieldDefinitionTest_testEqualsAndHashCode_h7Test1",
            "input_pairs_code_block": "FieldDefinition subject = new FieldDefinition(\"foo\", TokenType.INT);\nFieldDefinition other3 = new FieldDefinition(\"foo\", TokenType.STRING).deprecate();",
            "Sinput_code_block": "FieldDefinition subject = new FieldDefinition(\"foo\", TokenType.INT);"
        }
    ],
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test2()": [
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h0Test0",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"456\", 456L);\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);\nType mapType = new TypeReference<Map<String, Long>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"456\", 456L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h0Test1",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 456L);\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);\nType mapType = new TypeReference<Map<String, Long>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 456L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h0Test2",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"789\", 789L);\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);\nType mapType = new TypeReference<Map<String, Long>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"789\", 789L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h0Test3",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"456\", 456L);\nv01.put(\"789\", 789L);\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);\nType mapType = new TypeReference<Map<String, Long>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"456\", 456L);\nv01.put(\"789\", 789L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h0Test4",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteDateUseDateFormat);\nType mapType = new TypeReference<Map<String, Long>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h2Test1",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 456L);\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, Long>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 456L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h2Test3",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"456\", 0L);\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, Long>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"456\", 0L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h3Test4",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"456\", 456L);\nv01.put(\"789\", 789L);\nv01.put(\"101112\", 101112L);\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, Long>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"456\", 456L);\nv01.put(\"789\", 789L);\nv01.put(\"101112\", 101112L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h4Test0",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"456\", 456L);",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"456\", 456L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h4Test2",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"456\", 456L);\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, Long>>() {}.getType();",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"456\", 456L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h4Test5",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"\", 456L);",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"\", 456L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h4Test6",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"\", 456L);\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, Long>>() {}.getType();",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"\", 456L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h4Test7",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"123\", 456L);",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"123\", 456L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h4Test8",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"123\", 456L);\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, Long>>() {}.getType();",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"123\", 456L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h5Test0",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"456\", 456L);",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"456\", 456L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h5Test2",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"456\", 456L);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"456\", 456L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h5Test3",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 456L);",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 456L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h5Test4",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 456L);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 456L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h5Test5",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"789\", 789L);",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"789\", 789L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h5Test6",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"789\", 789L);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"789\", 789L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h5Test9",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"456\", 456L);\nv01.put(\"789\", 789L);",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"456\", 456L);\nv01.put(\"789\", 789L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h5Test10",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"456\", 456L);\nv01.put(\"789\", 789L);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"456\", 456L);\nv01.put(\"789\", 789L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h6Test2",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 789L);",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 789L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h6Test8",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"456\", 456L);\nv01.put(\"789\", 789L);\nv01.put(\"101112\", 101112L);",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 123L);\nv01.put(\"456\", 456L);\nv01.put(\"789\", 789L);\nv01.put(\"101112\", 101112L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h7Test3",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 789L);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"123\", 789L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h8Test1",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"789\", 789L);\nv01.put(\"101112\", 101112L);\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, Long>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"789\", 789L);\nv01.put(\"101112\", 101112L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h8Test2",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"131415\", 131415L);\nv01.put(\"161718\", 161718L);\nv01.put(\"192021\", 192021L);\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, Long>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"131415\", 131415L);\nv01.put(\"161718\", 161718L);\nv01.put(\"192021\", 192021L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h8Test3",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"232425\", 232425L);\nv01.put(\"262728\", 262728L);\nv01.put(\"292930\", 292930L);\nv01.put(\"313233\", 313233L);\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, Long>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"232425\", 232425L);\nv01.put(\"262728\", 262728L);\nv01.put(\"292930\", 292930L);\nv01.put(\"313233\", 313233L);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test2_h8Test4",
            "input_pairs_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"343536\", 343536L);\nv01.put(\"363738\", 363738L);\nv01.put(\"383940\", 383940L);\nv01.put(\"404142\", 404142L);\nv01.put(\"424344\", 424344L);\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, Long>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Long> v01 = new HashMap<>();\nv01.put(\"343536\", 343536L);\nv01.put(\"363738\", 363738L);\nv01.put(\"383940\", 383940L);\nv01.put(\"404142\", 404142L);\nv01.put(\"424344\", 424344L);"
        }
    ],
    "com.github.underscore.XmlBuilderTest.toXml()": [
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toXml_h5Test0",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject language=\\\"Python\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject/newproject/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject language=\\\"Python\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject/newproject/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toXml_h5Test1",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject language=\\\"JavaScript\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject/newproject/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject language=\\\"JavaScript\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject/newproject/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toXml_h5Test2",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject/newproject/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject/newproject/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toXml_h5Test3",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject/newproject/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject/newproject/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toXml_h6Test0",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject language=\\\"Python\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject language=\\\"Python\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toXml_h6Test1",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <OldProject language=\\\"C#\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/oldproject/</Location>\\n\" + \"  </OldProject>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <OldProject language=\\\"C#\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/oldproject/</Location>\\n\" + \"  </OldProject>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toXml_h6Test2",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject language=\\\"JavaScript\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject language=\\\"JavaScript\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toXml_h6Test3",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject language=\\\"Ruby\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject language=\\\"Ruby\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toXml_h6Test4",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject language=\\\"Swift\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject language=\\\"Swift\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toXml_h7Test0",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Apache-Commons-Lang language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-lang/</Location>\\n\" + \"  </Apache-Commons-Lang>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Apache-Commons-Lang language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-lang/</Location>\\n\" + \"  </Apache-Commons-Lang>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toXml_h8Test0",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject name=\\\"NewProject1\\\" language=\\\"Python\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject1/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject name=\\\"NewProject1\\\" language=\\\"Python\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject1/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toXml_h8Test1",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject name=\\\"NewProject2\\\" language=\\\"C#\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject2/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject name=\\\"NewProject2\\\" language=\\\"C#\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject2/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toXml_h8Test2",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject name=\\\"NewProject3\\\" language=\\\"JavaScript\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject3/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject name=\\\"NewProject3\\\" language=\\\"JavaScript\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject3/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toXml_h8Test3",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject name=\\\"NewProject4\\\" language=\\\"Ruby\\\" scm=\\\"Mercurial\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject4/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject name=\\\"NewProject4\\\" language=\\\"Ruby\\\" scm=\\\"Mercurial\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject4/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toXml_h8Test4",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject name=\\\"NewProject5\\\" language=\\\"Swift\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject5/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject name=\\\"NewProject5\\\" language=\\\"Swift\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject5/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toXml_h9Test0",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <ApacheCommonsIO language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-io/</Location>\\n\" + \"  </ApacheCommonsIO>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <ApacheCommonsIO language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-io/</Location>\\n\" + \"  </ApacheCommonsIO>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toXml_h9Test1",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <JUnit language=\\\"Java\\\" scm=\\\"Maven\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://junit.org/junit5/</Location>\\n\" + \"  </JUnit>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <JUnit language=\\\"Java\\\" scm=\\\"Maven\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://junit.org/junit5/</Location>\\n\" + \"  </JUnit>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toXml_h9Test2",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Spring language=\\\"Java\\\" scm=\\\"Gradle\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://spring.io/</Location>\\n\" + \"  </Spring>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Spring language=\\\"Java\\\" scm=\\\"Gradle\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://spring.io/</Location>\\n\" + \"  </Spring>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toXml_h9Test3",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Hibernate language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://hibernate.org/</Location>\\n\" + \"  </Hibernate>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Hibernate language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://hibernate.org/</Location>\\n\" + \"  </Hibernate>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toXml_h9Test4",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <MySQL language=\\\"Java\\\" scm=\\\"Maven\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://www.mysql.com/</Location>\\n\" + \"  </MySQL>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <MySQL language=\\\"Java\\\" scm=\\\"Maven\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://www.mysql.com/</Location>\\n\" + \"  </MySQL>\\n\" + \"</Projects>\";"
        }
    ],
    "com.github.underscore.XmlBuilderTest.parse()": [
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_parse_h7Test0",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <MyProject language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject/</Location>\\n\" + \"  </MyProject>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <MyProject language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject/</Location>\\n\" + \"  </MyProject>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_parse_h7Test1",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <MyProject language=\\\"Python\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject/</Location>\\n\" + \"  </MyProject>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <MyProject language=\\\"Python\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject/</Location>\\n\" + \"  </MyProject>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_parse_h7Test2",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <MyProject language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject/</Location>\\n\" + \"  </MyProject>\\n\" + \"  <MyProject2 language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject2/</Location>\\n\" + \"  </MyProject2>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <MyProject language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject/</Location>\\n\" + \"  </MyProject>\\n\" + \"  <MyProject2 language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject2/</Location>\\n\" + \"  </MyProject2>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_parse_h7Test3",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <MyProject language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject/</Location>\\n\" + \"  </MyProject>\\n\" + \"  <MyProject2 language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject2/</Location>\\n\" + \"  </MyProject2>\\n\" + \"  <MyProject3 language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject3/</Location>\\n\" + \"  </MyProject3>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <MyProject language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject/</Location>\\n\" + \"  </MyProject>\\n\" + \"  <MyProject2 language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject2/</Location>\\n\" + \"  </MyProject2>\\n\" + \"  <MyProject3 language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject3/</Location>\\n\" + \"  </MyProject3>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_parse_h7Test4",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <MyProject language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject/</Location>\\n\" + \"  </MyProject>\\n\" + \"  <MyProject2 language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject2/</Location>\\n\" + \"  </MyProject2>\\n\" + \"  <MyProject3 language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject3/</Location>\\n\" + \"  </MyProject3>\\n\" + \"  <MyProject4 language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject4/</Location>\\n\" + \"  </MyProject4>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <MyProject language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject/</Location>\\n\" + \"  </MyProject>\\n\" + \"  <MyProject2 language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject2/</Location>\\n\" + \"  </MyProject2>\\n\" + \"  <MyProject3 language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject3/</Location>\\n\" + \"  </MyProject3>\\n\" + \"  <MyProject4 language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/myusername/myproject4/</Location>\\n\" + \"  </MyProject4>\\n\" + \"</Projects>\";"
        }
    ],
    "com.github.underscore.XmlBuilderTest.toJson()": [
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h3Test0",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Project>\\n\" + \"    <Name>Project X</Name>\\n\" + \"  </Project>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Project>\\n\" + \"    <Name>Project X</Name>\\n\" + \"  </Project>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h3Test1",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Project>\\n\" + \"    <Name>Project X</Name>\\n\" + \"    <Description>This is a project about Java development.</Description>\\n\" + \"  </Project>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Project>\\n\" + \"    <Name>Project X</Name>\\n\" + \"    <Description>This is a project about Java development.</Description>\\n\" + \"  </Project>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h3Test2",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Project>\\n\" + \"    <Name>Project X</Name>\\n\" + \"    <Description>This is a project about Java development.</Description>\\n\" + \"    <Language>Java</Language>\\n\" + \"    <SCM>SVN</SCM>\\n\" + \"  </Project>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Project>\\n\" + \"    <Name>Project X</Name>\\n\" + \"    <Description>This is a project about Java development.</Description>\\n\" + \"    <Language>Java</Language>\\n\" + \"    <SCM>SVN</SCM>\\n\" + \"  </Project>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h3Test3",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Project>\\n\" + \"    <Name>Project X</Name>\\n\" + \"    <Description>This is a project about Java development.</Description>\\n\" + \"    <Language>Java</Language>\\n\" + \"    <SCM>SVN</SCM>\\n\" + \"    <Location type=\\\"URL\\\">https://example.com/project-x</Location>\\n\" + \"  </Project>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Project>\\n\" + \"    <Name>Project X</Name>\\n\" + \"    <Description>This is a project about Java development.</Description>\\n\" + \"    <Language>Java</Language>\\n\" + \"    <SCM>SVN</SCM>\\n\" + \"    <Location type=\\\"URL\\\">https://example.com/project-x</Location>\\n\" + \"  </Project>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h4Test0",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject language=\\\"Python\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject/newproject/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject language=\\\"Python\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject/newproject/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h4Test1",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject/newproject/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <NewProject language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/newproject/newproject/</Location>\\n\" + \"  </NewProject>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h5Test0",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <ApacheCommonsIO language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-io/</Location>\\n\" + \"  </ApacheCommonsIO>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <ApacheCommonsIO language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-io/</Location>\\n\" + \"  </ApacheCommonsIO>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h5Test2",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <ApacheCommonsIO language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-io/</Location>\\n\" + \"  </ApacheCommonsIO>\\n\" + \"  <ApacheCommonsLang3 language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-lang/</Location>\\n\" + \"  </ApacheCommonsLang3>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <ApacheCommonsIO language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-io/</Location>\\n\" + \"  </ApacheCommonsIO>\\n\" + \"  <ApacheCommonsLang3 language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-lang/</Location>\\n\" + \"  </ApacheCommonsLang3>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h5Test4",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <ApacheCommonsIO language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-io/</Location>\\n\" + \"  </ApacheCommonsIO>\\n\" + \"  <ApacheCommonsLang3 language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-lang/</Location>\\n\" + \"  </ApacheCommonsLang3>\\n\" + \"  <ApacheCommonsMath3 language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-math/</Location>\\n\" + \"  </ApacheCommonsMath3>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <ApacheCommonsIO language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-io/</Location>\\n\" + \"  </ApacheCommonsIO>\\n\" + \"  <ApacheCommonsLang3 language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-lang/</Location>\\n\" + \"  </ApacheCommonsLang3>\\n\" + \"  <ApacheCommonsMath3 language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-math/</Location>\\n\" + \"  </ApacheCommonsMath3>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h5Test6",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <ApacheCommonsIO language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-io/</Location>\\n\" + \"  </ApacheCommonsIO>\\n\" + \"  <ApacheCommonsLang3 language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-lang/</Location>\\n\" + \"  </ApacheCommonsLang3>\\n\" + \"  <ApacheCommonsMath3 language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-math/</Location>\\n\" + \"  </ApacheCommonsMath3>\\n\" + \"  <ApacheCommonsCollections4 language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-collections/</Location>\\n\" + \"  </ApacheCommonsCollections4>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <ApacheCommonsIO language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-io/</Location>\\n\" + \"  </ApacheCommonsIO>\\n\" + \"  <ApacheCommonsLang3 language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-lang/</Location>\\n\" + \"  </ApacheCommonsLang3>\\n\" + \"  <ApacheCommonsMath3 language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-math/</Location>\\n\" + \"  </ApacheCommonsMath3>\\n\" + \"  <ApacheCommonsCollections4 language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-collections/</Location>\\n\" + \"  </ApacheCommonsCollections4>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h5Test8",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <ApacheCommonsIO language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-io/</Location>\\n\" + \"  </ApacheCommonsIO>\\n\" + \"  <ApacheCommonsLang3 language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-lang/</Location>\\n\" + \"  </ApacheCommonsLang3>\\n\" + \"  <ApacheCommonsMath3 language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-math/</Location>\\n\" + \"  </ApacheCommonsMath3>\\n\" + \"  <ApacheCommonsCollections4 language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-collections/</Location>\\n\" + \"  </ApacheCommonsCollections4>\\n\" + \"  <ApacheCommonsCompress language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-compress/</Location>\\n\" + \"  </ApacheCommonsCompress>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <ApacheCommonsIO language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-io/</Location>\\n\" + \"  </ApacheCommonsIO>\\n\" + \"  <ApacheCommonsLang3 language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-lang/</Location>\\n\" + \"  </ApacheCommonsLang3>\\n\" + \"  <ApacheCommonsMath3 language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-math/</Location>\\n\" + \"  </ApacheCommonsMath3>\\n\" + \"  <ApacheCommonsCollections4 language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-collections/</Location>\\n\" + \"  </ApacheCommonsCollections4>\\n\" + \"  <ApacheCommonsCompress language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-compress/</Location>\\n\" + \"  </ApacheCommonsCompress>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h6Test0",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <ApacheHttpClient language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/apache/httpclient/</Location>\\n\" + \"  </ApacheHttpClient>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <ApacheHttpClient language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/apache/httpclient/</Location>\\n\" + \"  </ApacheHttpClient>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h6Test1",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <JUnit language=\\\"Java\\\" scm=\\\"Mercurial\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/junit-team/junit5/</Location>\\n\" + \"  </JUnit>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <JUnit language=\\\"Java\\\" scm=\\\"Mercurial\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/junit-team/junit5/</Location>\\n\" + \"  </JUnit>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h6Test2",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Spring language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/spring-projects/spring-framework/</Location>\\n\" + \"  </Spring>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Spring language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/spring-projects/spring-framework/</Location>\\n\" + \"  </Spring>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h6Test3",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Hibernate language=\\\"Java\\\" scm=\\\"Subversion\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/hibernate/hibernate-orm/</Location>\\n\" + \"  </Hibernate>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Hibernate language=\\\"Java\\\" scm=\\\"Subversion\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/hibernate/hibernate-orm/</Location>\\n\" + \"  </Hibernate>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h6Test4",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Maven language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/apache/maven/</Location>\\n\" + \"  </Maven>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Maven language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/apache/maven/</Location>\\n\" + \"  </Maven>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h7Test4",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <MySQL language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/mysql/mysql-connector-java/</Location>\\n\" + \"  </MySQL>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <MySQL language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/mysql/mysql-connector-java/</Location>\\n\" + \"  </MySQL>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h8Test1",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <SpringFramework language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/spring-projects/spring-framework/</Location>\\n\" + \"  </SpringFramework>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <SpringFramework language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/spring-projects/spring-framework/</Location>\\n\" + \"  </SpringFramework>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h8Test2",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <JavaScript language=\\\"JavaScript\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/javascript/</Location>\\n\" + \"  </JavaScript>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <JavaScript language=\\\"JavaScript\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/javascript/</Location>\\n\" + \"  </JavaScript>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h8Test3",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Python language=\\\"Python\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/python/</Location>\\n\" + \"  </Python>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Python language=\\\"Python\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/python/</Location>\\n\" + \"  </Python>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h8Test4",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Ruby language=\\\"Ruby\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/ruby/</Location>\\n\" + \"  </Ruby>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Ruby language=\\\"Ruby\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/ruby/</Location>\\n\" + \"  </Ruby>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h9Test0",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <ApacheCommonsIO language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-io/</Location>\\n\" + \"  </ApacheCommonsIO>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <ApacheCommonsIO language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://commons.apache.org/proper/commons-io/</Location>\\n\" + \"  </ApacheCommonsIO>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h9Test1",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Hibernate language=\\\"Java\\\" scm=\\\"Mercurial\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://hibernate.org/</Location>\\n\" + \"  </Hibernate>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Hibernate language=\\\"Java\\\" scm=\\\"Mercurial\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://hibernate.org/</Location>\\n\" + \"  </Hibernate>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h9Test2",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Spring language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://spring.io/</Location>\\n\" + \"  </Spring>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <Spring language=\\\"Java\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://spring.io/</Location>\\n\" + \"  </Spring>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h9Test3",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <MySQL language=\\\"Java\\\" scm=\\\"Subversion\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://www.mysql.com/</Location>\\n\" + \"  </MySQL>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <MySQL language=\\\"Java\\\" scm=\\\"Subversion\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://www.mysql.com/</Location>\\n\" + \"  </MySQL>\\n\" + \"</Projects>\";"
        },
        {
            "test_inputs_FQN": "com.github.underscore.XmlBuilderTest_toJson_h9Test4",
            "input_pairs_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <JavaScript language=\\\"JavaScript\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://developer.mozilla.org/en-US/docs/Web/JavaScript</Location>\\n\" + \"  </JavaScript>\\n\" + \"</Projects>\";",
            "Sinput_code_block": "String XML = \"<?xml version=\\\"1.0\\\" encoding=\\\"UTF-8\\\"?>\\n\" + \"<Projects>\\n\" + \"  <underscore-java language=\\\"Java\\\" scm=\\\"SVN\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://github.com/javadev/underscore-java/</Location>\\n\" + \"  </underscore-java>\\n\" + \"  <JetS3t language=\\\"Java\\\" scm=\\\"CVS\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://jets3t.s3.amazonaws.com/index.html</Location>\\n\" + \"  </JetS3t>\\n\" + \"  <JavaScript language=\\\"JavaScript\\\" scm=\\\"Git\\\">\\n\" + \"    <Location type=\\\"URL\\\">https://developer.mozilla.org/en-US/docs/Web/JavaScript</Location>\\n\" + \"  </JavaScript>\\n\" + \"</Projects>\";"
        }
    ],
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test3()": [
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h0Test0",
            "input_pairs_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", true);\nv01.put(\"102\", false);\nv01.put(\"103\", true);",
            "Sinput_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", true);\nv01.put(\"102\", false);\nv01.put(\"103\", true);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h0Test1",
            "input_pairs_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", true);\nv01.put(\"102\", false);\nv01.put(\"\", true);",
            "Sinput_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", true);\nv01.put(\"102\", false);\nv01.put(\"\", true);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h0Test2",
            "input_pairs_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", true);\nv01.put(\"102\", false);\nv01.put(\"null\", true);",
            "Sinput_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", true);\nv01.put(\"102\", false);\nv01.put(\"null\", true);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h0Test3",
            "input_pairs_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", true);\nv01.put(\"102\", false);\nv01.put(\"true\", true);",
            "Sinput_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", true);\nv01.put(\"102\", false);\nv01.put(\"true\", true);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h0Test4",
            "input_pairs_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", true);\nv01.put(\"102\", false);\nv01.put(\"false\", true);",
            "Sinput_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", true);\nv01.put(\"102\", false);\nv01.put(\"false\", true);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h2Test2",
            "input_pairs_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", false);\nv01.put(\"102\", false);",
            "Sinput_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", false);\nv01.put(\"102\", false);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h2Test3",
            "input_pairs_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", true);\nv01.put(\"102\", true);\nv01.put(\"103\", false);",
            "Sinput_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", true);\nv01.put(\"102\", true);\nv01.put(\"103\", false);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h2Test5",
            "input_pairs_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", true);\nv01.put(\"102\", true);\nv01.put(\"103\", true);",
            "Sinput_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", true);\nv01.put(\"102\", true);\nv01.put(\"103\", true);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h4Test2",
            "input_pairs_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", false);\nv01.put(\"102\", true);\nv01.put(\"103\", false);",
            "Sinput_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", false);\nv01.put(\"102\", true);\nv01.put(\"103\", false);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h4Test4",
            "input_pairs_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", false);\nv01.put(\"102\", false);\nv01.put(\"103\", false);",
            "Sinput_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", false);\nv01.put(\"102\", false);\nv01.put(\"103\", false);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h4Test5",
            "input_pairs_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", true);\nv01.put(\"102\", false);\nv01.put(\"103\", true);\nv01.put(\"104\", false);",
            "Sinput_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", true);\nv01.put(\"102\", false);\nv01.put(\"103\", true);\nv01.put(\"104\", false);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h5Test1",
            "input_pairs_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", false);\nv01.put(\"102\", true);",
            "Sinput_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", false);\nv01.put(\"102\", true);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test3_h5Test2",
            "input_pairs_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", true);\nv01.put(\"102\", true);",
            "Sinput_code_block": "Map<String, Boolean> v01 = new HashMap<>();\nv01.put(\"101\", true);\nv01.put(\"102\", true);"
        }
    ],
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test4()": [
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h0Test0",
            "input_pairs_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 2F);\nv01.put(\"103\", 3F);",
            "Sinput_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 2F);\nv01.put(\"103\", 3F);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h0Test2",
            "input_pairs_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 2F);\nv01.put(\"101\", 3F);",
            "Sinput_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 2F);\nv01.put(\"101\", 3F);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h0Test3",
            "input_pairs_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 2F);\nv01.put(\"\", 3F);",
            "Sinput_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 2F);\nv01.put(\"\", 3F);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h5Test0",
            "input_pairs_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 2F);\nv01.put(\"103\", 3F);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 2F);\nv01.put(\"103\", 3F);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h5Test2",
            "input_pairs_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 2F);\nv01.put(\"101\", 3F);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 2F);\nv01.put(\"101\", 3F);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h5Test4",
            "input_pairs_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 2F);\nv01.put(\"103\", 3F);\nv01.put(\"104\", 4F);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 2F);\nv01.put(\"103\", 3F);\nv01.put(\"104\", 4F);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h5Test6",
            "input_pairs_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 2F);\nv01.put(\"103\", 3F);\nv01.put(\"104\", 4F);\nv01.put(\"105\", 5F);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 2F);\nv01.put(\"103\", 3F);\nv01.put(\"104\", 4F);\nv01.put(\"105\", 5F);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h5Test8",
            "input_pairs_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 2F);\nv01.put(\"103\", 3F);\nv01.put(\"104\", 4F);\nv01.put(\"105\", 5F);\nv01.put(\"106\", 6F);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 2F);\nv01.put(\"103\", 3F);\nv01.put(\"104\", 4F);\nv01.put(\"105\", 5F);\nv01.put(\"106\", 6F);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h7Test0",
            "input_pairs_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 3.14F);\nv01.put(\"102\", 2.71F);",
            "Sinput_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 3.14F);\nv01.put(\"102\", 2.71F);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h7Test2",
            "input_pairs_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 0F);\nv01.put(\"102\", 0F);",
            "Sinput_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 0F);\nv01.put(\"102\", 0F);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h7Test4",
            "input_pairs_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", Float.MAX_VALUE);\nv01.put(\"102\", Float.MIN_VALUE);",
            "Sinput_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", Float.MAX_VALUE);\nv01.put(\"102\", Float.MIN_VALUE);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h8Test0",
            "input_pairs_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 3.14F);",
            "Sinput_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 3.14F);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h8Test2",
            "input_pairs_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 3.14F);\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteMapNullValue);",
            "Sinput_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 3.14F);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h8Test3",
            "input_pairs_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", -2F);",
            "Sinput_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", -2F);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h8Test4",
            "input_pairs_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", -2F);\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteMapNullValue);",
            "Sinput_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", -2F);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h8Test5",
            "input_pairs_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 0F);",
            "Sinput_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 0F);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h8Test6",
            "input_pairs_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 0F);\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteMapNullValue);",
            "Sinput_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1F);\nv01.put(\"102\", 0F);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h9Test0",
            "input_pairs_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1.5F);\nv01.put(\"102\", 2.5F);",
            "Sinput_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", 1.5F);\nv01.put(\"102\", 2.5F);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test4_h9Test2",
            "input_pairs_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", -1F);\nv01.put(\"102\", -2F);",
            "Sinput_code_block": "Map<String, Float> v01 = new HashMap<>();\nv01.put(\"101\", -1F);\nv01.put(\"102\", -2F);"
        }
    ],
    "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest.test_stripJobName_avoidDuplicatesWithLongDataSourceName()": [
        {
            "test_inputs_FQN": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h0Test1",
            "input_pairs_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_extended\";\nString taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_extended\";",
            "Sinput_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_extended\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h0Test2",
            "input_pairs_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_1234567890\";\nString taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_1234567890\";",
            "Sinput_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_1234567890\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h0Test3",
            "input_pairs_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_abcdefghijklmnopqrstuvwxyz\";\nString taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_abcdefghijklmnopqrstuvwxyz\";",
            "Sinput_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_abcdefghijklmnopqrstuvwxyz\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h0Test4",
            "input_pairs_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_\";\nString taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_\";",
            "Sinput_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test1",
            "input_pairs_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z\";\nString taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_118_pcgkebcl_2023-07-19T16:53:11.416Z\";",
            "Sinput_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test2",
            "input_pairs_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_118_pcgkebcl_2023-07-19T16:53:11.416Z\";\nString taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_119_pcgkebcl_2023-07-19T16:53:11.416Z\";",
            "Sinput_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_118_pcgkebcl_2023-07-19T16:53:11.416Z\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test3",
            "input_pairs_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_119_pcgkebcl_2023-07-19T16:53:11.416Z\";\nString taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_120_pcgkebcl_2023-07-19T16:53:11.416Z\";",
            "Sinput_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_119_pcgkebcl_2023-07-19T16:53:11.416Z\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h3Test4",
            "input_pairs_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_120_pcgkebcl_2023-07-19T16:53:11.416Z\";\nString taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_121_pcgkebcl_2023-07-19T16:53:11.416Z\";",
            "Sinput_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_120_pcgkebcl_2023-07-19T16:53:11.416Z\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h4Test2",
            "input_pairs_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_extra_data_with_underscore\";\nString taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_extra_data_with_underscore\";",
            "Sinput_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_extra_data_with_underscore\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h4Test3",
            "input_pairs_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_extra_data_with_dash\";\nString taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_extra_data_with_dash\";",
            "Sinput_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_extra_data_with_dash\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h4Test4",
            "input_pairs_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_extra_data_with_space\";\nString taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_extra_data_with_space\";",
            "Sinput_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_extra_data_with_space\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h5Test8",
            "input_pairs_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_ABCDEFGHIJKLMNOPQRSTUVWXYZ\";\nString taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_ABCDEFGHIJKLMNOPQRSTUVWXYZ\";",
            "Sinput_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_ABCDEFGHIJKLMNOPQRSTUVWXYZ\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h7Test1",
            "input_pairs_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_long_data_source_name_that_exceeds_30_characters\";\nString taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_long_data_source_name_that_exceeds_30_characters\";",
            "Sinput_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_long_data_source_name_that_exceeds_30_characters\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h7Test2",
            "input_pairs_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_with_special_characters_#$%^&*()\";\nString taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_with_special_characters_#$%^&*()\";",
            "Sinput_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_with_special_characters_#$%^&*()\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h7Test3",
            "input_pairs_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_with_null_task_id\";\nString taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_with_null_task_id\";",
            "Sinput_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_with_null_task_id\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h7Test4",
            "input_pairs_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_with_empty_task_id\";\nString taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-19T16:53:11.416Z_with_empty_task_id\";",
            "Sinput_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z_with_empty_task_id\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test0",
            "input_pairs_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";\nString taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-20T16:53:11.416Z\";",
            "Sinput_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test1",
            "input_pairs_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";\nString taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-21T16:53:11.416Z\";",
            "Sinput_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test2",
            "input_pairs_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";\nString taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-22T16:53:11.416Z\";",
            "Sinput_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test3",
            "input_pairs_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";\nString taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-23T16:53:11.416Z\";",
            "Sinput_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.k8s.overlord.common.KubernetesOverlordUtilsTest_test_stripJobName_avoidDuplicatesWithLongDataSourceName_h9Test4",
            "input_pairs_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";\nString taskId2 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_117_pcgkebcl_2023-07-24T16:53:11.416Z\";",
            "Sinput_code_block": "String taskId1 = \"coordinator-issued_compact_1234_telemetry_wikipedia_geteditfailuresinnorthamerica_agg_summ_116_pcgkebcl_2023-07-19T16:53:11.416Z\";"
        }
    ],
    "org.apache.druid.storage.azure.AzureClientFactoryTest.test_blobServiceClientBuilder_useCachedClient()": [
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h0Test0",
            "input_pairs_code_block": "Integer retryCount1 = 0;\nString ACCOUNT1 = \"account\";\nInteger retryCount2 = 0;\nString ACCOUNT2 = \"account\";",
            "Sinput_code_block": "Integer retryCount1 = 0;\nString ACCOUNT1 = \"account\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h0Test1",
            "input_pairs_code_block": "Integer retryCount1 = 5;\nString ACCOUNT1 = \"account\";\nInteger retryCount2 = 5;\nString ACCOUNT2 = \"account\";",
            "Sinput_code_block": "Integer retryCount1 = 5;\nString ACCOUNT1 = \"account\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h0Test2",
            "input_pairs_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"another_account\";\nInteger retryCount2 = null;\nString ACCOUNT2 = \"another_account\";",
            "Sinput_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"another_account\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h0Test3",
            "input_pairs_code_block": "Integer retryCount1 = 10;\nString ACCOUNT1 = \"account\";\nInteger retryCount2 = 10;\nString ACCOUNT2 = \"account\";",
            "Sinput_code_block": "Integer retryCount1 = 10;\nString ACCOUNT1 = \"account\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h0Test4",
            "input_pairs_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"account\";\nInteger retryCount2 = 5;\nString ACCOUNT2 = \"account\";",
            "Sinput_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"account\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h2Test0",
            "input_pairs_code_block": "Integer retryCount1 = 3;\nString ACCOUNT1 = \"account\";\nInteger retryCount2 = 3;\nString ACCOUNT2 = \"account\";",
            "Sinput_code_block": "Integer retryCount1 = 3;\nString ACCOUNT1 = \"account\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h2Test4",
            "input_pairs_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"\";\nInteger retryCount2 = null;\nString ACCOUNT2 = \"\";",
            "Sinput_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h3Test3",
            "input_pairs_code_block": "Integer retryCount1 = 5;\nString ACCOUNT1 = \"newAccount\";\nInteger retryCount2 = 5;\nString ACCOUNT2 = \"newAccount\";",
            "Sinput_code_block": "Integer retryCount1 = 5;\nString ACCOUNT1 = \"newAccount\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h5Test0",
            "input_pairs_code_block": "Integer retryCount1 = 3;\nString ACCOUNT1 = \"account1\";\nInteger retryCount2 = 3;\nString ACCOUNT2 = \"account1\";",
            "Sinput_code_block": "Integer retryCount1 = 3;\nString ACCOUNT1 = \"account1\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h5Test1",
            "input_pairs_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"account2\";\nInteger retryCount2 = null;\nString ACCOUNT2 = \"account2\";",
            "Sinput_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"account2\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h5Test2",
            "input_pairs_code_block": "Integer retryCount1 = 0;\nString ACCOUNT1 = \"account3\";\nInteger retryCount2 = 0;\nString ACCOUNT2 = \"account3\";",
            "Sinput_code_block": "Integer retryCount1 = 0;\nString ACCOUNT1 = \"account3\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h5Test3",
            "input_pairs_code_block": "Integer retryCount1 = 5;\nString ACCOUNT1 = \"account4\";\nInteger retryCount2 = 5;\nString ACCOUNT2 = \"account4\";",
            "Sinput_code_block": "Integer retryCount1 = 5;\nString ACCOUNT1 = \"account4\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h6Test1",
            "input_pairs_code_block": "Integer retryCount1 = 5;\nString ACCOUNT1 = \"account\";\nInteger retryCount2 = retryCount1;\nString ACCOUNT2 = ACCOUNT1;",
            "Sinput_code_block": "Integer retryCount1 = 5;\nString ACCOUNT1 = \"account\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h6Test3",
            "input_pairs_code_block": "Integer retryCount1 = 0;\nString ACCOUNT1 = \"account\";\nInteger retryCount2 = retryCount1;\nString ACCOUNT2 = ACCOUNT1;",
            "Sinput_code_block": "Integer retryCount1 = 0;\nString ACCOUNT1 = \"account\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h6Test5",
            "input_pairs_code_block": "Integer retryCount1 = 10;\nString ACCOUNT1 = \"account\";\nInteger retryCount2 = retryCount1;\nString ACCOUNT2 = ACCOUNT1;",
            "Sinput_code_block": "Integer retryCount1 = 10;\nString ACCOUNT1 = \"account\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h6Test7",
            "input_pairs_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"newAccount\";\nInteger retryCount2 = retryCount1;\nString ACCOUNT2 = ACCOUNT1;",
            "Sinput_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"newAccount\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h6Test9",
            "input_pairs_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"account\";\nInteger retryCount2 = retryCount1;\nString ACCOUNT2 = ACCOUNT1;",
            "Sinput_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"account\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h7Test3",
            "input_pairs_code_block": "Integer retryCount1 = 10;\nString ACCOUNT1 = \"another_account\";\nInteger retryCount2 = 10;\nString ACCOUNT2 = \"another_account\";",
            "Sinput_code_block": "Integer retryCount1 = 10;\nString ACCOUNT1 = \"another_account\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h8Test3",
            "input_pairs_code_block": "Integer retryCount1 = 10;\nString ACCOUNT1 = \"newAccount\";\nInteger retryCount2 = 10;\nString ACCOUNT2 = \"newAccount\";",
            "Sinput_code_block": "Integer retryCount1 = 10;\nString ACCOUNT1 = \"newAccount\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test1",
            "input_pairs_code_block": "Integer retryCount1 = 3;\nString ACCOUNT1 = \"account1\";\nInteger retryCount2 = retryCount1;\nString ACCOUNT2 = ACCOUNT1;",
            "Sinput_code_block": "Integer retryCount1 = 3;\nString ACCOUNT1 = \"account1\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test2",
            "input_pairs_code_block": "Integer retryCount1 = 0;\nString ACCOUNT1 = \"account2\";\nInteger retryCount2 = 0;\nString ACCOUNT2 = \"account2\";",
            "Sinput_code_block": "Integer retryCount1 = 0;\nString ACCOUNT1 = \"account2\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test3",
            "input_pairs_code_block": "Integer retryCount1 = 0;\nString ACCOUNT1 = \"account2\";\nInteger retryCount2 = retryCount1;\nString ACCOUNT2 = ACCOUNT1;",
            "Sinput_code_block": "Integer retryCount1 = 0;\nString ACCOUNT1 = \"account2\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test4",
            "input_pairs_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"account3\";\nInteger retryCount2 = null;\nString ACCOUNT2 = \"account3\";",
            "Sinput_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"account3\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test5",
            "input_pairs_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"account3\";\nInteger retryCount2 = retryCount1;\nString ACCOUNT2 = ACCOUNT1;",
            "Sinput_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"account3\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useCachedClient_h9Test7",
            "input_pairs_code_block": "Integer retryCount1 = 5;\nString ACCOUNT1 = \"account4\";\nInteger retryCount2 = retryCount1;\nString ACCOUNT2 = ACCOUNT1;",
            "Sinput_code_block": "Integer retryCount1 = 5;\nString ACCOUNT1 = \"account4\";"
        }
    ],
    "org.apache.druid.storage.azure.AzureClientFactoryTest.test_blobServiceClientBuilder_useNewClientForDifferentRetryCount()": [
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h0Test0",
            "input_pairs_code_block": "Integer retryCount1 = 0;\nString ACCOUNT1 = \"account\";\nInteger retryCount2 = 0;\nString ACCOUNT2 = \"account\";",
            "Sinput_code_block": "Integer retryCount1 = 0;\nString ACCOUNT1 = \"account\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h0Test1",
            "input_pairs_code_block": "Integer retryCount1 = 3;\nString ACCOUNT1 = \"account\";\nInteger retryCount2 = 3;\nString ACCOUNT2 = \"account\";",
            "Sinput_code_block": "Integer retryCount1 = 3;\nString ACCOUNT1 = \"account\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h0Test2",
            "input_pairs_code_block": "Integer retryCount1 = 5;\nString ACCOUNT1 = \"account\";\nInteger retryCount2 = 5;\nString ACCOUNT2 = \"account\";",
            "Sinput_code_block": "Integer retryCount1 = 5;\nString ACCOUNT1 = \"account\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h0Test3",
            "input_pairs_code_block": "Integer retryCount1 = 10;\nString ACCOUNT1 = \"account\";\nInteger retryCount2 = 10;\nString ACCOUNT2 = \"account\";",
            "Sinput_code_block": "Integer retryCount1 = 10;\nString ACCOUNT1 = \"account\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h0Test4",
            "input_pairs_code_block": "Integer retryCount1 = 100;\nString ACCOUNT1 = \"account\";\nInteger retryCount2 = 100;\nString ACCOUNT2 = \"account\";",
            "Sinput_code_block": "Integer retryCount1 = 100;\nString ACCOUNT1 = \"account\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h2Test4",
            "input_pairs_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"newAccount\";\nInteger retryCount2 = null;\nString ACCOUNT2 = \"newAccount\";",
            "Sinput_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"newAccount\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h2Test6",
            "input_pairs_code_block": "Integer retryCount1 = 5;\nString ACCOUNT1 = \"newAccount\";\nInteger retryCount2 = 5;\nString ACCOUNT2 = \"newAccount\";",
            "Sinput_code_block": "Integer retryCount1 = 5;\nString ACCOUNT1 = \"newAccount\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test1",
            "input_pairs_code_block": "Integer retryCount1 = 0;\nString ACCOUNT1 = \"account\";\nInteger retryCount2 = retryCount1;\nString ACCOUNT2 = ACCOUNT1;",
            "Sinput_code_block": "Integer retryCount1 = 0;\nString ACCOUNT1 = \"account\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test3",
            "input_pairs_code_block": "Integer retryCount1 = 5;\nString ACCOUNT1 = \"account\";\nInteger retryCount2 = retryCount1;\nString ACCOUNT2 = ACCOUNT1;",
            "Sinput_code_block": "Integer retryCount1 = 5;\nString ACCOUNT1 = \"account\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test5",
            "input_pairs_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"newAccount\";\nInteger retryCount2 = retryCount1;\nString ACCOUNT2 = ACCOUNT1;",
            "Sinput_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"newAccount\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test6",
            "input_pairs_code_block": "Integer retryCount1 = 10;\nString ACCOUNT1 = \"newAccount\";\nInteger retryCount2 = 10;\nString ACCOUNT2 = \"newAccount\";",
            "Sinput_code_block": "Integer retryCount1 = 10;\nString ACCOUNT1 = \"newAccount\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h3Test7",
            "input_pairs_code_block": "Integer retryCount1 = 10;\nString ACCOUNT1 = \"newAccount\";\nInteger retryCount2 = retryCount1;\nString ACCOUNT2 = ACCOUNT1;",
            "Sinput_code_block": "Integer retryCount1 = 10;\nString ACCOUNT1 = \"newAccount\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h5Test1",
            "input_pairs_code_block": "Integer retryCount1 = 1;\nString ACCOUNT1 = \"account\";\nInteger retryCount2 = 1;\nString ACCOUNT2 = \"account\";",
            "Sinput_code_block": "Integer retryCount1 = 1;\nString ACCOUNT1 = \"account\";"
        },
        {
            "test_inputs_FQN": "org.apache.druid.storage.azure.AzureClientFactoryTest_test_blobServiceClientBuilder_useNewClientForDifferentRetryCount_h7Test3",
            "input_pairs_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"new_account\";\nInteger retryCount2 = null;\nString ACCOUNT2 = \"new_account\";",
            "Sinput_code_block": "Integer retryCount1 = null;\nString ACCOUNT1 = \"new_account\";"
        }
    ],
    "org.apache.druid.audit.AuditInfoTest.testAuditInfoEquality()": [
        {
            "test_inputs_FQN": "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h0Test0",
            "input_pairs_code_block": "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"192.168.1.1\");\nAuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"192.168.1.1\");",
            "Sinput_code_block": "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"192.168.1.1\");"
        },
        {
            "test_inputs_FQN": "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h0Test1",
            "input_pairs_code_block": "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"10.0.0.1\");\nAuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"10.0.0.1\");",
            "Sinput_code_block": "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"10.0.0.1\");"
        },
        {
            "test_inputs_FQN": "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h0Test2",
            "input_pairs_code_block": "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"172.16.0.1\");\nAuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"172.16.0.1\");",
            "Sinput_code_block": "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"172.16.0.1\");"
        },
        {
            "test_inputs_FQN": "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h0Test3",
            "input_pairs_code_block": "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"8.8.8.8\");\nAuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"8.8.8.8\");",
            "Sinput_code_block": "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"8.8.8.8\");"
        },
        {
            "test_inputs_FQN": "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h0Test4",
            "input_pairs_code_block": "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"0.0.0.0\");\nAuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"0.0.0.0\");",
            "Sinput_code_block": "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"0.0.0.0\");"
        },
        {
            "test_inputs_FQN": "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h2Test2",
            "input_pairs_code_block": "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"255.255.255.255\");\nAuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"255.255.255.255\");",
            "Sinput_code_block": "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"255.255.255.255\");"
        },
        {
            "test_inputs_FQN": "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h2Test3",
            "input_pairs_code_block": "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"::1\");\nAuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"::1\");",
            "Sinput_code_block": "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"::1\");"
        },
        {
            "test_inputs_FQN": "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h2Test4",
            "input_pairs_code_block": "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"\");\nAuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"\");",
            "Sinput_code_block": "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", \"\");"
        },
        {
            "test_inputs_FQN": "org.apache.druid.audit.AuditInfoTest_testAuditInfoEquality_h9Test2",
            "input_pairs_code_block": "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", null);\nAuditInfo auditInfo2 = new AuditInfo(\"druid\", \"id\", \"test equality\", null);",
            "Sinput_code_block": "AuditInfo auditInfo1 = new AuditInfo(\"druid\", \"id\", \"test equality\", null);"
        }
    ],
    "org.apache.druid.query.filter.IsBooleanDimFilterTest.testGetCacheKey()": [
        {
            "test_inputs_FQN": "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h0Test0",
            "input_pairs_code_block": "EqualityFilter f3 = new EqualityFilter(\"y\", ColumnType.STRING, \"hello\", null);\nEqualityFilter f4 = new EqualityFilter(\"y\", ColumnType.STRING, \"hello\", null);",
            "Sinput_code_block": "EqualityFilter f3 = new EqualityFilter(\"y\", ColumnType.STRING, \"hello\", null);"
        },
        {
            "test_inputs_FQN": "org.apache.druid.query.filter.IsBooleanDimFilterTest_testGetCacheKey_h0Test2",
            "input_pairs_code_block": "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"world\", null);\nEqualityFilter f4 = new EqualityFilter(\"x\", ColumnType.STRING, \"world\", null);",
            "Sinput_code_block": "EqualityFilter f3 = new EqualityFilter(\"x\", ColumnType.STRING, \"world\", null);"
        }
    ],
    "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest.testMinSegmentsArePickedForMoveWhenNoSkew()": [
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h0Test0",
            "input_pairs_code_block": "int totalSegmentsInTier = 50_000;\nString tier = \"tier1\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "int totalSegmentsInTier = 50_000;"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h0Test1",
            "input_pairs_code_block": "int totalSegmentsInTier = 100_000;\nString tier = \"tier1\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "int totalSegmentsInTier = 100_000;"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h2Test2",
            "input_pairs_code_block": "int totalSegmentsInTier = 30_000;\nString tier = \"tier1\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "int totalSegmentsInTier = 30_000;"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h2Test4",
            "input_pairs_code_block": "int totalSegmentsInTier = 15_000;\nString tier = \"tier1\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "int totalSegmentsInTier = 15_000;"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h2Test6",
            "input_pairs_code_block": "int totalSegmentsInTier = 25_000;\nString tier = \"tier1\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "int totalSegmentsInTier = 25_000;"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h2Test8",
            "input_pairs_code_block": "int totalSegmentsInTier = 35_000;\nString tier = \"tier1\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "int totalSegmentsInTier = 35_000;"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h3Test5",
            "input_pairs_code_block": "int totalSegmentsInTier = 40_000;\nString tier = \"tier1\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "int totalSegmentsInTier = 40_000;"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h4Test4",
            "input_pairs_code_block": "int totalSegmentsInTier = 12_500;\nString tier = \"tier1\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "int totalSegmentsInTier = 12_500;"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h5Test3",
            "input_pairs_code_block": "int totalSegmentsInTier = 100;\nString tier = \"tier1\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "int totalSegmentsInTier = 100;"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h5Test4",
            "input_pairs_code_block": "int totalSegmentsInTier = 10000;\nString tier = \"tier1\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "int totalSegmentsInTier = 10000;"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testMinSegmentsArePickedForMoveWhenNoSkew_h7Test4",
            "input_pairs_code_block": "int totalSegmentsInTier = 20000;\nString tier = \"tier1\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "int totalSegmentsInTier = 20000;"
        }
    ],
    "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest.testHalfSegmentsArePickedForMoveWhenFullSkew()": [
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h0Test1",
            "input_pairs_code_block": "String tier = \"tier3\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", Collections.emptyList()), createServer(\"B\", WIKI_SEGMENTS));\nString tier2 = \"tier3\";\nList<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", Collections.emptyList()), createServer(\"B\", WIKI_SEGMENTS));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "String tier = \"tier3\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", Collections.emptyList()), createServer(\"B\", WIKI_SEGMENTS));"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h0Test3",
            "input_pairs_code_block": "String tier = \"tier5\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS));\nString tier2 = \"tier5\";\nList<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "String tier = \"tier5\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS));"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h0Test4",
            "input_pairs_code_block": "String tier = \"tier6\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", Collections.emptyList()));\nString tier2 = \"tier6\";\nList<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", Collections.emptyList()));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "String tier = \"tier6\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", Collections.emptyList()));"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h2Test3",
            "input_pairs_code_block": "String tier = \"tier4\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()), createServer(\"C\", WIKI_SEGMENTS));\nString tier2 = \"tier4\";\nList<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()), createServer(\"C\", WIKI_SEGMENTS));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "String tier = \"tier4\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()), createServer(\"C\", WIKI_SEGMENTS));"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h2Test4",
            "input_pairs_code_block": "String tier = \"tier5\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", Collections.emptyList()), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS));\nString tier2 = \"tier5\";\nList<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", Collections.emptyList()), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "String tier = \"tier5\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", Collections.emptyList()), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS));"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h4Test0",
            "input_pairs_code_block": "String tier = \"tier2\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", Collections.emptyList()));\nString tier2 = \"tier2\";\nList<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", Collections.emptyList()));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "String tier = \"tier2\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", Collections.emptyList()));"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h4Test1",
            "input_pairs_code_block": "String tier = \"tier3\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", Collections.emptyList()));\nString tier2 = \"tier3\";\nList<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", Collections.emptyList()));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "String tier = \"tier3\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", Collections.emptyList()));"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h4Test2",
            "input_pairs_code_block": "String tier = \"tier4\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", Collections.emptyList()), createServer(\"B\", Collections.emptyList()));\nString tier2 = \"tier4\";\nList<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", Collections.emptyList()), createServer(\"B\", Collections.emptyList()));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "String tier = \"tier4\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", Collections.emptyList()), createServer(\"B\", Collections.emptyList()));"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h4Test4",
            "input_pairs_code_block": "String tier = \"tier6\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS), createServer(\"E\", Collections.emptyList()));\nString tier2 = \"tier6\";\nList<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS), createServer(\"E\", Collections.emptyList()));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "String tier = \"tier6\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", WIKI_SEGMENTS), createServer(\"D\", WIKI_SEGMENTS), createServer(\"E\", Collections.emptyList()));"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h5Test1",
            "input_pairs_code_block": "String tier = \"tier1\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", Collections.emptyList()), createServer(\"B\", WIKI_SEGMENTS));\nString tier2 = \"tier1\";\nList<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", Collections.emptyList()), createServer(\"B\", WIKI_SEGMENTS));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "String tier = \"tier1\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", Collections.emptyList()), createServer(\"B\", WIKI_SEGMENTS));"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h5Test3",
            "input_pairs_code_block": "String tier = \"tier1\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", Collections.emptyList()));\nString tier2 = \"tier1\";\nList<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", Collections.emptyList()));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "String tier = \"tier1\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", Collections.emptyList()));"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h5Test4",
            "input_pairs_code_block": "String tier = \"tier1\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", Collections.emptyList()), createServer(\"B\", Collections.emptyList()));\nString tier2 = \"tier1\";\nList<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", Collections.emptyList()), createServer(\"B\", Collections.emptyList()));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "String tier = \"tier1\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", Collections.emptyList()), createServer(\"B\", Collections.emptyList()));"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h7Test3",
            "input_pairs_code_block": "String tier = \"tier1\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()), createServer(\"C\", WIKI_SEGMENTS));\nString tier2 = \"tier1\";\nList<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()), createServer(\"C\", WIKI_SEGMENTS));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "String tier = \"tier1\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", Collections.emptyList()), createServer(\"C\", WIKI_SEGMENTS));"
        },
        {
            "test_inputs_FQN": "org.apache.druid.server.coordinator.balancer.SegmentToMoveCalculatorTest_testHalfSegmentsArePickedForMoveWhenFullSkew_h9Test3",
            "input_pairs_code_block": "String tier = \"tier5\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", Collections.emptyList()));\nString tier2 = \"tier5\";\nList<ServerHolder> historicals2 = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", Collections.emptyList()));\nint maxSegmentsToMoveInTier = Integer.MAX_VALUE;",
            "Sinput_code_block": "String tier = \"tier5\";\nList<ServerHolder> historicals = Arrays.asList(createServer(\"A\", WIKI_SEGMENTS), createServer(\"B\", WIKI_SEGMENTS), createServer(\"C\", Collections.emptyList()));"
        }
    ],
    "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest.test()": [
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h0Test0",
            "input_pairs_code_block": "JSONArray v01 = new JSONArray();\nv01.add(\"Hello\");\nv01.add(123);\nv01.add(true);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "JSONArray v01 = new JSONArray();\nv01.add(\"Hello\");\nv01.add(123);\nv01.add(true);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h0Test3",
            "input_pairs_code_block": "JSONArray v01 = new JSONArray();\nv01.add(null);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "JSONArray v01 = new JSONArray();\nv01.add(null);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h5Test2",
            "input_pairs_code_block": "JSONArray v01 = new JSONArray();\nv01.add(Arrays.asList(\"Apple\", \"Banana\", \"Cherry\"));\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "JSONArray v01 = new JSONArray();\nv01.add(Arrays.asList(\"Apple\", \"Banana\", \"Cherry\"));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h6Test2",
            "input_pairs_code_block": "JSONArray v01 = new JSONArray();\nv01.add(Arrays.asList(\"apple\", \"banana\", \"cherry\"));\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "JSONArray v01 = new JSONArray();\nv01.add(Arrays.asList(\"apple\", \"banana\", \"cherry\"));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h7Test0",
            "input_pairs_code_block": "JSONArray v01 = new JSONArray();\nv01.add(\"Hello\");\nv01.add(\"World\");\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "JSONArray v01 = new JSONArray();\nv01.add(\"Hello\");\nv01.add(\"World\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h7Test1",
            "input_pairs_code_block": "JSONArray v01 = new JSONArray();\nv01.add(123);\nv01.add(456);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "JSONArray v01 = new JSONArray();\nv01.add(123);\nv01.add(456);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h7Test2",
            "input_pairs_code_block": "JSONArray v01 = new JSONArray();\nv01.add(true);\nv01.add(false);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "JSONArray v01 = new JSONArray();\nv01.add(true);\nv01.add(false);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test_h7Test4",
            "input_pairs_code_block": "JSONArray v01 = new JSONArray();\nv01.add(null);\nv01.add(null);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "JSONArray v01 = new JSONArray();\nv01.add(null);\nv01.add(null);"
        }
    ],
    "com.vladmihalcea.hpjp.util.CryptoUtilsTest.testPerformanceUsingCache()": [
        {
            "test_inputs_FQN": "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h0Test0",
            "input_pairs_code_block": "Long value = 0L;\nString encryptedValue = encryptCache.get(value);\nString message = encryptedValue;\nClass<?> clazz = Long.class;",
            "Sinput_code_block": "Long value = 0L;"
        },
        {
            "test_inputs_FQN": "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h0Test1",
            "input_pairs_code_block": "Long value = 4L;\nString encryptedValue = encryptCache.get(value);\nString message = encryptedValue;\nClass<?> clazz = Long.class;",
            "Sinput_code_block": "Long value = 4L;"
        },
        {
            "test_inputs_FQN": "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h0Test2",
            "input_pairs_code_block": "Long value = -1L;\nString encryptedValue = encryptCache.get(value);\nString message = encryptedValue;\nClass<?> clazz = Long.class;",
            "Sinput_code_block": "Long value = -1L;"
        },
        {
            "test_inputs_FQN": "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h0Test3",
            "input_pairs_code_block": "Long value = 5L;\nString encryptedValue = encryptCache.get(value);\nString message = encryptedValue;\nClass<?> clazz = Long.class;",
            "Sinput_code_block": "Long value = 5L;"
        },
        {
            "test_inputs_FQN": "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h0Test4",
            "input_pairs_code_block": "Long value = 6L;\nString encryptedValue = encryptCache.get(value);\nString message = encryptedValue;\nClass<?> clazz = Long.class;",
            "Sinput_code_block": "Long value = 6L;"
        },
        {
            "test_inputs_FQN": "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h3Test2",
            "input_pairs_code_block": "Long value = 9223372036854775807L;\nString encryptedValue = encryptCache.get(value);\nString message = encryptedValue;\nClass<?> clazz = Long.class;",
            "Sinput_code_block": "Long value = 9223372036854775807L;"
        },
        {
            "test_inputs_FQN": "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h3Test3",
            "input_pairs_code_block": "Long value = 3L;\nString encryptedValue = encryptCache.get(value);\nString message = encryptedValue;\nClass<?> clazz = Long.class;",
            "Sinput_code_block": "Long value = 3L;"
        },
        {
            "test_inputs_FQN": "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h4Test3",
            "input_pairs_code_block": "Long value = Long.MAX_VALUE;\nString encryptedValue = encryptCache.get(value);\nString message = encryptedValue;\nClass<?> clazz = Long.class;",
            "Sinput_code_block": "Long value = Long.MAX_VALUE;"
        },
        {
            "test_inputs_FQN": "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h4Test4",
            "input_pairs_code_block": "Long value = Long.MIN_VALUE;\nString encryptedValue = encryptCache.get(value);\nString message = encryptedValue;\nClass<?> clazz = Long.class;",
            "Sinput_code_block": "Long value = Long.MIN_VALUE;"
        },
        {
            "test_inputs_FQN": "com.vladmihalcea.hpjp.util.CryptoUtilsTest_testPerformanceUsingCache_h6Test4",
            "input_pairs_code_block": "Long value = 1L;\nString encryptedValue = encryptCache.get(value);\nString message = encryptedValue;\nClass<?> clazz = Long.class;",
            "Sinput_code_block": "Long value = 1L;"
        }
    ],
    "org.tsugi.util.Base64DoubleUrlEncodeSafeTest.testAllNonSurrogateCodePoints()": [
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h4Test1",
            "input_pairs_code_block": "StringBuffer sb = new StringBuffer();\nString input = sb.toString();\nString encoded2 = \"QmFzZTY0RW5jb2RlZFN0cmluZw==\";",
            "Sinput_code_block": "StringBuffer sb = new StringBuffer();\nString input = sb.toString();"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h5Test0",
            "input_pairs_code_block": "StringBuffer sb = new StringBuffer();\nString input = sb.toString();\nString encoded2 = \"AA==\";",
            "Sinput_code_block": "StringBuffer sb = new StringBuffer();\nString input = sb.toString();"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h5Test2",
            "input_pairs_code_block": "StringBuffer sb = new StringBuffer();\nsb.append(\"Special characters:!@#$%^&*()_+-=[]{}|;:',.<>?/\");\nString input = sb.toString();\nString encoded2 = \"RlJFQ1JFU1RfQ2hhbmNlX1Rlc3Rz\";",
            "Sinput_code_block": "StringBuffer sb = new StringBuffer();\nsb.append(\"Special characters:!@#$%^&*()_+-=[]{}|;:',.<>?/\");\nString input = sb.toString();"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h7Test1",
            "input_pairs_code_block": "StringBuffer sb = new StringBuffer();\nString input = sb.toString();\nString encoded2 = Base64DoubleUrlEncodeSafe.encode(input);",
            "Sinput_code_block": "StringBuffer sb = new StringBuffer();\nString input = sb.toString();"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h9Test0",
            "input_pairs_code_block": "StringBuffer sb = new StringBuffer();\nString input = sb.toString();\nString encoded2 = \"Qk9GQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJj\";",
            "Sinput_code_block": "StringBuffer sb = new StringBuffer();\nString input = sb.toString();"
        },
        {
            "test_inputs_FQN": "org.tsugi.util.Base64DoubleUrlEncodeSafeTest_testAllNonSurrogateCodePoints_h9Test2",
            "input_pairs_code_block": "StringBuffer sb = new StringBuffer();\nsb.append(\"Special characters:!@#$%^&*()_+-=[]{}|;:',.<>?/\");\nString input = sb.toString();\nString encoded2 = \"RlJFQ0RFRkdISUpLTE1OT1BRUlNUVVZXWFlaW1xdXl9gYWJj\";",
            "Sinput_code_block": "StringBuffer sb = new StringBuffer();\nsb.append(\"Special characters:!@#$%^&*()_+-=[]{}|;:',.<>?/\");\nString input = sb.toString();"
        }
    ],
    "org.ojalgo.data.transform.DiscreteFourierTransformTest.testShiftAndRevertEven()": [
        {
            "test_inputs_FQN": "org.ojalgo.data.transform.DiscreteFourierTransformTest_testShiftAndRevertEven_h9Test0",
            "input_pairs_code_block": "Primitive64Store original = Primitive64Store.FACTORY.make(2, 2);\noriginal.set(0, 0, 0);\noriginal.set(0, 1, 1);\noriginal.set(1, 0, 1);\noriginal.set(1, 1, 2);",
            "Sinput_code_block": "Primitive64Store original = Primitive64Store.FACTORY.make(2, 2);\noriginal.set(0, 0, 0);\noriginal.set(0, 1, 1);\noriginal.set(1, 0, 1);\noriginal.set(1, 1, 2);"
        }
    ],
    "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest.test1()": [
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h0Test1",
            "input_pairs_code_block": "JSONArray v01 = new JSONArray();\nv01.add(\"Hello\");\nv01.add(\"World\");\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "JSONArray v01 = new JSONArray();\nv01.add(\"Hello\");\nv01.add(\"World\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h0Test2",
            "input_pairs_code_block": "JSONArray v01 = new JSONArray();\nv01.add(1);\nv01.add(2);\nv01.add(3);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "JSONArray v01 = new JSONArray();\nv01.add(1);\nv01.add(2);\nv01.add(3);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h0Test3",
            "input_pairs_code_block": "JSONArray v01 = new JSONArray();\nv01.add(true);\nv01.add(false);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "JSONArray v01 = new JSONArray();\nv01.add(true);\nv01.add(false);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h0Test5",
            "input_pairs_code_block": "JSONArray v01 = new JSONArray();\nv01.add(null);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "JSONArray v01 = new JSONArray();\nv01.add(null);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h2Test0",
            "input_pairs_code_block": "JSONArray v01 = new JSONArray();\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "JSONArray v01 = new JSONArray();"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h3Test1",
            "input_pairs_code_block": "JSONArray v01 = new JSONArray();\nString str2 = JSON.toJSONString(v01);\nClass<JSONArray> clazz = JSONArray.class;",
            "Sinput_code_block": "JSONArray v01 = new JSONArray();"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h4Test2",
            "input_pairs_code_block": "JSONArray v01 = new JSONArray();\nv01.add(123);\nv01.add(456);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "JSONArray v01 = new JSONArray();\nv01.add(123);\nv01.add(456);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h4Test4",
            "input_pairs_code_block": "JSONArray v01 = new JSONArray();\nv01.add(null);\nv01.add(null);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "JSONArray v01 = new JSONArray();\nv01.add(null);\nv01.add(null);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h6Test1",
            "input_pairs_code_block": "JSONArray v01 = new JSONArray();\nv01.add(\"apple\");\nv01.add(\"banana\");\nv01.add(\"cherry\");\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "JSONArray v01 = new JSONArray();\nv01.add(\"apple\");\nv01.add(\"banana\");\nv01.add(\"cherry\");"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h6Test2",
            "input_pairs_code_block": "JSONArray v01 = new JSONArray();\nv01.add(true);\nv01.add(false);\nv01.add(null);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "JSONArray v01 = new JSONArray();\nv01.add(true);\nv01.add(false);\nv01.add(null);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h6Test4",
            "input_pairs_code_block": "JSONArray v01 = new JSONArray();\nv01.add(new JSONArray());\nv01.add(new JSONArray());\nv01.add(new JSONArray());\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "JSONArray v01 = new JSONArray();\nv01.add(new JSONArray());\nv01.add(new JSONArray());\nv01.add(new JSONArray());"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h8Test2",
            "input_pairs_code_block": "JSONArray v01 = new JSONArray();\nv01.add(true);\nv01.add(false);\nv01.add(true);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "JSONArray v01 = new JSONArray();\nv01.add(true);\nv01.add(false);\nv01.add(true);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.collections.JSONArrayTest_test1_h8Test3",
            "input_pairs_code_block": "JSONArray v01 = new JSONArray();\nv01.add(null);\nv01.add(null);\nv01.add(null);\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "JSONArray v01 = new JSONArray();\nv01.add(null);\nv01.add(null);\nv01.add(null);"
        }
    ],
    "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase.returnsMuleLoggerContextForArtifactClassLoaderChild()": [
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h0Test0",
            "input_pairs_code_block": "RegionClassLoader regionClassLoader = null;\nString fqcn = \"com.example.MyClass\";\nboolean currentContext = false;\nString fqcn2 = \"com.example.MyClass\";\nboolean currentContext2 = false;\nClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);",
            "Sinput_code_block": "RegionClassLoader regionClassLoader = null;\nString fqcn = \"com.example.MyClass\";\nboolean currentContext = false;"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h0Test1",
            "input_pairs_code_block": "RegionClassLoader regionClassLoader = this.regionClassLoader;\nString fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nString fqcn2 = \"com.example.MyClass\";\nboolean currentContext2 = true;\nClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);",
            "Sinput_code_block": "RegionClassLoader regionClassLoader = this.regionClassLoader;\nString fqcn = \"com.example.MyClass\";\nboolean currentContext = true;"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h0Test3",
            "input_pairs_code_block": "RegionClassLoader regionClassLoader = this.regionClassLoader;\nString fqcn = \"com.example.MyClass\";\nboolean currentContext = false;\nString fqcn2 = \"com.example.MyClass\";\nboolean currentContext2 = false;\nClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);",
            "Sinput_code_block": "RegionClassLoader regionClassLoader = this.regionClassLoader;\nString fqcn = \"com.example.MyClass\";\nboolean currentContext = false;"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h2Test2",
            "input_pairs_code_block": "RegionClassLoader regionClassLoader = this.regionClassLoader;\nString fqcn = \"\";\nboolean currentContext = false;\nString fqcn2 = \"\";\nboolean currentContext2 = false;\nClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);",
            "Sinput_code_block": "RegionClassLoader regionClassLoader = this.regionClassLoader;\nString fqcn = \"\";\nboolean currentContext = false;"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h3Test1",
            "input_pairs_code_block": "RegionClassLoader regionClassLoader = null;\nString fqcn = \"\";\nboolean currentContext = true;\nString fqcn2 = \"\";\nboolean currentContext2 = true;\nClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);",
            "Sinput_code_block": "RegionClassLoader regionClassLoader = null;\nString fqcn = \"\";\nboolean currentContext = true;"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h3Test4",
            "input_pairs_code_block": "RegionClassLoader regionClassLoader = null;\nString fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nString fqcn2 = \"com.example.MyClass\";\nboolean currentContext2 = true;\nClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);",
            "Sinput_code_block": "RegionClassLoader regionClassLoader = null;\nString fqcn = \"com.example.MyClass\";\nboolean currentContext = true;"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h5Test1",
            "input_pairs_code_block": "RegionClassLoader regionClassLoader = this.regionClassLoader;\nString fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nString fqcn2 = fqcn;\nboolean currentContext2 = currentContext;\nClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);",
            "Sinput_code_block": "RegionClassLoader regionClassLoader = this.regionClassLoader;\nString fqcn = \"com.example.MyClass\";\nboolean currentContext = true;"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h5Test2",
            "input_pairs_code_block": "RegionClassLoader regionClassLoader = null;\nString fqcn = \"\";\nboolean currentContext = false;\nString fqcn2 = \"\";\nboolean currentContext2 = false;\nClassLoader childClassLoader = null;",
            "Sinput_code_block": "RegionClassLoader regionClassLoader = null;\nString fqcn = \"\";\nboolean currentContext = false;"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h5Test3",
            "input_pairs_code_block": "RegionClassLoader regionClassLoader = null;\nString fqcn = \"\";\nboolean currentContext = false;\nString fqcn2 = fqcn;\nboolean currentContext2 = currentContext;\nClassLoader childClassLoader = regionClassLoader;",
            "Sinput_code_block": "RegionClassLoader regionClassLoader = null;\nString fqcn = \"\";\nboolean currentContext = false;"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h5Test5",
            "input_pairs_code_block": "RegionClassLoader regionClassLoader = this.regionClassLoader;\nString fqcn = \"\";\nboolean currentContext = false;\nString fqcn2 = fqcn;\nboolean currentContext2 = currentContext;\nClassLoader childClassLoader = regionClassLoader;",
            "Sinput_code_block": "RegionClassLoader regionClassLoader = this.regionClassLoader;\nString fqcn = \"\";\nboolean currentContext = false;"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h5Test6",
            "input_pairs_code_block": "RegionClassLoader regionClassLoader = this.regionClassLoader;\nString fqcn = \"com.example.NonExistentClass\";\nboolean currentContext = true;\nString fqcn2 = \"com.example.NonExistentClass\";\nboolean currentContext2 = true;\nClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);",
            "Sinput_code_block": "RegionClassLoader regionClassLoader = this.regionClassLoader;\nString fqcn = \"com.example.NonExistentClass\";\nboolean currentContext = true;"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h5Test7",
            "input_pairs_code_block": "RegionClassLoader regionClassLoader = this.regionClassLoader;\nString fqcn = \"com.example.NonExistentClass\";\nboolean currentContext = true;\nString fqcn2 = fqcn;\nboolean currentContext2 = currentContext;\nClassLoader childClassLoader = new URLClassLoader(new URL[0], regionClassLoader);",
            "Sinput_code_block": "RegionClassLoader regionClassLoader = this.regionClassLoader;\nString fqcn = \"com.example.NonExistentClass\";\nboolean currentContext = true;"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h6Test1",
            "input_pairs_code_block": "RegionClassLoader regionClassLoader = null;\nString fqcn = \"\";\nboolean currentContext = true;\nString fqcn2 = \"\";\nboolean currentContext2 = true;\nClassLoader childClassLoader = null;",
            "Sinput_code_block": "RegionClassLoader regionClassLoader = null;\nString fqcn = \"\";\nboolean currentContext = true;"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h8Test1",
            "input_pairs_code_block": "RegionClassLoader regionClassLoader = null;\nString fqcn = \"com.example.MyClass\";\nboolean currentContext = false;\nString fqcn2 = \"com.example.MyClass\";\nboolean currentContext2 = false;\nClassLoader childClassLoader = null;",
            "Sinput_code_block": "RegionClassLoader regionClassLoader = null;\nString fqcn = \"com.example.MyClass\";\nboolean currentContext = false;"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h8Test2",
            "input_pairs_code_block": "RegionClassLoader regionClassLoader = this.regionClassLoader;\nString fqcn = \"\";\nboolean currentContext = false;\nString fqcn2 = \"\";\nboolean currentContext2 = false;\nClassLoader childClassLoader = this.regionClassLoader;",
            "Sinput_code_block": "RegionClassLoader regionClassLoader = this.regionClassLoader;\nString fqcn = \"\";\nboolean currentContext = false;"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForArtifactClassLoaderChild_h8Test3",
            "input_pairs_code_block": "RegionClassLoader regionClassLoader = this.regionClassLoader;\nString fqcn = \"com.example.MyClass\";\nboolean currentContext = false;\nString fqcn2 = \"com.example.MyClass\";\nboolean currentContext2 = false;\nClassLoader childClassLoader = this.regionClassLoader;",
            "Sinput_code_block": "RegionClassLoader regionClassLoader = this.regionClassLoader;\nString fqcn = \"com.example.MyClass\";\nboolean currentContext = false;"
        }
    ],
    "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase.returnsMuleLoggerContextForInternalArtifactClassLoader()": [
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test0",
            "input_pairs_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nClassLoader systemLoader = this.getClass().getClassLoader();\nString fqcn2 = \"com.example.MyClass\";\nboolean currentContext2 = true;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nClassLoader systemLoader = this.getClass().getClassLoader();"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test1",
            "input_pairs_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nClassLoader systemLoader = this.getClass().getClassLoader();\nString fqcn2 = fqcn;\nboolean currentContext2 = currentContext;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nClassLoader systemLoader = this.getClass().getClassLoader();"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test2",
            "input_pairs_code_block": "String fqcn = \"com.example.NonExistentClass\";\nboolean currentContext = true;\nClassLoader systemLoader = this.getClass().getClassLoader();\nString fqcn2 = \"com.example.NonExistentClass\";\nboolean currentContext2 = true;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"com.example.NonExistentClass\";\nboolean currentContext = true;\nClassLoader systemLoader = this.getClass().getClassLoader();"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test3",
            "input_pairs_code_block": "String fqcn = \"com.example.NonExistentClass\";\nboolean currentContext = true;\nClassLoader systemLoader = this.getClass().getClassLoader();\nString fqcn2 = fqcn;\nboolean currentContext2 = currentContext;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"com.example.NonExistentClass\";\nboolean currentContext = true;\nClassLoader systemLoader = this.getClass().getClassLoader();"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test4",
            "input_pairs_code_block": "String fqcn = \"\";\nboolean currentContext = false;\nClassLoader systemLoader = this.getClass().getClassLoader();\nString fqcn2 = \"\";\nboolean currentContext2 = false;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"\";\nboolean currentContext = false;\nClassLoader systemLoader = this.getClass().getClassLoader();"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test5",
            "input_pairs_code_block": "String fqcn = \"\";\nboolean currentContext = false;\nClassLoader systemLoader = this.getClass().getClassLoader();\nString fqcn2 = fqcn;\nboolean currentContext2 = currentContext;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"\";\nboolean currentContext = false;\nClassLoader systemLoader = this.getClass().getClassLoader();"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test6",
            "input_pairs_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = false;\nClassLoader systemLoader = this.getClass().getClassLoader();\nString fqcn2 = \"com.example.MyClass\";\nboolean currentContext2 = false;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = false;\nClassLoader systemLoader = this.getClass().getClassLoader();"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test7",
            "input_pairs_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = false;\nClassLoader systemLoader = this.getClass().getClassLoader();\nString fqcn2 = fqcn;\nboolean currentContext2 = currentContext;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = false;\nClassLoader systemLoader = this.getClass().getClassLoader();"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test8",
            "input_pairs_code_block": "String fqcn = \"\";\nboolean currentContext = true;\nClassLoader systemLoader = null;\nString fqcn2 = \"\";\nboolean currentContext2 = true;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"\";\nboolean currentContext = true;\nClassLoader systemLoader = null;"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h0Test9",
            "input_pairs_code_block": "String fqcn = \"\";\nboolean currentContext = true;\nClassLoader systemLoader = null;\nString fqcn2 = fqcn;\nboolean currentContext2 = currentContext;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"\";\nboolean currentContext = true;\nClassLoader systemLoader = null;"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h2Test1",
            "input_pairs_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nClassLoader systemLoader = this.getClass().getClassLoader();\nString fqcn2 = fqcn;\nboolean currentContext2 = currentContext;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nClassLoader systemLoader = this.getClass().getClassLoader();"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h2Test3",
            "input_pairs_code_block": "String fqcn = \"com.example.NonExistentClass\";\nboolean currentContext = true;\nClassLoader systemLoader = this.getClass().getClassLoader();\nString fqcn2 = fqcn;\nboolean currentContext2 = currentContext;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"com.example.NonExistentClass\";\nboolean currentContext = true;\nClassLoader systemLoader = this.getClass().getClassLoader();"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h2Test5",
            "input_pairs_code_block": "String fqcn = \"\";\nboolean currentContext = false;\nClassLoader systemLoader = this.getClass().getClassLoader();\nString fqcn2 = fqcn;\nboolean currentContext2 = currentContext;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"\";\nboolean currentContext = false;\nClassLoader systemLoader = this.getClass().getClassLoader();"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h2Test6",
            "input_pairs_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = false;\nClassLoader systemLoader = this.getClass().getClassLoader();\nString fqcn2 = \"com.example.MyClass\";\nboolean currentContext2 = false;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = false;\nClassLoader systemLoader = this.getClass().getClassLoader();"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h2Test7",
            "input_pairs_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = false;\nClassLoader systemLoader = this.getClass().getClassLoader();\nString fqcn2 = fqcn;\nboolean currentContext2 = currentContext;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = false;\nClassLoader systemLoader = this.getClass().getClassLoader();"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h2Test8",
            "input_pairs_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nClassLoader systemLoader = new URLClassLoader(new URL[0], this.getClass().getClassLoader());\nString fqcn2 = \"com.example.MyClass\";\nboolean currentContext2 = true;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nClassLoader systemLoader = new URLClassLoader(new URL[0], this.getClass().getClassLoader());"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h2Test9",
            "input_pairs_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nClassLoader systemLoader = new URLClassLoader(new URL[0], this.getClass().getClassLoader());\nString fqcn2 = fqcn;\nboolean currentContext2 = currentContext;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nClassLoader systemLoader = new URLClassLoader(new URL[0], this.getClass().getClassLoader());"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h3Test6",
            "input_pairs_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nClassLoader systemLoader = null;\nString fqcn2 = \"com.example.MyClass\";\nboolean currentContext2 = true;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nClassLoader systemLoader = null;"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h5Test8",
            "input_pairs_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nClassLoader systemLoader = null;\nString fqcn2 = \"com.example.MyClass\";\nboolean currentContext2 = true;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nClassLoader systemLoader = null;"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h5Test9",
            "input_pairs_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nClassLoader systemLoader = null;\nString fqcn2 = fqcn;\nboolean currentContext2 = currentContext;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nClassLoader systemLoader = null;"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h6Test8",
            "input_pairs_code_block": "String fqcn = \"\";\nboolean currentContext = true;\nClassLoader systemLoader = new URLClassLoader(new URL[0], this.getClass().getClassLoader());\nString fqcn2 = \"\";\nboolean currentContext2 = true;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"\";\nboolean currentContext = true;\nClassLoader systemLoader = new URLClassLoader(new URL[0], this.getClass().getClassLoader());"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h6Test9",
            "input_pairs_code_block": "String fqcn = \"\";\nboolean currentContext = true;\nClassLoader systemLoader = new URLClassLoader(new URL[0], this.getClass().getClassLoader());\nString fqcn2 = fqcn;\nboolean currentContext2 = currentContext;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"\";\nboolean currentContext = true;\nClassLoader systemLoader = new URLClassLoader(new URL[0], this.getClass().getClassLoader());"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h7Test8",
            "input_pairs_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nClassLoader systemLoader = new URLClassLoader(new URL[0], this.getClass().getClassLoader());\nString fqcn2 = \"com.example.MyClass\";\nboolean currentContext2 = true;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nClassLoader systemLoader = new URLClassLoader(new URL[0], this.getClass().getClassLoader());"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h7Test9",
            "input_pairs_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nClassLoader systemLoader = new URLClassLoader(new URL[0], this.getClass().getClassLoader());\nString fqcn2 = fqcn;\nboolean currentContext2 = currentContext;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], this.getClass().getClassLoader(), mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"com.example.MyClass\";\nboolean currentContext = true;\nClassLoader systemLoader = new URLClassLoader(new URL[0], this.getClass().getClassLoader());"
        },
        {
            "test_inputs_FQN": "org.mule.runtime.module.log4j.internal.ArtifactAwareContextSelectorTestCase_returnsMuleLoggerContextForInternalArtifactClassLoader_h8Test2",
            "input_pairs_code_block": "String fqcn = \"\";\nboolean currentContext = false;\nClassLoader systemLoader = null;\nString fqcn2 = \"\";\nboolean currentContext2 = false;\nArtifactClassLoader serviceClassLoader = new MuleArtifactClassLoader(\"test\", new ApplicationDescriptor(\"test\"), new URL[0], systemLoader, mock(ClassLoaderLookupPolicy.class));\nClassLoader serviceLoader = serviceClassLoader.getClassLoader();",
            "Sinput_code_block": "String fqcn = \"\";\nboolean currentContext = false;\nClassLoader systemLoader = null;"
        }
    ],
    "com.thealgorithms.datastructures.crdt.ORSetTest.testCompareDifferentSets()": [
        {
            "test_inputs_FQN": "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h9Test0",
            "input_pairs_code_block": "String element1 = \"B\";\nString element2 = \"C\";",
            "Sinput_code_block": "String element1 = \"B\";"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h9Test1",
            "input_pairs_code_block": "String element1 = \"C\";\nString element2 = \"D\";",
            "Sinput_code_block": "String element1 = \"C\";"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h9Test2",
            "input_pairs_code_block": "String element1 = \"D\";\nString element2 = \"E\";",
            "Sinput_code_block": "String element1 = \"D\";"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h9Test3",
            "input_pairs_code_block": "String element1 = \"E\";\nString element2 = \"F\";",
            "Sinput_code_block": "String element1 = \"E\";"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.datastructures.crdt.ORSetTest_testCompareDifferentSets_h9Test4",
            "input_pairs_code_block": "String element1 = \"F\";\nString element2 = \"G\";",
            "Sinput_code_block": "String element1 = \"F\";"
        }
    ],
    "com.thealgorithms.datastructures.crdt.LWWElementSetTest.testCompareDifferentSets()": [
        {
            "test_inputs_FQN": "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h9Test0",
            "input_pairs_code_block": "Element element1 = new Element(\"key2\", 2, bias);\nElement element2 = new Element(\"key3\", 3, bias);",
            "Sinput_code_block": "Element element1 = new Element(\"key2\", 2, bias);"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h9Test1",
            "input_pairs_code_block": "Element element1 = new Element(\"key4\", 4, bias);\nElement element2 = new Element(\"key5\", 5, bias);",
            "Sinput_code_block": "Element element1 = new Element(\"key4\", 4, bias);"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h9Test2",
            "input_pairs_code_block": "Element element1 = new Element(\"key6\", 6, bias);\nElement element2 = new Element(\"key7\", 7, bias);",
            "Sinput_code_block": "Element element1 = new Element(\"key6\", 6, bias);"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h9Test3",
            "input_pairs_code_block": "Element element1 = new Element(\"key8\", 8, bias);\nElement element2 = new Element(\"key9\", 9, bias);",
            "Sinput_code_block": "Element element1 = new Element(\"key8\", 8, bias);"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testCompareDifferentSets_h9Test4",
            "input_pairs_code_block": "Element element1 = new Element(\"key10\", 10, bias);\nElement element2 = new Element(\"key11\", 11, bias);",
            "Sinput_code_block": "Element element1 = new Element(\"key10\", 10, bias);"
        }
    ],
    "io.arex.inst.runtime.serializer.SerializerTest.testNestedList()": [
        {
            "test_inputs_FQN": "io.arex.inst.runtime.serializer.SerializerTest_testNestedList_h9Test0",
            "input_pairs_code_block": "List<List<Object>> list = new ArrayList<>();\nString serializer = \"jackson\";\nString json2 = \"nullA@R#E$X[]\";\nString typeName2 = \"java.util.ArrayList-java.util.ArrayList\";",
            "Sinput_code_block": "List<List<Object>> list = new ArrayList<>();\nString serializer = \"jackson\";"
        }
    ],
    "com.thealgorithms.ciphers.PlayfairTest.testEncryptionAndDecryption()": [
        {
            "test_inputs_FQN": "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h5Test3",
            "input_pairs_code_block": "PlayfairCipher playfairCipher = new PlayfairCipher(\"ENCRYPTION\");\nString plaintext = \"TESTCASE\";\nString textTodecrypt = \"JJJJJJJJJJ\";",
            "Sinput_code_block": "PlayfairCipher playfairCipher = new PlayfairCipher(\"ENCRYPTION\");\nString plaintext = \"TESTCASE\";"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h5Test5",
            "input_pairs_code_block": "PlayfairCipher playfairCipher = new PlayfairCipher(\"PLAYFAIR\");\nString plaintext = \"PLAYFAIR\";\nString textTodecrypt = \"SHHAHRFB\";",
            "Sinput_code_block": "PlayfairCipher playfairCipher = new PlayfairCipher(\"PLAYFAIR\");\nString plaintext = \"PLAYFAIR\";"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h7Test2",
            "input_pairs_code_block": "PlayfairCipher playfairCipher = new PlayfairCipher(\"ENCRYPTION\");\nString plaintext = \"TESTCASE\";\nString textTodecrypt = \"JJJJJJJJJ\";",
            "Sinput_code_block": "PlayfairCipher playfairCipher = new PlayfairCipher(\"ENCRYPTION\");\nString plaintext = \"TESTCASE\";"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h7Test3",
            "input_pairs_code_block": "PlayfairCipher playfairCipher = new PlayfairCipher(\"DEMO\");\nString plaintext = \"DEMOGRAPHICS\";\nString textTodecrypt = \"JJJJJJJJJ\";",
            "Sinput_code_block": "PlayfairCipher playfairCipher = new PlayfairCipher(\"DEMO\");\nString plaintext = \"DEMOGRAPHICS\";"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h8Test2",
            "input_pairs_code_block": "PlayfairCipher playfairCipher = new PlayfairCipher(\"TEST\");\nString plaintext = \"CASE\";\nString textTodecrypt = playfairCipher.encrypt(plaintext);",
            "Sinput_code_block": "PlayfairCipher playfairCipher = new PlayfairCipher(\"TEST\");\nString plaintext = \"CASE\";"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h8Test3",
            "input_pairs_code_block": "PlayfairCipher playfairCipher = new PlayfairCipher(\"ENCRYPTION\");\nString plaintext = \"DEMO\";\nString textTodecrypt = playfairCipher.encrypt(plaintext);",
            "Sinput_code_block": "PlayfairCipher playfairCipher = new PlayfairCipher(\"ENCRYPTION\");\nString plaintext = \"DEMO\";"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.ciphers.PlayfairTest_testEncryptionAndDecryption_h8Test4",
            "input_pairs_code_block": "PlayfairCipher playfairCipher = new PlayfairCipher(\"ALGORITHM\");\nString plaintext = \"COMPUTER\";\nString textTodecrypt = playfairCipher.encrypt(plaintext);",
            "Sinput_code_block": "PlayfairCipher playfairCipher = new PlayfairCipher(\"ALGORITHM\");\nString plaintext = \"COMPUTER\";"
        }
    ],
    "org.threeten.extra.TestTemporalFields.test_HALF_YEARS()": [
        {
            "test_inputs_FQN": "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h0Test1",
            "input_pairs_code_block": "int year1 = 2023;\nint quarter1 = 2;\nint year2 = 2023;\nint quarter2 = 4;\nint amount = 1;",
            "Sinput_code_block": "int year1 = 2023;\nint quarter1 = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h2Test1",
            "input_pairs_code_block": "int year1 = 2023;\nint quarter1 = 2;\nint year2 = 2023;\nint quarter2 = 3;\nint amount = 1;",
            "Sinput_code_block": "int year1 = 2023;\nint quarter1 = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h2Test3",
            "input_pairs_code_block": "int year1 = 2023;\nint quarter1 = 4;\nint year2 = 2023;\nint quarter2 = 1;\nint amount = 1;",
            "Sinput_code_block": "int year1 = 2023;\nint quarter1 = 4;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestTemporalFields_test_HALF_YEARS_h4Test3",
            "input_pairs_code_block": "int year1 = 2023;\nint quarter1 = 4;\nint year2 = 2024;\nint quarter2 = 1;\nint amount = 1;",
            "Sinput_code_block": "int year1 = 2023;\nint quarter1 = 4;"
        }
    ],
    "com.zfoo.net.util.NetUtilsTest.ipv4Test()": [
        {
            "test_inputs_FQN": "com.zfoo.net.util.NetUtilsTest_ipv4Test_h0Test0",
            "input_pairs_code_block": "String ipStr1 = \"192.168.0.1\";\nlong ipLong2 = 3232235777L;",
            "Sinput_code_block": "String ipStr1 = \"192.168.0.1\";"
        },
        {
            "test_inputs_FQN": "com.zfoo.net.util.NetUtilsTest_ipv4Test_h0Test1",
            "input_pairs_code_block": "String ipStr1 = \"10.0.0.1\";\nlong ipLong2 = 167772161L;",
            "Sinput_code_block": "String ipStr1 = \"10.0.0.1\";"
        },
        {
            "test_inputs_FQN": "com.zfoo.net.util.NetUtilsTest_ipv4Test_h0Test2",
            "input_pairs_code_block": "String ipStr1 = \"172.16.0.1\";\nlong ipLong2 = 2886723584L;",
            "Sinput_code_block": "String ipStr1 = \"172.16.0.1\";"
        },
        {
            "test_inputs_FQN": "com.zfoo.net.util.NetUtilsTest_ipv4Test_h0Test3",
            "input_pairs_code_block": "String ipStr1 = \"8.8.8.8\";\nlong ipLong2 = 134744072L;",
            "Sinput_code_block": "String ipStr1 = \"8.8.8.8\";"
        },
        {
            "test_inputs_FQN": "com.zfoo.net.util.NetUtilsTest_ipv4Test_h0Test4",
            "input_pairs_code_block": "String ipStr1 = \"255.255.255.255\";\nlong ipLong2 = 4294967295L;",
            "Sinput_code_block": "String ipStr1 = \"255.255.255.255\";"
        },
        {
            "test_inputs_FQN": "com.zfoo.net.util.NetUtilsTest_ipv4Test_h2Test2",
            "input_pairs_code_block": "String ipStr1 = \"172.16.0.1\";\nlong ipLong2 = 2886729729L;",
            "Sinput_code_block": "String ipStr1 = \"172.16.0.1\";"
        },
        {
            "test_inputs_FQN": "com.zfoo.net.util.NetUtilsTest_ipv4Test_h3Test2",
            "input_pairs_code_block": "String ipStr1 = \"172.16.0.1\";\nlong ipLong2 = 2886723073L;",
            "Sinput_code_block": "String ipStr1 = \"172.16.0.1\";"
        },
        {
            "test_inputs_FQN": "com.zfoo.net.util.NetUtilsTest_ipv4Test_h3Test4",
            "input_pairs_code_block": "String ipStr1 = \"0.0.0.0\";\nlong ipLong2 = 0L;",
            "Sinput_code_block": "String ipStr1 = \"0.0.0.0\";"
        },
        {
            "test_inputs_FQN": "com.zfoo.net.util.NetUtilsTest_ipv4Test_h6Test3",
            "input_pairs_code_block": "String ipStr1 = \"8.8.8.8\";\nlong ipLong2 = 134744896L;",
            "Sinput_code_block": "String ipStr1 = \"8.8.8.8\";"
        },
        {
            "test_inputs_FQN": "com.zfoo.net.util.NetUtilsTest_ipv4Test_h7Test2",
            "input_pairs_code_block": "String ipStr1 = \"172.16.0.1\";\nlong ipLong2 = 2886723581L;",
            "Sinput_code_block": "String ipStr1 = \"172.16.0.1\";"
        }
    ],
    "org.threeten.extra.TestYearHalf.test_from_TemporalAccessor_notLeapYear()": [
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_notLeapYear_h2Test2",
            "input_pairs_code_block": "int year = 2021;\nint expected = ((date.getMonthValue() - 1) / 6) + 1;",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_notLeapYear_h2Test4",
            "input_pairs_code_block": "int year = 1900;\nint expected = ((date.getMonthValue() - 1) / 6) + 1;",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_notLeapYear_h2Test6",
            "input_pairs_code_block": "int year = 2000;\nint expected = ((date.getMonthValue() - 1) / 6) + 1;",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_notLeapYear_h2Test8",
            "input_pairs_code_block": "int year = 2022;\nint expected = ((date.getMonthValue() - 1) / 6) + 1;",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_notLeapYear_h3Test6",
            "input_pairs_code_block": "int year = 2100;\nint expected = ((date.getMonthValue() - 1) / 6) + 1;",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_notLeapYear_h3Test8",
            "input_pairs_code_block": "int year = 1800;\nint expected = ((date.getMonthValue() - 1) / 6) + 1;",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_notLeapYear_h4Test2",
            "input_pairs_code_block": "int year = 2008;\nint expected = ((date.getMonthValue() - 1) / 6) + 1;",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_notLeapYear_h4Test4",
            "input_pairs_code_block": "int year = 2009;\nint expected = ((date.getMonthValue() - 1) / 6) + 1;",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_notLeapYear_h6Test2",
            "input_pairs_code_block": "int year = 2019;\nint expected = ((date.getMonthValue() - 1) / 6) + 1;",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_notLeapYear_h6Test8",
            "input_pairs_code_block": "int year = 2023;\nint expected = ((date.getMonthValue() - 1) / 6) + 1;",
            "Sinput_code_block": ""
        }
    ],
    "com.thealgorithms.datastructures.crdt.LWWElementSetTest.testRemove()": [
        {
            "test_inputs_FQN": "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h0Test0",
            "input_pairs_code_block": "Element element = new Element(\"key1\", 0, bias);\nElement element2 = new Element(\"key1\", 0, bias);",
            "Sinput_code_block": "Element element = new Element(\"key1\", 0, bias);"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h0Test1",
            "input_pairs_code_block": "Element element = new Element(\"key1\", Integer.MAX_VALUE, bias);\nElement element2 = new Element(\"key1\", Integer.MAX_VALUE, bias);",
            "Sinput_code_block": "Element element = new Element(\"key1\", Integer.MAX_VALUE, bias);"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h0Test2",
            "input_pairs_code_block": "Element element = new Element(\"key1\", Integer.MIN_VALUE, bias);\nElement element2 = new Element(\"key1\", Integer.MIN_VALUE, bias);",
            "Sinput_code_block": "Element element = new Element(\"key1\", Integer.MIN_VALUE, bias);"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h0Test3",
            "input_pairs_code_block": "Element element = new Element(\"key1\", -1, bias);\nElement element2 = new Element(\"key1\", -1, bias);",
            "Sinput_code_block": "Element element = new Element(\"key1\", -1, bias);"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h0Test4",
            "input_pairs_code_block": "Element element = new Element(\"key1\", 1, null);\nElement element2 = new Element(\"key1\", 1, null);",
            "Sinput_code_block": "Element element = new Element(\"key1\", 1, null);"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h5Test0",
            "input_pairs_code_block": "Element element = new Element(\"key2\", 2, bias);\nElement element2 = new Element(\"key2\", 2, bias);",
            "Sinput_code_block": "Element element = new Element(\"key2\", 2, bias);"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h5Test2",
            "input_pairs_code_block": "Element element = new Element(\"key1\", 3, bias);\nElement element2 = new Element(\"key1\", 3, bias);",
            "Sinput_code_block": "Element element = new Element(\"key1\", 3, bias);"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h6Test3",
            "input_pairs_code_block": "Element element = new Element(\"key3\", 1, bias);\nElement element2 = new Element(\"key3\", 1, bias);",
            "Sinput_code_block": "Element element = new Element(\"key3\", 1, bias);"
        },
        {
            "test_inputs_FQN": "com.thealgorithms.datastructures.crdt.LWWElementSetTest_testRemove_h7Test8",
            "input_pairs_code_block": "Element element = new Element(\"key1\", 2, bias);\nElement element2 = new Element(\"key1\", 2, bias);",
            "Sinput_code_block": "Element element = new Element(\"key1\", 2, bias);"
        }
    ],
    "org.datagear.util.version.VersionTest.isLowerThanTest()": [
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h0Test0",
            "input_pairs_code_block": "String v1 = \"0.9\";\nString v2 = \"0.9\";",
            "Sinput_code_block": "String v1 = \"0.9\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h0Test2",
            "input_pairs_code_block": "String v1 = \"1.0.0\";\nString v2 = \"1.0.0\";",
            "Sinput_code_block": "String v1 = \"1.0.0\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h0Test4",
            "input_pairs_code_block": "String v1 = \"1.9\";\nString v2 = \"1.9\";",
            "Sinput_code_block": "String v1 = \"1.9\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h0Test6",
            "input_pairs_code_block": "String v1 = \"1.0-A1\";\nString v2 = \"1.0-A1\";",
            "Sinput_code_block": "String v1 = \"1.0-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h0Test8",
            "input_pairs_code_block": "String v1 = \"1.0.0-A1\";\nString v2 = \"1.0.0-A1\";",
            "Sinput_code_block": "String v1 = \"1.0.0-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h2Test1",
            "input_pairs_code_block": "String v1 = \"1.0-alpha\";\nString v2 = \"1.0-alpha\";",
            "Sinput_code_block": "String v1 = \"1.0-alpha\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h2Test2",
            "input_pairs_code_block": "String v1 = \"1.0.0-beta\";\nString v2 = \"1.0.0-beta\";",
            "Sinput_code_block": "String v1 = \"1.0.0-beta\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h3Test0",
            "input_pairs_code_block": "String v1 = \"0.0\";\nString v2 = \"0.1\";",
            "Sinput_code_block": "String v1 = \"0.0\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h3Test1",
            "input_pairs_code_block": "String v1 = \"2.0\";\nString v2 = \"2.1\";",
            "Sinput_code_block": "String v1 = \"2.0\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h3Test3",
            "input_pairs_code_block": "String v1 = \"1.0-A1\";\nString v2 = \"1.0-B1\";",
            "Sinput_code_block": "String v1 = \"1.0-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h4Test2",
            "input_pairs_code_block": "String v1 = \"1.9.9\";\nString v2 = \"2.0.0\";",
            "Sinput_code_block": "String v1 = \"1.9.9\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h4Test3",
            "input_pairs_code_block": "String v1 = \"1.1.1\";\nString v2 = \"1.2.0\";",
            "Sinput_code_block": "String v1 = \"1.1.1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h4Test4",
            "input_pairs_code_block": "String v1 = \"2.0.0\";\nString v2 = \"2.0.1\";",
            "Sinput_code_block": "String v1 = \"2.0.0\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h5Test0",
            "input_pairs_code_block": "String v1 = \"1.0-alpha1\";\nString v2 = \"1.0-alpha2\";",
            "Sinput_code_block": "String v1 = \"1.0-alpha1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h5Test1",
            "input_pairs_code_block": "String v1 = \"1.1.0-beta2\";\nString v2 = \"1.1.0-beta3\";",
            "Sinput_code_block": "String v1 = \"1.1.0-beta2\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h5Test2",
            "input_pairs_code_block": "String v1 = \"2.0.0-rc1\";\nString v2 = \"2.0.0-rc2\";",
            "Sinput_code_block": "String v1 = \"2.0.0-rc1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h5Test3",
            "input_pairs_code_block": "String v1 = \"0.9\";\nString v2 = \"0.10\";",
            "Sinput_code_block": "String v1 = \"0.9\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h6Test4",
            "input_pairs_code_block": "String v1 = \"1.1.0-beta1\";\nString v2 = \"1.1.0-beta2\";",
            "Sinput_code_block": "String v1 = \"1.1.0-beta1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h6Test6",
            "input_pairs_code_block": "String v1 = \"2.1.0-alpha1\";\nString v2 = \"2.1.0-alpha2\";",
            "Sinput_code_block": "String v1 = \"2.1.0-alpha1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h6Test8",
            "input_pairs_code_block": "String v1 = \"1.0.0-rc1\";\nString v2 = \"1.0.0-rc2\";",
            "Sinput_code_block": "String v1 = \"1.0.0-rc1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h7Test0",
            "input_pairs_code_block": "String v1 = \"1.0-A1\";\nString v2 = \"1.0-A1.1\";",
            "Sinput_code_block": "String v1 = \"1.0-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h7Test1",
            "input_pairs_code_block": "String v1 = \"1.0-A1\";\nString v2 = v1 + \".1\";",
            "Sinput_code_block": "String v1 = \"1.0-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h7Test2",
            "input_pairs_code_block": "String v1 = \"1.1.0\";\nString v2 = \"1.1.0.1\";",
            "Sinput_code_block": "String v1 = \"1.1.0\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h7Test3",
            "input_pairs_code_block": "String v1 = \"1.1.0\";\nString v2 = v1 + \".1\";",
            "Sinput_code_block": "String v1 = \"1.1.0\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h7Test4",
            "input_pairs_code_block": "String v1 = \"1.1.0-A1\";\nString v2 = \"1.1.0-A1.1\";",
            "Sinput_code_block": "String v1 = \"1.1.0-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h7Test5",
            "input_pairs_code_block": "String v1 = \"1.1.0-A1\";\nString v2 = v1 + \".1\";",
            "Sinput_code_block": "String v1 = \"1.1.0-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h7Test6",
            "input_pairs_code_block": "String v1 = \"2.1\";\nString v2 = \"2.1.1\";",
            "Sinput_code_block": "String v1 = \"2.1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h7Test7",
            "input_pairs_code_block": "String v1 = \"2.1\";\nString v2 = v1 + \".1\";",
            "Sinput_code_block": "String v1 = \"2.1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h7Test8",
            "input_pairs_code_block": "String v1 = \"2.1-A1\";\nString v2 = \"2.1-A1.1\";",
            "Sinput_code_block": "String v1 = \"2.1-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h7Test9",
            "input_pairs_code_block": "String v1 = \"2.1-A1\";\nString v2 = v1 + \".1\";",
            "Sinput_code_block": "String v1 = \"2.1-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h9Test1",
            "input_pairs_code_block": "String v1 = \"1.1.0\";\nString v2 = \"1.1.1\";",
            "Sinput_code_block": "String v1 = \"1.1.0\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isLowerThanTest_h9Test2",
            "input_pairs_code_block": "String v1 = \"1.1.0-A1\";\nString v2 = \"1.1.0-A2\";",
            "Sinput_code_block": "String v1 = \"1.1.0-A1\";"
        }
    ],
    "org.threeten.extra.TestYearHalf.test_from_TemporalAccessor_leapYear()": [
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h0Test0",
            "input_pairs_code_block": "int year = 2009;\nint expected = ((date.getMonthValue() - 1) / 6) + 1;",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h0Test1",
            "input_pairs_code_block": "int year = 2010;\nint expected = ((date.getMonthValue() - 1) / 6) + 1;",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h0Test2",
            "input_pairs_code_block": "int year = 2011;\nint expected = ((date.getMonthValue() - 1) / 6) + 1;",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h2Test3",
            "input_pairs_code_block": "int year = 2012;\nint expected = ((date.getMonthValue() - 1) / 6) + 1;",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h2Test4",
            "input_pairs_code_block": "int year = 2013;\nint expected = ((date.getMonthValue() - 1) / 6) + 1;",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h4Test4",
            "input_pairs_code_block": "int year = 1900;\nint expected = ((date.getMonthValue() - 1) / 6) + 1;",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h4Test6",
            "input_pairs_code_block": "int year = 2000;\nint expected = ((date.getMonthValue() - 1) / 6) + 1;",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_from_TemporalAccessor_leapYear_h4Test8",
            "input_pairs_code_block": "int year = 2001;\nint expected = ((date.getMonthValue() - 1) / 6) + 1;",
            "Sinput_code_block": ""
        }
    ],
    "com.alibaba.druid.bvt.sql.hive.issues.Issue5430.test_createTable()": [
        {
            "test_inputs_FQN": "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h0Test1",
            "input_pairs_code_block": "String sql = \"CREATE TABLE my_table (a string, b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";\nString newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";",
            "Sinput_code_block": "String sql = \"CREATE TABLE my_table (a string, b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";"
        },
        {
            "test_inputs_FQN": "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h0Test2",
            "input_pairs_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";\nString newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";",
            "Sinput_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";"
        },
        {
            "test_inputs_FQN": "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h0Test3",
            "input_pairs_code_block": "String sql = \"CREATE TABLE my_table(a string,b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";\nString newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";",
            "Sinput_code_block": "String sql = \"CREATE TABLE my_table(a string,b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";"
        },
        {
            "test_inputs_FQN": "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h2Test2",
            "input_pairs_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint)\\n\" + \"ROW FORMAT DELIMITED FIELDS TERMINATED BY ','\\n\" + \"STORED AS TEXTFILE\";\nString newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE\";",
            "Sinput_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint)\\n\" + \"ROW FORMAT DELIMITED FIELDS TERMINATED BY ','\\n\" + \"STORED AS TEXTFILE\";"
        },
        {
            "test_inputs_FQN": "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h2Test3",
            "input_pairs_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint)\\n\" + \"ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe'\\n\" + \"STORED AS ORC\";\nString newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS ORC\";",
            "Sinput_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint)\\n\" + \"ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe'\\n\" + \"STORED AS ORC\";"
        },
        {
            "test_inputs_FQN": "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h2Test4",
            "input_pairs_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint)\\n\" + \"ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe'\\n\" + \"STORED AS PARQUET\";\nString newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS PARQUET\";",
            "Sinput_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint)\\n\" + \"ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe'\\n\" + \"STORED AS PARQUET\";"
        },
        {
            "test_inputs_FQN": "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h2Test5",
            "input_pairs_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint)\\n\" + \"ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe'\\n\" + \"STORED AS AVRO\";\nString newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS AVRO\";",
            "Sinput_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint)\\n\" + \"ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe'\\n\" + \"STORED AS AVRO\";"
        },
        {
            "test_inputs_FQN": "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h3Test1",
            "input_pairs_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint) ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE\";\nString newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE\";",
            "Sinput_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint) ROW FORMAT DELIMITED FIELDS TERMINATED BY ',' STORED AS TEXTFILE\";"
        },
        {
            "test_inputs_FQN": "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h3Test2",
            "input_pairs_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS ORC\";\nString newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS ORC\";",
            "Sinput_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS ORC\";"
        },
        {
            "test_inputs_FQN": "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h3Test3",
            "input_pairs_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS PARQUET\";\nString newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS PARQUET\";",
            "Sinput_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS PARQUET\";"
        },
        {
            "test_inputs_FQN": "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h3Test4",
            "input_pairs_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS AVRO\";\nString newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS AVRO\";",
            "Sinput_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS AVRO\";"
        },
        {
            "test_inputs_FQN": "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h4Test0",
            "input_pairs_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint)\\n\" + \"ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";\nString newSql = \"CREATE TABLE my_table (a string,b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";",
            "Sinput_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint)\\n\" + \"ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";"
        },
        {
            "test_inputs_FQN": "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h5Test1",
            "input_pairs_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint)\\n\" + \"ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe'\\n\" + \"STORED AS TEXTFILE\";\nString newSql = normalizeSql(sql);",
            "Sinput_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint)\\n\" + \"ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe'\\n\" + \"STORED AS TEXTFILE\";"
        },
        {
            "test_inputs_FQN": "com.alibaba.druid.bvt.sql.hive.issues.Issue5430_test_createTable_h9Test1",
            "input_pairs_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";\nString newSql = sql.replace(\"( \", \"(\").replace(\"( \", \"(\").replace(\"( \", \"(\").replace(\" )\", \")\").replace(\"( \", \"(\").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"  \", \" \").replace(\"( \", \"(\").replace(\", \", \",\").replace(\",\", \",\");",
            "Sinput_code_block": "String sql = \"CREATE TABLE my_table(a string, b bigint) ROW FORMAT SERDE 'org.apache.hadoop.hive.serde2.JsonSerDe' STORED AS TEXTFILE\";"
        }
    ],
    "io.vertx.core.json.jackson.HybridJacksonPoolTest.testVirtualThreadPoolWithSingleThread()": [
        {
            "test_inputs_FQN": "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h0Test1",
            "input_pairs_code_block": "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(1);\nHybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(1);",
            "Sinput_code_block": "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(1);"
        },
        {
            "test_inputs_FQN": "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h0Test4",
            "input_pairs_code_block": "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(2);\nHybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(2);",
            "Sinput_code_block": "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(2);"
        },
        {
            "test_inputs_FQN": "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h5Test2",
            "input_pairs_code_block": "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(10);\nHybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(10);",
            "Sinput_code_block": "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(10);"
        },
        {
            "test_inputs_FQN": "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h5Test3",
            "input_pairs_code_block": "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(100);\nHybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(100);",
            "Sinput_code_block": "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(100);"
        },
        {
            "test_inputs_FQN": "io.vertx.core.json.jackson.HybridJacksonPoolTest_testVirtualThreadPoolWithSingleThread_h5Test4",
            "input_pairs_code_block": "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(1000);\nHybridJacksonPool.StripedLockFreePool virtualPool2 = new HybridJacksonPool.StripedLockFreePool(1000);",
            "Sinput_code_block": "HybridJacksonPool.StripedLockFreePool virtualPool = new HybridJacksonPool.StripedLockFreePool(1000);"
        }
    ],
    "com.cedarsoftware.util.convert.ConverterTest.testSqlDateToString()": [
        {
            "test_inputs_FQN": "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h0Test3",
            "input_pairs_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = 0;\nDate date = new Date(now);\nString strDate = this.converter.convert(date, String.class);\nClass<?> clazz2 = LocalDate.class;\nDate x = this.converter.convert(strDate, Date.class);",
            "Sinput_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = 0;\nDate date = new Date(now);"
        },
        {
            "test_inputs_FQN": "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h0Test4",
            "input_pairs_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = -1;\nDate date = new Date(now);\nString strDate = this.converter.convert(date, String.class);\nClass<?> clazz2 = LocalDate.class;\nDate x = this.converter.convert(strDate, Date.class);",
            "Sinput_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = -1;\nDate date = new Date(now);"
        },
        {
            "test_inputs_FQN": "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h4Test1",
            "input_pairs_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = System.currentTimeMillis() + 1000 * 60 * 60 * 24 * 365 * 100; // 100 years from now\nDate date = new Date(now);\nString strDate = this.converter.convert(date, String.class);\nClass<?> clazz2 = LocalDate.class;\nDate x = this.converter.convert(strDate, Date.class);",
            "Sinput_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = System.currentTimeMillis() + 1000 * 60 * 60 * 24 * 365 * 100; // 100 years from now\nDate date = new Date(now);"
        },
        {
            "test_inputs_FQN": "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h4Test2",
            "input_pairs_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = System.currentTimeMillis() - 1000 * 60 * 60 * 24 * 365 * 100; // 100 years ago\nDate date = new Date(now);\nString strDate = this.converter.convert(date, String.class);\nClass<?> clazz2 = LocalDate.class;\nDate x = this.converter.convert(strDate, Date.class);",
            "Sinput_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = System.currentTimeMillis() - 1000 * 60 * 60 * 24 * 365 * 100; // 100 years ago\nDate date = new Date(now);"
        },
        {
            "test_inputs_FQN": "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h6Test1",
            "input_pairs_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = System.currentTimeMillis();\nDate date = new Date(now - 1000 * 60 * 60 * 24 * 365); // One year ago\nString strDate = this.converter.convert(date, String.class);\nClass<?> clazz2 = LocalDate.class;\nDate x = this.converter.convert(strDate, Date.class);",
            "Sinput_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = System.currentTimeMillis();\nDate date = new Date(now - 1000 * 60 * 60 * 24 * 365); // One year ago\nString strDate = this.converter.convert(date, String.class);"
        },
        {
            "test_inputs_FQN": "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h6Test2",
            "input_pairs_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = System.currentTimeMillis();\nDate date = new Date(now + 1000 * 60 * 60 * 24 * 365); // One year from now\nString strDate = this.converter.convert(date, String.class);\nClass<?> clazz2 = LocalDate.class;\nDate x = this.converter.convert(strDate, Date.class);",
            "Sinput_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = System.currentTimeMillis();\nDate date = new Date(now + 1000 * 60 * 60 * 24 * 365); // One year from now\nString strDate = this.converter.convert(date, String.class);"
        },
        {
            "test_inputs_FQN": "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h6Test3",
            "input_pairs_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = System.currentTimeMillis();\nDate date = new Date(now - 1000 * 60 * 60 * 24 * 30); // One month ago\nString strDate = this.converter.convert(date, String.class);\nClass<?> clazz2 = LocalDate.class;\nDate x = this.converter.convert(strDate, Date.class);",
            "Sinput_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = System.currentTimeMillis();\nDate date = new Date(now - 1000 * 60 * 60 * 24 * 30); // One month ago\nString strDate = this.converter.convert(date, String.class);"
        },
        {
            "test_inputs_FQN": "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h6Test4",
            "input_pairs_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = System.currentTimeMillis();\nDate date = new Date(now + 1000 * 60 * 60 * 24 * 30); // One month from now\nString strDate = this.converter.convert(date, String.class);\nClass<?> clazz2 = LocalDate.class;\nDate x = this.converter.convert(strDate, Date.class);",
            "Sinput_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = System.currentTimeMillis();\nDate date = new Date(now + 1000 * 60 * 60 * 24 * 30); // One month from now\nString strDate = this.converter.convert(date, String.class);"
        },
        {
            "test_inputs_FQN": "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h8Test1",
            "input_pairs_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = System.currentTimeMillis() + 86400000; // Adding one day in milliseconds\nDate date = new Date(now);\nString strDate = this.converter.convert(date, String.class);\nClass<?> clazz2 = LocalDate.class;\nDate x = this.converter.convert(strDate, Date.class);",
            "Sinput_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = System.currentTimeMillis() + 86400000; // Adding one day in milliseconds\nDate date = new Date(now);"
        },
        {
            "test_inputs_FQN": "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h8Test2",
            "input_pairs_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = System.currentTimeMillis() - 86400000; // Subtracting one day in milliseconds\nDate date = new Date(now);\nString strDate = this.converter.convert(date, String.class);\nClass<?> clazz2 = LocalDate.class;\nDate x = this.converter.convert(strDate, Date.class);",
            "Sinput_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = System.currentTimeMillis() - 86400000; // Subtracting one day in milliseconds\nDate date = new Date(now);"
        },
        {
            "test_inputs_FQN": "com.cedarsoftware.util.convert.ConverterTest_testSqlDateToString_h8Test3",
            "input_pairs_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = 0; // Using 0 as the timestamp\nDate date = new Date(now);\nString strDate = this.converter.convert(date, String.class);\nClass<?> clazz2 = LocalDate.class;\nDate x = this.converter.convert(strDate, Date.class);",
            "Sinput_code_block": "Class<?> clazz1 = LocalDate.class;\nlong now = 0; // Using 0 as the timestamp\nDate date = new Date(now);"
        }
    ],
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test5()": [
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h0Test0",
            "input_pairs_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1.5);\nv01.put(\"102\", 2.5);",
            "Sinput_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1.5);\nv01.put(\"102\", 2.5);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h0Test2",
            "input_pairs_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", -1D);\nv01.put(\"102\", -2D);",
            "Sinput_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", -1D);\nv01.put(\"102\", -2D);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h0Test3",
            "input_pairs_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 0D);\nv01.put(\"102\", 0D);",
            "Sinput_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 0D);\nv01.put(\"102\", 0D);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h0Test4",
            "input_pairs_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", Double.MAX_VALUE);\nv01.put(\"102\", Double.MIN_VALUE);",
            "Sinput_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", Double.MAX_VALUE);\nv01.put(\"102\", Double.MIN_VALUE);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h2Test0",
            "input_pairs_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1.5);\nv01.put(\"102\", 2.5);\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteMapNullValue);\nType mapType = new TypeReference<Map<String, Double>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1.5);\nv01.put(\"102\", 2.5);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h2Test1",
            "input_pairs_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 0.0);\nv01.put(\"102\", 0.0);\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteMapNullValue);\nType mapType = new TypeReference<Map<String, Double>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 0.0);\nv01.put(\"102\", 0.0);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h2Test2",
            "input_pairs_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", -1D);\nv01.put(\"102\", -2D);\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteMapNullValue);\nType mapType = new TypeReference<Map<String, Double>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", -1D);\nv01.put(\"102\", -2D);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h2Test3",
            "input_pairs_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", Double.MAX_VALUE);\nv01.put(\"102\", Double.MIN_VALUE);\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteMapNullValue);\nType mapType = new TypeReference<Map<String, Double>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", Double.MAX_VALUE);\nv01.put(\"102\", Double.MIN_VALUE);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test1",
            "input_pairs_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1D);\nv01.put(\"102\", 2D);\nv01.put(\"103\", 3D);",
            "Sinput_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1D);\nv01.put(\"102\", 2D);\nv01.put(\"103\", 3D);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test2",
            "input_pairs_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1D);\nv01.put(\"102\", 2D);\nv01.put(\"103\", 3D);\nv01.put(\"104\", 4D);",
            "Sinput_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1D);\nv01.put(\"102\", 2D);\nv01.put(\"103\", 3D);\nv01.put(\"104\", 4D);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test3",
            "input_pairs_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1D);\nv01.put(\"102\", 2D);\nv01.put(\"103\", 3D);\nv01.put(\"104\", 4D);\nv01.put(\"105\", 5D);",
            "Sinput_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1D);\nv01.put(\"102\", 2D);\nv01.put(\"103\", 3D);\nv01.put(\"104\", 4D);\nv01.put(\"105\", 5D);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h3Test4",
            "input_pairs_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1D);\nv01.put(\"102\", 2D);\nv01.put(\"103\", 3D);\nv01.put(\"104\", 4D);\nv01.put(\"105\", 5D);\nv01.put(\"106\", 6D);",
            "Sinput_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1D);\nv01.put(\"102\", 2D);\nv01.put(\"103\", 3D);\nv01.put(\"104\", 4D);\nv01.put(\"105\", 5D);\nv01.put(\"106\", 6D);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h4Test2",
            "input_pairs_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1D);\nv01.put(\"102\", 2D);\nv01.put(\"101\", 3D);",
            "Sinput_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1D);\nv01.put(\"102\", 2D);\nv01.put(\"101\", 3D);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h4Test3",
            "input_pairs_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1D);\nv01.put(\"102\", 2D);\nv01.put(\"\", 3D);",
            "Sinput_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1D);\nv01.put(\"102\", 2D);\nv01.put(\"\", 3D);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h5Test0",
            "input_pairs_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1.5D);\nv01.put(\"102\", 2.5D);\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteMapNullValue);\nType mapType = new TypeReference<Map<String, Double>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1.5D);\nv01.put(\"102\", 2.5D);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h5Test1",
            "input_pairs_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 0D);\nv01.put(\"102\", 0D);\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteMapNullValue);\nType mapType = new TypeReference<Map<String, Double>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 0D);\nv01.put(\"102\", 0D);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h7Test0",
            "input_pairs_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1.5);\nv01.put(\"102\", 2.5);\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteMapNullValue);",
            "Sinput_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1.5);\nv01.put(\"102\", 2.5);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h7Test1",
            "input_pairs_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1.0);\nv01.put(\"102\", 2.0);\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteMapNullValue);",
            "Sinput_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1.0);\nv01.put(\"102\", 2.0);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h7Test2",
            "input_pairs_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 0.0);\nv01.put(\"102\", 0.0);\nString str2 = JSON.toJSONString(v01, \"yyyy-MM-dd HH:mm:ss\", null, JSONWriter.Feature.WriteMapNullValue);",
            "Sinput_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 0.0);\nv01.put(\"102\", 0.0);"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test5_h8Test5",
            "input_pairs_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1D);\nv01.put(\"102\", 2D);\nv01.put(\"103\", 3D);\nv01.put(\"104\", 4D);\nv01.put(\"105\", 5D);\nv01.put(\"106\", 6D);\nv01.put(\"107\", 7D);",
            "Sinput_code_block": "Map<String, Double> v01 = new HashMap<>();\nv01.put(\"101\", 1D);\nv01.put(\"102\", 2D);\nv01.put(\"103\", 3D);\nv01.put(\"104\", 4D);\nv01.put(\"105\", 5D);\nv01.put(\"106\", 6D);\nv01.put(\"107\", 7D);"
        }
    ],
    "org.threeten.extra.TestYearHalf.test_parse_CharSequence()": [
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h0Test0",
            "input_pairs_code_block": "int year = Year.now().getValue();\nint half = 1;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = Year.now().getValue();\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h0Test1",
            "input_pairs_code_block": "int year = Year.now().getValue();\nint half = 2;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = Year.now().getValue();\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h0Test2",
            "input_pairs_code_block": "int year = Year.now().getValue() + 1;\nint half = 1;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = Year.now().getValue() + 1;\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h0Test3",
            "input_pairs_code_block": "int year = Year.now().getValue() + 1;\nint half = 2;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = Year.now().getValue() + 1;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h0Test4",
            "input_pairs_code_block": "int year = Year.MIN_VALUE;\nint half = 1;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = Year.MIN_VALUE;\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h2Test2",
            "input_pairs_code_block": "int year = 1900;\nint half = 1;\nCharSequence text = \"1900-H1\";",
            "Sinput_code_block": "int year = 1900;\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h2Test3",
            "input_pairs_code_block": "int year = 1900;\nint half = 2;\nCharSequence text = \"1900-H2\";",
            "Sinput_code_block": "int year = 1900;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h2Test4",
            "input_pairs_code_block": "int year = 2000;\nint half = 1;\nCharSequence text = \"2000-H1\";",
            "Sinput_code_block": "int year = 2000;\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h4Test1",
            "input_pairs_code_block": "int year = 2021;\nint half = 2;\nCharSequence text = \"2021-H2\";",
            "Sinput_code_block": "int year = 2021;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h4Test3",
            "input_pairs_code_block": "int year = 1901;\nint half = 2;\nCharSequence text = \"1901-H2\";",
            "Sinput_code_block": "int year = 1901;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h4Test4",
            "input_pairs_code_block": "int year = 2100;\nint half = 1;\nCharSequence text = \"2100-H1\";",
            "Sinput_code_block": "int year = 2100;\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h5Test7",
            "input_pairs_code_block": "int year = 1900;\nint half = 1;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = 1900;\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h5Test9",
            "input_pairs_code_block": "int year = 1900;\nint half = 2;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = 1900;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h6Test3",
            "input_pairs_code_block": "int year = 2021;\nint half = 2;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = 2021;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h6Test7",
            "input_pairs_code_block": "int year = 1901;\nint half = 2;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = 1901;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h6Test8",
            "input_pairs_code_block": "int year = 9999;\nint half = 2;\nCharSequence text = \"9999-H2\";",
            "Sinput_code_block": "int year = 9999;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h6Test9",
            "input_pairs_code_block": "int year = 9999;\nint half = 2;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = 9999;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h7Test5",
            "input_pairs_code_block": "int year = 2000;\nint half = 1;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = 2000;\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h7Test6",
            "input_pairs_code_block": "int year = 2100;\nint half = 2;\nCharSequence text = \"2100-H2\";",
            "Sinput_code_block": "int year = 2100;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h7Test7",
            "input_pairs_code_block": "int year = 2100;\nint half = 2;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = 2100;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h7Test8",
            "input_pairs_code_block": "int year = 1800;\nint half = 1;\nCharSequence text = \"1800-H1\";",
            "Sinput_code_block": "int year = 1800;\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h7Test9",
            "input_pairs_code_block": "int year = 1800;\nint half = 1;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = 1800;\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h8Test9",
            "input_pairs_code_block": "int year = 2100;\nint half = 1;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = 2100;\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h9Test4",
            "input_pairs_code_block": "int year = 2021;\nint half = 1;\nCharSequence text = \"2021-H1\";",
            "Sinput_code_block": "int year = 2021;\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_h9Test5",
            "input_pairs_code_block": "int year = 2021;\nint half = 1;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = 2021;\nint half = 1;"
        }
    ],
    "org.datagear.util.version.VersionTest.isHigherThanTest()": [
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h0Test0",
            "input_pairs_code_block": "String v1 = \"1.0-A1\";\nString v2 = \"1.0-A2\";",
            "Sinput_code_block": "String v1 = \"1.0-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h0Test1",
            "input_pairs_code_block": "String v1 = \"1.1.0\";\nString v2 = \"1.1.1\";",
            "Sinput_code_block": "String v1 = \"1.1.0\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h0Test2",
            "input_pairs_code_block": "String v1 = \"1.1.0-A1\";\nString v2 = \"1.1.0-A2\";",
            "Sinput_code_block": "String v1 = \"1.1.0-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h0Test3",
            "input_pairs_code_block": "String v1 = \"1.0.0-A1\";\nString v2 = \"1.0.1\";",
            "Sinput_code_block": "String v1 = \"1.0.0-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h2Test3",
            "input_pairs_code_block": "String v1 = \"1.0.0-A1\";\nString v2 = \"1.0.1-A1\";",
            "Sinput_code_block": "String v1 = \"1.0.0-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test0",
            "input_pairs_code_block": "String v1 = \"0.9\";\nString v2 = \"0.91\";",
            "Sinput_code_block": "String v1 = \"0.9\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test1",
            "input_pairs_code_block": "String v1 = \"1.0.0\";\nString v2 = \"1.0.1\";",
            "Sinput_code_block": "String v1 = \"1.0.0\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test2",
            "input_pairs_code_block": "String v1 = \"1.9\";\nString v2 = \"2.0\";",
            "Sinput_code_block": "String v1 = \"1.9\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h3Test4",
            "input_pairs_code_block": "String v1 = \"1.0.0-A1\";\nString v2 = \"1.0.0-A2\";",
            "Sinput_code_block": "String v1 = \"1.0.0-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h4Test1",
            "input_pairs_code_block": "String v1 = \"1.0-alpha1\";\nString v2 = \"1.0-alpha2\";",
            "Sinput_code_block": "String v1 = \"1.0-alpha1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h4Test2",
            "input_pairs_code_block": "String v1 = \"1.1.0-beta1\";\nString v2 = \"1.1.0-beta2\";",
            "Sinput_code_block": "String v1 = \"1.1.0-beta1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h5Test0",
            "input_pairs_code_block": "String v1 = \"1.0-A1\";\nString v2 = \"1.0-A1\";",
            "Sinput_code_block": "String v1 = \"1.0-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h5Test1",
            "input_pairs_code_block": "String v1 = \"1.1.0\";\nString v2 = \"1.1.0\";",
            "Sinput_code_block": "String v1 = \"1.1.0\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h5Test2",
            "input_pairs_code_block": "String v1 = \"1.1.0-A1\";\nString v2 = \"1.1.0-A1\";",
            "Sinput_code_block": "String v1 = \"1.1.0-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h6Test0",
            "input_pairs_code_block": "String v1 = \"1.0.1\";\nString v2 = \"1.0.1\";",
            "Sinput_code_block": "String v1 = \"1.0.1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h6Test4",
            "input_pairs_code_block": "String v1 = \"2.1\";\nString v2 = \"2.1\";",
            "Sinput_code_block": "String v1 = \"2.1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h7Test1",
            "input_pairs_code_block": "String v1 = \"1.0-alpha1\";\nString v2 = v1.replace(\"alpha1\", \"alpha2\");",
            "Sinput_code_block": "String v1 = \"1.0-alpha1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h7Test3",
            "input_pairs_code_block": "String v1 = \"1.0.0\";\nString v2 = v1.replace(\"0\", \"1\");",
            "Sinput_code_block": "String v1 = \"1.0.0\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h7Test4",
            "input_pairs_code_block": "String v1 = \"1.0.0-beta1\";\nString v2 = \"1.0.0-beta2\";",
            "Sinput_code_block": "String v1 = \"1.0.0-beta1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h7Test5",
            "input_pairs_code_block": "String v1 = \"1.0.0-beta1\";\nString v2 = v1.replace(\"beta1\", \"beta2\");",
            "Sinput_code_block": "String v1 = \"1.0.0-beta1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h7Test6",
            "input_pairs_code_block": "String v1 = \"1.0.0-rc1\";\nString v2 = \"1.0.0-rc2\";",
            "Sinput_code_block": "String v1 = \"1.0.0-rc1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h7Test7",
            "input_pairs_code_block": "String v1 = \"1.0.0-rc1\";\nString v2 = v1.replace(\"rc1\", \"rc2\");",
            "Sinput_code_block": "String v1 = \"1.0.0-rc1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isHigherThanTest_h9Test0",
            "input_pairs_code_block": "String v1 = \"1.0.0\";\nString v2 = \"1.0.0\";",
            "Sinput_code_block": "String v1 = \"1.0.0\";"
        }
    ],
    "org.threeten.extra.TestYearHalf.test_isLeapYear_int()": [
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h2Test0",
            "input_pairs_code_block": "Half half = Half.H1;\nint year = 0;",
            "Sinput_code_block": "Half half = Half.H1;\nint year = 0;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h2Test1",
            "input_pairs_code_block": "Half half = Half.H2;\nint year = 1000;",
            "Sinput_code_block": "Half half = Half.H2;\nint year = 1000;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h2Test2",
            "input_pairs_code_block": "Half half = Half.H1;\nint year = 4000;",
            "Sinput_code_block": "Half half = Half.H1;\nint year = 4000;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h2Test3",
            "input_pairs_code_block": "Half half = Half.H2;\nint year = 5000;",
            "Sinput_code_block": "Half half = Half.H2;\nint year = 5000;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h2Test4",
            "input_pairs_code_block": "Half half = Half.H1;\nint year = -1;",
            "Sinput_code_block": "Half half = Half.H1;\nint year = -1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h3Test1",
            "input_pairs_code_block": "Half half = Half.H2;\nint year = 9999;",
            "Sinput_code_block": "Half half = Half.H2;\nint year = 9999;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h3Test2",
            "input_pairs_code_block": "Half half = Half.H1;\nint year = 10000;",
            "Sinput_code_block": "Half half = Half.H1;\nint year = 10000;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h3Test3",
            "input_pairs_code_block": "Half half = Half.H2;\nint year = -1;",
            "Sinput_code_block": "Half half = Half.H2;\nint year = -1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h3Test4",
            "input_pairs_code_block": "Half half = Half.H1;\nint year = -9999;",
            "Sinput_code_block": "Half half = Half.H1;\nint year = -9999;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h5Test0",
            "input_pairs_code_block": "Half half = Half.H2;\nint year = 2000;",
            "Sinput_code_block": "Half half = Half.H2;\nint year = 2000;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h5Test2",
            "input_pairs_code_block": "Half half = Half.H1;\nint year = 1900;",
            "Sinput_code_block": "Half half = Half.H1;\nint year = 1900;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h5Test3",
            "input_pairs_code_block": "Half half = Half.H2;\nint year = 1900;",
            "Sinput_code_block": "Half half = Half.H2;\nint year = 1900;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h5Test4",
            "input_pairs_code_block": "Half half = Half.H1;\nint year = 1600;",
            "Sinput_code_block": "Half half = Half.H1;\nint year = 1600;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h5Test5",
            "input_pairs_code_block": "Half half = Half.H2;\nint year = 1600;",
            "Sinput_code_block": "Half half = Half.H2;\nint year = 1600;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h7Test0",
            "input_pairs_code_block": "Half half = Half.H2;\nint year = 2020;",
            "Sinput_code_block": "Half half = Half.H2;\nint year = 2020;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h7Test7",
            "input_pairs_code_block": "Half half = Half.H1;\nint year = 2100;",
            "Sinput_code_block": "Half half = Half.H1;\nint year = 2100;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h7Test9",
            "input_pairs_code_block": "Half half = Half.H2;\nint year = 2100;",
            "Sinput_code_block": "Half half = Half.H2;\nint year = 2100;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h9Test2",
            "input_pairs_code_block": "Half half = Half.H2;\nint year = 1904;",
            "Sinput_code_block": "Half half = Half.H2;\nint year = 1904;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_isLeapYear_int_h9Test4",
            "input_pairs_code_block": "Half half = Half.H2;\nint year = 2400;",
            "Sinput_code_block": "Half half = Half.H2;\nint year = 2400;"
        }
    ],
    "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366.test_create_table()": [
        {
            "test_inputs_FQN": "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h0Test0",
            "input_pairs_code_block": "String sql = \"CREATE TABLE orders_p4 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 4, REMAINDER 3);\";\nString newSql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 4, REMAINDER 3);\";",
            "Sinput_code_block": "String sql = \"CREATE TABLE orders_p4 PARTITION OF orders\\n\" + \"    FOR VALUES WITH (MODULUS 4, REMAINDER 3);\";"
        },
        {
            "test_inputs_FQN": "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h4Test0",
            "input_pairs_code_block": "String sql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 4, REMAINDER 3);\";\nString newSql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 4, REMAINDER 3);\";",
            "Sinput_code_block": "String sql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 4, REMAINDER 3);\";"
        },
        {
            "test_inputs_FQN": "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h4Test1",
            "input_pairs_code_block": "String sql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 5, REMAINDER 2);\";\nString newSql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 5, REMAINDER 2);\";",
            "Sinput_code_block": "String sql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 5, REMAINDER 2);\";"
        },
        {
            "test_inputs_FQN": "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h4Test2",
            "input_pairs_code_block": "String sql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 3, REMAINDER 1);\";\nString newSql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 3, REMAINDER 1);\";",
            "Sinput_code_block": "String sql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 3, REMAINDER 1);\";"
        },
        {
            "test_inputs_FQN": "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h4Test3",
            "input_pairs_code_block": "String sql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 6, REMAINDER 0);\";\nString newSql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 6, REMAINDER 0);\";",
            "Sinput_code_block": "String sql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 6, REMAINDER 0);\";"
        },
        {
            "test_inputs_FQN": "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h4Test4",
            "input_pairs_code_block": "String sql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 7, REMAINDER 3);\";\nString newSql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 7, REMAINDER 3);\";",
            "Sinput_code_block": "String sql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 7, REMAINDER 3);\";"
        },
        {
            "test_inputs_FQN": "com.alibaba.druid.bvt.sql.postgresql.issues.Issue5366_test_create_table_h7Test4",
            "input_pairs_code_block": "String sql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 8, REMAINDER 4);\";\nString newSql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 8, REMAINDER 4);\";",
            "Sinput_code_block": "String sql = \"CREATE TABLE orders_p4 PARTITION OF orders FOR VALUES WITH (MODULUS 8, REMAINDER 4);\";"
        }
    ],
    "io.arex.inst.runtime.model.SerializeSkipInfoTest.testHashCode()": [
        {
            "test_inputs_FQN": "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h0Test0",
            "input_pairs_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"\");\nserializeSkipInfo.setFullClassName(\"testFullClassName\");\nSerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();\nserializeSkipInfo2.setFieldName(\"\");\nserializeSkipInfo2.setFullClassName(\"testFullClassName\");",
            "Sinput_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"\");\nserializeSkipInfo.setFullClassName(\"testFullClassName\");"
        },
        {
            "test_inputs_FQN": "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h0Test1",
            "input_pairs_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(\"\");\nSerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();\nserializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo2.setFullClassName(\"\");",
            "Sinput_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(\"\");"
        },
        {
            "test_inputs_FQN": "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h4Test3",
            "input_pairs_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(\"testFullClassName\".repeat(1000));\nSerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();\nserializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo2.setFullClassName(\"testFullClassName\".repeat(1000));",
            "Sinput_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(\"testFullClassName\".repeat(1000));"
        },
        {
            "test_inputs_FQN": "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h4Test4",
            "input_pairs_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\".repeat(1000));\nserializeSkipInfo.setFullClassName(\"testFullClassName\");\nSerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();\nserializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\".repeat(1000));\nserializeSkipInfo2.setFullClassName(\"testFullClassName\");",
            "Sinput_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\".repeat(1000));\nserializeSkipInfo.setFullClassName(\"testFullClassName\");"
        },
        {
            "test_inputs_FQN": "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h6Test2",
            "input_pairs_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(\"testFullClassName1,testFullClassName2\");\nSerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();\nserializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo2.setFullClassName(\"testFullClassName1,testFullClassName2\");",
            "Sinput_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(\"testFullClassName1,testFullClassName2\");"
        },
        {
            "test_inputs_FQN": "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h6Test3",
            "input_pairs_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(\"testFullClassName1\");\nSerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();\nserializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo2.setFullClassName(\"testFullClassName1\");",
            "Sinput_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(\"testFullClassName1\");"
        },
        {
            "test_inputs_FQN": "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h6Test4",
            "input_pairs_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(\"testFullClassName1,testFullClassName2,testFullClassName3\");\nSerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();\nserializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo2.setFullClassName(\"testFullClassName1,testFullClassName2,testFullClassName3\");",
            "Sinput_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(\"testFullClassName1,testFullClassName2,testFullClassName3\");"
        },
        {
            "test_inputs_FQN": "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h7Test3",
            "input_pairs_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(\"testFullClassName\");\nserializeSkipInfo.setFieldName(\"\");\nSerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();\nserializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo2.setFieldName(\"\");",
            "Sinput_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(\"testFullClassName\");\nserializeSkipInfo.setFieldName(\"\");"
        },
        {
            "test_inputs_FQN": "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h7Test4",
            "input_pairs_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(\"testFullClassName\");\nserializeSkipInfo.setFullClassName(\"\");\nSerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();\nserializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo2.setFullClassName(\"\");",
            "Sinput_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(\"testFullClassName\");\nserializeSkipInfo.setFullClassName(\"\");"
        },
        {
            "test_inputs_FQN": "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h8Test1",
            "input_pairs_code_block": "",
            "Sinput_code_block": ""
        },
        {
            "test_inputs_FQN": "io.arex.inst.runtime.model.SerializeSkipInfoTest_testHashCode_h9Test7",
            "input_pairs_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(\"testFullClassName1,testFullClassName2,testFullClassName3,testFullClassName4\");\nSerializeSkipInfo serializeSkipInfo2 = new SerializeSkipInfo();\nserializeSkipInfo2.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo2.setFullClassName(\"testFullClassName1,testFullClassName2,testFullClassName3,testFullClassName4\");",
            "Sinput_code_block": "SerializeSkipInfo serializeSkipInfo = new SerializeSkipInfo();\nserializeSkipInfo.setFieldName(\"testFieldName1,testFieldName2\");\nserializeSkipInfo.setFullClassName(\"testFullClassName1,testFullClassName2,testFullClassName3,testFullClassName4\");"
        }
    ],
    "org.datagear.util.version.VersionTest.isEqualTest()": [
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isEqualTest_h0Test0",
            "input_pairs_code_block": "String v1 = \"1.0-A1\";\nString v2 = \"1.0-A1\";",
            "Sinput_code_block": "String v1 = \"1.0-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isEqualTest_h0Test1",
            "input_pairs_code_block": "String v1 = \"1.1.0\";\nString v2 = \"1.1.0\";",
            "Sinput_code_block": "String v1 = \"1.1.0\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isEqualTest_h0Test2",
            "input_pairs_code_block": "String v1 = \"1.1.0-A1\";\nString v2 = \"1.1.0-A1\";",
            "Sinput_code_block": "String v1 = \"1.1.0-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isEqualTest_h0Test3",
            "input_pairs_code_block": "String v1 = \"1.0.0-A1\";\nString v2 = \"1.0.0-A1\";",
            "Sinput_code_block": "String v1 = \"1.0.0-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isEqualTest_h0Test4",
            "input_pairs_code_block": "String v1 = \"1.0.0\";\nString v2 = \"1.0.0\";",
            "Sinput_code_block": "String v1 = \"1.0.0\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isEqualTest_h2Test0",
            "input_pairs_code_block": "String v1 = \"1.0-A1\";\nString v2 = \"1.0-A2\";",
            "Sinput_code_block": "String v1 = \"1.0-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isEqualTest_h2Test1",
            "input_pairs_code_block": "String v1 = \"1.1.0\";\nString v2 = \"1.1.1\";",
            "Sinput_code_block": "String v1 = \"1.1.0\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isEqualTest_h2Test2",
            "input_pairs_code_block": "String v1 = \"1.1.0-A1\";\nString v2 = \"1.1.0-A2\";",
            "Sinput_code_block": "String v1 = \"1.1.0-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isEqualTest_h2Test3",
            "input_pairs_code_block": "String v1 = \"1.0.0\";\nString v2 = \"1.0.1\";",
            "Sinput_code_block": "String v1 = \"1.0.0\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isEqualTest_h2Test4",
            "input_pairs_code_block": "String v1 = \"1.0.0-A1\";\nString v2 = \"1.0.0-A2\";",
            "Sinput_code_block": "String v1 = \"1.0.0-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isEqualTest_h7Test0",
            "input_pairs_code_block": "String v1 = \"1.0.1\";\nString v2 = \"1.0.1\";",
            "Sinput_code_block": "String v1 = \"1.0.1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isEqualTest_h7Test3",
            "input_pairs_code_block": "String v1 = \"1.0.1-A1\";\nString v2 = \"1.0.1-A1\";",
            "Sinput_code_block": "String v1 = \"1.0.1-A1\";"
        },
        {
            "test_inputs_FQN": "org.datagear.util.version.VersionTest_isEqualTest_h8Test1",
            "input_pairs_code_block": "String v1 = \"1.0.0-alpha1\";\nString v2 = \"1.0.0-alpha1\";",
            "Sinput_code_block": "String v1 = \"1.0.0-alpha1\";"
        }
    ],
    "org.threeten.extra.TestYearHalf.test_of_int_int()": [
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_of_int_int_h0Test0",
            "input_pairs_code_block": "int year = 0;\nint half = 1;\nYearHalf test2 = YearHalf.of(year, half);",
            "Sinput_code_block": "int year = 0;\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_of_int_int_h0Test1",
            "input_pairs_code_block": "int year = 9999;\nint half = 2;\nYearHalf test2 = YearHalf.of(year, half);",
            "Sinput_code_block": "int year = 9999;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_of_int_int_h0Test2",
            "input_pairs_code_block": "int year = 5000;\nint half = 1;\nYearHalf test2 = YearHalf.of(year, half);",
            "Sinput_code_block": "int year = 5000;\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_of_int_int_h0Test3",
            "input_pairs_code_block": "int year = -1;\nint half = 2;\nYearHalf test2 = YearHalf.of(year, half);",
            "Sinput_code_block": "int year = -1;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_of_int_int_h0Test4",
            "input_pairs_code_block": "int year = 10000;\nint half = 1;\nYearHalf test2 = YearHalf.of(year, half);",
            "Sinput_code_block": "int year = 10000;\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_of_int_int_h9Test2",
            "input_pairs_code_block": "int year = 2022;\nint half = 1;\nYearHalf test2 = YearHalf.of(year, half);",
            "Sinput_code_block": "int year = 2022;\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_of_int_int_h9Test3",
            "input_pairs_code_block": "int year = 2023;\nint half = 2;\nYearHalf test2 = YearHalf.of(year, half);",
            "Sinput_code_block": "int year = 2023;\nint half = 2;"
        }
    ],
    "com.alibaba.fastjson2.internal.processor.maps.Map1Test.test6()": [
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h0Test0",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h0Test1",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"103\", BigDecimal.valueOf(103));\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"103\", BigDecimal.valueOf(103));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h0Test2",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"104\", BigDecimal.valueOf(104));\nv01.put(\"105\", BigDecimal.valueOf(105));\nString str2 = JSON.toJSONString(v01);",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"104\", BigDecimal.valueOf(104));\nv01.put(\"105\", BigDecimal.valueOf(105));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h2Test0",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(0));\nv01.put(\"102\", BigDecimal.valueOf(0));",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(0));\nv01.put(\"102\", BigDecimal.valueOf(0));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h2Test2",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(999999999999999999L));\nv01.put(\"102\", BigDecimal.valueOf(888888888888888888L));",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(999999999999999999L));\nv01.put(\"102\", BigDecimal.valueOf(888888888888888888L));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h2Test3",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(-101));\nv01.put(\"102\", BigDecimal.valueOf(-102));",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(-101));\nv01.put(\"102\", BigDecimal.valueOf(-102));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h2Test4",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(Double.MAX_VALUE));\nv01.put(\"102\", BigDecimal.valueOf(Double.MIN_VALUE));",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(Double.MAX_VALUE));\nv01.put(\"102\", BigDecimal.valueOf(Double.MIN_VALUE));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h3Test1",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(1000000000));\nv01.put(\"102\", BigDecimal.valueOf(2000000000));\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, BigDecimal>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(1000000000));\nv01.put(\"102\", BigDecimal.valueOf(2000000000));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h3Test3",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(Double.MAX_VALUE));\nv01.put(\"102\", BigDecimal.valueOf(Double.MAX_VALUE));\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, BigDecimal>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(Double.MAX_VALUE));\nv01.put(\"102\", BigDecimal.valueOf(Double.MAX_VALUE));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h3Test4",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(Double.MIN_VALUE));\nv01.put(\"102\", BigDecimal.valueOf(Double.MIN_VALUE));\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, BigDecimal>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(Double.MIN_VALUE));\nv01.put(\"102\", BigDecimal.valueOf(Double.MIN_VALUE));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h4Test0",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"103\", BigDecimal.valueOf(103));",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"103\", BigDecimal.valueOf(103));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h4Test2",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"101\", BigDecimal.valueOf(104));",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"101\", BigDecimal.valueOf(104));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h4Test3",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"103\", BigDecimal.valueOf(103));\nv01.put(\"104\", BigDecimal.valueOf(104));",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"103\", BigDecimal.valueOf(103));\nv01.put(\"104\", BigDecimal.valueOf(104));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h4Test4",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"103\", BigDecimal.valueOf(103));\nv01.put(\"104\", BigDecimal.valueOf(104));\nv01.put(\"105\", BigDecimal.valueOf(105));",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"103\", BigDecimal.valueOf(103));\nv01.put(\"104\", BigDecimal.valueOf(104));\nv01.put(\"105\", BigDecimal.valueOf(105));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h4Test5",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"103\", BigDecimal.valueOf(103));\nv01.put(\"104\", BigDecimal.valueOf(104));\nv01.put(\"105\", BigDecimal.valueOf(105));\nv01.put(\"106\", BigDecimal.valueOf(106));",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"103\", BigDecimal.valueOf(103));\nv01.put(\"104\", BigDecimal.valueOf(104));\nv01.put(\"105\", BigDecimal.valueOf(105));\nv01.put(\"106\", BigDecimal.valueOf(106));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h5Test2",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"101\", BigDecimal.valueOf(103));",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"101\", BigDecimal.valueOf(103));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h5Test3",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"103\", BigDecimal.valueOf(101));",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"103\", BigDecimal.valueOf(101));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h5Test4",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"\", BigDecimal.valueOf(101));",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"\", BigDecimal.valueOf(101));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h5Test5",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"null\", BigDecimal.valueOf(101));",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"null\", BigDecimal.valueOf(101));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h6Test1",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(999999999));\nv01.put(\"102\", BigDecimal.valueOf(999999999));\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, BigDecimal>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(999999999));\nv01.put(\"102\", BigDecimal.valueOf(999999999));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h6Test2",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(-1));\nv01.put(\"102\", BigDecimal.valueOf(-1));\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, BigDecimal>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(-1));\nv01.put(\"102\", BigDecimal.valueOf(-1));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h7Test2",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(999999999));\nv01.put(\"102\", BigDecimal.valueOf(888888888));",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(999999999));\nv01.put(\"102\", BigDecimal.valueOf(888888888));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h7Test3",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(-1));\nv01.put(\"102\", BigDecimal.valueOf(-2));",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(-1));\nv01.put(\"102\", BigDecimal.valueOf(-2));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h7Test5",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(Long.MAX_VALUE));\nv01.put(\"102\", BigDecimal.valueOf(Long.MIN_VALUE));",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(Long.MAX_VALUE));\nv01.put(\"102\", BigDecimal.valueOf(Long.MIN_VALUE));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h8Test2",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"\", BigDecimal.valueOf(103));",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"\", BigDecimal.valueOf(103));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h8Test4",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"null\", BigDecimal.valueOf(103));",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"null\", BigDecimal.valueOf(103));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h8Test6",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"NaN\", BigDecimal.valueOf(103));",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"NaN\", BigDecimal.valueOf(103));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h8Test8",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"Infinity\", BigDecimal.valueOf(103));",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(101));\nv01.put(\"102\", BigDecimal.valueOf(102));\nv01.put(\"Infinity\", BigDecimal.valueOf(103));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h9Test1",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(999999999));\nv01.put(\"102\", BigDecimal.valueOf(888888888));\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, BigDecimal>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(999999999));\nv01.put(\"102\", BigDecimal.valueOf(888888888));"
        },
        {
            "test_inputs_FQN": "com.alibaba.fastjson2.internal.processor.maps.Map1Test_test6_h9Test4",
            "input_pairs_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(Long.MAX_VALUE));\nv01.put(\"102\", BigDecimal.valueOf(Long.MIN_VALUE));\nString str2 = JSON.toJSONString(v01);\nType mapType = new TypeReference<Map<String, BigDecimal>>() {\n}.getType();",
            "Sinput_code_block": "Map<String, BigDecimal> v01 = new HashMap<>();\nv01.put(\"101\", BigDecimal.valueOf(Long.MAX_VALUE));\nv01.put(\"102\", BigDecimal.valueOf(Long.MIN_VALUE));"
        }
    ],
    "org.threeten.extra.TestYearHalf.test_parse_CharSequence_caseInsensitive()": [
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h0Test0",
            "input_pairs_code_block": "int year = 2020;\nint half = 2;\nCharSequence text = \"2020-h2\";",
            "Sinput_code_block": "int year = 2020;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h0Test1",
            "input_pairs_code_block": "int year = 2020;\nint half = 2;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = 2020;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h0Test2",
            "input_pairs_code_block": "int year = 1900;\nint half = 1;\nCharSequence text = \"1900-h1\";",
            "Sinput_code_block": "int year = 1900;\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h0Test3",
            "input_pairs_code_block": "int year = 1900;\nint half = 1;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = 1900;\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h0Test4",
            "input_pairs_code_block": "int year = 2000;\nint half = 2;\nCharSequence text = \"2000-h2\";",
            "Sinput_code_block": "int year = 2000;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h2Test1",
            "input_pairs_code_block": "int year = 1999;\nint half = 1;\nCharSequence text = \"1999-h1\";",
            "Sinput_code_block": "int year = 1999;\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h5Test2",
            "input_pairs_code_block": "int year = 3000;\nint half = 2;\nCharSequence text = \"3000-h2\";",
            "Sinput_code_block": "int year = 3000;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h7Test3",
            "input_pairs_code_block": "int year = 1999;\nint half = 1;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = 1999;\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h7Test4",
            "input_pairs_code_block": "int year = 2050;\nint half = 2;\nCharSequence text = \"2050-h2\";",
            "Sinput_code_block": "int year = 2050;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h7Test5",
            "input_pairs_code_block": "int year = 2050;\nint half = 2;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = 2050;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h7Test8",
            "input_pairs_code_block": "int year = 1900;\nint half = 2;\nCharSequence text = \"1900-h2\";",
            "Sinput_code_block": "int year = 1900;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h7Test9",
            "input_pairs_code_block": "int year = 1900;\nint half = 2;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = 1900;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h8Test6",
            "input_pairs_code_block": "int year = 1800;\nint half = 1;\nCharSequence text = \"1800-h1\";",
            "Sinput_code_block": "int year = 1800;\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h8Test7",
            "input_pairs_code_block": "int year = 1800;\nint half = 1;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = 1800;\nint half = 1;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h8Test8",
            "input_pairs_code_block": "int year = 2100;\nint half = 2;\nCharSequence text = \"2100-h2\";",
            "Sinput_code_block": "int year = 2100;\nint half = 2;"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequence_caseInsensitive_h8Test9",
            "input_pairs_code_block": "int year = 2100;\nint half = 2;\nCharSequence text = YearHalf.of(year, half).toString();",
            "Sinput_code_block": "int year = 2100;\nint half = 2;"
        }
    ],
    "org.threeten.extra.TestYearHalf.test_parse_CharSequenceDateTimeFormatter()": [
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h0Test1",
            "input_pairs_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 1990\";\nint year = 1990;\nint half = 1;",
            "Sinput_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 1990\";"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h0Test3",
            "input_pairs_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 2100\";\nint year = 2100;\nint half = 1;",
            "Sinput_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 2100\";"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h1Test0",
            "input_pairs_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H2 2020\";\nint year = 2020;\nint half = 2;",
            "Sinput_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H2 2020\";"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h1Test1",
            "input_pairs_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 1999\";\nint year = 1999;\nint half = 1;",
            "Sinput_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 1999\";"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h1Test3",
            "input_pairs_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 1800\";\nint year = 1800;\nint half = 1;",
            "Sinput_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 1800\";"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h2Test2",
            "input_pairs_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H2 2100\";\nint year = 2100;\nint half = 2;",
            "Sinput_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H2 2100\";"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h3Test3",
            "input_pairs_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 3000\";\nint year = 3000;\nint half = 1;",
            "Sinput_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 3000\";"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h4Test2",
            "input_pairs_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 2000\";\nint year = 2000;\nint half = 1;",
            "Sinput_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 2000\";"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h4Test3",
            "input_pairs_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 2023\";\nint year = 2023;\nint half = 1;",
            "Sinput_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 2023\";"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h4Test4",
            "input_pairs_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 2024\";\nint year = 2024;\nint half = 1;",
            "Sinput_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 2024\";"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h5Test1",
            "input_pairs_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H2 2020\";\nYearHalf yearHalf = YearHalf.parse(text, f);\nint year = yearHalf.getYear();\nint half = yearHalf.getHalf().getValue();",
            "Sinput_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H2 2020\";"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h5Test9",
            "input_pairs_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 2100\";\nYearHalf yearHalf = YearHalf.parse(text, f);\nint year = yearHalf.getYear();\nint half = yearHalf.getHalf().getValue();",
            "Sinput_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 2100\";"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h6Test1",
            "input_pairs_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H2 2020\";\nint year = Integer.parseInt(text.substring(2, text.indexOf(' ')));\nint half = Integer.parseInt(text.substring(1, 2));",
            "Sinput_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H2 2020\";"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h6Test3",
            "input_pairs_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 1999\";\nint year = Integer.parseInt(text.substring(2, text.indexOf(' ')));\nint half = Integer.parseInt(text.substring(1, 2));",
            "Sinput_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 1999\";"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h6Test7",
            "input_pairs_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 1800\";\nint year = Integer.parseInt(text.substring(2, text.indexOf(' ')));\nint half = Integer.parseInt(text.substring(1, 2));",
            "Sinput_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 1800\";"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h6Test9",
            "input_pairs_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 2100\";\nint year = Integer.parseInt(text.substring(2, text.indexOf(' ')));\nint half = Integer.parseInt(text.substring(1, 2));",
            "Sinput_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 2100\";"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h7Test1",
            "input_pairs_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 2018\";\nint year = 2018;\nint half = 1;",
            "Sinput_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 2018\";"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h7Test2",
            "input_pairs_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 1900\";\nint year = 1900;\nint half = 1;",
            "Sinput_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 1900\";"
        },
        {
            "test_inputs_FQN": "org.threeten.extra.TestYearHalf_test_parse_CharSequenceDateTimeFormatter_h7Test4",
            "input_pairs_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 9999\";\nint year = 9999;\nint half = 1;",
            "Sinput_code_block": "DateTimeFormatter f = new DateTimeFormatterBuilder().appendLiteral('H').appendValue(HALF_OF_YEAR, 1).appendLiteral(' ').appendValue(YEAR).toFormatter();\nCharSequence text = \"H1 9999\";"
        }
    ]
}